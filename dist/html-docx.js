function n(n,r,t,i){return new(t||(t=Promise))((function(e,u){function o(n){try{a(i.next(n))}catch(n){u(n)}}function f(n){try{a(i.throw(n))}catch(n){u(n)}}function a(n){var r;n.done?e(n.value):(r=n.value,r instanceof t?r:new t((function(n){n(r)}))).then(o,f)}a((i=i.apply(n,r||[])).next())}))}function r(n,r){var t,i,e,u,o={label:0,sent:function(){if(1&e[0])throw e[1];return e[1]},trys:[],ops:[]};return u={next:f(0),throw:f(1),return:f(2)},"function"==typeof Symbol&&(u[Symbol.iterator]=function(){return this}),u;function f(u){return function(f){return function(u){if(t)throw new TypeError("Generator is already executing.");for(;o;)try{if(t=1,i&&(e=2&u[0]?i.return:u[0]?i.throw||((e=i.return)&&e.call(i),0):i.next)&&!(e=e.call(i,u[1])).done)return e;switch(i=0,e&&(u=[2&u[0],e.value]),u[0]){case 0:case 1:e=u;break;case 4:return o.label++,{value:u[1],done:!1};case 5:o.label++,i=u[1],u=[0];continue;case 7:u=o.ops.pop(),o.trys.pop();continue;default:if(!(e=o.trys,(e=e.length>0&&e[e.length-1])||6!==u[0]&&2!==u[0])){o=0;continue}if(3===u[0]&&(!e||u[1]>e[0]&&u[1]<e[3])){o.label=u[1];break}if(6===u[0]&&o.label<e[1]){o.label=e[1],e=u;break}if(e&&o.label<e[2]){o.label=e[2],o.ops.push(u);break}e[2]&&o.ops.pop(),o.trys.pop();continue}u=r.call(n,o)}catch(n){u=[6,n],i=0}finally{t=e=0}if(5&u[0])throw u[1];return{value:u[0]?u[1]:void 0,done:!0}}([u,f])}}}var t="undefined"!=typeof globalThis?globalThis:"undefined"!=typeof window?window:"undefined"!=typeof global?global:"undefined"!=typeof self?self:{};function i(n){throw new Error('Could not dynamically require "'+n+'". Please configure the dynamicRequireTargets or/and ignoreDynamicRequires option of @rollup/plugin-commonjs appropriately for this require call to work.')}var e,u,o={exports:{}},f=o.exports=function n(r,t,e){function u(f,a){if(!t[f]){if(!r[f]){if(!a&&i)return i(f);if(o)return o(f,!0);var s=new Error("Cannot find module '"+f+"'");throw s.code="MODULE_NOT_FOUND",s}var c=t[f]={exports:{}};r[f][0].call(c.exports,(function(n){return u(r[f][1][n]||n)}),c,c.exports,n,r,t,e)}return t[f].exports}for(var o=i,f=0;f<e.length;f++)u(e[f]);return u}({1:[function(n,r,t){var i=n("./utils"),e=n("./support"),u="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=";t.encode=function(n){for(var r,t,e,o,f,a,s,c=[],h=0,l=n.length,v=l,d="string"!==i.getTypeOf(n);h<n.length;)v=l-h,e=d?(r=n[h++],t=h<l?n[h++]:0,h<l?n[h++]:0):(r=n.charCodeAt(h++),t=h<l?n.charCodeAt(h++):0,h<l?n.charCodeAt(h++):0),o=r>>2,f=(3&r)<<4|t>>4,a=1<v?(15&t)<<2|e>>6:64,s=2<v?63&e:64,c.push(u.charAt(o)+u.charAt(f)+u.charAt(a)+u.charAt(s));return c.join("")},t.decode=function(n){var r,t,i,o,f,a,s=0,c=0,h="data:";if(n.substr(0,h.length)===h)throw new Error("Invalid base64 input, it looks like a data url.");var l,v=3*(n=n.replace(/[^A-Za-z0-9\+\/\=]/g,"")).length/4;if(n.charAt(n.length-1)===u.charAt(64)&&v--,n.charAt(n.length-2)===u.charAt(64)&&v--,v%1!=0)throw new Error("Invalid base64 input, bad content length.");for(l=e.uint8array?new Uint8Array(0|v):new Array(0|v);s<n.length;)r=u.indexOf(n.charAt(s++))<<2|(o=u.indexOf(n.charAt(s++)))>>4,t=(15&o)<<4|(f=u.indexOf(n.charAt(s++)))>>2,i=(3&f)<<6|(a=u.indexOf(n.charAt(s++))),l[c++]=r,64!==f&&(l[c++]=t),64!==a&&(l[c++]=i);return l}},{"./support":30,"./utils":32}],2:[function(n,r,t){var i=n("./external"),e=n("./stream/DataWorker"),u=n("./stream/Crc32Probe"),o=n("./stream/DataLengthProbe");function f(n,r,t,i,e){this.compressedSize=n,this.uncompressedSize=r,this.crc32=t,this.compression=i,this.compressedContent=e}f.prototype={getContentWorker:function(){var n=new e(i.Promise.resolve(this.compressedContent)).pipe(this.compression.uncompressWorker()).pipe(new o("data_length")),r=this;return n.on("end",(function(){if(this.streamInfo.data_length!==r.uncompressedSize)throw new Error("Bug : uncompressed data size mismatch")})),n},getCompressedWorker:function(){return new e(i.Promise.resolve(this.compressedContent)).withStreamInfo("compressedSize",this.compressedSize).withStreamInfo("uncompressedSize",this.uncompressedSize).withStreamInfo("crc32",this.crc32).withStreamInfo("compression",this.compression)}},f.createWorkerFrom=function(n,r,t){return n.pipe(new u).pipe(new o("uncompressedSize")).pipe(r.compressWorker(t)).pipe(new o("compressedSize")).withStreamInfo("compression",r)},r.exports=f},{"./external":6,"./stream/Crc32Probe":25,"./stream/DataLengthProbe":26,"./stream/DataWorker":27}],3:[function(n,r,t){var i=n("./stream/GenericWorker");t.STORE={magic:"\0\0",compressWorker:function(n){return new i("STORE compression")},uncompressWorker:function(){return new i("STORE decompression")}},t.DEFLATE=n("./flate")},{"./flate":7,"./stream/GenericWorker":28}],4:[function(n,r,t){var i=n("./utils"),e=function(){for(var n,r=[],t=0;t<256;t++){n=t;for(var i=0;i<8;i++)n=1&n?3988292384^n>>>1:n>>>1;r[t]=n}return r}();r.exports=function(n,r){return void 0!==n&&n.length?"string"!==i.getTypeOf(n)?function(n,r,t,i){var u=e,o=i+t;n^=-1;for(var f=i;f<o;f++)n=n>>>8^u[255&(n^r[f])];return-1^n}(0|r,n,n.length,0):function(n,r,t,i){var u=e,o=i+t;n^=-1;for(var f=i;f<o;f++)n=n>>>8^u[255&(n^r.charCodeAt(f))];return-1^n}(0|r,n,n.length,0):0}},{"./utils":32}],5:[function(n,r,t){t.base64=!1,t.binary=!1,t.dir=!1,t.createFolders=!0,t.date=null,t.compression=null,t.compressionOptions=null,t.comment=null,t.unixPermissions=null,t.dosPermissions=null},{}],6:[function(n,r,t){var i=null;i="undefined"!=typeof Promise?Promise:n("lie"),r.exports={Promise:i}},{lie:37}],7:[function(n,r,t){var i="undefined"!=typeof Uint8Array&&"undefined"!=typeof Uint16Array&&"undefined"!=typeof Uint32Array,e=n("pako"),u=n("./utils"),o=n("./stream/GenericWorker"),f=i?"uint8array":"array";function a(n,r){o.call(this,"FlateWorker/"+n),this._pako=null,this._pakoAction=n,this._pakoOptions=r,this.meta={}}t.magic="\b\0",u.inherits(a,o),a.prototype.processChunk=function(n){this.meta=n.meta,null===this._pako&&this._createPako(),this._pako.push(u.transformTo(f,n.data),!1)},a.prototype.flush=function(){o.prototype.flush.call(this),null===this._pako&&this._createPako(),this._pako.push([],!0)},a.prototype.cleanUp=function(){o.prototype.cleanUp.call(this),this._pako=null},a.prototype._createPako=function(){this._pako=new e[this._pakoAction]({raw:!0,level:this._pakoOptions.level||-1});var n=this;this._pako.onData=function(r){n.push({data:r,meta:n.meta})}},t.compressWorker=function(n){return new a("Deflate",n)},t.uncompressWorker=function(){return new a("Inflate",{})}},{"./stream/GenericWorker":28,"./utils":32,pako:38}],8:[function(n,r,t){function i(n,r){var t,i="";for(t=0;t<r;t++)i+=String.fromCharCode(255&n),n>>>=8;return i}function e(n,r,t,e,o,c){var h,l,v=n.file,d=n.compression,p=c!==f.utf8encode,m=u.transformTo("string",c(v.name)),w=u.transformTo("string",f.utf8encode(v.name)),y=v.comment,b=u.transformTo("string",c(y)),g=u.transformTo("string",f.utf8encode(y)),k=w.length!==v.name.length,_=g.length!==y.length,A="",E="",x="",j=v.dir,S=v.date,T={crc32:0,compressedSize:0,uncompressedSize:0};r&&!t||(T.crc32=n.crc32,T.compressedSize=n.compressedSize,T.uncompressedSize=n.uncompressedSize);var U=0;r&&(U|=8),p||!k&&!_||(U|=2048);var R=0,C=0;j&&(R|=16),"UNIX"===o?(C=798,R|=function(n,r){var t=n;return n||(t=r?16893:33204),(65535&t)<<16}(v.unixPermissions,j)):(C=20,R|=function(n){return 63&(n||0)}(v.dosPermissions)),h=S.getUTCHours(),h<<=6,h|=S.getUTCMinutes(),h<<=5,h|=S.getUTCSeconds()/2,l=S.getUTCFullYear()-1980,l<<=4,l|=S.getUTCMonth()+1,l<<=5,l|=S.getUTCDate(),k&&(E=i(1,1)+i(a(m),4)+w,A+="up"+i(E.length,2)+E),_&&(x=i(1,1)+i(a(b),4)+g,A+="uc"+i(x.length,2)+x);var O="";return O+="\n\0",O+=i(U,2),O+=d.magic,O+=i(h,2),O+=i(l,2),O+=i(T.crc32,4),O+=i(T.compressedSize,4),O+=i(T.uncompressedSize,4),O+=i(m.length,2),O+=i(A.length,2),{fileRecord:s.LOCAL_FILE_HEADER+O+m+A,dirRecord:s.CENTRAL_FILE_HEADER+i(C,2)+O+i(b.length,2)+"\0\0\0\0"+i(R,4)+i(e,4)+m+A+b}}var u=n("../utils"),o=n("../stream/GenericWorker"),f=n("../utf8"),a=n("../crc32"),s=n("../signature");function c(n,r,t,i){o.call(this,"ZipFileWorker"),this.bytesWritten=0,this.zipComment=r,this.zipPlatform=t,this.encodeFileName=i,this.streamFiles=n,this.accumulate=!1,this.contentBuffer=[],this.dirRecords=[],this.currentSourceOffset=0,this.entriesCount=0,this.currentFile=null,this._sources=[]}u.inherits(c,o),c.prototype.push=function(n){var r=n.meta.percent||0,t=this.entriesCount,i=this._sources.length;this.accumulate?this.contentBuffer.push(n):(this.bytesWritten+=n.data.length,o.prototype.push.call(this,{data:n.data,meta:{currentFile:this.currentFile,percent:t?(r+100*(t-i-1))/t:100}}))},c.prototype.openedSource=function(n){this.currentSourceOffset=this.bytesWritten,this.currentFile=n.file.name;var r=this.streamFiles&&!n.file.dir;if(r){var t=e(n,r,!1,this.currentSourceOffset,this.zipPlatform,this.encodeFileName);this.push({data:t.fileRecord,meta:{percent:0}})}else this.accumulate=!0},c.prototype.closedSource=function(n){this.accumulate=!1;var r=this.streamFiles&&!n.file.dir,t=e(n,r,!0,this.currentSourceOffset,this.zipPlatform,this.encodeFileName);if(this.dirRecords.push(t.dirRecord),r)this.push({data:function(n){return s.DATA_DESCRIPTOR+i(n.crc32,4)+i(n.compressedSize,4)+i(n.uncompressedSize,4)}(n),meta:{percent:100}});else for(this.push({data:t.fileRecord,meta:{percent:0}});this.contentBuffer.length;)this.push(this.contentBuffer.shift());this.currentFile=null},c.prototype.flush=function(){for(var n=this.bytesWritten,r=0;r<this.dirRecords.length;r++)this.push({data:this.dirRecords[r],meta:{percent:100}});var t=this.bytesWritten-n,e=function(n,r,t,e,o){var f=u.transformTo("string",o(e));return s.CENTRAL_DIRECTORY_END+"\0\0\0\0"+i(n,2)+i(n,2)+i(r,4)+i(t,4)+i(f.length,2)+f}(this.dirRecords.length,t,n,this.zipComment,this.encodeFileName);this.push({data:e,meta:{percent:100}})},c.prototype.prepareNextSource=function(){this.previous=this._sources.shift(),this.openedSource(this.previous.streamInfo),this.isPaused?this.previous.pause():this.previous.resume()},c.prototype.registerPrevious=function(n){this._sources.push(n);var r=this;return n.on("data",(function(n){r.processChunk(n)})),n.on("end",(function(){r.closedSource(r.previous.streamInfo),r._sources.length?r.prepareNextSource():r.end()})),n.on("error",(function(n){r.error(n)})),this},c.prototype.resume=function(){return!!o.prototype.resume.call(this)&&(!this.previous&&this._sources.length?(this.prepareNextSource(),!0):this.previous||this._sources.length||this.generatedError?void 0:(this.end(),!0))},c.prototype.error=function(n){var r=this._sources;if(!o.prototype.error.call(this,n))return!1;for(var t=0;t<r.length;t++)try{r[t].error(n)}catch(n){}return!0},c.prototype.lock=function(){o.prototype.lock.call(this);for(var n=this._sources,r=0;r<n.length;r++)n[r].lock()},r.exports=c},{"../crc32":4,"../signature":23,"../stream/GenericWorker":28,"../utf8":31,"../utils":32}],9:[function(n,r,t){var i=n("../compressions"),e=n("./ZipFileWorker");t.generateWorker=function(n,r,t){var u=new e(r.streamFiles,t,r.platform,r.encodeFileName),o=0;try{n.forEach((function(n,t){o++;var e=function(n,r){var t=n||r,e=i[t];if(!e)throw new Error(t+" is not a valid compression method !");return e}(t.options.compression,r.compression),f=t.options.compressionOptions||r.compressionOptions||{},a=t.dir,s=t.date;t._compressWorker(e,f).withStreamInfo("file",{name:n,dir:a,date:s,comment:t.comment||"",unixPermissions:t.unixPermissions,dosPermissions:t.dosPermissions}).pipe(u)})),u.entriesCount=o}catch(n){u.error(n)}return u}},{"../compressions":3,"./ZipFileWorker":8}],10:[function(n,r,t){function i(){if(!(this instanceof i))return new i;if(arguments.length)throw new Error("The constructor with parameters has been removed in JSZip 3.0, please check the upgrade guide.");this.files=Object.create(null),this.comment=null,this.root="",this.clone=function(){var n=new i;for(var r in this)"function"!=typeof this[r]&&(n[r]=this[r]);return n}}(i.prototype=n("./object")).loadAsync=n("./load"),i.support=n("./support"),i.defaults=n("./defaults"),i.version="3.10.0",i.loadAsync=function(n,r){return(new i).loadAsync(n,r)},i.external=n("./external"),r.exports=i},{"./defaults":5,"./external":6,"./load":11,"./object":15,"./support":30}],11:[function(n,r,t){var i=n("./utils"),e=n("./external"),u=n("./utf8"),o=n("./zipEntries"),f=n("./stream/Crc32Probe"),a=n("./nodejsUtils");function s(n){return new e.Promise((function(r,t){var i=n.decompressed.getContentWorker().pipe(new f);i.on("error",(function(n){t(n)})).on("end",(function(){i.streamInfo.crc32!==n.decompressed.crc32?t(new Error("Corrupted zip : CRC32 mismatch")):r()})).resume()}))}r.exports=function(n,r){var t=this;return r=i.extend(r||{},{base64:!1,checkCRC32:!1,optimizedBinaryString:!1,createFolders:!1,decodeFileName:u.utf8decode}),a.isNode&&a.isStream(n)?e.Promise.reject(new Error("JSZip can't accept a stream when loading a zip file.")):i.prepareContent("the loaded zip file",n,!0,r.optimizedBinaryString,r.base64).then((function(n){var t=new o(r);return t.load(n),t})).then((function(n){var t=[e.Promise.resolve(n)],i=n.files;if(r.checkCRC32)for(var u=0;u<i.length;u++)t.push(s(i[u]));return e.Promise.all(t)})).then((function(n){for(var e=n.shift(),u=e.files,o=0;o<u.length;o++){var f=u[o],a=f.fileNameStr,s=i.resolve(f.fileNameStr);t.file(s,f.decompressed,{binary:!0,optimizedBinaryString:!0,date:f.date,dir:f.dir,comment:f.fileCommentStr.length?f.fileCommentStr:null,unixPermissions:f.unixPermissions,dosPermissions:f.dosPermissions,createFolders:r.createFolders}),f.dir||(t.file(s).unsafeOriginalName=a)}return e.zipComment.length&&(t.comment=e.zipComment),t}))}},{"./external":6,"./nodejsUtils":14,"./stream/Crc32Probe":25,"./utf8":31,"./utils":32,"./zipEntries":33}],12:[function(n,r,t){var i=n("../utils"),e=n("../stream/GenericWorker");function u(n,r){e.call(this,"Nodejs stream input adapter for "+n),this._upstreamEnded=!1,this._bindStream(r)}i.inherits(u,e),u.prototype._bindStream=function(n){var r=this;(this._stream=n).pause(),n.on("data",(function(n){r.push({data:n,meta:{percent:0}})})).on("error",(function(n){r.isPaused?this.generatedError=n:r.error(n)})).on("end",(function(){r.isPaused?r._upstreamEnded=!0:r.end()}))},u.prototype.pause=function(){return!!e.prototype.pause.call(this)&&(this._stream.pause(),!0)},u.prototype.resume=function(){return!!e.prototype.resume.call(this)&&(this._upstreamEnded?this.end():this._stream.resume(),!0)},r.exports=u},{"../stream/GenericWorker":28,"../utils":32}],13:[function(n,r,t){var i=n("readable-stream").Readable;function e(n,r,t){i.call(this,r),this._helper=n;var e=this;n.on("data",(function(n,r){e.push(n)||e._helper.pause(),t&&t(r)})).on("error",(function(n){e.emit("error",n)})).on("end",(function(){e.push(null)}))}n("../utils").inherits(e,i),e.prototype._read=function(){this._helper.resume()},r.exports=e},{"../utils":32,"readable-stream":16}],14:[function(n,r,t){r.exports={isNode:"undefined"!=typeof Buffer,newBufferFrom:function(n,r){if(Buffer.from&&Buffer.from!==Uint8Array.from)return Buffer.from(n,r);if("number"==typeof n)throw new Error('The "data" argument must not be a number');return new Buffer(n,r)},allocBuffer:function(n){if(Buffer.alloc)return Buffer.alloc(n);var r=new Buffer(n);return r.fill(0),r},isBuffer:function(n){return Buffer.isBuffer(n)},isStream:function(n){return n&&"function"==typeof n.on&&"function"==typeof n.pause&&"function"==typeof n.resume}}},{}],15:[function(n,r,t){function i(n,r,t){var i,e=u.getTypeOf(r),f=u.extend(t||{},a);f.date=f.date||new Date,null!==f.compression&&(f.compression=f.compression.toUpperCase()),"string"==typeof f.unixPermissions&&(f.unixPermissions=parseInt(f.unixPermissions,8)),f.unixPermissions&&16384&f.unixPermissions&&(f.dir=!0),f.dosPermissions&&16&f.dosPermissions&&(f.dir=!0),f.dir&&(n=p(n)),f.createFolders&&(i=d(n))&&m.call(this,i,!0);var h="string"===e&&!1===f.binary&&!1===f.base64;t&&void 0!==t.binary||(f.binary=!h),(r instanceof s&&0===r.uncompressedSize||f.dir||!r||0===r.length)&&(f.base64=!1,f.binary=!0,r="",f.compression="STORE",e="string");var w=null;w=r instanceof s||r instanceof o?r:l.isNode&&l.isStream(r)?new v(n,r):u.prepareContent(n,r,f.binary,f.optimizedBinaryString,f.base64);var y=new c(n,w,f);this.files[n]=y}var e=n("./utf8"),u=n("./utils"),o=n("./stream/GenericWorker"),f=n("./stream/StreamHelper"),a=n("./defaults"),s=n("./compressedObject"),c=n("./zipObject"),h=n("./generate"),l=n("./nodejsUtils"),v=n("./nodejs/NodejsStreamInputAdapter"),d=function(n){"/"===n.slice(-1)&&(n=n.substring(0,n.length-1));var r=n.lastIndexOf("/");return 0<r?n.substring(0,r):""},p=function(n){return"/"!==n.slice(-1)&&(n+="/"),n},m=function(n,r){return r=void 0!==r?r:a.createFolders,n=p(n),this.files[n]||i.call(this,n,null,{dir:!0,createFolders:r}),this.files[n]};function w(n){return"[object RegExp]"===Object.prototype.toString.call(n)}var y={load:function(){throw new Error("This method has been removed in JSZip 3.0, please check the upgrade guide.")},forEach:function(n){var r,t,i;for(r in this.files)i=this.files[r],(t=r.slice(this.root.length,r.length))&&r.slice(0,this.root.length)===this.root&&n(t,i)},filter:function(n){var r=[];return this.forEach((function(t,i){n(t,i)&&r.push(i)})),r},file:function(n,r,t){if(1!==arguments.length)return n=this.root+n,i.call(this,n,r,t),this;if(w(n)){var e=n;return this.filter((function(n,r){return!r.dir&&e.test(n)}))}var u=this.files[this.root+n];return u&&!u.dir?u:null},folder:function(n){if(!n)return this;if(w(n))return this.filter((function(r,t){return t.dir&&n.test(r)}));var r=this.root+n,t=m.call(this,r),i=this.clone();return i.root=t.name,i},remove:function(n){n=this.root+n;var r=this.files[n];if(r||("/"!==n.slice(-1)&&(n+="/"),r=this.files[n]),r&&!r.dir)delete this.files[n];else for(var t=this.filter((function(r,t){return t.name.slice(0,n.length)===n})),i=0;i<t.length;i++)delete this.files[t[i].name];return this},generate:function(n){throw new Error("This method has been removed in JSZip 3.0, please check the upgrade guide.")},generateInternalStream:function(n){var r,t={};try{if((t=u.extend(n||{},{streamFiles:!1,compression:"STORE",compressionOptions:null,type:"",platform:"DOS",comment:null,mimeType:"application/zip",encodeFileName:e.utf8encode})).type=t.type.toLowerCase(),t.compression=t.compression.toUpperCase(),"binarystring"===t.type&&(t.type="string"),!t.type)throw new Error("No output type specified.");u.checkSupport(t.type),"darwin"!==t.platform&&"freebsd"!==t.platform&&"linux"!==t.platform&&"sunos"!==t.platform||(t.platform="UNIX"),"win32"===t.platform&&(t.platform="DOS");var i=t.comment||this.comment||"";r=h.generateWorker(this,t,i)}catch(n){(r=new o("error")).error(n)}return new f(r,t.type||"string",t.mimeType)},generateAsync:function(n,r){return this.generateInternalStream(n).accumulate(r)},generateNodeStream:function(n,r){return(n=n||{}).type||(n.type="nodebuffer"),this.generateInternalStream(n).toNodejsStream(r)}};r.exports=y},{"./compressedObject":2,"./defaults":5,"./generate":9,"./nodejs/NodejsStreamInputAdapter":12,"./nodejsUtils":14,"./stream/GenericWorker":28,"./stream/StreamHelper":29,"./utf8":31,"./utils":32,"./zipObject":35}],16:[function(n,r,t){r.exports=n("stream")},{stream:void 0}],17:[function(n,r,t){var i=n("./DataReader");function e(n){i.call(this,n);for(var r=0;r<this.data.length;r++)n[r]=255&n[r]}n("../utils").inherits(e,i),e.prototype.byteAt=function(n){return this.data[this.zero+n]},e.prototype.lastIndexOfSignature=function(n){for(var r=n.charCodeAt(0),t=n.charCodeAt(1),i=n.charCodeAt(2),e=n.charCodeAt(3),u=this.length-4;0<=u;--u)if(this.data[u]===r&&this.data[u+1]===t&&this.data[u+2]===i&&this.data[u+3]===e)return u-this.zero;return-1},e.prototype.readAndCheckSignature=function(n){var r=n.charCodeAt(0),t=n.charCodeAt(1),i=n.charCodeAt(2),e=n.charCodeAt(3),u=this.readData(4);return r===u[0]&&t===u[1]&&i===u[2]&&e===u[3]},e.prototype.readData=function(n){if(this.checkOffset(n),0===n)return[];var r=this.data.slice(this.zero+this.index,this.zero+this.index+n);return this.index+=n,r},r.exports=e},{"../utils":32,"./DataReader":18}],18:[function(n,r,t){var i=n("../utils");function e(n){this.data=n,this.length=n.length,this.index=0,this.zero=0}e.prototype={checkOffset:function(n){this.checkIndex(this.index+n)},checkIndex:function(n){if(this.length<this.zero+n||n<0)throw new Error("End of data reached (data length = "+this.length+", asked index = "+n+"). Corrupted zip ?")},setIndex:function(n){this.checkIndex(n),this.index=n},skip:function(n){this.setIndex(this.index+n)},byteAt:function(n){},readInt:function(n){var r,t=0;for(this.checkOffset(n),r=this.index+n-1;r>=this.index;r--)t=(t<<8)+this.byteAt(r);return this.index+=n,t},readString:function(n){return i.transformTo("string",this.readData(n))},readData:function(n){},lastIndexOfSignature:function(n){},readAndCheckSignature:function(n){},readDate:function(){var n=this.readInt(4);return new Date(Date.UTC(1980+(n>>25&127),(n>>21&15)-1,n>>16&31,n>>11&31,n>>5&63,(31&n)<<1))}},r.exports=e},{"../utils":32}],19:[function(n,r,t){var i=n("./Uint8ArrayReader");function e(n){i.call(this,n)}n("../utils").inherits(e,i),e.prototype.readData=function(n){this.checkOffset(n);var r=this.data.slice(this.zero+this.index,this.zero+this.index+n);return this.index+=n,r},r.exports=e},{"../utils":32,"./Uint8ArrayReader":21}],20:[function(n,r,t){var i=n("./DataReader");function e(n){i.call(this,n)}n("../utils").inherits(e,i),e.prototype.byteAt=function(n){return this.data.charCodeAt(this.zero+n)},e.prototype.lastIndexOfSignature=function(n){return this.data.lastIndexOf(n)-this.zero},e.prototype.readAndCheckSignature=function(n){return n===this.readData(4)},e.prototype.readData=function(n){this.checkOffset(n);var r=this.data.slice(this.zero+this.index,this.zero+this.index+n);return this.index+=n,r},r.exports=e},{"../utils":32,"./DataReader":18}],21:[function(n,r,t){var i=n("./ArrayReader");function e(n){i.call(this,n)}n("../utils").inherits(e,i),e.prototype.readData=function(n){if(this.checkOffset(n),0===n)return new Uint8Array(0);var r=this.data.subarray(this.zero+this.index,this.zero+this.index+n);return this.index+=n,r},r.exports=e},{"../utils":32,"./ArrayReader":17}],22:[function(n,r,t){var i=n("../utils"),e=n("../support"),u=n("./ArrayReader"),o=n("./StringReader"),f=n("./NodeBufferReader"),a=n("./Uint8ArrayReader");r.exports=function(n){var r=i.getTypeOf(n);return i.checkSupport(r),"string"!==r||e.uint8array?"nodebuffer"===r?new f(n):e.uint8array?new a(i.transformTo("uint8array",n)):new u(i.transformTo("array",n)):new o(n)}},{"../support":30,"../utils":32,"./ArrayReader":17,"./NodeBufferReader":19,"./StringReader":20,"./Uint8ArrayReader":21}],23:[function(n,r,t){t.LOCAL_FILE_HEADER="PK",t.CENTRAL_FILE_HEADER="PK",t.CENTRAL_DIRECTORY_END="PK",t.ZIP64_CENTRAL_DIRECTORY_LOCATOR="PK",t.ZIP64_CENTRAL_DIRECTORY_END="PK",t.DATA_DESCRIPTOR="PK\b"},{}],24:[function(n,r,t){var i=n("./GenericWorker"),e=n("../utils");function u(n){i.call(this,"ConvertWorker to "+n),this.destType=n}e.inherits(u,i),u.prototype.processChunk=function(n){this.push({data:e.transformTo(this.destType,n.data),meta:n.meta})},r.exports=u},{"../utils":32,"./GenericWorker":28}],25:[function(n,r,t){var i=n("./GenericWorker"),e=n("../crc32");function u(){i.call(this,"Crc32Probe"),this.withStreamInfo("crc32",0)}n("../utils").inherits(u,i),u.prototype.processChunk=function(n){this.streamInfo.crc32=e(n.data,this.streamInfo.crc32||0),this.push(n)},r.exports=u},{"../crc32":4,"../utils":32,"./GenericWorker":28}],26:[function(n,r,t){var i=n("../utils"),e=n("./GenericWorker");function u(n){e.call(this,"DataLengthProbe for "+n),this.propName=n,this.withStreamInfo(n,0)}i.inherits(u,e),u.prototype.processChunk=function(n){if(n){var r=this.streamInfo[this.propName]||0;this.streamInfo[this.propName]=r+n.data.length}e.prototype.processChunk.call(this,n)},r.exports=u},{"../utils":32,"./GenericWorker":28}],27:[function(n,r,t){var i=n("../utils"),e=n("./GenericWorker");function u(n){e.call(this,"DataWorker");var r=this;this.dataIsReady=!1,this.index=0,this.max=0,this.data=null,this.type="",this._tickScheduled=!1,n.then((function(n){r.dataIsReady=!0,r.data=n,r.max=n&&n.length||0,r.type=i.getTypeOf(n),r.isPaused||r._tickAndRepeat()}),(function(n){r.error(n)}))}i.inherits(u,e),u.prototype.cleanUp=function(){e.prototype.cleanUp.call(this),this.data=null},u.prototype.resume=function(){return!!e.prototype.resume.call(this)&&(!this._tickScheduled&&this.dataIsReady&&(this._tickScheduled=!0,i.delay(this._tickAndRepeat,[],this)),!0)},u.prototype._tickAndRepeat=function(){this._tickScheduled=!1,this.isPaused||this.isFinished||(this._tick(),this.isFinished||(i.delay(this._tickAndRepeat,[],this),this._tickScheduled=!0))},u.prototype._tick=function(){if(this.isPaused||this.isFinished)return!1;var n=null,r=Math.min(this.max,this.index+16384);if(this.index>=this.max)return this.end();switch(this.type){case"string":n=this.data.substring(this.index,r);break;case"uint8array":n=this.data.subarray(this.index,r);break;case"array":case"nodebuffer":n=this.data.slice(this.index,r)}return this.index=r,this.push({data:n,meta:{percent:this.max?this.index/this.max*100:0}})},r.exports=u},{"../utils":32,"./GenericWorker":28}],28:[function(n,r,t){function i(n){this.name=n||"default",this.streamInfo={},this.generatedError=null,this.extraStreamInfo={},this.isPaused=!0,this.isFinished=!1,this.isLocked=!1,this._listeners={data:[],end:[],error:[]},this.previous=null}i.prototype={push:function(n){this.emit("data",n)},end:function(){if(this.isFinished)return!1;this.flush();try{this.emit("end"),this.cleanUp(),this.isFinished=!0}catch(n){this.emit("error",n)}return!0},error:function(n){return!this.isFinished&&(this.isPaused?this.generatedError=n:(this.isFinished=!0,this.emit("error",n),this.previous&&this.previous.error(n),this.cleanUp()),!0)},on:function(n,r){return this._listeners[n].push(r),this},cleanUp:function(){this.streamInfo=this.generatedError=this.extraStreamInfo=null,this._listeners=[]},emit:function(n,r){if(this._listeners[n])for(var t=0;t<this._listeners[n].length;t++)this._listeners[n][t].call(this,r)},pipe:function(n){return n.registerPrevious(this)},registerPrevious:function(n){if(this.isLocked)throw new Error("The stream '"+this+"' has already been used.");this.streamInfo=n.streamInfo,this.mergeStreamInfo(),this.previous=n;var r=this;return n.on("data",(function(n){r.processChunk(n)})),n.on("end",(function(){r.end()})),n.on("error",(function(n){r.error(n)})),this},pause:function(){return!this.isPaused&&!this.isFinished&&(this.isPaused=!0,this.previous&&this.previous.pause(),!0)},resume:function(){if(!this.isPaused||this.isFinished)return!1;var n=this.isPaused=!1;return this.generatedError&&(this.error(this.generatedError),n=!0),this.previous&&this.previous.resume(),!n},flush:function(){},processChunk:function(n){this.push(n)},withStreamInfo:function(n,r){return this.extraStreamInfo[n]=r,this.mergeStreamInfo(),this},mergeStreamInfo:function(){for(var n in this.extraStreamInfo)this.extraStreamInfo.hasOwnProperty(n)&&(this.streamInfo[n]=this.extraStreamInfo[n])},lock:function(){if(this.isLocked)throw new Error("The stream '"+this+"' has already been used.");this.isLocked=!0,this.previous&&this.previous.lock()},toString:function(){var n="Worker "+this.name;return this.previous?this.previous+" -> "+n:n}},r.exports=i},{}],29:[function(n,r,t){var i=n("../utils"),e=n("./ConvertWorker"),u=n("./GenericWorker"),o=n("../base64"),f=n("../support"),a=n("../external"),s=null;if(f.nodestream)try{s=n("../nodejs/NodejsStreamOutputAdapter")}catch(n){}function c(n,r){return new a.Promise((function(t,e){var u=[],f=n._internalType,a=n._outputType,s=n._mimeType;n.on("data",(function(n,t){u.push(n),r&&r(t)})).on("error",(function(n){u=[],e(n)})).on("end",(function(){try{var n=function(n,r,t){switch(n){case"blob":return i.newBlob(i.transformTo("arraybuffer",r),t);case"base64":return o.encode(r);default:return i.transformTo(n,r)}}(a,function(n,r){var t,i=0,e=null,u=0;for(t=0;t<r.length;t++)u+=r[t].length;switch(n){case"string":return r.join("");case"array":return Array.prototype.concat.apply([],r);case"uint8array":for(e=new Uint8Array(u),t=0;t<r.length;t++)e.set(r[t],i),i+=r[t].length;return e;case"nodebuffer":return Buffer.concat(r);default:throw new Error("concat : unsupported type '"+n+"'")}}(f,u),s);t(n)}catch(n){e(n)}u=[]})).resume()}))}function h(n,r,t){var o=r;switch(r){case"blob":case"arraybuffer":o="uint8array";break;case"base64":o="string"}try{this._internalType=o,this._outputType=r,this._mimeType=t,i.checkSupport(o),this._worker=n.pipe(new e(o)),n.lock()}catch(n){this._worker=new u("error"),this._worker.error(n)}}h.prototype={accumulate:function(n){return c(this,n)},on:function(n,r){var t=this;return"data"===n?this._worker.on(n,(function(n){r.call(t,n.data,n.meta)})):this._worker.on(n,(function(){i.delay(r,arguments,t)})),this},resume:function(){return i.delay(this._worker.resume,[],this._worker),this},pause:function(){return this._worker.pause(),this},toNodejsStream:function(n){if(i.checkSupport("nodestream"),"nodebuffer"!==this._outputType)throw new Error(this._outputType+" is not supported by this method");return new s(this,{objectMode:"nodebuffer"!==this._outputType},n)}},r.exports=h},{"../base64":1,"../external":6,"../nodejs/NodejsStreamOutputAdapter":13,"../support":30,"../utils":32,"./ConvertWorker":24,"./GenericWorker":28}],30:[function(n,r,t){if(t.base64=!0,t.array=!0,t.string=!0,t.arraybuffer="undefined"!=typeof ArrayBuffer&&"undefined"!=typeof Uint8Array,t.nodebuffer="undefined"!=typeof Buffer,t.uint8array="undefined"!=typeof Uint8Array,"undefined"==typeof ArrayBuffer)t.blob=!1;else{var i=new ArrayBuffer(0);try{t.blob=0===new Blob([i],{type:"application/zip"}).size}catch(n){try{var e=new(self.BlobBuilder||self.WebKitBlobBuilder||self.MozBlobBuilder||self.MSBlobBuilder);e.append(i),t.blob=0===e.getBlob("application/zip").size}catch(n){t.blob=!1}}}try{t.nodestream=!!n("readable-stream").Readable}catch(n){t.nodestream=!1}},{"readable-stream":16}],31:[function(n,r,t){for(var i=n("./utils"),e=n("./support"),u=n("./nodejsUtils"),o=n("./stream/GenericWorker"),f=new Array(256),a=0;a<256;a++)f[a]=252<=a?6:248<=a?5:240<=a?4:224<=a?3:192<=a?2:1;function s(){o.call(this,"utf-8 decode"),this.leftOver=null}function c(){o.call(this,"utf-8 encode")}f[254]=f[254]=1,t.utf8encode=function(n){return e.nodebuffer?u.newBufferFrom(n,"utf-8"):function(n){var r,t,i,u,o,f=n.length,a=0;for(u=0;u<f;u++)55296==(64512&(t=n.charCodeAt(u)))&&u+1<f&&56320==(64512&(i=n.charCodeAt(u+1)))&&(t=65536+(t-55296<<10)+(i-56320),u++),a+=t<128?1:t<2048?2:t<65536?3:4;for(r=e.uint8array?new Uint8Array(a):new Array(a),u=o=0;o<a;u++)55296==(64512&(t=n.charCodeAt(u)))&&u+1<f&&56320==(64512&(i=n.charCodeAt(u+1)))&&(t=65536+(t-55296<<10)+(i-56320),u++),t<128?r[o++]=t:(t<2048?r[o++]=192|t>>>6:(t<65536?r[o++]=224|t>>>12:(r[o++]=240|t>>>18,r[o++]=128|t>>>12&63),r[o++]=128|t>>>6&63),r[o++]=128|63&t);return r}(n)},t.utf8decode=function(n){return e.nodebuffer?i.transformTo("nodebuffer",n).toString("utf-8"):function(n){var r,t,e,u,o=n.length,a=new Array(2*o);for(r=t=0;r<o;)if((e=n[r++])<128)a[t++]=e;else if(4<(u=f[e]))a[t++]=65533,r+=u-1;else{for(e&=2===u?31:3===u?15:7;1<u&&r<o;)e=e<<6|63&n[r++],u--;1<u?a[t++]=65533:e<65536?a[t++]=e:(e-=65536,a[t++]=55296|e>>10&1023,a[t++]=56320|1023&e)}return a.length!==t&&(a.subarray?a=a.subarray(0,t):a.length=t),i.applyFromCharCode(a)}(n=i.transformTo(e.uint8array?"uint8array":"array",n))},i.inherits(s,o),s.prototype.processChunk=function(n){var r=i.transformTo(e.uint8array?"uint8array":"array",n.data);if(this.leftOver&&this.leftOver.length){if(e.uint8array){var u=r;(r=new Uint8Array(u.length+this.leftOver.length)).set(this.leftOver,0),r.set(u,this.leftOver.length)}else r=this.leftOver.concat(r);this.leftOver=null}var o=function(n,r){var t;for((r=r||n.length)>n.length&&(r=n.length),t=r-1;0<=t&&128==(192&n[t]);)t--;return t<0||0===t?r:t+f[n[t]]>r?t:r}(r),a=r;o!==r.length&&(e.uint8array?(a=r.subarray(0,o),this.leftOver=r.subarray(o,r.length)):(a=r.slice(0,o),this.leftOver=r.slice(o,r.length))),this.push({data:t.utf8decode(a),meta:n.meta})},s.prototype.flush=function(){this.leftOver&&this.leftOver.length&&(this.push({data:t.utf8decode(this.leftOver),meta:{}}),this.leftOver=null)},t.Utf8DecodeWorker=s,i.inherits(c,o),c.prototype.processChunk=function(n){this.push({data:t.utf8encode(n.data),meta:n.meta})},t.Utf8EncodeWorker=c},{"./nodejsUtils":14,"./stream/GenericWorker":28,"./support":30,"./utils":32}],32:[function(n,r,t){var i=n("./support"),e=n("./base64"),u=n("./nodejsUtils"),o=n("./external");function f(n){return n}function a(n,r){for(var t=0;t<n.length;++t)r[t]=255&n.charCodeAt(t);return r}n("setimmediate"),t.newBlob=function(n,r){t.checkSupport("blob");try{return new Blob([n],{type:r})}catch(t){try{var i=new(self.BlobBuilder||self.WebKitBlobBuilder||self.MozBlobBuilder||self.MSBlobBuilder);return i.append(n),i.getBlob(r)}catch(n){throw new Error("Bug : can't construct the Blob.")}}};var s={stringifyByChunk:function(n,r,t){var i=[],e=0,u=n.length;if(u<=t)return String.fromCharCode.apply(null,n);for(;e<u;)"array"===r||"nodebuffer"===r?i.push(String.fromCharCode.apply(null,n.slice(e,Math.min(e+t,u)))):i.push(String.fromCharCode.apply(null,n.subarray(e,Math.min(e+t,u)))),e+=t;return i.join("")},stringifyByChar:function(n){for(var r="",t=0;t<n.length;t++)r+=String.fromCharCode(n[t]);return r},applyCanBeUsed:{uint8array:function(){try{return i.uint8array&&1===String.fromCharCode.apply(null,new Uint8Array(1)).length}catch(n){return!1}}(),nodebuffer:function(){try{return i.nodebuffer&&1===String.fromCharCode.apply(null,u.allocBuffer(1)).length}catch(n){return!1}}()}};function c(n){var r=65536,i=t.getTypeOf(n),e=!0;if("uint8array"===i?e=s.applyCanBeUsed.uint8array:"nodebuffer"===i&&(e=s.applyCanBeUsed.nodebuffer),e)for(;1<r;)try{return s.stringifyByChunk(n,i,r)}catch(n){r=Math.floor(r/2)}return s.stringifyByChar(n)}function h(n,r){for(var t=0;t<n.length;t++)r[t]=n[t];return r}t.applyFromCharCode=c;var l={};l.string={string:f,array:function(n){return a(n,new Array(n.length))},arraybuffer:function(n){return l.string.uint8array(n).buffer},uint8array:function(n){return a(n,new Uint8Array(n.length))},nodebuffer:function(n){return a(n,u.allocBuffer(n.length))}},l.array={string:c,array:f,arraybuffer:function(n){return new Uint8Array(n).buffer},uint8array:function(n){return new Uint8Array(n)},nodebuffer:function(n){return u.newBufferFrom(n)}},l.arraybuffer={string:function(n){return c(new Uint8Array(n))},array:function(n){return h(new Uint8Array(n),new Array(n.byteLength))},arraybuffer:f,uint8array:function(n){return new Uint8Array(n)},nodebuffer:function(n){return u.newBufferFrom(new Uint8Array(n))}},l.uint8array={string:c,array:function(n){return h(n,new Array(n.length))},arraybuffer:function(n){return n.buffer},uint8array:f,nodebuffer:function(n){return u.newBufferFrom(n)}},l.nodebuffer={string:c,array:function(n){return h(n,new Array(n.length))},arraybuffer:function(n){return l.nodebuffer.uint8array(n).buffer},uint8array:function(n){return h(n,new Uint8Array(n.length))},nodebuffer:f},t.transformTo=function(n,r){if(r=r||"",!n)return r;t.checkSupport(n);var i=t.getTypeOf(r);return l[i][n](r)},t.resolve=function(n){for(var r=n.split("/"),t=[],i=0;i<r.length;i++){var e=r[i];"."===e||""===e&&0!==i&&i!==r.length-1||(".."===e?t.pop():t.push(e))}return t.join("/")},t.getTypeOf=function(n){return"string"==typeof n?"string":"[object Array]"===Object.prototype.toString.call(n)?"array":i.nodebuffer&&u.isBuffer(n)?"nodebuffer":i.uint8array&&n instanceof Uint8Array?"uint8array":i.arraybuffer&&n instanceof ArrayBuffer?"arraybuffer":void 0},t.checkSupport=function(n){if(!i[n.toLowerCase()])throw new Error(n+" is not supported by this platform")},t.MAX_VALUE_16BITS=65535,t.MAX_VALUE_32BITS=-1,t.pretty=function(n){var r,t,i="";for(t=0;t<(n||"").length;t++)i+="\\x"+((r=n.charCodeAt(t))<16?"0":"")+r.toString(16).toUpperCase();return i},t.delay=function(n,r,t){setImmediate((function(){n.apply(t||null,r||[])}))},t.inherits=function(n,r){function t(){}t.prototype=r.prototype,n.prototype=new t},t.extend=function(){var n,r,t={};for(n=0;n<arguments.length;n++)for(r in arguments[n])arguments[n].hasOwnProperty(r)&&void 0===t[r]&&(t[r]=arguments[n][r]);return t},t.prepareContent=function(n,r,u,f,s){return o.Promise.resolve(r).then((function(n){return i.blob&&(n instanceof Blob||-1!==["[object File]","[object Blob]"].indexOf(Object.prototype.toString.call(n)))&&"undefined"!=typeof FileReader?new o.Promise((function(r,t){var i=new FileReader;i.onload=function(n){r(n.target.result)},i.onerror=function(n){t(n.target.error)},i.readAsArrayBuffer(n)})):n})).then((function(r){var c=t.getTypeOf(r);return c?("arraybuffer"===c?r=t.transformTo("uint8array",r):"string"===c&&(s?r=e.decode(r):u&&!0!==f&&(r=function(n){return a(n,i.uint8array?new Uint8Array(n.length):new Array(n.length))}(r))),r):o.Promise.reject(new Error("Can't read the data of '"+n+"'. Is it in a supported JavaScript type (String, Blob, ArrayBuffer, etc) ?"))}))}},{"./base64":1,"./external":6,"./nodejsUtils":14,"./support":30,setimmediate:54}],33:[function(n,r,t){var i=n("./reader/readerFor"),e=n("./utils"),u=n("./signature"),o=n("./zipEntry"),f=(n("./utf8"),n("./support"));function a(n){this.files=[],this.loadOptions=n}a.prototype={checkSignature:function(n){if(!this.reader.readAndCheckSignature(n)){this.reader.index-=4;var r=this.reader.readString(4);throw new Error("Corrupted zip or bug: unexpected signature ("+e.pretty(r)+", expected "+e.pretty(n)+")")}},isSignature:function(n,r){var t=this.reader.index;this.reader.setIndex(n);var i=this.reader.readString(4)===r;return this.reader.setIndex(t),i},readBlockEndOfCentral:function(){this.diskNumber=this.reader.readInt(2),this.diskWithCentralDirStart=this.reader.readInt(2),this.centralDirRecordsOnThisDisk=this.reader.readInt(2),this.centralDirRecords=this.reader.readInt(2),this.centralDirSize=this.reader.readInt(4),this.centralDirOffset=this.reader.readInt(4),this.zipCommentLength=this.reader.readInt(2);var n=this.reader.readData(this.zipCommentLength),r=f.uint8array?"uint8array":"array",t=e.transformTo(r,n);this.zipComment=this.loadOptions.decodeFileName(t)},readBlockZip64EndOfCentral:function(){this.zip64EndOfCentralSize=this.reader.readInt(8),this.reader.skip(4),this.diskNumber=this.reader.readInt(4),this.diskWithCentralDirStart=this.reader.readInt(4),this.centralDirRecordsOnThisDisk=this.reader.readInt(8),this.centralDirRecords=this.reader.readInt(8),this.centralDirSize=this.reader.readInt(8),this.centralDirOffset=this.reader.readInt(8),this.zip64ExtensibleData={};for(var n,r,t,i=this.zip64EndOfCentralSize-44;0<i;)n=this.reader.readInt(2),r=this.reader.readInt(4),t=this.reader.readData(r),this.zip64ExtensibleData[n]={id:n,length:r,value:t}},readBlockZip64EndOfCentralLocator:function(){if(this.diskWithZip64CentralDirStart=this.reader.readInt(4),this.relativeOffsetEndOfZip64CentralDir=this.reader.readInt(8),this.disksCount=this.reader.readInt(4),1<this.disksCount)throw new Error("Multi-volumes zip are not supported")},readLocalFiles:function(){var n,r;for(n=0;n<this.files.length;n++)r=this.files[n],this.reader.setIndex(r.localHeaderOffset),this.checkSignature(u.LOCAL_FILE_HEADER),r.readLocalPart(this.reader),r.handleUTF8(),r.processAttributes()},readCentralDir:function(){var n;for(this.reader.setIndex(this.centralDirOffset);this.reader.readAndCheckSignature(u.CENTRAL_FILE_HEADER);)(n=new o({zip64:this.zip64},this.loadOptions)).readCentralPart(this.reader),this.files.push(n);if(this.centralDirRecords!==this.files.length&&0!==this.centralDirRecords&&0===this.files.length)throw new Error("Corrupted zip or bug: expected "+this.centralDirRecords+" records in central dir, got "+this.files.length)},readEndOfCentral:function(){var n=this.reader.lastIndexOfSignature(u.CENTRAL_DIRECTORY_END);if(n<0)throw this.isSignature(0,u.LOCAL_FILE_HEADER)?new Error("Corrupted zip: can't find end of central directory"):new Error("Can't find end of central directory : is this a zip file ? If it is, see https://stuk.github.io/jszip/documentation/howto/read_zip.html");this.reader.setIndex(n);var r=n;if(this.checkSignature(u.CENTRAL_DIRECTORY_END),this.readBlockEndOfCentral(),this.diskNumber===e.MAX_VALUE_16BITS||this.diskWithCentralDirStart===e.MAX_VALUE_16BITS||this.centralDirRecordsOnThisDisk===e.MAX_VALUE_16BITS||this.centralDirRecords===e.MAX_VALUE_16BITS||this.centralDirSize===e.MAX_VALUE_32BITS||this.centralDirOffset===e.MAX_VALUE_32BITS){if(this.zip64=!0,(n=this.reader.lastIndexOfSignature(u.ZIP64_CENTRAL_DIRECTORY_LOCATOR))<0)throw new Error("Corrupted zip: can't find the ZIP64 end of central directory locator");if(this.reader.setIndex(n),this.checkSignature(u.ZIP64_CENTRAL_DIRECTORY_LOCATOR),this.readBlockZip64EndOfCentralLocator(),!this.isSignature(this.relativeOffsetEndOfZip64CentralDir,u.ZIP64_CENTRAL_DIRECTORY_END)&&(this.relativeOffsetEndOfZip64CentralDir=this.reader.lastIndexOfSignature(u.ZIP64_CENTRAL_DIRECTORY_END),this.relativeOffsetEndOfZip64CentralDir<0))throw new Error("Corrupted zip: can't find the ZIP64 end of central directory");this.reader.setIndex(this.relativeOffsetEndOfZip64CentralDir),this.checkSignature(u.ZIP64_CENTRAL_DIRECTORY_END),this.readBlockZip64EndOfCentral()}var t=this.centralDirOffset+this.centralDirSize;this.zip64&&(t+=20,t+=12+this.zip64EndOfCentralSize);var i=r-t;if(0<i)this.isSignature(r,u.CENTRAL_FILE_HEADER)||(this.reader.zero=i);else if(i<0)throw new Error("Corrupted zip: missing "+Math.abs(i)+" bytes.")},prepareReader:function(n){this.reader=i(n)},load:function(n){this.prepareReader(n),this.readEndOfCentral(),this.readCentralDir(),this.readLocalFiles()}},r.exports=a},{"./reader/readerFor":22,"./signature":23,"./support":30,"./utf8":31,"./utils":32,"./zipEntry":34}],34:[function(n,r,t){var i=n("./reader/readerFor"),e=n("./utils"),u=n("./compressedObject"),o=n("./crc32"),f=n("./utf8"),a=n("./compressions"),s=n("./support");function c(n,r){this.options=n,this.loadOptions=r}c.prototype={isEncrypted:function(){return 1==(1&this.bitFlag)},useUTF8:function(){return 2048==(2048&this.bitFlag)},readLocalPart:function(n){var r,t;if(n.skip(22),this.fileNameLength=n.readInt(2),t=n.readInt(2),this.fileName=n.readData(this.fileNameLength),n.skip(t),-1===this.compressedSize||-1===this.uncompressedSize)throw new Error("Bug or corrupted zip : didn't get enough information from the central directory (compressedSize === -1 || uncompressedSize === -1)");if(null===(r=function(n){for(var r in a)if(a.hasOwnProperty(r)&&a[r].magic===n)return a[r];return null}(this.compressionMethod)))throw new Error("Corrupted zip : compression "+e.pretty(this.compressionMethod)+" unknown (inner file : "+e.transformTo("string",this.fileName)+")");this.decompressed=new u(this.compressedSize,this.uncompressedSize,this.crc32,r,n.readData(this.compressedSize))},readCentralPart:function(n){this.versionMadeBy=n.readInt(2),n.skip(2),this.bitFlag=n.readInt(2),this.compressionMethod=n.readString(2),this.date=n.readDate(),this.crc32=n.readInt(4),this.compressedSize=n.readInt(4),this.uncompressedSize=n.readInt(4);var r=n.readInt(2);if(this.extraFieldsLength=n.readInt(2),this.fileCommentLength=n.readInt(2),this.diskNumberStart=n.readInt(2),this.internalFileAttributes=n.readInt(2),this.externalFileAttributes=n.readInt(4),this.localHeaderOffset=n.readInt(4),this.isEncrypted())throw new Error("Encrypted zip are not supported");n.skip(r),this.readExtraFields(n),this.parseZIP64ExtraField(n),this.fileComment=n.readData(this.fileCommentLength)},processAttributes:function(){this.unixPermissions=null,this.dosPermissions=null;var n=this.versionMadeBy>>8;this.dir=!!(16&this.externalFileAttributes),0==n&&(this.dosPermissions=63&this.externalFileAttributes),3==n&&(this.unixPermissions=this.externalFileAttributes>>16&65535),this.dir||"/"!==this.fileNameStr.slice(-1)||(this.dir=!0)},parseZIP64ExtraField:function(n){if(this.extraFields[1]){var r=i(this.extraFields[1].value);this.uncompressedSize===e.MAX_VALUE_32BITS&&(this.uncompressedSize=r.readInt(8)),this.compressedSize===e.MAX_VALUE_32BITS&&(this.compressedSize=r.readInt(8)),this.localHeaderOffset===e.MAX_VALUE_32BITS&&(this.localHeaderOffset=r.readInt(8)),this.diskNumberStart===e.MAX_VALUE_32BITS&&(this.diskNumberStart=r.readInt(4))}},readExtraFields:function(n){var r,t,i,e=n.index+this.extraFieldsLength;for(this.extraFields||(this.extraFields={});n.index+4<e;)r=n.readInt(2),t=n.readInt(2),i=n.readData(t),this.extraFields[r]={id:r,length:t,value:i};n.setIndex(e)},handleUTF8:function(){var n=s.uint8array?"uint8array":"array";if(this.useUTF8())this.fileNameStr=f.utf8decode(this.fileName),this.fileCommentStr=f.utf8decode(this.fileComment);else{var r=this.findExtraFieldUnicodePath();if(null!==r)this.fileNameStr=r;else{var t=e.transformTo(n,this.fileName);this.fileNameStr=this.loadOptions.decodeFileName(t)}var i=this.findExtraFieldUnicodeComment();if(null!==i)this.fileCommentStr=i;else{var u=e.transformTo(n,this.fileComment);this.fileCommentStr=this.loadOptions.decodeFileName(u)}}},findExtraFieldUnicodePath:function(){var n=this.extraFields[28789];if(n){var r=i(n.value);return 1!==r.readInt(1)||o(this.fileName)!==r.readInt(4)?null:f.utf8decode(r.readData(n.length-5))}return null},findExtraFieldUnicodeComment:function(){var n=this.extraFields[25461];if(n){var r=i(n.value);return 1!==r.readInt(1)||o(this.fileComment)!==r.readInt(4)?null:f.utf8decode(r.readData(n.length-5))}return null}},r.exports=c},{"./compressedObject":2,"./compressions":3,"./crc32":4,"./reader/readerFor":22,"./support":30,"./utf8":31,"./utils":32}],35:[function(n,r,t){function i(n,r,t){this.name=n,this.dir=t.dir,this.date=t.date,this.comment=t.comment,this.unixPermissions=t.unixPermissions,this.dosPermissions=t.dosPermissions,this._data=r,this._dataBinary=t.binary,this.options={compression:t.compression,compressionOptions:t.compressionOptions}}var e=n("./stream/StreamHelper"),u=n("./stream/DataWorker"),o=n("./utf8"),f=n("./compressedObject"),a=n("./stream/GenericWorker");i.prototype={internalStream:function(n){var r=null,t="string";try{if(!n)throw new Error("No output type specified.");var i="string"===(t=n.toLowerCase())||"text"===t;"binarystring"!==t&&"text"!==t||(t="string"),r=this._decompressWorker();var u=!this._dataBinary;u&&!i&&(r=r.pipe(new o.Utf8EncodeWorker)),!u&&i&&(r=r.pipe(new o.Utf8DecodeWorker))}catch(n){(r=new a("error")).error(n)}return new e(r,t,"")},async:function(n,r){return this.internalStream(n).accumulate(r)},nodeStream:function(n,r){return this.internalStream(n||"nodebuffer").toNodejsStream(r)},_compressWorker:function(n,r){if(this._data instanceof f&&this._data.compression.magic===n.magic)return this._data.getCompressedWorker();var t=this._decompressWorker();return this._dataBinary||(t=t.pipe(new o.Utf8EncodeWorker)),f.createWorkerFrom(t,n,r)},_decompressWorker:function(){return this._data instanceof f?this._data.getContentWorker():this._data instanceof a?this._data:new u(this._data)}};for(var s=["asText","asBinary","asNodeBuffer","asUint8Array","asArrayBuffer"],c=function(){throw new Error("This method has been removed in JSZip 3.0, please check the upgrade guide.")},h=0;h<s.length;h++)i.prototype[s[h]]=c;r.exports=i},{"./compressedObject":2,"./stream/DataWorker":27,"./stream/GenericWorker":28,"./stream/StreamHelper":29,"./utf8":31}],36:[function(n,r,i){(function(n){var t,i,e=n.MutationObserver||n.WebKitMutationObserver;if(e){var u=0,o=new e(c),f=n.document.createTextNode("");o.observe(f,{characterData:!0}),t=function(){f.data=u=++u%2}}else if(n.setImmediate||void 0===n.MessageChannel)t="document"in n&&"onreadystatechange"in n.document.createElement("script")?function(){var r=n.document.createElement("script");r.onreadystatechange=function(){c(),r.onreadystatechange=null,r.parentNode.removeChild(r),r=null},n.document.documentElement.appendChild(r)}:function(){setTimeout(c,0)};else{var a=new n.MessageChannel;a.port1.onmessage=c,t=function(){a.port2.postMessage(0)}}var s=[];function c(){var n,r;i=!0;for(var t=s.length;t;){for(r=s,s=[],n=-1;++n<t;)r[n]();t=s.length}i=!1}r.exports=function(n){1!==s.push(n)||i||t()}}).call(this,void 0!==t?t:"undefined"!=typeof self?self:"undefined"!=typeof window?window:{})},{}],37:[function(n,r,t){var i=n("immediate");function e(){}var u={},o=["REJECTED"],f=["FULFILLED"],a=["PENDING"];function s(n){if("function"!=typeof n)throw new TypeError("resolver must be a function");this.state=a,this.queue=[],this.outcome=void 0,n!==e&&v(this,n)}function c(n,r,t){this.promise=n,"function"==typeof r&&(this.onFulfilled=r,this.callFulfilled=this.otherCallFulfilled),"function"==typeof t&&(this.onRejected=t,this.callRejected=this.otherCallRejected)}function h(n,r,t){i((function(){var i;try{i=r(t)}catch(i){return u.reject(n,i)}i===n?u.reject(n,new TypeError("Cannot resolve promise with itself")):u.resolve(n,i)}))}function l(n){var r=n&&n.then;if(n&&("object"==typeof n||"function"==typeof n)&&"function"==typeof r)return function(){r.apply(n,arguments)}}function v(n,r){var t=!1;function i(r){t||(t=!0,u.reject(n,r))}function e(r){t||(t=!0,u.resolve(n,r))}var o=d((function(){r(e,i)}));"error"===o.status&&i(o.value)}function d(n,r){var t={};try{t.value=n(r),t.status="success"}catch(n){t.status="error",t.value=n}return t}(r.exports=s).prototype.finally=function(n){if("function"!=typeof n)return this;var r=this.constructor;return this.then((function(t){return r.resolve(n()).then((function(){return t}))}),(function(t){return r.resolve(n()).then((function(){throw t}))}))},s.prototype.catch=function(n){return this.then(null,n)},s.prototype.then=function(n,r){if("function"!=typeof n&&this.state===f||"function"!=typeof r&&this.state===o)return this;var t=new this.constructor(e);return this.state!==a?h(t,this.state===f?n:r,this.outcome):this.queue.push(new c(t,n,r)),t},c.prototype.callFulfilled=function(n){u.resolve(this.promise,n)},c.prototype.otherCallFulfilled=function(n){h(this.promise,this.onFulfilled,n)},c.prototype.callRejected=function(n){u.reject(this.promise,n)},c.prototype.otherCallRejected=function(n){h(this.promise,this.onRejected,n)},u.resolve=function(n,r){var t=d(l,r);if("error"===t.status)return u.reject(n,t.value);var i=t.value;if(i)v(n,i);else{n.state=f,n.outcome=r;for(var e=-1,o=n.queue.length;++e<o;)n.queue[e].callFulfilled(r)}return n},u.reject=function(n,r){n.state=o,n.outcome=r;for(var t=-1,i=n.queue.length;++t<i;)n.queue[t].callRejected(r);return n},s.resolve=function(n){return n instanceof this?n:u.resolve(new this(e),n)},s.reject=function(n){var r=new this(e);return u.reject(r,n)},s.all=function(n){var r=this;if("[object Array]"!==Object.prototype.toString.call(n))return this.reject(new TypeError("must be an array"));var t=n.length,i=!1;if(!t)return this.resolve([]);for(var o=new Array(t),f=0,a=-1,s=new this(e);++a<t;)c(n[a],a);return s;function c(n,e){r.resolve(n).then((function(n){o[e]=n,++f!==t||i||(i=!0,u.resolve(s,o))}),(function(n){i||(i=!0,u.reject(s,n))}))}},s.race=function(n){var r=this;if("[object Array]"!==Object.prototype.toString.call(n))return this.reject(new TypeError("must be an array"));var t=n.length,i=!1;if(!t)return this.resolve([]);for(var o,f=-1,a=new this(e);++f<t;)o=n[f],r.resolve(o).then((function(n){i||(i=!0,u.resolve(a,n))}),(function(n){i||(i=!0,u.reject(a,n))}));return a}},{immediate:36}],38:[function(n,r,t){var i={};(0,n("./lib/utils/common").assign)(i,n("./lib/deflate"),n("./lib/inflate"),n("./lib/zlib/constants")),r.exports=i},{"./lib/deflate":39,"./lib/inflate":40,"./lib/utils/common":41,"./lib/zlib/constants":44}],39:[function(n,r,t){var i=n("./zlib/deflate"),e=n("./utils/common"),u=n("./utils/strings"),o=n("./zlib/messages"),f=n("./zlib/zstream"),a=Object.prototype.toString,s=0,c=-1,h=0,l=8;function v(n){if(!(this instanceof v))return new v(n);this.options=e.assign({level:c,method:l,chunkSize:16384,windowBits:15,memLevel:8,strategy:h,to:""},n||{});var r=this.options;r.raw&&0<r.windowBits?r.windowBits=-r.windowBits:r.gzip&&0<r.windowBits&&r.windowBits<16&&(r.windowBits+=16),this.err=0,this.msg="",this.ended=!1,this.chunks=[],this.strm=new f,this.strm.avail_out=0;var t=i.deflateInit2(this.strm,r.level,r.method,r.windowBits,r.memLevel,r.strategy);if(t!==s)throw new Error(o[t]);if(r.header&&i.deflateSetHeader(this.strm,r.header),r.dictionary){var d;if(d="string"==typeof r.dictionary?u.string2buf(r.dictionary):"[object ArrayBuffer]"===a.call(r.dictionary)?new Uint8Array(r.dictionary):r.dictionary,(t=i.deflateSetDictionary(this.strm,d))!==s)throw new Error(o[t]);this._dict_set=!0}}function d(n,r){var t=new v(r);if(t.push(n,!0),t.err)throw t.msg||o[t.err];return t.result}v.prototype.push=function(n,r){var t,o,f=this.strm,c=this.options.chunkSize;if(this.ended)return!1;o=r===~~r?r:!0===r?4:0,"string"==typeof n?f.input=u.string2buf(n):"[object ArrayBuffer]"===a.call(n)?f.input=new Uint8Array(n):f.input=n,f.next_in=0,f.avail_in=f.input.length;do{if(0===f.avail_out&&(f.output=new e.Buf8(c),f.next_out=0,f.avail_out=c),1!==(t=i.deflate(f,o))&&t!==s)return this.onEnd(t),!(this.ended=!0);0!==f.avail_out&&(0!==f.avail_in||4!==o&&2!==o)||("string"===this.options.to?this.onData(u.buf2binstring(e.shrinkBuf(f.output,f.next_out))):this.onData(e.shrinkBuf(f.output,f.next_out)))}while((0<f.avail_in||0===f.avail_out)&&1!==t);return 4===o?(t=i.deflateEnd(this.strm),this.onEnd(t),this.ended=!0,t===s):2!==o||(this.onEnd(s),!(f.avail_out=0))},v.prototype.onData=function(n){this.chunks.push(n)},v.prototype.onEnd=function(n){n===s&&("string"===this.options.to?this.result=this.chunks.join(""):this.result=e.flattenChunks(this.chunks)),this.chunks=[],this.err=n,this.msg=this.strm.msg},t.Deflate=v,t.deflate=d,t.deflateRaw=function(n,r){return(r=r||{}).raw=!0,d(n,r)},t.gzip=function(n,r){return(r=r||{}).gzip=!0,d(n,r)}},{"./utils/common":41,"./utils/strings":42,"./zlib/deflate":46,"./zlib/messages":51,"./zlib/zstream":53}],40:[function(n,r,t){var i=n("./zlib/inflate"),e=n("./utils/common"),u=n("./utils/strings"),o=n("./zlib/constants"),f=n("./zlib/messages"),a=n("./zlib/zstream"),s=n("./zlib/gzheader"),c=Object.prototype.toString;function h(n){if(!(this instanceof h))return new h(n);this.options=e.assign({chunkSize:16384,windowBits:0,to:""},n||{});var r=this.options;r.raw&&0<=r.windowBits&&r.windowBits<16&&(r.windowBits=-r.windowBits,0===r.windowBits&&(r.windowBits=-15)),!(0<=r.windowBits&&r.windowBits<16)||n&&n.windowBits||(r.windowBits+=32),15<r.windowBits&&r.windowBits<48&&0==(15&r.windowBits)&&(r.windowBits|=15),this.err=0,this.msg="",this.ended=!1,this.chunks=[],this.strm=new a,this.strm.avail_out=0;var t=i.inflateInit2(this.strm,r.windowBits);if(t!==o.Z_OK)throw new Error(f[t]);this.header=new s,i.inflateGetHeader(this.strm,this.header)}function l(n,r){var t=new h(r);if(t.push(n,!0),t.err)throw t.msg||f[t.err];return t.result}h.prototype.push=function(n,r){var t,f,a,s,h,l,v=this.strm,d=this.options.chunkSize,p=this.options.dictionary,m=!1;if(this.ended)return!1;f=r===~~r?r:!0===r?o.Z_FINISH:o.Z_NO_FLUSH,"string"==typeof n?v.input=u.binstring2buf(n):"[object ArrayBuffer]"===c.call(n)?v.input=new Uint8Array(n):v.input=n,v.next_in=0,v.avail_in=v.input.length;do{if(0===v.avail_out&&(v.output=new e.Buf8(d),v.next_out=0,v.avail_out=d),(t=i.inflate(v,o.Z_NO_FLUSH))===o.Z_NEED_DICT&&p&&(l="string"==typeof p?u.string2buf(p):"[object ArrayBuffer]"===c.call(p)?new Uint8Array(p):p,t=i.inflateSetDictionary(this.strm,l)),t===o.Z_BUF_ERROR&&!0===m&&(t=o.Z_OK,m=!1),t!==o.Z_STREAM_END&&t!==o.Z_OK)return this.onEnd(t),!(this.ended=!0);v.next_out&&(0!==v.avail_out&&t!==o.Z_STREAM_END&&(0!==v.avail_in||f!==o.Z_FINISH&&f!==o.Z_SYNC_FLUSH)||("string"===this.options.to?(a=u.utf8border(v.output,v.next_out),s=v.next_out-a,h=u.buf2string(v.output,a),v.next_out=s,v.avail_out=d-s,s&&e.arraySet(v.output,v.output,a,s,0),this.onData(h)):this.onData(e.shrinkBuf(v.output,v.next_out)))),0===v.avail_in&&0===v.avail_out&&(m=!0)}while((0<v.avail_in||0===v.avail_out)&&t!==o.Z_STREAM_END);return t===o.Z_STREAM_END&&(f=o.Z_FINISH),f===o.Z_FINISH?(t=i.inflateEnd(this.strm),this.onEnd(t),this.ended=!0,t===o.Z_OK):f!==o.Z_SYNC_FLUSH||(this.onEnd(o.Z_OK),!(v.avail_out=0))},h.prototype.onData=function(n){this.chunks.push(n)},h.prototype.onEnd=function(n){n===o.Z_OK&&("string"===this.options.to?this.result=this.chunks.join(""):this.result=e.flattenChunks(this.chunks)),this.chunks=[],this.err=n,this.msg=this.strm.msg},t.Inflate=h,t.inflate=l,t.inflateRaw=function(n,r){return(r=r||{}).raw=!0,l(n,r)},t.ungzip=l},{"./utils/common":41,"./utils/strings":42,"./zlib/constants":44,"./zlib/gzheader":47,"./zlib/inflate":49,"./zlib/messages":51,"./zlib/zstream":53}],41:[function(n,r,t){var i="undefined"!=typeof Uint8Array&&"undefined"!=typeof Uint16Array&&"undefined"!=typeof Int32Array;t.assign=function(n){for(var r=Array.prototype.slice.call(arguments,1);r.length;){var t=r.shift();if(t){if("object"!=typeof t)throw new TypeError(t+"must be non-object");for(var i in t)t.hasOwnProperty(i)&&(n[i]=t[i])}}return n},t.shrinkBuf=function(n,r){return n.length===r?n:n.subarray?n.subarray(0,r):(n.length=r,n)};var e={arraySet:function(n,r,t,i,e){if(r.subarray&&n.subarray)n.set(r.subarray(t,t+i),e);else for(var u=0;u<i;u++)n[e+u]=r[t+u]},flattenChunks:function(n){var r,t,i,e,u,o;for(r=i=0,t=n.length;r<t;r++)i+=n[r].length;for(o=new Uint8Array(i),r=e=0,t=n.length;r<t;r++)u=n[r],o.set(u,e),e+=u.length;return o}},u={arraySet:function(n,r,t,i,e){for(var u=0;u<i;u++)n[e+u]=r[t+u]},flattenChunks:function(n){return[].concat.apply([],n)}};t.setTyped=function(n){n?(t.Buf8=Uint8Array,t.Buf16=Uint16Array,t.Buf32=Int32Array,t.assign(t,e)):(t.Buf8=Array,t.Buf16=Array,t.Buf32=Array,t.assign(t,u))},t.setTyped(i)},{}],42:[function(n,r,t){var i=n("./common"),e=!0,u=!0;try{String.fromCharCode.apply(null,[0])}catch(n){e=!1}try{String.fromCharCode.apply(null,new Uint8Array(1))}catch(n){u=!1}for(var o=new i.Buf8(256),f=0;f<256;f++)o[f]=252<=f?6:248<=f?5:240<=f?4:224<=f?3:192<=f?2:1;function a(n,r){if(r<65537&&(n.subarray&&u||!n.subarray&&e))return String.fromCharCode.apply(null,i.shrinkBuf(n,r));for(var t="",o=0;o<r;o++)t+=String.fromCharCode(n[o]);return t}o[254]=o[254]=1,t.string2buf=function(n){var r,t,e,u,o,f=n.length,a=0;for(u=0;u<f;u++)55296==(64512&(t=n.charCodeAt(u)))&&u+1<f&&56320==(64512&(e=n.charCodeAt(u+1)))&&(t=65536+(t-55296<<10)+(e-56320),u++),a+=t<128?1:t<2048?2:t<65536?3:4;for(r=new i.Buf8(a),u=o=0;o<a;u++)55296==(64512&(t=n.charCodeAt(u)))&&u+1<f&&56320==(64512&(e=n.charCodeAt(u+1)))&&(t=65536+(t-55296<<10)+(e-56320),u++),t<128?r[o++]=t:(t<2048?r[o++]=192|t>>>6:(t<65536?r[o++]=224|t>>>12:(r[o++]=240|t>>>18,r[o++]=128|t>>>12&63),r[o++]=128|t>>>6&63),r[o++]=128|63&t);return r},t.buf2binstring=function(n){return a(n,n.length)},t.binstring2buf=function(n){for(var r=new i.Buf8(n.length),t=0,e=r.length;t<e;t++)r[t]=n.charCodeAt(t);return r},t.buf2string=function(n,r){var t,i,e,u,f=r||n.length,s=new Array(2*f);for(t=i=0;t<f;)if((e=n[t++])<128)s[i++]=e;else if(4<(u=o[e]))s[i++]=65533,t+=u-1;else{for(e&=2===u?31:3===u?15:7;1<u&&t<f;)e=e<<6|63&n[t++],u--;1<u?s[i++]=65533:e<65536?s[i++]=e:(e-=65536,s[i++]=55296|e>>10&1023,s[i++]=56320|1023&e)}return a(s,i)},t.utf8border=function(n,r){var t;for((r=r||n.length)>n.length&&(r=n.length),t=r-1;0<=t&&128==(192&n[t]);)t--;return t<0||0===t?r:t+o[n[t]]>r?t:r}},{"./common":41}],43:[function(n,r,t){r.exports=function(n,r,t,i){for(var e=65535&n|0,u=n>>>16&65535|0,o=0;0!==t;){for(t-=o=2e3<t?2e3:t;u=u+(e=e+r[i++]|0)|0,--o;);e%=65521,u%=65521}return e|u<<16|0}},{}],44:[function(n,r,t){r.exports={Z_NO_FLUSH:0,Z_PARTIAL_FLUSH:1,Z_SYNC_FLUSH:2,Z_FULL_FLUSH:3,Z_FINISH:4,Z_BLOCK:5,Z_TREES:6,Z_OK:0,Z_STREAM_END:1,Z_NEED_DICT:2,Z_ERRNO:-1,Z_STREAM_ERROR:-2,Z_DATA_ERROR:-3,Z_BUF_ERROR:-5,Z_NO_COMPRESSION:0,Z_BEST_SPEED:1,Z_BEST_COMPRESSION:9,Z_DEFAULT_COMPRESSION:-1,Z_FILTERED:1,Z_HUFFMAN_ONLY:2,Z_RLE:3,Z_FIXED:4,Z_DEFAULT_STRATEGY:0,Z_BINARY:0,Z_TEXT:1,Z_UNKNOWN:2,Z_DEFLATED:8}},{}],45:[function(n,r,t){var i=function(){for(var n,r=[],t=0;t<256;t++){n=t;for(var i=0;i<8;i++)n=1&n?3988292384^n>>>1:n>>>1;r[t]=n}return r}();r.exports=function(n,r,t,e){var u=i,o=e+t;n^=-1;for(var f=e;f<o;f++)n=n>>>8^u[255&(n^r[f])];return-1^n}},{}],46:[function(n,r,t){var i,e=n("../utils/common"),u=n("./trees"),o=n("./adler32"),f=n("./crc32"),a=n("./messages"),s=0,c=4,h=0,l=-2,v=-1,d=4,p=2,m=8,w=9,y=286,b=30,g=19,k=2*y+1,_=15,A=3,E=258,x=E+A+1,j=42,S=113,T=1,U=2,R=3,C=4;function O(n,r){return n.msg=a[r],r}function z(n){return(n<<1)-(4<n?9:0)}function D(n){for(var r=n.length;0<=--r;)n[r]=0}function F(n){var r=n.state,t=r.pending;t>n.avail_out&&(t=n.avail_out),0!==t&&(e.arraySet(n.output,r.pending_buf,r.pending_out,t,n.next_out),n.next_out+=t,r.pending_out+=t,n.total_out+=t,n.avail_out-=t,r.pending-=t,0===r.pending&&(r.pending_out=0))}function N(n,r){u._tr_flush_block(n,0<=n.block_start?n.block_start:-1,n.strstart-n.block_start,r),n.block_start=n.strstart,F(n.strm)}function B(n,r){n.pending_buf[n.pending++]=r}function I(n,r){n.pending_buf[n.pending++]=r>>>8&255,n.pending_buf[n.pending++]=255&r}function L(n,r){var t,i,e=n.max_chain_length,u=n.strstart,o=n.prev_length,f=n.nice_match,a=n.strstart>n.w_size-x?n.strstart-(n.w_size-x):0,s=n.window,c=n.w_mask,h=n.prev,l=n.strstart+E,v=s[u+o-1],d=s[u+o];n.prev_length>=n.good_match&&(e>>=2),f>n.lookahead&&(f=n.lookahead);do{if(s[(t=r)+o]===d&&s[t+o-1]===v&&s[t]===s[u]&&s[++t]===s[u+1]){u+=2,t++;do{}while(s[++u]===s[++t]&&s[++u]===s[++t]&&s[++u]===s[++t]&&s[++u]===s[++t]&&s[++u]===s[++t]&&s[++u]===s[++t]&&s[++u]===s[++t]&&s[++u]===s[++t]&&u<l);if(i=E-(l-u),u=l-E,o<i){if(n.match_start=r,f<=(o=i))break;v=s[u+o-1],d=s[u+o]}}}while((r=h[r&c])>a&&0!=--e);return o<=n.lookahead?o:n.lookahead}function P(n){var r,t,i,u,a,s,c,h,l,v,d=n.w_size;do{if(u=n.window_size-n.lookahead-n.strstart,n.strstart>=d+(d-x)){for(e.arraySet(n.window,n.window,d,d,0),n.match_start-=d,n.strstart-=d,n.block_start-=d,r=t=n.hash_size;i=n.head[--r],n.head[r]=d<=i?i-d:0,--t;);for(r=t=d;i=n.prev[--r],n.prev[r]=d<=i?i-d:0,--t;);u+=d}if(0===n.strm.avail_in)break;if(s=n.strm,c=n.window,h=n.strstart+n.lookahead,v=void 0,(l=u)<(v=s.avail_in)&&(v=l),t=0===v?0:(s.avail_in-=v,e.arraySet(c,s.input,s.next_in,v,h),1===s.state.wrap?s.adler=o(s.adler,c,v,h):2===s.state.wrap&&(s.adler=f(s.adler,c,v,h)),s.next_in+=v,s.total_in+=v,v),n.lookahead+=t,n.lookahead+n.insert>=A)for(a=n.strstart-n.insert,n.ins_h=n.window[a],n.ins_h=(n.ins_h<<n.hash_shift^n.window[a+1])&n.hash_mask;n.insert&&(n.ins_h=(n.ins_h<<n.hash_shift^n.window[a+A-1])&n.hash_mask,n.prev[a&n.w_mask]=n.head[n.ins_h],n.head[n.ins_h]=a,a++,n.insert--,!(n.lookahead+n.insert<A)););}while(n.lookahead<x&&0!==n.strm.avail_in)}function W(n,r){for(var t,i;;){if(n.lookahead<x){if(P(n),n.lookahead<x&&r===s)return T;if(0===n.lookahead)break}if(t=0,n.lookahead>=A&&(n.ins_h=(n.ins_h<<n.hash_shift^n.window[n.strstart+A-1])&n.hash_mask,t=n.prev[n.strstart&n.w_mask]=n.head[n.ins_h],n.head[n.ins_h]=n.strstart),0!==t&&n.strstart-t<=n.w_size-x&&(n.match_length=L(n,t)),n.match_length>=A)if(i=u._tr_tally(n,n.strstart-n.match_start,n.match_length-A),n.lookahead-=n.match_length,n.match_length<=n.max_lazy_match&&n.lookahead>=A){for(n.match_length--;n.strstart++,n.ins_h=(n.ins_h<<n.hash_shift^n.window[n.strstart+A-1])&n.hash_mask,t=n.prev[n.strstart&n.w_mask]=n.head[n.ins_h],n.head[n.ins_h]=n.strstart,0!=--n.match_length;);n.strstart++}else n.strstart+=n.match_length,n.match_length=0,n.ins_h=n.window[n.strstart],n.ins_h=(n.ins_h<<n.hash_shift^n.window[n.strstart+1])&n.hash_mask;else i=u._tr_tally(n,0,n.window[n.strstart]),n.lookahead--,n.strstart++;if(i&&(N(n,!1),0===n.strm.avail_out))return T}return n.insert=n.strstart<A-1?n.strstart:A-1,r===c?(N(n,!0),0===n.strm.avail_out?R:C):n.last_lit&&(N(n,!1),0===n.strm.avail_out)?T:U}function Z(n,r){for(var t,i,e;;){if(n.lookahead<x){if(P(n),n.lookahead<x&&r===s)return T;if(0===n.lookahead)break}if(t=0,n.lookahead>=A&&(n.ins_h=(n.ins_h<<n.hash_shift^n.window[n.strstart+A-1])&n.hash_mask,t=n.prev[n.strstart&n.w_mask]=n.head[n.ins_h],n.head[n.ins_h]=n.strstart),n.prev_length=n.match_length,n.prev_match=n.match_start,n.match_length=A-1,0!==t&&n.prev_length<n.max_lazy_match&&n.strstart-t<=n.w_size-x&&(n.match_length=L(n,t),n.match_length<=5&&(1===n.strategy||n.match_length===A&&4096<n.strstart-n.match_start)&&(n.match_length=A-1)),n.prev_length>=A&&n.match_length<=n.prev_length){for(e=n.strstart+n.lookahead-A,i=u._tr_tally(n,n.strstart-1-n.prev_match,n.prev_length-A),n.lookahead-=n.prev_length-1,n.prev_length-=2;++n.strstart<=e&&(n.ins_h=(n.ins_h<<n.hash_shift^n.window[n.strstart+A-1])&n.hash_mask,t=n.prev[n.strstart&n.w_mask]=n.head[n.ins_h],n.head[n.ins_h]=n.strstart),0!=--n.prev_length;);if(n.match_available=0,n.match_length=A-1,n.strstart++,i&&(N(n,!1),0===n.strm.avail_out))return T}else if(n.match_available){if((i=u._tr_tally(n,0,n.window[n.strstart-1]))&&N(n,!1),n.strstart++,n.lookahead--,0===n.strm.avail_out)return T}else n.match_available=1,n.strstart++,n.lookahead--}return n.match_available&&(i=u._tr_tally(n,0,n.window[n.strstart-1]),n.match_available=0),n.insert=n.strstart<A-1?n.strstart:A-1,r===c?(N(n,!0),0===n.strm.avail_out?R:C):n.last_lit&&(N(n,!1),0===n.strm.avail_out)?T:U}function M(n,r,t,i,e){this.good_length=n,this.max_lazy=r,this.nice_length=t,this.max_chain=i,this.func=e}function $(){this.strm=null,this.status=0,this.pending_buf=null,this.pending_buf_size=0,this.pending_out=0,this.pending=0,this.wrap=0,this.gzhead=null,this.gzindex=0,this.method=m,this.last_flush=-1,this.w_size=0,this.w_bits=0,this.w_mask=0,this.window=null,this.window_size=0,this.prev=null,this.head=null,this.ins_h=0,this.hash_size=0,this.hash_bits=0,this.hash_mask=0,this.hash_shift=0,this.block_start=0,this.match_length=0,this.prev_match=0,this.match_available=0,this.strstart=0,this.match_start=0,this.lookahead=0,this.prev_length=0,this.max_chain_length=0,this.max_lazy_match=0,this.level=0,this.strategy=0,this.good_match=0,this.nice_match=0,this.dyn_ltree=new e.Buf16(2*k),this.dyn_dtree=new e.Buf16(2*(2*b+1)),this.bl_tree=new e.Buf16(2*(2*g+1)),D(this.dyn_ltree),D(this.dyn_dtree),D(this.bl_tree),this.l_desc=null,this.d_desc=null,this.bl_desc=null,this.bl_count=new e.Buf16(_+1),this.heap=new e.Buf16(2*y+1),D(this.heap),this.heap_len=0,this.heap_max=0,this.depth=new e.Buf16(2*y+1),D(this.depth),this.l_buf=0,this.lit_bufsize=0,this.last_lit=0,this.d_buf=0,this.opt_len=0,this.static_len=0,this.matches=0,this.insert=0,this.bi_buf=0,this.bi_valid=0}function G(n){var r;return n&&n.state?(n.total_in=n.total_out=0,n.data_type=p,(r=n.state).pending=0,r.pending_out=0,r.wrap<0&&(r.wrap=-r.wrap),r.status=r.wrap?j:S,n.adler=2===r.wrap?0:1,r.last_flush=s,u._tr_init(r),h):O(n,l)}function J(n){var r=G(n);return r===h&&function(n){n.window_size=2*n.w_size,D(n.head),n.max_lazy_match=i[n.level].max_lazy,n.good_match=i[n.level].good_length,n.nice_match=i[n.level].nice_length,n.max_chain_length=i[n.level].max_chain,n.strstart=0,n.block_start=0,n.lookahead=0,n.insert=0,n.match_length=n.prev_length=A-1,n.match_available=0,n.ins_h=0}(n.state),r}function H(n,r,t,i,u,o){if(!n)return l;var f=1;if(r===v&&(r=6),i<0?(f=0,i=-i):15<i&&(f=2,i-=16),u<1||w<u||t!==m||i<8||15<i||r<0||9<r||o<0||d<o)return O(n,l);8===i&&(i=9);var a=new $;return(n.state=a).strm=n,a.wrap=f,a.gzhead=null,a.w_bits=i,a.w_size=1<<a.w_bits,a.w_mask=a.w_size-1,a.hash_bits=u+7,a.hash_size=1<<a.hash_bits,a.hash_mask=a.hash_size-1,a.hash_shift=~~((a.hash_bits+A-1)/A),a.window=new e.Buf8(2*a.w_size),a.head=new e.Buf16(a.hash_size),a.prev=new e.Buf16(a.w_size),a.lit_bufsize=1<<u+6,a.pending_buf_size=4*a.lit_bufsize,a.pending_buf=new e.Buf8(a.pending_buf_size),a.d_buf=1*a.lit_bufsize,a.l_buf=3*a.lit_bufsize,a.level=r,a.strategy=o,a.method=t,J(n)}i=[new M(0,0,0,0,(function(n,r){var t=65535;for(t>n.pending_buf_size-5&&(t=n.pending_buf_size-5);;){if(n.lookahead<=1){if(P(n),0===n.lookahead&&r===s)return T;if(0===n.lookahead)break}n.strstart+=n.lookahead,n.lookahead=0;var i=n.block_start+t;if((0===n.strstart||n.strstart>=i)&&(n.lookahead=n.strstart-i,n.strstart=i,N(n,!1),0===n.strm.avail_out))return T;if(n.strstart-n.block_start>=n.w_size-x&&(N(n,!1),0===n.strm.avail_out))return T}return n.insert=0,r===c?(N(n,!0),0===n.strm.avail_out?R:C):(n.strstart>n.block_start&&(N(n,!1),n.strm.avail_out),T)})),new M(4,4,8,4,W),new M(4,5,16,8,W),new M(4,6,32,32,W),new M(4,4,16,16,Z),new M(8,16,32,32,Z),new M(8,16,128,128,Z),new M(8,32,128,256,Z),new M(32,128,258,1024,Z),new M(32,258,258,4096,Z)],t.deflateInit=function(n,r){return H(n,r,m,15,8,0)},t.deflateInit2=H,t.deflateReset=J,t.deflateResetKeep=G,t.deflateSetHeader=function(n,r){return n&&n.state?2!==n.state.wrap?l:(n.state.gzhead=r,h):l},t.deflate=function(n,r){var t,e,o,a;if(!n||!n.state||5<r||r<0)return n?O(n,l):l;if(e=n.state,!n.output||!n.input&&0!==n.avail_in||666===e.status&&r!==c)return O(n,0===n.avail_out?-5:l);if(e.strm=n,t=e.last_flush,e.last_flush=r,e.status===j)if(2===e.wrap)n.adler=0,B(e,31),B(e,139),B(e,8),e.gzhead?(B(e,(e.gzhead.text?1:0)+(e.gzhead.hcrc?2:0)+(e.gzhead.extra?4:0)+(e.gzhead.name?8:0)+(e.gzhead.comment?16:0)),B(e,255&e.gzhead.time),B(e,e.gzhead.time>>8&255),B(e,e.gzhead.time>>16&255),B(e,e.gzhead.time>>24&255),B(e,9===e.level?2:2<=e.strategy||e.level<2?4:0),B(e,255&e.gzhead.os),e.gzhead.extra&&e.gzhead.extra.length&&(B(e,255&e.gzhead.extra.length),B(e,e.gzhead.extra.length>>8&255)),e.gzhead.hcrc&&(n.adler=f(n.adler,e.pending_buf,e.pending,0)),e.gzindex=0,e.status=69):(B(e,0),B(e,0),B(e,0),B(e,0),B(e,0),B(e,9===e.level?2:2<=e.strategy||e.level<2?4:0),B(e,3),e.status=S);else{var v=m+(e.w_bits-8<<4)<<8;v|=(2<=e.strategy||e.level<2?0:e.level<6?1:6===e.level?2:3)<<6,0!==e.strstart&&(v|=32),v+=31-v%31,e.status=S,I(e,v),0!==e.strstart&&(I(e,n.adler>>>16),I(e,65535&n.adler)),n.adler=1}if(69===e.status)if(e.gzhead.extra){for(o=e.pending;e.gzindex<(65535&e.gzhead.extra.length)&&(e.pending!==e.pending_buf_size||(e.gzhead.hcrc&&e.pending>o&&(n.adler=f(n.adler,e.pending_buf,e.pending-o,o)),F(n),o=e.pending,e.pending!==e.pending_buf_size));)B(e,255&e.gzhead.extra[e.gzindex]),e.gzindex++;e.gzhead.hcrc&&e.pending>o&&(n.adler=f(n.adler,e.pending_buf,e.pending-o,o)),e.gzindex===e.gzhead.extra.length&&(e.gzindex=0,e.status=73)}else e.status=73;if(73===e.status)if(e.gzhead.name){o=e.pending;do{if(e.pending===e.pending_buf_size&&(e.gzhead.hcrc&&e.pending>o&&(n.adler=f(n.adler,e.pending_buf,e.pending-o,o)),F(n),o=e.pending,e.pending===e.pending_buf_size)){a=1;break}a=e.gzindex<e.gzhead.name.length?255&e.gzhead.name.charCodeAt(e.gzindex++):0,B(e,a)}while(0!==a);e.gzhead.hcrc&&e.pending>o&&(n.adler=f(n.adler,e.pending_buf,e.pending-o,o)),0===a&&(e.gzindex=0,e.status=91)}else e.status=91;if(91===e.status)if(e.gzhead.comment){o=e.pending;do{if(e.pending===e.pending_buf_size&&(e.gzhead.hcrc&&e.pending>o&&(n.adler=f(n.adler,e.pending_buf,e.pending-o,o)),F(n),o=e.pending,e.pending===e.pending_buf_size)){a=1;break}a=e.gzindex<e.gzhead.comment.length?255&e.gzhead.comment.charCodeAt(e.gzindex++):0,B(e,a)}while(0!==a);e.gzhead.hcrc&&e.pending>o&&(n.adler=f(n.adler,e.pending_buf,e.pending-o,o)),0===a&&(e.status=103)}else e.status=103;if(103===e.status&&(e.gzhead.hcrc?(e.pending+2>e.pending_buf_size&&F(n),e.pending+2<=e.pending_buf_size&&(B(e,255&n.adler),B(e,n.adler>>8&255),n.adler=0,e.status=S)):e.status=S),0!==e.pending){if(F(n),0===n.avail_out)return e.last_flush=-1,h}else if(0===n.avail_in&&z(r)<=z(t)&&r!==c)return O(n,-5);if(666===e.status&&0!==n.avail_in)return O(n,-5);if(0!==n.avail_in||0!==e.lookahead||r!==s&&666!==e.status){var d=2===e.strategy?function(n,r){for(var t;;){if(0===n.lookahead&&(P(n),0===n.lookahead)){if(r===s)return T;break}if(n.match_length=0,t=u._tr_tally(n,0,n.window[n.strstart]),n.lookahead--,n.strstart++,t&&(N(n,!1),0===n.strm.avail_out))return T}return n.insert=0,r===c?(N(n,!0),0===n.strm.avail_out?R:C):n.last_lit&&(N(n,!1),0===n.strm.avail_out)?T:U}(e,r):3===e.strategy?function(n,r){for(var t,i,e,o,f=n.window;;){if(n.lookahead<=E){if(P(n),n.lookahead<=E&&r===s)return T;if(0===n.lookahead)break}if(n.match_length=0,n.lookahead>=A&&0<n.strstart&&(i=f[e=n.strstart-1])===f[++e]&&i===f[++e]&&i===f[++e]){o=n.strstart+E;do{}while(i===f[++e]&&i===f[++e]&&i===f[++e]&&i===f[++e]&&i===f[++e]&&i===f[++e]&&i===f[++e]&&i===f[++e]&&e<o);n.match_length=E-(o-e),n.match_length>n.lookahead&&(n.match_length=n.lookahead)}if(n.match_length>=A?(t=u._tr_tally(n,1,n.match_length-A),n.lookahead-=n.match_length,n.strstart+=n.match_length,n.match_length=0):(t=u._tr_tally(n,0,n.window[n.strstart]),n.lookahead--,n.strstart++),t&&(N(n,!1),0===n.strm.avail_out))return T}return n.insert=0,r===c?(N(n,!0),0===n.strm.avail_out?R:C):n.last_lit&&(N(n,!1),0===n.strm.avail_out)?T:U}(e,r):i[e.level].func(e,r);if(d!==R&&d!==C||(e.status=666),d===T||d===R)return 0===n.avail_out&&(e.last_flush=-1),h;if(d===U&&(1===r?u._tr_align(e):5!==r&&(u._tr_stored_block(e,0,0,!1),3===r&&(D(e.head),0===e.lookahead&&(e.strstart=0,e.block_start=0,e.insert=0))),F(n),0===n.avail_out))return e.last_flush=-1,h}return r!==c?h:e.wrap<=0?1:(2===e.wrap?(B(e,255&n.adler),B(e,n.adler>>8&255),B(e,n.adler>>16&255),B(e,n.adler>>24&255),B(e,255&n.total_in),B(e,n.total_in>>8&255),B(e,n.total_in>>16&255),B(e,n.total_in>>24&255)):(I(e,n.adler>>>16),I(e,65535&n.adler)),F(n),0<e.wrap&&(e.wrap=-e.wrap),0!==e.pending?h:1)},t.deflateEnd=function(n){var r;return n&&n.state?(r=n.state.status)!==j&&69!==r&&73!==r&&91!==r&&103!==r&&r!==S&&666!==r?O(n,l):(n.state=null,r===S?O(n,-3):h):l},t.deflateSetDictionary=function(n,r){var t,i,u,f,a,s,c,v,d=r.length;if(!n||!n.state)return l;if(2===(f=(t=n.state).wrap)||1===f&&t.status!==j||t.lookahead)return l;for(1===f&&(n.adler=o(n.adler,r,d,0)),t.wrap=0,d>=t.w_size&&(0===f&&(D(t.head),t.strstart=0,t.block_start=0,t.insert=0),v=new e.Buf8(t.w_size),e.arraySet(v,r,d-t.w_size,t.w_size,0),r=v,d=t.w_size),a=n.avail_in,s=n.next_in,c=n.input,n.avail_in=d,n.next_in=0,n.input=r,P(t);t.lookahead>=A;){for(i=t.strstart,u=t.lookahead-(A-1);t.ins_h=(t.ins_h<<t.hash_shift^t.window[i+A-1])&t.hash_mask,t.prev[i&t.w_mask]=t.head[t.ins_h],t.head[t.ins_h]=i,i++,--u;);t.strstart=i,t.lookahead=A-1,P(t)}return t.strstart+=t.lookahead,t.block_start=t.strstart,t.insert=t.lookahead,t.lookahead=0,t.match_length=t.prev_length=A-1,t.match_available=0,n.next_in=s,n.input=c,n.avail_in=a,t.wrap=f,h},t.deflateInfo="pako deflate (from Nodeca project)"},{"../utils/common":41,"./adler32":43,"./crc32":45,"./messages":51,"./trees":52}],47:[function(n,r,t){r.exports=function(){this.text=0,this.time=0,this.xflags=0,this.os=0,this.extra=null,this.extra_len=0,this.name="",this.comment="",this.hcrc=0,this.done=!1}},{}],48:[function(n,r,t){r.exports=function(n,r){var t,i,e,u,o,f,a,s,c,h,l,v,d,p,m,w,y,b,g,k,_,A,E,x,j;t=n.state,i=n.next_in,x=n.input,e=i+(n.avail_in-5),u=n.next_out,j=n.output,o=u-(r-n.avail_out),f=u+(n.avail_out-257),a=t.dmax,s=t.wsize,c=t.whave,h=t.wnext,l=t.window,v=t.hold,d=t.bits,p=t.lencode,m=t.distcode,w=(1<<t.lenbits)-1,y=(1<<t.distbits)-1;n:do{d<15&&(v+=x[i++]<<d,d+=8,v+=x[i++]<<d,d+=8),b=p[v&w];r:for(;;){if(v>>>=g=b>>>24,d-=g,0==(g=b>>>16&255))j[u++]=65535&b;else{if(!(16&g)){if(0==(64&g)){b=p[(65535&b)+(v&(1<<g)-1)];continue r}if(32&g){t.mode=12;break n}n.msg="invalid literal/length code",t.mode=30;break n}k=65535&b,(g&=15)&&(d<g&&(v+=x[i++]<<d,d+=8),k+=v&(1<<g)-1,v>>>=g,d-=g),d<15&&(v+=x[i++]<<d,d+=8,v+=x[i++]<<d,d+=8),b=m[v&y];t:for(;;){if(v>>>=g=b>>>24,d-=g,!(16&(g=b>>>16&255))){if(0==(64&g)){b=m[(65535&b)+(v&(1<<g)-1)];continue t}n.msg="invalid distance code",t.mode=30;break n}if(_=65535&b,d<(g&=15)&&(v+=x[i++]<<d,(d+=8)<g&&(v+=x[i++]<<d,d+=8)),a<(_+=v&(1<<g)-1)){n.msg="invalid distance too far back",t.mode=30;break n}if(v>>>=g,d-=g,(g=u-o)<_){if(c<(g=_-g)&&t.sane){n.msg="invalid distance too far back",t.mode=30;break n}if(E=l,(A=0)===h){if(A+=s-g,g<k){for(k-=g;j[u++]=l[A++],--g;);A=u-_,E=j}}else if(h<g){if(A+=s+h-g,(g-=h)<k){for(k-=g;j[u++]=l[A++],--g;);if(A=0,h<k){for(k-=g=h;j[u++]=l[A++],--g;);A=u-_,E=j}}}else if(A+=h-g,g<k){for(k-=g;j[u++]=l[A++],--g;);A=u-_,E=j}for(;2<k;)j[u++]=E[A++],j[u++]=E[A++],j[u++]=E[A++],k-=3;k&&(j[u++]=E[A++],1<k&&(j[u++]=E[A++]))}else{for(A=u-_;j[u++]=j[A++],j[u++]=j[A++],j[u++]=j[A++],2<(k-=3););k&&(j[u++]=j[A++],1<k&&(j[u++]=j[A++]))}break}}break}}while(i<e&&u<f);i-=k=d>>3,v&=(1<<(d-=k<<3))-1,n.next_in=i,n.next_out=u,n.avail_in=i<e?e-i+5:5-(i-e),n.avail_out=u<f?f-u+257:257-(u-f),t.hold=v,t.bits=d}},{}],49:[function(n,r,t){var i=n("../utils/common"),e=n("./adler32"),u=n("./crc32"),o=n("./inffast"),f=n("./inftrees"),a=1,s=2,c=0,h=-2,l=1,v=852,d=592;function p(n){return(n>>>24&255)+(n>>>8&65280)+((65280&n)<<8)+((255&n)<<24)}function m(){this.mode=0,this.last=!1,this.wrap=0,this.havedict=!1,this.flags=0,this.dmax=0,this.check=0,this.total=0,this.head=null,this.wbits=0,this.wsize=0,this.whave=0,this.wnext=0,this.window=null,this.hold=0,this.bits=0,this.length=0,this.offset=0,this.extra=0,this.lencode=null,this.distcode=null,this.lenbits=0,this.distbits=0,this.ncode=0,this.nlen=0,this.ndist=0,this.have=0,this.next=null,this.lens=new i.Buf16(320),this.work=new i.Buf16(288),this.lendyn=null,this.distdyn=null,this.sane=0,this.back=0,this.was=0}function w(n){var r;return n&&n.state?(r=n.state,n.total_in=n.total_out=r.total=0,n.msg="",r.wrap&&(n.adler=1&r.wrap),r.mode=l,r.last=0,r.havedict=0,r.dmax=32768,r.head=null,r.hold=0,r.bits=0,r.lencode=r.lendyn=new i.Buf32(v),r.distcode=r.distdyn=new i.Buf32(d),r.sane=1,r.back=-1,c):h}function y(n){var r;return n&&n.state?((r=n.state).wsize=0,r.whave=0,r.wnext=0,w(n)):h}function b(n,r){var t,i;return n&&n.state?(i=n.state,r<0?(t=0,r=-r):(t=1+(r>>4),r<48&&(r&=15)),r&&(r<8||15<r)?h:(null!==i.window&&i.wbits!==r&&(i.window=null),i.wrap=t,i.wbits=r,y(n))):h}function g(n,r){var t,i;return n?(i=new m,(n.state=i).window=null,(t=b(n,r))!==c&&(n.state=null),t):h}var k,_,A=!0;function E(n){if(A){var r;for(k=new i.Buf32(512),_=new i.Buf32(32),r=0;r<144;)n.lens[r++]=8;for(;r<256;)n.lens[r++]=9;for(;r<280;)n.lens[r++]=7;for(;r<288;)n.lens[r++]=8;for(f(a,n.lens,0,288,k,0,n.work,{bits:9}),r=0;r<32;)n.lens[r++]=5;f(s,n.lens,0,32,_,0,n.work,{bits:5}),A=!1}n.lencode=k,n.lenbits=9,n.distcode=_,n.distbits=5}function x(n,r,t,e){var u,o=n.state;return null===o.window&&(o.wsize=1<<o.wbits,o.wnext=0,o.whave=0,o.window=new i.Buf8(o.wsize)),e>=o.wsize?(i.arraySet(o.window,r,t-o.wsize,o.wsize,0),o.wnext=0,o.whave=o.wsize):(e<(u=o.wsize-o.wnext)&&(u=e),i.arraySet(o.window,r,t-e,u,o.wnext),(e-=u)?(i.arraySet(o.window,r,t-e,e,0),o.wnext=e,o.whave=o.wsize):(o.wnext+=u,o.wnext===o.wsize&&(o.wnext=0),o.whave<o.wsize&&(o.whave+=u))),0}t.inflateReset=y,t.inflateReset2=b,t.inflateResetKeep=w,t.inflateInit=function(n){return g(n,15)},t.inflateInit2=g,t.inflate=function(n,r){var t,v,d,m,w,y,b,g,k,_,A,j,S,T,U,R,C,O,z,D,F,N,B,I,L=0,P=new i.Buf8(4),W=[16,17,18,0,8,7,9,6,10,5,11,4,12,3,13,2,14,1,15];if(!n||!n.state||!n.output||!n.input&&0!==n.avail_in)return h;12===(t=n.state).mode&&(t.mode=13),w=n.next_out,d=n.output,b=n.avail_out,m=n.next_in,v=n.input,y=n.avail_in,g=t.hold,k=t.bits,_=y,A=b,N=c;n:for(;;)switch(t.mode){case l:if(0===t.wrap){t.mode=13;break}for(;k<16;){if(0===y)break n;y--,g+=v[m++]<<k,k+=8}if(2&t.wrap&&35615===g){P[t.check=0]=255&g,P[1]=g>>>8&255,t.check=u(t.check,P,2,0),k=g=0,t.mode=2;break}if(t.flags=0,t.head&&(t.head.done=!1),!(1&t.wrap)||(((255&g)<<8)+(g>>8))%31){n.msg="incorrect header check",t.mode=30;break}if(8!=(15&g)){n.msg="unknown compression method",t.mode=30;break}if(k-=4,F=8+(15&(g>>>=4)),0===t.wbits)t.wbits=F;else if(F>t.wbits){n.msg="invalid window size",t.mode=30;break}t.dmax=1<<F,n.adler=t.check=1,t.mode=512&g?10:12,k=g=0;break;case 2:for(;k<16;){if(0===y)break n;y--,g+=v[m++]<<k,k+=8}if(t.flags=g,8!=(255&t.flags)){n.msg="unknown compression method",t.mode=30;break}if(57344&t.flags){n.msg="unknown header flags set",t.mode=30;break}t.head&&(t.head.text=g>>8&1),512&t.flags&&(P[0]=255&g,P[1]=g>>>8&255,t.check=u(t.check,P,2,0)),k=g=0,t.mode=3;case 3:for(;k<32;){if(0===y)break n;y--,g+=v[m++]<<k,k+=8}t.head&&(t.head.time=g),512&t.flags&&(P[0]=255&g,P[1]=g>>>8&255,P[2]=g>>>16&255,P[3]=g>>>24&255,t.check=u(t.check,P,4,0)),k=g=0,t.mode=4;case 4:for(;k<16;){if(0===y)break n;y--,g+=v[m++]<<k,k+=8}t.head&&(t.head.xflags=255&g,t.head.os=g>>8),512&t.flags&&(P[0]=255&g,P[1]=g>>>8&255,t.check=u(t.check,P,2,0)),k=g=0,t.mode=5;case 5:if(1024&t.flags){for(;k<16;){if(0===y)break n;y--,g+=v[m++]<<k,k+=8}t.length=g,t.head&&(t.head.extra_len=g),512&t.flags&&(P[0]=255&g,P[1]=g>>>8&255,t.check=u(t.check,P,2,0)),k=g=0}else t.head&&(t.head.extra=null);t.mode=6;case 6:if(1024&t.flags&&(y<(j=t.length)&&(j=y),j&&(t.head&&(F=t.head.extra_len-t.length,t.head.extra||(t.head.extra=new Array(t.head.extra_len)),i.arraySet(t.head.extra,v,m,j,F)),512&t.flags&&(t.check=u(t.check,v,j,m)),y-=j,m+=j,t.length-=j),t.length))break n;t.length=0,t.mode=7;case 7:if(2048&t.flags){if(0===y)break n;for(j=0;F=v[m+j++],t.head&&F&&t.length<65536&&(t.head.name+=String.fromCharCode(F)),F&&j<y;);if(512&t.flags&&(t.check=u(t.check,v,j,m)),y-=j,m+=j,F)break n}else t.head&&(t.head.name=null);t.length=0,t.mode=8;case 8:if(4096&t.flags){if(0===y)break n;for(j=0;F=v[m+j++],t.head&&F&&t.length<65536&&(t.head.comment+=String.fromCharCode(F)),F&&j<y;);if(512&t.flags&&(t.check=u(t.check,v,j,m)),y-=j,m+=j,F)break n}else t.head&&(t.head.comment=null);t.mode=9;case 9:if(512&t.flags){for(;k<16;){if(0===y)break n;y--,g+=v[m++]<<k,k+=8}if(g!==(65535&t.check)){n.msg="header crc mismatch",t.mode=30;break}k=g=0}t.head&&(t.head.hcrc=t.flags>>9&1,t.head.done=!0),n.adler=t.check=0,t.mode=12;break;case 10:for(;k<32;){if(0===y)break n;y--,g+=v[m++]<<k,k+=8}n.adler=t.check=p(g),k=g=0,t.mode=11;case 11:if(0===t.havedict)return n.next_out=w,n.avail_out=b,n.next_in=m,n.avail_in=y,t.hold=g,t.bits=k,2;n.adler=t.check=1,t.mode=12;case 12:if(5===r||6===r)break n;case 13:if(t.last){g>>>=7&k,k-=7&k,t.mode=27;break}for(;k<3;){if(0===y)break n;y--,g+=v[m++]<<k,k+=8}switch(t.last=1&g,k-=1,3&(g>>>=1)){case 0:t.mode=14;break;case 1:if(E(t),t.mode=20,6!==r)break;g>>>=2,k-=2;break n;case 2:t.mode=17;break;case 3:n.msg="invalid block type",t.mode=30}g>>>=2,k-=2;break;case 14:for(g>>>=7&k,k-=7&k;k<32;){if(0===y)break n;y--,g+=v[m++]<<k,k+=8}if((65535&g)!=(g>>>16^65535)){n.msg="invalid stored block lengths",t.mode=30;break}if(t.length=65535&g,k=g=0,t.mode=15,6===r)break n;case 15:t.mode=16;case 16:if(j=t.length){if(y<j&&(j=y),b<j&&(j=b),0===j)break n;i.arraySet(d,v,m,j,w),y-=j,m+=j,b-=j,w+=j,t.length-=j;break}t.mode=12;break;case 17:for(;k<14;){if(0===y)break n;y--,g+=v[m++]<<k,k+=8}if(t.nlen=257+(31&g),g>>>=5,k-=5,t.ndist=1+(31&g),g>>>=5,k-=5,t.ncode=4+(15&g),g>>>=4,k-=4,286<t.nlen||30<t.ndist){n.msg="too many length or distance symbols",t.mode=30;break}t.have=0,t.mode=18;case 18:for(;t.have<t.ncode;){for(;k<3;){if(0===y)break n;y--,g+=v[m++]<<k,k+=8}t.lens[W[t.have++]]=7&g,g>>>=3,k-=3}for(;t.have<19;)t.lens[W[t.have++]]=0;if(t.lencode=t.lendyn,t.lenbits=7,B={bits:t.lenbits},N=f(0,t.lens,0,19,t.lencode,0,t.work,B),t.lenbits=B.bits,N){n.msg="invalid code lengths set",t.mode=30;break}t.have=0,t.mode=19;case 19:for(;t.have<t.nlen+t.ndist;){for(;R=(L=t.lencode[g&(1<<t.lenbits)-1])>>>16&255,C=65535&L,!((U=L>>>24)<=k);){if(0===y)break n;y--,g+=v[m++]<<k,k+=8}if(C<16)g>>>=U,k-=U,t.lens[t.have++]=C;else{if(16===C){for(I=U+2;k<I;){if(0===y)break n;y--,g+=v[m++]<<k,k+=8}if(g>>>=U,k-=U,0===t.have){n.msg="invalid bit length repeat",t.mode=30;break}F=t.lens[t.have-1],j=3+(3&g),g>>>=2,k-=2}else if(17===C){for(I=U+3;k<I;){if(0===y)break n;y--,g+=v[m++]<<k,k+=8}k-=U,F=0,j=3+(7&(g>>>=U)),g>>>=3,k-=3}else{for(I=U+7;k<I;){if(0===y)break n;y--,g+=v[m++]<<k,k+=8}k-=U,F=0,j=11+(127&(g>>>=U)),g>>>=7,k-=7}if(t.have+j>t.nlen+t.ndist){n.msg="invalid bit length repeat",t.mode=30;break}for(;j--;)t.lens[t.have++]=F}}if(30===t.mode)break;if(0===t.lens[256]){n.msg="invalid code -- missing end-of-block",t.mode=30;break}if(t.lenbits=9,B={bits:t.lenbits},N=f(a,t.lens,0,t.nlen,t.lencode,0,t.work,B),t.lenbits=B.bits,N){n.msg="invalid literal/lengths set",t.mode=30;break}if(t.distbits=6,t.distcode=t.distdyn,B={bits:t.distbits},N=f(s,t.lens,t.nlen,t.ndist,t.distcode,0,t.work,B),t.distbits=B.bits,N){n.msg="invalid distances set",t.mode=30;break}if(t.mode=20,6===r)break n;case 20:t.mode=21;case 21:if(6<=y&&258<=b){n.next_out=w,n.avail_out=b,n.next_in=m,n.avail_in=y,t.hold=g,t.bits=k,o(n,A),w=n.next_out,d=n.output,b=n.avail_out,m=n.next_in,v=n.input,y=n.avail_in,g=t.hold,k=t.bits,12===t.mode&&(t.back=-1);break}for(t.back=0;R=(L=t.lencode[g&(1<<t.lenbits)-1])>>>16&255,C=65535&L,!((U=L>>>24)<=k);){if(0===y)break n;y--,g+=v[m++]<<k,k+=8}if(R&&0==(240&R)){for(O=U,z=R,D=C;R=(L=t.lencode[D+((g&(1<<O+z)-1)>>O)])>>>16&255,C=65535&L,!(O+(U=L>>>24)<=k);){if(0===y)break n;y--,g+=v[m++]<<k,k+=8}g>>>=O,k-=O,t.back+=O}if(g>>>=U,k-=U,t.back+=U,t.length=C,0===R){t.mode=26;break}if(32&R){t.back=-1,t.mode=12;break}if(64&R){n.msg="invalid literal/length code",t.mode=30;break}t.extra=15&R,t.mode=22;case 22:if(t.extra){for(I=t.extra;k<I;){if(0===y)break n;y--,g+=v[m++]<<k,k+=8}t.length+=g&(1<<t.extra)-1,g>>>=t.extra,k-=t.extra,t.back+=t.extra}t.was=t.length,t.mode=23;case 23:for(;R=(L=t.distcode[g&(1<<t.distbits)-1])>>>16&255,C=65535&L,!((U=L>>>24)<=k);){if(0===y)break n;y--,g+=v[m++]<<k,k+=8}if(0==(240&R)){for(O=U,z=R,D=C;R=(L=t.distcode[D+((g&(1<<O+z)-1)>>O)])>>>16&255,C=65535&L,!(O+(U=L>>>24)<=k);){if(0===y)break n;y--,g+=v[m++]<<k,k+=8}g>>>=O,k-=O,t.back+=O}if(g>>>=U,k-=U,t.back+=U,64&R){n.msg="invalid distance code",t.mode=30;break}t.offset=C,t.extra=15&R,t.mode=24;case 24:if(t.extra){for(I=t.extra;k<I;){if(0===y)break n;y--,g+=v[m++]<<k,k+=8}t.offset+=g&(1<<t.extra)-1,g>>>=t.extra,k-=t.extra,t.back+=t.extra}if(t.offset>t.dmax){n.msg="invalid distance too far back",t.mode=30;break}t.mode=25;case 25:if(0===b)break n;if(j=A-b,t.offset>j){if((j=t.offset-j)>t.whave&&t.sane){n.msg="invalid distance too far back",t.mode=30;break}S=j>t.wnext?(j-=t.wnext,t.wsize-j):t.wnext-j,j>t.length&&(j=t.length),T=t.window}else T=d,S=w-t.offset,j=t.length;for(b<j&&(j=b),b-=j,t.length-=j;d[w++]=T[S++],--j;);0===t.length&&(t.mode=21);break;case 26:if(0===b)break n;d[w++]=t.length,b--,t.mode=21;break;case 27:if(t.wrap){for(;k<32;){if(0===y)break n;y--,g|=v[m++]<<k,k+=8}if(A-=b,n.total_out+=A,t.total+=A,A&&(n.adler=t.check=t.flags?u(t.check,d,A,w-A):e(t.check,d,A,w-A)),A=b,(t.flags?g:p(g))!==t.check){n.msg="incorrect data check",t.mode=30;break}k=g=0}t.mode=28;case 28:if(t.wrap&&t.flags){for(;k<32;){if(0===y)break n;y--,g+=v[m++]<<k,k+=8}if(g!==(4294967295&t.total)){n.msg="incorrect length check",t.mode=30;break}k=g=0}t.mode=29;case 29:N=1;break n;case 30:N=-3;break n;case 31:return-4;default:return h}return n.next_out=w,n.avail_out=b,n.next_in=m,n.avail_in=y,t.hold=g,t.bits=k,(t.wsize||A!==n.avail_out&&t.mode<30&&(t.mode<27||4!==r))&&x(n,n.output,n.next_out,A-n.avail_out)?(t.mode=31,-4):(_-=n.avail_in,A-=n.avail_out,n.total_in+=_,n.total_out+=A,t.total+=A,t.wrap&&A&&(n.adler=t.check=t.flags?u(t.check,d,A,n.next_out-A):e(t.check,d,A,n.next_out-A)),n.data_type=t.bits+(t.last?64:0)+(12===t.mode?128:0)+(20===t.mode||15===t.mode?256:0),(0==_&&0===A||4===r)&&N===c&&(N=-5),N)},t.inflateEnd=function(n){if(!n||!n.state)return h;var r=n.state;return r.window&&(r.window=null),n.state=null,c},t.inflateGetHeader=function(n,r){var t;return n&&n.state?0==(2&(t=n.state).wrap)?h:((t.head=r).done=!1,c):h},t.inflateSetDictionary=function(n,r){var t,i=r.length;return n&&n.state?0!==(t=n.state).wrap&&11!==t.mode?h:11===t.mode&&e(1,r,i,0)!==t.check?-3:x(n,r,i,i)?(t.mode=31,-4):(t.havedict=1,c):h},t.inflateInfo="pako inflate (from Nodeca project)"},{"../utils/common":41,"./adler32":43,"./crc32":45,"./inffast":48,"./inftrees":50}],50:[function(n,r,t){var i=n("../utils/common"),e=[3,4,5,6,7,8,9,10,11,13,15,17,19,23,27,31,35,43,51,59,67,83,99,115,131,163,195,227,258,0,0],u=[16,16,16,16,16,16,16,16,17,17,17,17,18,18,18,18,19,19,19,19,20,20,20,20,21,21,21,21,16,72,78],o=[1,2,3,4,5,7,9,13,17,25,33,49,65,97,129,193,257,385,513,769,1025,1537,2049,3073,4097,6145,8193,12289,16385,24577,0,0],f=[16,16,16,16,17,17,18,18,19,19,20,20,21,21,22,22,23,23,24,24,25,25,26,26,27,27,28,28,29,29,64,64];r.exports=function(n,r,t,a,s,c,h,l){var v,d,p,m,w,y,b,g,k,_=l.bits,A=0,E=0,x=0,j=0,S=0,T=0,U=0,R=0,C=0,O=0,z=null,D=0,F=new i.Buf16(16),N=new i.Buf16(16),B=null,I=0;for(A=0;A<=15;A++)F[A]=0;for(E=0;E<a;E++)F[r[t+E]]++;for(S=_,j=15;1<=j&&0===F[j];j--);if(j<S&&(S=j),0===j)return s[c++]=20971520,s[c++]=20971520,l.bits=1,0;for(x=1;x<j&&0===F[x];x++);for(S<x&&(S=x),A=R=1;A<=15;A++)if(R<<=1,(R-=F[A])<0)return-1;if(0<R&&(0===n||1!==j))return-1;for(N[1]=0,A=1;A<15;A++)N[A+1]=N[A]+F[A];for(E=0;E<a;E++)0!==r[t+E]&&(h[N[r[t+E]]++]=E);if(y=0===n?(z=B=h,19):1===n?(z=e,D-=257,B=u,I-=257,256):(z=o,B=f,-1),A=x,w=c,U=E=O=0,p=-1,m=(C=1<<(T=S))-1,1===n&&852<C||2===n&&592<C)return 1;for(;;){for(b=A-U,k=h[E]<y?(g=0,h[E]):h[E]>y?(g=B[I+h[E]],z[D+h[E]]):(g=96,0),v=1<<A-U,x=d=1<<T;s[w+(O>>U)+(d-=v)]=b<<24|g<<16|k|0,0!==d;);for(v=1<<A-1;O&v;)v>>=1;if(0!==v?(O&=v-1,O+=v):O=0,E++,0==--F[A]){if(A===j)break;A=r[t+h[E]]}if(S<A&&(O&m)!==p){for(0===U&&(U=S),w+=x,R=1<<(T=A-U);T+U<j&&!((R-=F[T+U])<=0);)T++,R<<=1;if(C+=1<<T,1===n&&852<C||2===n&&592<C)return 1;s[p=O&m]=S<<24|T<<16|w-c|0}}return 0!==O&&(s[w+O]=A-U<<24|64<<16|0),l.bits=S,0}},{"../utils/common":41}],51:[function(n,r,t){r.exports={2:"need dictionary",1:"stream end",0:"","-1":"file error","-2":"stream error","-3":"data error","-4":"insufficient memory","-5":"buffer error","-6":"incompatible version"}},{}],52:[function(n,r,t){var i=n("../utils/common"),e=0,u=1;function o(n){for(var r=n.length;0<=--r;)n[r]=0}var f=0,a=29,s=256,c=s+1+a,h=30,l=19,v=2*c+1,d=15,p=16,m=7,w=256,y=16,b=17,g=18,k=[0,0,0,0,0,0,0,0,1,1,1,1,2,2,2,2,3,3,3,3,4,4,4,4,5,5,5,5,0],_=[0,0,0,0,1,1,2,2,3,3,4,4,5,5,6,6,7,7,8,8,9,9,10,10,11,11,12,12,13,13],A=[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,3,7],E=[16,17,18,0,8,7,9,6,10,5,11,4,12,3,13,2,14,1,15],x=new Array(2*(c+2));o(x);var j=new Array(2*h);o(j);var S=new Array(512);o(S);var T=new Array(256);o(T);var U=new Array(a);o(U);var R,C,O,z=new Array(h);function D(n,r,t,i,e){this.static_tree=n,this.extra_bits=r,this.extra_base=t,this.elems=i,this.max_length=e,this.has_stree=n&&n.length}function F(n,r){this.dyn_tree=n,this.max_code=0,this.stat_desc=r}function N(n){return n<256?S[n]:S[256+(n>>>7)]}function B(n,r){n.pending_buf[n.pending++]=255&r,n.pending_buf[n.pending++]=r>>>8&255}function I(n,r,t){n.bi_valid>p-t?(n.bi_buf|=r<<n.bi_valid&65535,B(n,n.bi_buf),n.bi_buf=r>>p-n.bi_valid,n.bi_valid+=t-p):(n.bi_buf|=r<<n.bi_valid&65535,n.bi_valid+=t)}function L(n,r,t){I(n,t[2*r],t[2*r+1])}function P(n,r){for(var t=0;t|=1&n,n>>>=1,t<<=1,0<--r;);return t>>>1}function W(n,r,t){var i,e,u=new Array(d+1),o=0;for(i=1;i<=d;i++)u[i]=o=o+t[i-1]<<1;for(e=0;e<=r;e++){var f=n[2*e+1];0!==f&&(n[2*e]=P(u[f]++,f))}}function Z(n){var r;for(r=0;r<c;r++)n.dyn_ltree[2*r]=0;for(r=0;r<h;r++)n.dyn_dtree[2*r]=0;for(r=0;r<l;r++)n.bl_tree[2*r]=0;n.dyn_ltree[2*w]=1,n.opt_len=n.static_len=0,n.last_lit=n.matches=0}function M(n){8<n.bi_valid?B(n,n.bi_buf):0<n.bi_valid&&(n.pending_buf[n.pending++]=n.bi_buf),n.bi_buf=0,n.bi_valid=0}function $(n,r,t,i){var e=2*r,u=2*t;return n[e]<n[u]||n[e]===n[u]&&i[r]<=i[t]}function G(n,r,t){for(var i=n.heap[t],e=t<<1;e<=n.heap_len&&(e<n.heap_len&&$(r,n.heap[e+1],n.heap[e],n.depth)&&e++,!$(r,i,n.heap[e],n.depth));)n.heap[t]=n.heap[e],t=e,e<<=1;n.heap[t]=i}function J(n,r,t){var i,e,u,o,f=0;if(0!==n.last_lit)for(;i=n.pending_buf[n.d_buf+2*f]<<8|n.pending_buf[n.d_buf+2*f+1],e=n.pending_buf[n.l_buf+f],f++,0===i?L(n,e,r):(L(n,(u=T[e])+s+1,r),0!==(o=k[u])&&I(n,e-=U[u],o),L(n,u=N(--i),t),0!==(o=_[u])&&I(n,i-=z[u],o)),f<n.last_lit;);L(n,w,r)}function H(n,r){var t,i,e,u=r.dyn_tree,o=r.stat_desc.static_tree,f=r.stat_desc.has_stree,a=r.stat_desc.elems,s=-1;for(n.heap_len=0,n.heap_max=v,t=0;t<a;t++)0!==u[2*t]?(n.heap[++n.heap_len]=s=t,n.depth[t]=0):u[2*t+1]=0;for(;n.heap_len<2;)u[2*(e=n.heap[++n.heap_len]=s<2?++s:0)]=1,n.depth[e]=0,n.opt_len--,f&&(n.static_len-=o[2*e+1]);for(r.max_code=s,t=n.heap_len>>1;1<=t;t--)G(n,u,t);for(e=a;t=n.heap[1],n.heap[1]=n.heap[n.heap_len--],G(n,u,1),i=n.heap[1],n.heap[--n.heap_max]=t,n.heap[--n.heap_max]=i,u[2*e]=u[2*t]+u[2*i],n.depth[e]=(n.depth[t]>=n.depth[i]?n.depth[t]:n.depth[i])+1,u[2*t+1]=u[2*i+1]=e,n.heap[1]=e++,G(n,u,1),2<=n.heap_len;);n.heap[--n.heap_max]=n.heap[1],function(n,r){var t,i,e,u,o,f,a=r.dyn_tree,s=r.max_code,c=r.stat_desc.static_tree,h=r.stat_desc.has_stree,l=r.stat_desc.extra_bits,p=r.stat_desc.extra_base,m=r.stat_desc.max_length,w=0;for(u=0;u<=d;u++)n.bl_count[u]=0;for(a[2*n.heap[n.heap_max]+1]=0,t=n.heap_max+1;t<v;t++)m<(u=a[2*a[2*(i=n.heap[t])+1]+1]+1)&&(u=m,w++),a[2*i+1]=u,s<i||(n.bl_count[u]++,o=0,p<=i&&(o=l[i-p]),f=a[2*i],n.opt_len+=f*(u+o),h&&(n.static_len+=f*(c[2*i+1]+o)));if(0!==w){do{for(u=m-1;0===n.bl_count[u];)u--;n.bl_count[u]--,n.bl_count[u+1]+=2,n.bl_count[m]--,w-=2}while(0<w);for(u=m;0!==u;u--)for(i=n.bl_count[u];0!==i;)s<(e=n.heap[--t])||(a[2*e+1]!==u&&(n.opt_len+=(u-a[2*e+1])*a[2*e],a[2*e+1]=u),i--)}}(n,r),W(u,s,n.bl_count)}function q(n,r,t){var i,e,u=-1,o=r[1],f=0,a=7,s=4;for(0===o&&(a=138,s=3),r[2*(t+1)+1]=65535,i=0;i<=t;i++)e=o,o=r[2*(i+1)+1],++f<a&&e===o||(f<s?n.bl_tree[2*e]+=f:0!==e?(e!==u&&n.bl_tree[2*e]++,n.bl_tree[2*y]++):f<=10?n.bl_tree[2*b]++:n.bl_tree[2*g]++,u=e,s=(f=0)===o?(a=138,3):e===o?(a=6,3):(a=7,4))}function K(n,r,t){var i,e,u=-1,o=r[1],f=0,a=7,s=4;for(0===o&&(a=138,s=3),i=0;i<=t;i++)if(e=o,o=r[2*(i+1)+1],!(++f<a&&e===o)){if(f<s)for(;L(n,e,n.bl_tree),0!=--f;);else 0!==e?(e!==u&&(L(n,e,n.bl_tree),f--),L(n,y,n.bl_tree),I(n,f-3,2)):f<=10?(L(n,b,n.bl_tree),I(n,f-3,3)):(L(n,g,n.bl_tree),I(n,f-11,7));u=e,s=(f=0)===o?(a=138,3):e===o?(a=6,3):(a=7,4)}}o(z);var Y=!1;function V(n,r,t,e){I(n,(f<<1)+(e?1:0),3),function(n,r,t,e){M(n),e&&(B(n,t),B(n,~t)),i.arraySet(n.pending_buf,n.window,r,t,n.pending),n.pending+=t}(n,r,t,!0)}t._tr_init=function(n){Y||(function(){var n,r,t,i,e,u=new Array(d+1);for(i=t=0;i<a-1;i++)for(U[i]=t,n=0;n<1<<k[i];n++)T[t++]=i;for(T[t-1]=i,i=e=0;i<16;i++)for(z[i]=e,n=0;n<1<<_[i];n++)S[e++]=i;for(e>>=7;i<h;i++)for(z[i]=e<<7,n=0;n<1<<_[i]-7;n++)S[256+e++]=i;for(r=0;r<=d;r++)u[r]=0;for(n=0;n<=143;)x[2*n+1]=8,n++,u[8]++;for(;n<=255;)x[2*n+1]=9,n++,u[9]++;for(;n<=279;)x[2*n+1]=7,n++,u[7]++;for(;n<=287;)x[2*n+1]=8,n++,u[8]++;for(W(x,c+1,u),n=0;n<h;n++)j[2*n+1]=5,j[2*n]=P(n,5);R=new D(x,k,s+1,c,d),C=new D(j,_,0,h,d),O=new D(new Array(0),A,0,l,m)}(),Y=!0),n.l_desc=new F(n.dyn_ltree,R),n.d_desc=new F(n.dyn_dtree,C),n.bl_desc=new F(n.bl_tree,O),n.bi_buf=0,n.bi_valid=0,Z(n)},t._tr_stored_block=V,t._tr_flush_block=function(n,r,t,i){var o,f,a=0;0<n.level?(2===n.strm.data_type&&(n.strm.data_type=function(n){var r,t=4093624447;for(r=0;r<=31;r++,t>>>=1)if(1&t&&0!==n.dyn_ltree[2*r])return e;if(0!==n.dyn_ltree[18]||0!==n.dyn_ltree[20]||0!==n.dyn_ltree[26])return u;for(r=32;r<s;r++)if(0!==n.dyn_ltree[2*r])return u;return e}(n)),H(n,n.l_desc),H(n,n.d_desc),a=function(n){var r;for(q(n,n.dyn_ltree,n.l_desc.max_code),q(n,n.dyn_dtree,n.d_desc.max_code),H(n,n.bl_desc),r=l-1;3<=r&&0===n.bl_tree[2*E[r]+1];r--);return n.opt_len+=3*(r+1)+5+5+4,r}(n),o=n.opt_len+3+7>>>3,(f=n.static_len+3+7>>>3)<=o&&(o=f)):o=f=t+5,t+4<=o&&-1!==r?V(n,r,t,i):4===n.strategy||f===o?(I(n,2+(i?1:0),3),J(n,x,j)):(I(n,4+(i?1:0),3),function(n,r,t,i){var e;for(I(n,r-257,5),I(n,t-1,5),I(n,i-4,4),e=0;e<i;e++)I(n,n.bl_tree[2*E[e]+1],3);K(n,n.dyn_ltree,r-1),K(n,n.dyn_dtree,t-1)}(n,n.l_desc.max_code+1,n.d_desc.max_code+1,a+1),J(n,n.dyn_ltree,n.dyn_dtree)),Z(n),i&&M(n)},t._tr_tally=function(n,r,t){return n.pending_buf[n.d_buf+2*n.last_lit]=r>>>8&255,n.pending_buf[n.d_buf+2*n.last_lit+1]=255&r,n.pending_buf[n.l_buf+n.last_lit]=255&t,n.last_lit++,0===r?n.dyn_ltree[2*t]++:(n.matches++,r--,n.dyn_ltree[2*(T[t]+s+1)]++,n.dyn_dtree[2*N(r)]++),n.last_lit===n.lit_bufsize-1},t._tr_align=function(n){I(n,2,3),L(n,w,x),function(n){16===n.bi_valid?(B(n,n.bi_buf),n.bi_buf=0,n.bi_valid=0):8<=n.bi_valid&&(n.pending_buf[n.pending++]=255&n.bi_buf,n.bi_buf>>=8,n.bi_valid-=8)}(n)}},{"../utils/common":41}],53:[function(n,r,t){r.exports=function(){this.input=null,this.next_in=0,this.avail_in=0,this.total_in=0,this.output=null,this.next_out=0,this.avail_out=0,this.total_out=0,this.msg="",this.state=null,this.data_type=2,this.adler=0}},{}],54:[function(n,r,i){(function(n){!function(n,r){if(!n.setImmediate){var t,i,e,u,o=1,f={},a=!1,s=n.document,c=Object.getPrototypeOf&&Object.getPrototypeOf(n);c=c&&c.setTimeout?c:n,t="[object process]"==={}.toString.call(n.process)?function(n){process.nextTick((function(){l(n)}))}:function(){if(n.postMessage&&!n.importScripts){var r=!0,t=n.onmessage;return n.onmessage=function(){r=!1},n.postMessage("","*"),n.onmessage=t,r}}()?(u="setImmediate$"+Math.random()+"$",n.addEventListener?n.addEventListener("message",v,!1):n.attachEvent("onmessage",v),function(r){n.postMessage(u+r,"*")}):n.MessageChannel?((e=new MessageChannel).port1.onmessage=function(n){l(n.data)},function(n){e.port2.postMessage(n)}):s&&"onreadystatechange"in s.createElement("script")?(i=s.documentElement,function(n){var r=s.createElement("script");r.onreadystatechange=function(){l(n),r.onreadystatechange=null,i.removeChild(r),r=null},i.appendChild(r)}):function(n){setTimeout(l,0,n)},c.setImmediate=function(n){"function"!=typeof n&&(n=new Function(""+n));for(var r=new Array(arguments.length-1),i=0;i<r.length;i++)r[i]=arguments[i+1];var e={callback:n,args:r};return f[o]=e,t(o),o++},c.clearImmediate=h}function h(n){delete f[n]}function l(n){if(a)setTimeout(l,0,n);else{var t=f[n];if(t){a=!0;try{!function(n){var t=n.callback,i=n.args;switch(i.length){case 0:t();break;case 1:t(i[0]);break;case 2:t(i[0],i[1]);break;case 3:t(i[0],i[1],i[2]);break;default:t.apply(r,i)}}(t)}finally{h(n),a=!1}}}}function v(r){r.source===n&&"string"==typeof r.data&&0===r.data.indexOf(u)&&l(+r.data.slice(u.length))}}("undefined"==typeof self?void 0===n?this:n:self)}).call(this,void 0!==t?t:"undefined"!=typeof self?self:"undefined"!=typeof window?window:{})},{}]},{},[10])(10),a={exports:{}};
/*!

JSZip v3.10.0 - A JavaScript class for generating and reading zip files
<http://stuartk.com/jszip>

(c) 2009-2016 Stuart Knightley <stuart [at] stuartk.com>
Dual licenced under the MIT license or GPLv3. See https://raw.github.com/Stuk/jszip/main/LICENSE.markdown.

JSZip uses the library pako released under the MIT license :
https://github.com/nodeca/pako/blob/main/LICENSE
*/
/**
 * @license
 * Lodash <https://lodash.com/>
 * Copyright OpenJS Foundation and other contributors <https://openjsf.org/>
 * Released under MIT license <https://lodash.com/license>
 * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>
 * Copyright Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors
 */
e=a,u=a.exports,function(){var n,r="Expected a function",i="__lodash_hash_undefined__",o="__lodash_placeholder__",f=16,a=32,s=64,c=128,h=256,l=1/0,v=9007199254740991,d=NaN,p=4294967295,m=[["ary",c],["bind",1],["bindKey",2],["curry",8],["curryRight",f],["flip",512],["partial",a],["partialRight",s],["rearg",h]],w="[object Arguments]",y="[object Array]",b="[object Boolean]",g="[object Date]",k="[object Error]",_="[object Function]",A="[object GeneratorFunction]",E="[object Map]",x="[object Number]",j="[object Object]",S="[object Promise]",T="[object RegExp]",U="[object Set]",R="[object String]",C="[object Symbol]",O="[object WeakMap]",z="[object ArrayBuffer]",D="[object DataView]",F="[object Float32Array]",N="[object Float64Array]",B="[object Int8Array]",I="[object Int16Array]",L="[object Int32Array]",P="[object Uint8Array]",W="[object Uint8ClampedArray]",Z="[object Uint16Array]",M="[object Uint32Array]",$=/\b__p \+= '';/g,G=/\b(__p \+=) '' \+/g,J=/(__e\(.*?\)|\b__t\)) \+\n'';/g,H=/&(?:amp|lt|gt|quot|#39);/g,q=/[&<>"']/g,K=RegExp(H.source),Y=RegExp(q.source),V=/<%-([\s\S]+?)%>/g,X=/<%([\s\S]+?)%>/g,Q=/<%=([\s\S]+?)%>/g,nn=/\.|\[(?:[^[\]]*|(["'])(?:(?!\1)[^\\]|\\.)*?\1)\]/,rn=/^\w*$/,tn=/[^.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\\]|\\.)*?)\2)\]|(?=(?:\.|\[\])(?:\.|\[\]|$))/g,en=/[\\^$.*+?()[\]{}|]/g,un=RegExp(en.source),on=/^\s+/,fn=/\s/,an=/\{(?:\n\/\* \[wrapped with .+\] \*\/)?\n?/,sn=/\{\n\/\* \[wrapped with (.+)\] \*/,cn=/,? & /,hn=/[^\x00-\x2f\x3a-\x40\x5b-\x60\x7b-\x7f]+/g,ln=/[()=,{}\[\]\/\s]/,vn=/\\(\\)?/g,dn=/\$\{([^\\}]*(?:\\.[^\\}]*)*)\}/g,pn=/\w*$/,mn=/^[-+]0x[0-9a-f]+$/i,wn=/^0b[01]+$/i,yn=/^\[object .+?Constructor\]$/,bn=/^0o[0-7]+$/i,gn=/^(?:0|[1-9]\d*)$/,kn=/[\xc0-\xd6\xd8-\xf6\xf8-\xff\u0100-\u017f]/g,_n=/($^)/,An=/['\n\r\u2028\u2029\\]/g,En="\\u0300-\\u036f\\ufe20-\\ufe2f\\u20d0-\\u20ff",xn="\\u2700-\\u27bf",jn="a-z\\xdf-\\xf6\\xf8-\\xff",Sn="A-Z\\xc0-\\xd6\\xd8-\\xde",Tn="\\ufe0e\\ufe0f",Un="\\xac\\xb1\\xd7\\xf7\\x00-\\x2f\\x3a-\\x40\\x5b-\\x60\\x7b-\\xbf\\u2000-\\u206f \\t\\x0b\\f\\xa0\\ufeff\\n\\r\\u2028\\u2029\\u1680\\u180e\\u2000\\u2001\\u2002\\u2003\\u2004\\u2005\\u2006\\u2007\\u2008\\u2009\\u200a\\u202f\\u205f\\u3000",Rn="['’]",Cn="[\\ud800-\\udfff]",On="["+Un+"]",zn="["+En+"]",Dn="\\d+",Fn="[\\u2700-\\u27bf]",Nn="["+jn+"]",Bn="[^\\ud800-\\udfff"+Un+Dn+xn+jn+Sn+"]",In="\\ud83c[\\udffb-\\udfff]",Ln="[^\\ud800-\\udfff]",Pn="(?:\\ud83c[\\udde6-\\uddff]){2}",Wn="[\\ud800-\\udbff][\\udc00-\\udfff]",Zn="["+Sn+"]",Mn="(?:"+Nn+"|"+Bn+")",$n="(?:"+Zn+"|"+Bn+")",Gn="(?:['’](?:d|ll|m|re|s|t|ve))?",Jn="(?:['’](?:D|LL|M|RE|S|T|VE))?",Hn="(?:"+zn+"|"+In+")?",qn="[\\ufe0e\\ufe0f]?",Kn=qn+Hn+"(?:\\u200d(?:"+[Ln,Pn,Wn].join("|")+")"+qn+Hn+")*",Yn="(?:"+[Fn,Pn,Wn].join("|")+")"+Kn,Vn="(?:"+[Ln+zn+"?",zn,Pn,Wn,Cn].join("|")+")",Xn=RegExp(Rn,"g"),Qn=RegExp(zn,"g"),nr=RegExp(In+"(?="+In+")|"+Vn+Kn,"g"),rr=RegExp([Zn+"?"+Nn+"+"+Gn+"(?="+[On,Zn,"$"].join("|")+")",$n+"+"+Jn+"(?="+[On,Zn+Mn,"$"].join("|")+")",Zn+"?"+Mn+"+"+Gn,Zn+"+"+Jn,"\\d*(?:1ST|2ND|3RD|(?![123])\\dTH)(?=\\b|[a-z_])","\\d*(?:1st|2nd|3rd|(?![123])\\dth)(?=\\b|[A-Z_])",Dn,Yn].join("|"),"g"),tr=RegExp("[\\u200d\\ud800-\\udfff"+En+Tn+"]"),ir=/[a-z][A-Z]|[A-Z]{2}[a-z]|[0-9][a-zA-Z]|[a-zA-Z][0-9]|[^a-zA-Z0-9 ]/,er=["Array","Buffer","DataView","Date","Error","Float32Array","Float64Array","Function","Int8Array","Int16Array","Int32Array","Map","Math","Object","Promise","RegExp","Set","String","Symbol","TypeError","Uint8Array","Uint8ClampedArray","Uint16Array","Uint32Array","WeakMap","_","clearTimeout","isFinite","parseInt","setTimeout"],ur=-1,or={};or[F]=or[N]=or[B]=or[I]=or[L]=or[P]=or[W]=or[Z]=or[M]=!0,or[w]=or[y]=or[z]=or[b]=or[D]=or[g]=or[k]=or[_]=or[E]=or[x]=or[j]=or[T]=or[U]=or[R]=or[O]=!1;var fr={};fr[w]=fr[y]=fr[z]=fr[D]=fr[b]=fr[g]=fr[F]=fr[N]=fr[B]=fr[I]=fr[L]=fr[E]=fr[x]=fr[j]=fr[T]=fr[U]=fr[R]=fr[C]=fr[P]=fr[W]=fr[Z]=fr[M]=!0,fr[k]=fr[_]=fr[O]=!1;var ar={"\\":"\\","'":"'","\n":"n","\r":"r","\u2028":"u2028","\u2029":"u2029"},sr=parseFloat,cr=parseInt,hr="object"==typeof t&&t&&t.Object===Object&&t,lr="object"==typeof self&&self&&self.Object===Object&&self,vr=hr||lr||Function("return this")(),dr=u&&!u.nodeType&&u,pr=dr&&e&&!e.nodeType&&e,mr=pr&&pr.exports===dr,wr=mr&&hr.process,yr=function(){try{var n=pr&&pr.require&&pr.require("util").types;return n||wr&&wr.binding&&wr.binding("util")}catch(n){}}(),br=yr&&yr.isArrayBuffer,gr=yr&&yr.isDate,kr=yr&&yr.isMap,_r=yr&&yr.isRegExp,Ar=yr&&yr.isSet,Er=yr&&yr.isTypedArray;function xr(n,r,t){switch(t.length){case 0:return n.call(r);case 1:return n.call(r,t[0]);case 2:return n.call(r,t[0],t[1]);case 3:return n.call(r,t[0],t[1],t[2])}return n.apply(r,t)}function jr(n,r,t,i){for(var e=-1,u=null==n?0:n.length;++e<u;){var o=n[e];r(i,o,t(o),n)}return i}function Sr(n,r){for(var t=-1,i=null==n?0:n.length;++t<i&&!1!==r(n[t],t,n););return n}function Tr(n,r){for(var t=null==n?0:n.length;t--&&!1!==r(n[t],t,n););return n}function Ur(n,r){for(var t=-1,i=null==n?0:n.length;++t<i;)if(!r(n[t],t,n))return!1;return!0}function Rr(n,r){for(var t=-1,i=null==n?0:n.length,e=0,u=[];++t<i;){var o=n[t];r(o,t,n)&&(u[e++]=o)}return u}function Cr(n,r){return!(null==n||!n.length)&&Wr(n,r,0)>-1}function Or(n,r,t){for(var i=-1,e=null==n?0:n.length;++i<e;)if(t(r,n[i]))return!0;return!1}function zr(n,r){for(var t=-1,i=null==n?0:n.length,e=Array(i);++t<i;)e[t]=r(n[t],t,n);return e}function Dr(n,r){for(var t=-1,i=r.length,e=n.length;++t<i;)n[e+t]=r[t];return n}function Fr(n,r,t,i){var e=-1,u=null==n?0:n.length;for(i&&u&&(t=n[++e]);++e<u;)t=r(t,n[e],e,n);return t}function Nr(n,r,t,i){var e=null==n?0:n.length;for(i&&e&&(t=n[--e]);e--;)t=r(t,n[e],e,n);return t}function Br(n,r){for(var t=-1,i=null==n?0:n.length;++t<i;)if(r(n[t],t,n))return!0;return!1}var Ir=Gr("length");function Lr(n,r,t){var i;return t(n,(function(n,t,e){if(r(n,t,e))return i=t,!1})),i}function Pr(n,r,t,i){for(var e=n.length,u=t+(i?1:-1);i?u--:++u<e;)if(r(n[u],u,n))return u;return-1}function Wr(n,r,t){return r==r?function(n,r,t){for(var i=t-1,e=n.length;++i<e;)if(n[i]===r)return i;return-1}(n,r,t):Pr(n,Mr,t)}function Zr(n,r,t,i){for(var e=t-1,u=n.length;++e<u;)if(i(n[e],r))return e;return-1}function Mr(n){return n!=n}function $r(n,r){var t=null==n?0:n.length;return t?qr(n,r)/t:d}function Gr(r){return function(t){return null==t?n:t[r]}}function Jr(r){return function(t){return null==r?n:r[t]}}function Hr(n,r,t,i,e){return e(n,(function(n,e,u){t=i?(i=!1,n):r(t,n,e,u)})),t}function qr(r,t){for(var i,e=-1,u=r.length;++e<u;){var o=t(r[e]);o!==n&&(i=i===n?o:i+o)}return i}function Kr(n,r){for(var t=-1,i=Array(n);++t<n;)i[t]=r(t);return i}function Yr(n){return n?n.slice(0,dt(n)+1).replace(on,""):n}function Vr(n){return function(r){return n(r)}}function Xr(n,r){return zr(r,(function(r){return n[r]}))}function Qr(n,r){return n.has(r)}function nt(n,r){for(var t=-1,i=n.length;++t<i&&Wr(r,n[t],0)>-1;);return t}function rt(n,r){for(var t=n.length;t--&&Wr(r,n[t],0)>-1;);return t}function tt(n,r){for(var t=n.length,i=0;t--;)n[t]===r&&++i;return i}var it=Jr({À:"A",Á:"A",Â:"A",Ã:"A",Ä:"A",Å:"A",à:"a",á:"a",â:"a",ã:"a",ä:"a",å:"a",Ç:"C",ç:"c",Ð:"D",ð:"d",È:"E",É:"E",Ê:"E",Ë:"E",è:"e",é:"e",ê:"e",ë:"e",Ì:"I",Í:"I",Î:"I",Ï:"I",ì:"i",í:"i",î:"i",ï:"i",Ñ:"N",ñ:"n",Ò:"O",Ó:"O",Ô:"O",Õ:"O",Ö:"O",Ø:"O",ò:"o",ó:"o",ô:"o",õ:"o",ö:"o",ø:"o",Ù:"U",Ú:"U",Û:"U",Ü:"U",ù:"u",ú:"u",û:"u",ü:"u",Ý:"Y",ý:"y",ÿ:"y",Æ:"Ae",æ:"ae",Þ:"Th",þ:"th",ß:"ss",Ā:"A",Ă:"A",Ą:"A",ā:"a",ă:"a",ą:"a",Ć:"C",Ĉ:"C",Ċ:"C",Č:"C",ć:"c",ĉ:"c",ċ:"c",č:"c",Ď:"D",Đ:"D",ď:"d",đ:"d",Ē:"E",Ĕ:"E",Ė:"E",Ę:"E",Ě:"E",ē:"e",ĕ:"e",ė:"e",ę:"e",ě:"e",Ĝ:"G",Ğ:"G",Ġ:"G",Ģ:"G",ĝ:"g",ğ:"g",ġ:"g",ģ:"g",Ĥ:"H",Ħ:"H",ĥ:"h",ħ:"h",Ĩ:"I",Ī:"I",Ĭ:"I",Į:"I",İ:"I",ĩ:"i",ī:"i",ĭ:"i",į:"i",ı:"i",Ĵ:"J",ĵ:"j",Ķ:"K",ķ:"k",ĸ:"k",Ĺ:"L",Ļ:"L",Ľ:"L",Ŀ:"L",Ł:"L",ĺ:"l",ļ:"l",ľ:"l",ŀ:"l",ł:"l",Ń:"N",Ņ:"N",Ň:"N",Ŋ:"N",ń:"n",ņ:"n",ň:"n",ŋ:"n",Ō:"O",Ŏ:"O",Ő:"O",ō:"o",ŏ:"o",ő:"o",Ŕ:"R",Ŗ:"R",Ř:"R",ŕ:"r",ŗ:"r",ř:"r",Ś:"S",Ŝ:"S",Ş:"S",Š:"S",ś:"s",ŝ:"s",ş:"s",š:"s",Ţ:"T",Ť:"T",Ŧ:"T",ţ:"t",ť:"t",ŧ:"t",Ũ:"U",Ū:"U",Ŭ:"U",Ů:"U",Ű:"U",Ų:"U",ũ:"u",ū:"u",ŭ:"u",ů:"u",ű:"u",ų:"u",Ŵ:"W",ŵ:"w",Ŷ:"Y",ŷ:"y",Ÿ:"Y",Ź:"Z",Ż:"Z",Ž:"Z",ź:"z",ż:"z",ž:"z",Ĳ:"IJ",ĳ:"ij",Œ:"Oe",œ:"oe",ŉ:"'n",ſ:"s"}),et=Jr({"&":"&amp;","<":"&lt;",">":"&gt;",'"':"&quot;","'":"&#39;"});function ut(n){return"\\"+ar[n]}function ot(n){return tr.test(n)}function ft(n){var r=-1,t=Array(n.size);return n.forEach((function(n,i){t[++r]=[i,n]})),t}function at(n,r){return function(t){return n(r(t))}}function st(n,r){for(var t=-1,i=n.length,e=0,u=[];++t<i;){var f=n[t];f!==r&&f!==o||(n[t]=o,u[e++]=t)}return u}function ct(n){var r=-1,t=Array(n.size);return n.forEach((function(n){t[++r]=n})),t}function ht(n){var r=-1,t=Array(n.size);return n.forEach((function(n){t[++r]=[n,n]})),t}function lt(n){return ot(n)?function(n){for(var r=nr.lastIndex=0;nr.test(n);)++r;return r}(n):Ir(n)}function vt(n){return ot(n)?function(n){return n.match(nr)||[]}(n):function(n){return n.split("")}(n)}function dt(n){for(var r=n.length;r--&&fn.test(n.charAt(r)););return r}var pt=Jr({"&amp;":"&","&lt;":"<","&gt;":">","&quot;":'"',"&#39;":"'"}),mt=function t(e){var u,fn=(e=null==e?vr:mt.defaults(vr.Object(),e,mt.pick(vr,er))).Array,En=e.Date,xn=e.Error,jn=e.Function,Sn=e.Math,Tn=e.Object,Un=e.RegExp,Rn=e.String,Cn=e.TypeError,On=fn.prototype,zn=jn.prototype,Dn=Tn.prototype,Fn=e["t"],Nn=zn.toString,Bn=Dn.hasOwnProperty,In=0,Ln=(u=/[^.]+$/.exec(Fn&&Fn.keys&&Fn.keys.IE_PROTO||""))?"Symbol(src)_1."+u:"",Pn=Dn.toString,Wn=Nn.call(Tn),Zn=vr._,Mn=Un("^"+Nn.call(Bn).replace(en,"\\$&").replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g,"$1.*?")+"$"),$n=mr?e.Buffer:n,Gn=e.Symbol,Jn=e.Uint8Array,Hn=$n?$n.allocUnsafe:n,qn=at(Tn.getPrototypeOf,Tn),Kn=Tn.create,Yn=Dn.propertyIsEnumerable,Vn=On.splice,nr=Gn?Gn.isConcatSpreadable:n,tr=Gn?Gn.iterator:n,ar=Gn?Gn.toStringTag:n,hr=function(){try{var n=vu(Tn,"defineProperty");return n({},"",{}),n}catch(n){}}(),lr=e.clearTimeout!==vr.clearTimeout&&e.clearTimeout,dr=En&&En.now!==vr.Date.now&&En.now,pr=e.setTimeout!==vr.setTimeout&&e.setTimeout,wr=Sn.ceil,yr=Sn.floor,Ir=Tn.getOwnPropertySymbols,Jr=$n?$n.isBuffer:n,wt=e.isFinite,yt=On.join,bt=at(Tn.keys,Tn),gt=Sn.max,kt=Sn.min,_t=En.now,At=e.parseInt,Et=Sn.random,xt=On.reverse,jt=vu(e,"DataView"),St=vu(e,"Map"),Tt=vu(e,"Promise"),Ut=vu(e,"Set"),Rt=vu(e,"WeakMap"),Ct=vu(Tn,"create"),Ot=Rt&&new Rt,zt={},Dt=Pu(jt),Ft=Pu(St),Nt=Pu(Tt),Bt=Pu(Ut),It=Pu(Rt),Lt=Gn?Gn.prototype:n,Pt=Lt?Lt.valueOf:n,Wt=Lt?Lt.toString:n;function Zt(n){if(uf(n)&&!Ho(n)&&!(n instanceof Jt)){if(n instanceof Gt)return n;if(Bn.call(n,"__wrapped__"))return Wu(n)}return new Gt(n)}var Mt=function(){function r(){}return function(t){if(!ef(t))return{};if(Kn)return Kn(t);r.prototype=t;var i=new r;return r.prototype=n,i}}();function $t(){}function Gt(r,t){this.i=r,this.u=[],this.o=!!t,this.h=0,this.l=n}function Jt(n){this.i=n,this.u=[],this.v=1,this.p=!1,this.m=[],this.g=p,this.k=[]}function Ht(n){var r=-1,t=null==n?0:n.length;for(this.clear();++r<t;){var i=n[r];this.set(i[0],i[1])}}function qt(n){var r=-1,t=null==n?0:n.length;for(this.clear();++r<t;){var i=n[r];this.set(i[0],i[1])}}function Kt(n){var r=-1,t=null==n?0:n.length;for(this.clear();++r<t;){var i=n[r];this.set(i[0],i[1])}}function Yt(n){var r=-1,t=null==n?0:n.length;for(this.A=new Kt;++r<t;)this.add(n[r])}function Vt(n){var r=this.A=new qt(n);this.size=r.size}function Xt(n,r){var t=Ho(n),i=!t&&Jo(n),e=!t&&!i&&Vo(n),u=!t&&!i&&!e&&vf(n),o=t||i||e||u,f=o?Kr(n.length,Rn):[],a=f.length;for(var s in n)!r&&!Bn.call(n,s)||o&&("length"==s||e&&("offset"==s||"parent"==s)||u&&("buffer"==s||"byteLength"==s||"byteOffset"==s)||gu(s,a))||f.push(s);return f}function Qt(r){var t=r.length;return t?r[Yi(0,t-1)]:n}function ni(n,r){return Bu(Ce(n),si(r,0,n.length))}function ri(n){return Bu(Ce(n))}function ti(r,t,i){(i!==n&&!Mo(r[t],i)||i===n&&!(t in r))&&fi(r,t,i)}function ii(r,t,i){var e=r[t];Bn.call(r,t)&&Mo(e,i)&&(i!==n||t in r)||fi(r,t,i)}function ei(n,r){for(var t=n.length;t--;)if(Mo(n[t][0],r))return t;return-1}function ui(n,r,t,i){return di(n,(function(n,e,u){r(i,n,t(n),u)})),i}function oi(n,r){return n&&Oe(r,Ff(r),n)}function fi(n,r,t){"__proto__"==r&&hr?hr(n,r,{configurable:!0,enumerable:!0,value:t,writable:!0}):n[r]=t}function ai(r,t){for(var i=-1,e=t.length,u=fn(e),o=null==r;++i<e;)u[i]=o?n:Rf(r,t[i]);return u}function si(r,t,i){return r==r&&(i!==n&&(r=r<=i?r:i),t!==n&&(r=r>=t?r:t)),r}function ci(r,t,i,e,u,o){var f,a=1&t,s=2&t,c=4&t;if(i&&(f=u?i(r,e,u,o):i(r)),f!==n)return f;if(!ef(r))return r;var h=Ho(r);if(h){if(f=function(n){var r=n.length,t=new n.constructor(r);return r&&"string"==typeof n[0]&&Bn.call(n,"index")&&(t.index=n.index,t.input=n.input),t}(r),!a)return Ce(r,f)}else{var l=mu(r),v=l==_||l==A;if(Vo(r))return xe(r,a);if(l==j||l==w||v&&!u){if(f=s||v?{}:yu(r),!a)return s?function(n,r){return Oe(n,pu(n),r)}(r,function(n,r){return n&&Oe(r,Nf(r),n)}(f,r)):function(n,r){return Oe(n,du(n),r)}(r,oi(f,r))}else{if(!fr[l])return u?r:{};f=function(n,r,t){var i,e=n.constructor;switch(r){case z:return je(n);case b:case g:return new e(+n);case D:return function(n,r){var t=r?je(n.buffer):n.buffer;return new n.constructor(t,n.byteOffset,n.byteLength)}(n,t);case F:case N:case B:case I:case L:case P:case W:case Z:case M:return Se(n,t);case E:return new e;case x:case R:return new e(n);case T:return function(n){var r=new n.constructor(n.source,pn.exec(n));return r.lastIndex=n.lastIndex,r}(n);case U:return new e;case C:return i=n,Pt?Tn(Pt.call(i)):{}}}(r,l,a)}}o||(o=new Vt);var d=o.get(r);if(d)return d;o.set(r,f),cf(r)?r.forEach((function(n){f.add(ci(n,t,i,n,r,o))})):of(r)&&r.forEach((function(n,e){f.set(e,ci(n,t,i,e,r,o))}));var p=h?n:(c?s?ou:uu:s?Nf:Ff)(r);return Sr(p||r,(function(n,e){p&&(n=r[e=n]),ii(f,e,ci(n,t,i,e,r,o))})),f}function hi(r,t,i){var e=i.length;if(null==r)return!e;for(r=Tn(r);e--;){var u=i[e],o=t[u],f=r[u];if(f===n&&!(u in r)||!o(f))return!1}return!0}function li(t,i,e){if("function"!=typeof t)throw new Cn(r);return zu((function(){t.apply(n,e)}),i)}function vi(n,r,t,i){var e=-1,u=Cr,o=!0,f=n.length,a=[],s=r.length;if(!f)return a;t&&(r=zr(r,Vr(t))),i?(u=Or,o=!1):r.length>=200&&(u=Qr,o=!1,r=new Yt(r));n:for(;++e<f;){var c=n[e],h=null==t?c:t(c);if(c=i||0!==c?c:0,o&&h==h){for(var l=s;l--;)if(r[l]===h)continue n;a.push(c)}else u(r,h,i)||a.push(c)}return a}Zt.templateSettings={escape:V,evaluate:X,interpolate:Q,variable:"",imports:{_:Zt}},Zt.prototype=$t.prototype,Zt.prototype.constructor=Zt,Gt.prototype=Mt($t.prototype),Gt.prototype.constructor=Gt,Jt.prototype=Mt($t.prototype),Jt.prototype.constructor=Jt,Ht.prototype.clear=function(){this.A=Ct?Ct(null):{},this.size=0},Ht.prototype.delete=function(n){var r=this.has(n)&&delete this.A[n];return this.size-=r?1:0,r},Ht.prototype.get=function(r){var t=this.A;if(Ct){var e=t[r];return e===i?n:e}return Bn.call(t,r)?t[r]:n},Ht.prototype.has=function(r){var t=this.A;return Ct?t[r]!==n:Bn.call(t,r)},Ht.prototype.set=function(r,t){var e=this.A;return this.size+=this.has(r)?0:1,e[r]=Ct&&t===n?i:t,this},qt.prototype.clear=function(){this.A=[],this.size=0},qt.prototype.delete=function(n){var r=this.A,t=ei(r,n);return!(t<0||(t==r.length-1?r.pop():Vn.call(r,t,1),--this.size,0))},qt.prototype.get=function(r){var t=this.A,i=ei(t,r);return i<0?n:t[i][1]},qt.prototype.has=function(n){return ei(this.A,n)>-1},qt.prototype.set=function(n,r){var t=this.A,i=ei(t,n);return i<0?(++this.size,t.push([n,r])):t[i][1]=r,this},Kt.prototype.clear=function(){this.size=0,this.A={hash:new Ht,map:new(St||qt),string:new Ht}},Kt.prototype.delete=function(n){var r=hu(this,n).delete(n);return this.size-=r?1:0,r},Kt.prototype.get=function(n){return hu(this,n).get(n)},Kt.prototype.has=function(n){return hu(this,n).has(n)},Kt.prototype.set=function(n,r){var t=hu(this,n),i=t.size;return t.set(n,r),this.size+=t.size==i?0:1,this},Yt.prototype.add=Yt.prototype.push=function(n){return this.A.set(n,i),this},Yt.prototype.has=function(n){return this.A.has(n)},Vt.prototype.clear=function(){this.A=new qt,this.size=0},Vt.prototype.delete=function(n){var r=this.A,t=r.delete(n);return this.size=r.size,t},Vt.prototype.get=function(n){return this.A.get(n)},Vt.prototype.has=function(n){return this.A.has(n)},Vt.prototype.set=function(n,r){var t=this.A;if(t instanceof qt){var i=t.A;if(!St||i.length<199)return i.push([n,r]),this.size=++t.size,this;t=this.A=new Kt(i)}return t.set(n,r),this.size=t.size,this};var di=Fe(_i),pi=Fe(Ai,!0);function mi(n,r){var t=!0;return di(n,(function(n,i,e){return t=!!r(n,i,e)})),t}function wi(r,t,i){for(var e=-1,u=r.length;++e<u;){var o=r[e],f=t(o);if(null!=f&&(a===n?f==f&&!lf(f):i(f,a)))var a=f,s=o}return s}function yi(n,r){var t=[];return di(n,(function(n,i,e){r(n,i,e)&&t.push(n)})),t}function bi(n,r,t,i,e){var u=-1,o=n.length;for(t||(t=bu),e||(e=[]);++u<o;){var f=n[u];r>0&&t(f)?r>1?bi(f,r-1,t,i,e):Dr(e,f):i||(e[e.length]=f)}return e}var gi=Ne(),ki=Ne(!0);function _i(n,r){return n&&gi(n,r,Ff)}function Ai(n,r){return n&&ki(n,r,Ff)}function Ei(n,r){return Rr(r,(function(r){return nf(n[r])}))}function xi(r,t){for(var i=0,e=(t=ke(t,r)).length;null!=r&&i<e;)r=r[Lu(t[i++])];return i&&i==e?r:n}function ji(n,r,t){var i=r(n);return Ho(n)?i:Dr(i,t(n))}function Si(r){return null==r?r===n?"[object Undefined]":"[object Null]":ar&&ar in Tn(r)?function(r){var t=Bn.call(r,ar),i=r[ar];try{r[ar]=n;var e=!0}catch(n){}var u=Pn.call(r);return e&&(t?r[ar]=i:delete r[ar]),u}(r):function(n){return Pn.call(n)}(r)}function Ti(n,r){return n>r}function Ui(n,r){return null!=n&&Bn.call(n,r)}function Ri(n,r){return null!=n&&r in Tn(n)}function Ci(r,t,i){for(var e=i?Or:Cr,u=r[0].length,o=r.length,f=o,a=fn(o),s=1/0,c=[];f--;){var h=r[f];f&&t&&(h=zr(h,Vr(t))),s=kt(h.length,s),a[f]=!i&&(t||u>=120&&h.length>=120)?new Yt(f&&h):n}h=r[0];var l=-1,v=a[0];n:for(;++l<u&&c.length<s;){var d=h[l],p=t?t(d):d;if(d=i||0!==d?d:0,!(v?Qr(v,p):e(c,p,i))){for(f=o;--f;){var m=a[f];if(!(m?Qr(m,p):e(r[f],p,i)))continue n}v&&v.push(p),c.push(d)}}return c}function Oi(r,t,i){var e=null==(r=Uu(r,t=ke(t,r)))?r:r[Lu(Xu(t))];return null==e?n:xr(e,r,i)}function zi(n){return uf(n)&&Si(n)==w}function Di(r,t,i,e,u){return r===t||(null==r||null==t||!uf(r)&&!uf(t)?r!=r&&t!=t:function(r,t,i,e,u,o){var f=Ho(r),a=Ho(t),s=f?y:mu(r),c=a?y:mu(t),h=(s=s==w?j:s)==j,l=(c=c==w?j:c)==j,v=s==c;if(v&&Vo(r)){if(!Vo(t))return!1;f=!0,h=!1}if(v&&!h)return o||(o=new Vt),f||vf(r)?iu(r,t,i,e,u,o):function(n,r,t,i,e,u,o){switch(t){case D:if(n.byteLength!=r.byteLength||n.byteOffset!=r.byteOffset)return!1;n=n.buffer,r=r.buffer;case z:return!(n.byteLength!=r.byteLength||!u(new Jn(n),new Jn(r)));case b:case g:case x:return Mo(+n,+r);case k:return n.name==r.name&&n.message==r.message;case T:case R:return n==r+"";case E:var f=ft;case U:var a=1&i;if(f||(f=ct),n.size!=r.size&&!a)return!1;var s=o.get(n);if(s)return s==r;i|=2,o.set(n,r);var c=iu(f(n),f(r),i,e,u,o);return o.delete(n),c;case C:if(Pt)return Pt.call(n)==Pt.call(r)}return!1}(r,t,s,i,e,u,o);if(!(1&i)){var d=h&&Bn.call(r,"__wrapped__"),p=l&&Bn.call(t,"__wrapped__");if(d||p){var m=d?r.value():r,_=p?t.value():t;return o||(o=new Vt),u(m,_,i,e,o)}}return!!v&&(o||(o=new Vt),function(r,t,i,e,u,o){var f=1&i,a=uu(r),s=a.length,c=uu(t).length;if(s!=c&&!f)return!1;for(var h=s;h--;){var l=a[h];if(!(f?l in t:Bn.call(t,l)))return!1}var v=o.get(r),d=o.get(t);if(v&&d)return v==t&&d==r;var p=!0;o.set(r,t),o.set(t,r);for(var m=f;++h<s;){var w=r[l=a[h]],y=t[l];if(e)var b=f?e(y,w,l,t,r,o):e(w,y,l,r,t,o);if(!(b===n?w===y||u(w,y,i,e,o):b)){p=!1;break}m||(m="constructor"==l)}if(p&&!m){var g=r.constructor,k=t.constructor;g==k||!("constructor"in r)||!("constructor"in t)||"function"==typeof g&&g instanceof g&&"function"==typeof k&&k instanceof k||(p=!1)}return o.delete(r),o.delete(t),p}(r,t,i,e,u,o))}(r,t,i,e,Di,u))}function Fi(r,t,i,e){var u=i.length,o=u,f=!e;if(null==r)return!o;for(r=Tn(r);u--;){var a=i[u];if(f&&a[2]?a[1]!==r[a[0]]:!(a[0]in r))return!1}for(;++u<o;){var s=(a=i[u])[0],c=r[s],h=a[1];if(f&&a[2]){if(c===n&&!(s in r))return!1}else{var l=new Vt;if(e)var v=e(c,h,s,r,t,l);if(!(v===n?Di(h,c,3,e,l):v))return!1}}return!0}function Ni(n){return!(!ef(n)||(r=n,Ln&&Ln in r))&&(nf(n)?Mn:yn).test(Pu(n));var r}function Bi(n){return"function"==typeof n?n:null==n?fa:"object"==typeof n?Ho(n)?Mi(n[0],n[1]):Zi(n):ma(n)}function Ii(n){if(!xu(n))return bt(n);var r=[];for(var t in Tn(n))Bn.call(n,t)&&"constructor"!=t&&r.push(t);return r}function Li(n){if(!ef(n))return function(n){var r=[];if(null!=n)for(var t in Tn(n))r.push(t);return r}(n);var r=xu(n),t=[];for(var i in n)("constructor"!=i||!r&&Bn.call(n,i))&&t.push(i);return t}function Pi(n,r){return n<r}function Wi(n,r){var t=-1,i=Ko(n)?fn(n.length):[];return di(n,(function(n,e,u){i[++t]=r(n,e,u)})),i}function Zi(n){var r=lu(n);return 1==r.length&&r[0][2]?Su(r[0][0],r[0][1]):function(t){return t===n||Fi(t,n,r)}}function Mi(r,t){return _u(r)&&ju(t)?Su(Lu(r),t):function(i){var e=Rf(i,r);return e===n&&e===t?Cf(i,r):Di(t,e,3)}}function $i(r,t,i,e,u){r!==t&&gi(t,(function(o,f){if(u||(u=new Vt),ef(o))!function(r,t,i,e,u,o,f){var a=Cu(r,i),s=Cu(t,i),c=f.get(s);if(c)ti(r,i,c);else{var h=o?o(a,s,i+"",r,t,f):n,l=h===n;if(l){var v=Ho(s),d=!v&&Vo(s),p=!v&&!d&&vf(s);h=s,v||d||p?Ho(a)?h=a:Yo(a)?h=Ce(a):d?(l=!1,h=xe(s,!0)):p?(l=!1,h=Se(s,!0)):h=[]:af(s)||Jo(s)?(h=a,Jo(a)?h=kf(a):ef(a)&&!nf(a)||(h=yu(s))):l=!1}l&&(f.set(s,h),u(h,s,e,o,f),f.delete(s)),ti(r,i,h)}}(r,t,f,i,$i,e,u);else{var a=e?e(Cu(r,f),o,f+"",r,t,u):n;a===n&&(a=o),ti(r,f,a)}}),Nf)}function Gi(r,t){var i=r.length;if(i)return gu(t+=t<0?i:0,i)?r[t]:n}function Ji(n,r,t){r=r.length?zr(r,(function(n){return Ho(n)?function(r){return xi(r,1===n.length?n[0]:n)}:n})):[fa];var i=-1;r=zr(r,Vr(cu()));var e=Wi(n,(function(n,t,e){var u=zr(r,(function(r){return r(n)}));return{criteria:u,index:++i,value:n}}));return function(n,r){var t=n.length;for(n.sort(r);t--;)n[t]=n[t].value;return n}(e,(function(n,r){return function(n,r,t){for(var i=-1,e=n.criteria,u=r.criteria,o=e.length,f=t.length;++i<o;){var a=Te(e[i],u[i]);if(a)return i>=f?a:a*("desc"==t[i]?-1:1)}return n.index-r.index}(n,r,t)}))}function Hi(n,r,t){for(var i=-1,e=r.length,u={};++i<e;){var o=r[i],f=xi(n,o);t(f,o)&&re(u,ke(o,n),f)}return u}function qi(n,r,t,i){var e=i?Zr:Wr,u=-1,o=r.length,f=n;for(n===r&&(r=Ce(r)),t&&(f=zr(n,Vr(t)));++u<o;)for(var a=0,s=r[u],c=t?t(s):s;(a=e(f,c,a,i))>-1;)f!==n&&Vn.call(f,a,1),Vn.call(n,a,1);return n}function Ki(n,r){for(var t=n?r.length:0,i=t-1;t--;){var e=r[t];if(t==i||e!==u){var u=e;gu(e)?Vn.call(n,e,1):ve(n,e)}}return n}function Yi(n,r){return n+yr(Et()*(r-n+1))}function Vi(n,r){var t="";if(!n||r<1||r>v)return t;do{r%2&&(t+=n),(r=yr(r/2))&&(n+=n)}while(r);return t}function Xi(n,r){return Du(Tu(n,r,fa),n+"")}function Qi(n){return Qt($f(n))}function ne(n,r){var t=$f(n);return Bu(t,si(r,0,t.length))}function re(r,t,i,e){if(!ef(r))return r;for(var u=-1,o=(t=ke(t,r)).length,f=o-1,a=r;null!=a&&++u<o;){var s=Lu(t[u]),c=i;if("__proto__"===s||"constructor"===s||"prototype"===s)return r;if(u!=f){var h=a[s];(c=e?e(h,s,a):n)===n&&(c=ef(h)?h:gu(t[u+1])?[]:{})}ii(a,s,c),a=a[s]}return r}var te=Ot?function(n,r){return Ot.set(n,r),n}:fa,ie=hr?function(n,r){return hr(n,"toString",{configurable:!0,enumerable:!1,value:ea(r),writable:!0})}:fa;function ee(n){return Bu($f(n))}function ue(n,r,t){var i=-1,e=n.length;r<0&&(r=-r>e?0:e+r),(t=t>e?e:t)<0&&(t+=e),e=r>t?0:t-r>>>0,r>>>=0;for(var u=fn(e);++i<e;)u[i]=n[i+r];return u}function oe(n,r){var t;return di(n,(function(n,i,e){return!(t=r(n,i,e))})),!!t}function fe(n,r,t){var i=0,e=null==n?i:n.length;if("number"==typeof r&&r==r&&e<=2147483647){for(;i<e;){var u=i+e>>>1,o=n[u];null!==o&&!lf(o)&&(t?o<=r:o<r)?i=u+1:e=u}return e}return ae(n,r,fa,t)}function ae(r,t,i,e){var u=0,o=null==r?0:r.length;if(0===o)return 0;for(var f=(t=i(t))!=t,a=null===t,s=lf(t),c=t===n;u<o;){var h=yr((u+o)/2),l=i(r[h]),v=l!==n,d=null===l,p=l==l,m=lf(l);if(f)var w=e||p;else w=c?p&&(e||v):a?p&&v&&(e||!d):s?p&&v&&!d&&(e||!m):!d&&!m&&(e?l<=t:l<t);w?u=h+1:o=h}return kt(o,4294967294)}function se(n,r){for(var t=-1,i=n.length,e=0,u=[];++t<i;){var o=n[t],f=r?r(o):o;if(!t||!Mo(f,a)){var a=f;u[e++]=0===o?0:o}}return u}function ce(n){return"number"==typeof n?n:lf(n)?d:+n}function he(n){if("string"==typeof n)return n;if(Ho(n))return zr(n,he)+"";if(lf(n))return Wt?Wt.call(n):"";var r=n+"";return"0"==r&&1/n==-1/0?"-0":r}function le(n,r,t){var i=-1,e=Cr,u=n.length,o=!0,f=[],a=f;if(t)o=!1,e=Or;else if(u>=200){var s=r?null:Ve(n);if(s)return ct(s);o=!1,e=Qr,a=new Yt}else a=r?[]:f;n:for(;++i<u;){var c=n[i],h=r?r(c):c;if(c=t||0!==c?c:0,o&&h==h){for(var l=a.length;l--;)if(a[l]===h)continue n;r&&a.push(h),f.push(c)}else e(a,h,t)||(a!==f&&a.push(h),f.push(c))}return f}function ve(n,r){return null==(n=Uu(n,r=ke(r,n)))||delete n[Lu(Xu(r))]}function de(n,r,t,i){return re(n,r,t(xi(n,r)),i)}function pe(n,r,t,i){for(var e=n.length,u=i?e:-1;(i?u--:++u<e)&&r(n[u],u,n););return t?ue(n,i?0:u,i?u+1:e):ue(n,i?u+1:0,i?e:u)}function me(n,r){var t=n;return t instanceof Jt&&(t=t.value()),Fr(r,(function(n,r){return r.func.apply(r.thisArg,Dr([n],r.args))}),t)}function we(n,r,t){var i=n.length;if(i<2)return i?le(n[0]):[];for(var e=-1,u=fn(i);++e<i;)for(var o=n[e],f=-1;++f<i;)f!=e&&(u[e]=vi(u[e]||o,n[f],r,t));return le(bi(u,1),r,t)}function ye(r,t,i){for(var e=-1,u=r.length,o=t.length,f={};++e<u;){var a=e<o?t[e]:n;i(f,r[e],a)}return f}function be(n){return Yo(n)?n:[]}function ge(n){return"function"==typeof n?n:fa}function ke(n,r){return Ho(n)?n:_u(n,r)?[n]:Iu(_f(n))}var _e=Xi;function Ae(r,t,i){var e=r.length;return i=i===n?e:i,!t&&i>=e?r:ue(r,t,i)}var Ee=lr||function(n){return vr.clearTimeout(n)};function xe(n,r){if(r)return n.slice();var t=n.length,i=Hn?Hn(t):new n.constructor(t);return n.copy(i),i}function je(n){var r=new n.constructor(n.byteLength);return new Jn(r).set(new Jn(n)),r}function Se(n,r){var t=r?je(n.buffer):n.buffer;return new n.constructor(t,n.byteOffset,n.length)}function Te(r,t){if(r!==t){var i=r!==n,e=null===r,u=r==r,o=lf(r),f=t!==n,a=null===t,s=t==t,c=lf(t);if(!a&&!c&&!o&&r>t||o&&f&&s&&!a&&!c||e&&f&&s||!i&&s||!u)return 1;if(!e&&!o&&!c&&r<t||c&&i&&u&&!e&&!o||a&&i&&u||!f&&u||!s)return-1}return 0}function Ue(n,r,t,i){for(var e=-1,u=n.length,o=t.length,f=-1,a=r.length,s=gt(u-o,0),c=fn(a+s),h=!i;++f<a;)c[f]=r[f];for(;++e<o;)(h||e<u)&&(c[t[e]]=n[e]);for(;s--;)c[f++]=n[e++];return c}function Re(n,r,t,i){for(var e=-1,u=n.length,o=-1,f=t.length,a=-1,s=r.length,c=gt(u-f,0),h=fn(c+s),l=!i;++e<c;)h[e]=n[e];for(var v=e;++a<s;)h[v+a]=r[a];for(;++o<f;)(l||e<u)&&(h[v+t[o]]=n[e++]);return h}function Ce(n,r){var t=-1,i=n.length;for(r||(r=fn(i));++t<i;)r[t]=n[t];return r}function Oe(r,t,i,e){var u=!i;i||(i={});for(var o=-1,f=t.length;++o<f;){var a=t[o],s=e?e(i[a],r[a],a,i,r):n;s===n&&(s=r[a]),u?fi(i,a,s):ii(i,a,s)}return i}function ze(n,r){return function(t,i){var e=Ho(t)?jr:ui,u=r?r():{};return e(t,n,cu(i,2),u)}}function De(r){return Xi((function(t,i){var e=-1,u=i.length,o=u>1?i[u-1]:n,f=u>2?i[2]:n;for(o=r.length>3&&"function"==typeof o?(u--,o):n,f&&ku(i[0],i[1],f)&&(o=u<3?n:o,u=1),t=Tn(t);++e<u;){var a=i[e];a&&r(t,a,e,o)}return t}))}function Fe(n,r){return function(t,i){if(null==t)return t;if(!Ko(t))return n(t,i);for(var e=t.length,u=r?e:-1,o=Tn(t);(r?u--:++u<e)&&!1!==i(o[u],u,o););return t}}function Ne(n){return function(r,t,i){for(var e=-1,u=Tn(r),o=i(r),f=o.length;f--;){var a=o[n?f:++e];if(!1===t(u[a],a,u))break}return r}}function Be(r){return function(t){var i=ot(t=_f(t))?vt(t):n,e=i?i[0]:t.charAt(0),u=i?Ae(i,1).join(""):t.slice(1);return e[r]()+u}}function Ie(n){return function(r){return Fr(ra(Hf(r).replace(Xn,"")),n,"")}}function Le(n){return function(){var r=arguments;switch(r.length){case 0:return new n;case 1:return new n(r[0]);case 2:return new n(r[0],r[1]);case 3:return new n(r[0],r[1],r[2]);case 4:return new n(r[0],r[1],r[2],r[3]);case 5:return new n(r[0],r[1],r[2],r[3],r[4]);case 6:return new n(r[0],r[1],r[2],r[3],r[4],r[5]);case 7:return new n(r[0],r[1],r[2],r[3],r[4],r[5],r[6])}var t=Mt(n.prototype),i=n.apply(t,r);return ef(i)?i:t}}function Pe(r){return function(t,i,e){var u=Tn(t);if(!Ko(t)){var o=cu(i,3);t=Ff(t),i=function(n){return o(u[n],n,u)}}var f=r(t,i,e);return f>-1?u[o?t[f]:f]:n}}function We(t){return eu((function(i){var e=i.length,u=e,o=Gt.prototype.thru;for(t&&i.reverse();u--;){var f=i[u];if("function"!=typeof f)throw new Cn(r);if(o&&!a&&"wrapper"==au(f))var a=new Gt([],!0)}for(u=a?u:e;++u<e;){var s=au(f=i[u]),c="wrapper"==s?fu(f):n;a=c&&Au(c[0])&&424==c[1]&&!c[4].length&&1==c[9]?a[au(c[0])].apply(a,c[3]):1==f.length&&Au(f)?a[s]():a.thru(f)}return function(){var n=arguments,r=n[0];if(a&&1==n.length&&Ho(r))return a.plant(r).value();for(var t=0,u=e?i[t].apply(this,n):r;++t<e;)u=i[t].call(this,u);return u}}))}function Ze(r,t,i,e,u,o,f,a,s,h){var l=t&c,v=1&t,d=2&t,p=24&t,m=512&t,w=d?n:Le(r);return function n(){for(var c=arguments.length,y=fn(c),b=c;b--;)y[b]=arguments[b];if(p)var g=su(n),k=tt(y,g);if(e&&(y=Ue(y,e,u,p)),o&&(y=Re(y,o,f,p)),c-=k,p&&c<h){var _=st(y,g);return Ke(r,t,Ze,n.placeholder,i,y,_,a,s,h-c)}var A=v?i:this,E=d?A[r]:r;return c=y.length,a?y=Ru(y,a):m&&c>1&&y.reverse(),l&&s<c&&(y.length=s),this&&this!==vr&&this instanceof n&&(E=w||Le(E)),E.apply(A,y)}}function Me(n,r){return function(t,i){return function(n,r,t,i){return _i(n,(function(n,e,u){r(i,t(n),e,u)})),i}(t,n,r(i),{})}}function $e(r,t){return function(i,e){var u;if(i===n&&e===n)return t;if(i!==n&&(u=i),e!==n){if(u===n)return e;"string"==typeof i||"string"==typeof e?(i=he(i),e=he(e)):(i=ce(i),e=ce(e)),u=r(i,e)}return u}}function Ge(n){return eu((function(r){return r=zr(r,Vr(cu())),Xi((function(t){var i=this;return n(r,(function(n){return xr(n,i,t)}))}))}))}function Je(r,t){var i=(t=t===n?" ":he(t)).length;if(i<2)return i?Vi(t,r):t;var e=Vi(t,wr(r/lt(t)));return ot(t)?Ae(vt(e),0,r).join(""):e.slice(0,r)}function He(r){return function(t,i,e){return e&&"number"!=typeof e&&ku(t,i,e)&&(i=e=n),t=wf(t),i===n?(i=t,t=0):i=wf(i),function(n,r,t,i){for(var e=-1,u=gt(wr((r-n)/(t||1)),0),o=fn(u);u--;)o[i?u:++e]=n,n+=t;return o}(t,i,e=e===n?t<i?1:-1:wf(e),r)}}function qe(n){return function(r,t){return"string"==typeof r&&"string"==typeof t||(r=gf(r),t=gf(t)),n(r,t)}}function Ke(r,t,i,e,u,o,f,c,h,l){var v=8&t;t|=v?a:s,4&(t&=~(v?s:a))||(t&=-4);var d=[r,t,u,v?o:n,v?f:n,v?n:o,v?n:f,c,h,l],p=i.apply(n,d);return Au(r)&&Ou(p,d),p.placeholder=e,Fu(p,r,t)}function Ye(n){var r=Sn[n];return function(n,t){if(n=gf(n),(t=null==t?0:kt(yf(t),292))&&wt(n)){var i=(_f(n)+"e").split("e");return+((i=(_f(r(i[0]+"e"+(+i[1]+t)))+"e").split("e"))[0]+"e"+(+i[1]-t))}return r(n)}}var Ve=Ut&&1/ct(new Ut([,-0]))[1]==l?function(n){return new Ut(n)}:la;function Xe(n){return function(r){var t=mu(r);return t==E?ft(r):t==U?ht(r):function(n,r){return zr(r,(function(r){return[r,n[r]]}))}(r,n(r))}}function Qe(t,i,e,u,l,v,d,p){var m=2&i;if(!m&&"function"!=typeof t)throw new Cn(r);var w=u?u.length:0;if(w||(i&=-97,u=l=n),d=d===n?d:gt(yf(d),0),p=p===n?p:yf(p),w-=l?l.length:0,i&s){var y=u,b=l;u=l=n}var g=m?n:fu(t),k=[t,i,e,u,l,y,b,v,d,p];if(g&&function(n,r){var t=n[1],i=r[1],e=t|i,u=e<131,f=i==c&&8==t||i==c&&t==h&&n[7].length<=r[8]||384==i&&r[7].length<=r[8]&&8==t;if(!u&&!f)return n;1&i&&(n[2]=r[2],e|=1&t?0:4);var a=r[3];if(a){var s=n[3];n[3]=s?Ue(s,a,r[4]):a,n[4]=s?st(n[3],o):r[4]}(a=r[5])&&(s=n[5],n[5]=s?Re(s,a,r[6]):a,n[6]=s?st(n[5],o):r[6]),(a=r[7])&&(n[7]=a),i&c&&(n[8]=null==n[8]?r[8]:kt(n[8],r[8])),null==n[9]&&(n[9]=r[9]),n[0]=r[0],n[1]=e}(k,g),t=k[0],i=k[1],e=k[2],u=k[3],l=k[4],!(p=k[9]=k[9]===n?m?0:t.length:gt(k[9]-w,0))&&24&i&&(i&=-25),i&&1!=i)_=8==i||i==f?function(r,t,i){var e=Le(r);return function u(){for(var o=arguments.length,f=fn(o),a=o,s=su(u);a--;)f[a]=arguments[a];var c=o<3&&f[0]!==s&&f[o-1]!==s?[]:st(f,s);return(o-=c.length)<i?Ke(r,t,Ze,u.placeholder,n,f,c,n,n,i-o):xr(this&&this!==vr&&this instanceof u?e:r,this,f)}}(t,i,p):i!=a&&33!=i||l.length?Ze.apply(n,k):function(n,r,t,i){var e=1&r,u=Le(n);return function r(){for(var o=-1,f=arguments.length,a=-1,s=i.length,c=fn(s+f),h=this&&this!==vr&&this instanceof r?u:n;++a<s;)c[a]=i[a];for(;f--;)c[a++]=arguments[++o];return xr(h,e?t:this,c)}}(t,i,e,u);else var _=function(n,r,t){var i=1&r,e=Le(n);return function r(){return(this&&this!==vr&&this instanceof r?e:n).apply(i?t:this,arguments)}}(t,i,e);return Fu((g?te:Ou)(_,k),t,i)}function nu(r,t,i,e){return r===n||Mo(r,Dn[i])&&!Bn.call(e,i)?t:r}function ru(r,t,i,e,u,o){return ef(r)&&ef(t)&&(o.set(t,r),$i(r,t,n,ru,o),o.delete(t)),r}function tu(r){return af(r)?n:r}function iu(r,t,i,e,u,o){var f=1&i,a=r.length,s=t.length;if(a!=s&&!(f&&s>a))return!1;var c=o.get(r),h=o.get(t);if(c&&h)return c==t&&h==r;var l=-1,v=!0,d=2&i?new Yt:n;for(o.set(r,t),o.set(t,r);++l<a;){var p=r[l],m=t[l];if(e)var w=f?e(m,p,l,t,r,o):e(p,m,l,r,t,o);if(w!==n){if(w)continue;v=!1;break}if(d){if(!Br(t,(function(n,r){if(!Qr(d,r)&&(p===n||u(p,n,i,e,o)))return d.push(r)}))){v=!1;break}}else if(p!==m&&!u(p,m,i,e,o)){v=!1;break}}return o.delete(r),o.delete(t),v}function eu(r){return Du(Tu(r,n,Hu),r+"")}function uu(n){return ji(n,Ff,du)}function ou(n){return ji(n,Nf,pu)}var fu=Ot?function(n){return Ot.get(n)}:la;function au(n){for(var r=n.name+"",t=zt[r],i=Bn.call(zt,r)?t.length:0;i--;){var e=t[i],u=e.func;if(null==u||u==n)return e.name}return r}function su(n){return(Bn.call(Zt,"placeholder")?Zt:n).placeholder}function cu(){var n=Zt.iteratee||aa;return n=n===aa?Bi:n,arguments.length?n(arguments[0],arguments[1]):n}function hu(n,r){var t,i,e=n.A;return("string"==(i=typeof(t=r))||"number"==i||"symbol"==i||"boolean"==i?"__proto__"!==t:null===t)?e["string"==typeof r?"string":"hash"]:e.map}function lu(n){for(var r=Ff(n),t=r.length;t--;){var i=r[t],e=n[i];r[t]=[i,e,ju(e)]}return r}function vu(r,t){var i=function(r,t){return null==r?n:r[t]}(r,t);return Ni(i)?i:n}var du=Ir?function(n){return null==n?[]:(n=Tn(n),Rr(Ir(n),(function(r){return Yn.call(n,r)})))}:ba,pu=Ir?function(n){for(var r=[];n;)Dr(r,du(n)),n=qn(n);return r}:ba,mu=Si;function wu(n,r,t){for(var i=-1,e=(r=ke(r,n)).length,u=!1;++i<e;){var o=Lu(r[i]);if(!(u=null!=n&&t(n,o)))break;n=n[o]}return u||++i!=e?u:!!(e=null==n?0:n.length)&&tf(e)&&gu(o,e)&&(Ho(n)||Jo(n))}function yu(n){return"function"!=typeof n.constructor||xu(n)?{}:Mt(qn(n))}function bu(n){return Ho(n)||Jo(n)||!!(nr&&n&&n[nr])}function gu(n,r){var t=typeof n;return!!(r=null==r?v:r)&&("number"==t||"symbol"!=t&&gn.test(n))&&n>-1&&n%1==0&&n<r}function ku(n,r,t){if(!ef(t))return!1;var i=typeof r;return!!("number"==i?Ko(t)&&gu(r,t.length):"string"==i&&r in t)&&Mo(t[r],n)}function _u(n,r){if(Ho(n))return!1;var t=typeof n;return!("number"!=t&&"symbol"!=t&&"boolean"!=t&&null!=n&&!lf(n))||rn.test(n)||!nn.test(n)||null!=r&&n in Tn(r)}function Au(n){var r=au(n),t=Zt[r];if("function"!=typeof t||!(r in Jt.prototype))return!1;if(n===t)return!0;var i=fu(t);return!!i&&n===i[0]}(jt&&mu(new jt(new ArrayBuffer(1)))!=D||St&&mu(new St)!=E||Tt&&mu(Tt.resolve())!=S||Ut&&mu(new Ut)!=U||Rt&&mu(new Rt)!=O)&&(mu=function(r){var t=Si(r),i=t==j?r.constructor:n,e=i?Pu(i):"";if(e)switch(e){case Dt:return D;case Ft:return E;case Nt:return S;case Bt:return U;case It:return O}return t});var Eu=Fn?nf:ga;function xu(n){var r=n&&n.constructor;return n===("function"==typeof r&&r.prototype||Dn)}function ju(n){return n==n&&!ef(n)}function Su(r,t){return function(i){return null!=i&&i[r]===t&&(t!==n||r in Tn(i))}}function Tu(r,t,i){return t=gt(t===n?r.length-1:t,0),function(){for(var n=arguments,e=-1,u=gt(n.length-t,0),o=fn(u);++e<u;)o[e]=n[t+e];e=-1;for(var f=fn(t+1);++e<t;)f[e]=n[e];return f[t]=i(o),xr(r,this,f)}}function Uu(n,r){return r.length<2?n:xi(n,ue(r,0,-1))}function Ru(r,t){for(var i=r.length,e=kt(t.length,i),u=Ce(r);e--;){var o=t[e];r[e]=gu(o,i)?u[o]:n}return r}function Cu(n,r){if(("constructor"!==r||"function"!=typeof n[r])&&"__proto__"!=r)return n[r]}var Ou=Nu(te),zu=pr||function(n,r){return vr.setTimeout(n,r)},Du=Nu(ie);function Fu(n,r,t){var i=r+"";return Du(n,function(n,r){var t=r.length;if(!t)return n;var i=t-1;return r[i]=(t>1?"& ":"")+r[i],r=r.join(t>2?", ":" "),n.replace(an,"{\n/* [wrapped with "+r+"] */\n")}(i,function(n,r){return Sr(m,(function(t){var i="_."+t[0];r&t[1]&&!Cr(n,i)&&n.push(i)})),n.sort()}(function(n){var r=n.match(sn);return r?r[1].split(cn):[]}(i),t)))}function Nu(r){var t=0,i=0;return function(){var e=_t(),u=16-(e-i);if(i=e,u>0){if(++t>=800)return arguments[0]}else t=0;return r.apply(n,arguments)}}function Bu(r,t){var i=-1,e=r.length,u=e-1;for(t=t===n?e:t;++i<t;){var o=Yi(i,u),f=r[o];r[o]=r[i],r[i]=f}return r.length=t,r}var Iu=function(n){var r=Bo(n,(function(n){return 500===t.size&&t.clear(),n})),t=r.cache;return r}((function(n){var r=[];return 46===n.charCodeAt(0)&&r.push(""),n.replace(tn,(function(n,t,i,e){r.push(i?e.replace(vn,"$1"):t||n)})),r}));function Lu(n){if("string"==typeof n||lf(n))return n;var r=n+"";return"0"==r&&1/n==-1/0?"-0":r}function Pu(n){if(null!=n){try{return Nn.call(n)}catch(n){}try{return n+""}catch(n){}}return""}function Wu(n){if(n instanceof Jt)return n.clone();var r=new Gt(n.i,n.o);return r.u=Ce(n.u),r.h=n.h,r.l=n.l,r}var Zu=Xi((function(n,r){return Yo(n)?vi(n,bi(r,1,Yo,!0)):[]})),Mu=Xi((function(r,t){var i=Xu(t);return Yo(i)&&(i=n),Yo(r)?vi(r,bi(t,1,Yo,!0),cu(i,2)):[]})),$u=Xi((function(r,t){var i=Xu(t);return Yo(i)&&(i=n),Yo(r)?vi(r,bi(t,1,Yo,!0),n,i):[]}));function Gu(n,r,t){var i=null==n?0:n.length;if(!i)return-1;var e=null==t?0:yf(t);return e<0&&(e=gt(i+e,0)),Pr(n,cu(r,3),e)}function Ju(r,t,i){var e=null==r?0:r.length;if(!e)return-1;var u=e-1;return i!==n&&(u=yf(i),u=i<0?gt(e+u,0):kt(u,e-1)),Pr(r,cu(t,3),u,!0)}function Hu(n){return null!=n&&n.length?bi(n,1):[]}function qu(r){return r&&r.length?r[0]:n}var Ku=Xi((function(n){var r=zr(n,be);return r.length&&r[0]===n[0]?Ci(r):[]})),Yu=Xi((function(r){var t=Xu(r),i=zr(r,be);return t===Xu(i)?t=n:i.pop(),i.length&&i[0]===r[0]?Ci(i,cu(t,2)):[]})),Vu=Xi((function(r){var t=Xu(r),i=zr(r,be);return(t="function"==typeof t?t:n)&&i.pop(),i.length&&i[0]===r[0]?Ci(i,n,t):[]}));function Xu(r){var t=null==r?0:r.length;return t?r[t-1]:n}var Qu=Xi(no);function no(n,r){return n&&n.length&&r&&r.length?qi(n,r):n}var ro=eu((function(n,r){var t=null==n?0:n.length,i=ai(n,r);return Ki(n,zr(r,(function(n){return gu(n,t)?+n:n})).sort(Te)),i}));function to(n){return null==n?n:xt.call(n)}var io=Xi((function(n){return le(bi(n,1,Yo,!0))})),eo=Xi((function(r){var t=Xu(r);return Yo(t)&&(t=n),le(bi(r,1,Yo,!0),cu(t,2))})),uo=Xi((function(r){var t=Xu(r);return t="function"==typeof t?t:n,le(bi(r,1,Yo,!0),n,t)}));function oo(n){if(!n||!n.length)return[];var r=0;return n=Rr(n,(function(n){if(Yo(n))return r=gt(n.length,r),!0})),Kr(r,(function(r){return zr(n,Gr(r))}))}function fo(r,t){if(!r||!r.length)return[];var i=oo(r);return null==t?i:zr(i,(function(r){return xr(t,n,r)}))}var ao=Xi((function(n,r){return Yo(n)?vi(n,r):[]})),so=Xi((function(n){return we(Rr(n,Yo))})),co=Xi((function(r){var t=Xu(r);return Yo(t)&&(t=n),we(Rr(r,Yo),cu(t,2))})),ho=Xi((function(r){var t=Xu(r);return t="function"==typeof t?t:n,we(Rr(r,Yo),n,t)})),lo=Xi(oo),vo=Xi((function(r){var t=r.length,i=t>1?r[t-1]:n;return i="function"==typeof i?(r.pop(),i):n,fo(r,i)}));function po(n){var r=Zt(n);return r.o=!0,r}function mo(n,r){return r(n)}var wo=eu((function(r){var t=r.length,i=t?r[0]:0,e=this.i,u=function(n){return ai(n,r)};return!(t>1||this.u.length)&&e instanceof Jt&&gu(i)?((e=e.slice(i,+i+(t?1:0))).u.push({func:mo,args:[u],thisArg:n}),new Gt(e,this.o).thru((function(r){return t&&!r.length&&r.push(n),r}))):this.thru(u)})),yo=ze((function(n,r,t){Bn.call(n,t)?++n[t]:fi(n,t,1)})),bo=Pe(Gu),go=Pe(Ju);function ko(n,r){return(Ho(n)?Sr:di)(n,cu(r,3))}function _o(n,r){return(Ho(n)?Tr:pi)(n,cu(r,3))}var Ao=ze((function(n,r,t){Bn.call(n,t)?n[t].push(r):fi(n,t,[r])})),Eo=Xi((function(n,r,t){var i=-1,e="function"==typeof r,u=Ko(n)?fn(n.length):[];return di(n,(function(n){u[++i]=e?xr(r,n,t):Oi(n,r,t)})),u})),xo=ze((function(n,r,t){fi(n,t,r)}));function jo(n,r){return(Ho(n)?zr:Wi)(n,cu(r,3))}var So=ze((function(n,r,t){n[t?0:1].push(r)}),(function(){return[[],[]]})),To=Xi((function(n,r){if(null==n)return[];var t=r.length;return t>1&&ku(n,r[0],r[1])?r=[]:t>2&&ku(r[0],r[1],r[2])&&(r=[r[0]]),Ji(n,bi(r,1),[])})),Uo=dr||function(){return vr.Date.now()};function Ro(r,t,i){return t=i?n:t,t=r&&null==t?r.length:t,Qe(r,c,n,n,n,n,t)}function Co(t,i){var e;if("function"!=typeof i)throw new Cn(r);return t=yf(t),function(){return--t>0&&(e=i.apply(this,arguments)),t<=1&&(i=n),e}}var Oo=Xi((function(n,r,t){var i=1;if(t.length){var e=st(t,su(Oo));i|=a}return Qe(n,i,r,t,e)})),zo=Xi((function(n,r,t){var i=3;if(t.length){var e=st(t,su(zo));i|=a}return Qe(r,i,n,t,e)}));function Do(t,i,e){var u,o,f,a,s,c,h=0,l=!1,v=!1,d=!0;if("function"!=typeof t)throw new Cn(r);function p(r){var i=u,e=o;return u=o=n,h=r,a=t.apply(e,i)}function m(n){return h=n,s=zu(y,i),l?p(n):a}function w(r){var t=r-c;return c===n||t>=i||t<0||v&&r-h>=f}function y(){var n=Uo();if(w(n))return b(n);s=zu(y,function(n){var r=i-(n-c);return v?kt(r,f-(n-h)):r}(n))}function b(r){return s=n,d&&u?p(r):(u=o=n,a)}function g(){var r=Uo(),t=w(r);if(u=arguments,o=this,c=r,t){if(s===n)return m(c);if(v)return Ee(s),s=zu(y,i),p(c)}return s===n&&(s=zu(y,i)),a}return i=gf(i)||0,ef(e)&&(l=!!e.leading,f=(v="maxWait"in e)?gt(gf(e.maxWait)||0,i):f,d="trailing"in e?!!e.trailing:d),g.cancel=function(){s!==n&&Ee(s),h=0,u=c=o=s=n},g.flush=function(){return s===n?a:b(Uo())},g}var Fo=Xi((function(n,r){return li(n,1,r)})),No=Xi((function(n,r,t){return li(n,gf(r)||0,t)}));function Bo(n,t){if("function"!=typeof n||null!=t&&"function"!=typeof t)throw new Cn(r);var i=function(){var r=arguments,e=t?t.apply(this,r):r[0],u=i.cache;if(u.has(e))return u.get(e);var o=n.apply(this,r);return i.cache=u.set(e,o)||u,o};return i.cache=new(Bo.Cache||Kt),i}function Io(n){if("function"!=typeof n)throw new Cn(r);return function(){var r=arguments;switch(r.length){case 0:return!n.call(this);case 1:return!n.call(this,r[0]);case 2:return!n.call(this,r[0],r[1]);case 3:return!n.call(this,r[0],r[1],r[2])}return!n.apply(this,r)}}Bo.Cache=Kt;var Lo=_e((function(n,r){var t=(r=1==r.length&&Ho(r[0])?zr(r[0],Vr(cu())):zr(bi(r,1),Vr(cu()))).length;return Xi((function(i){for(var e=-1,u=kt(i.length,t);++e<u;)i[e]=r[e].call(this,i[e]);return xr(n,this,i)}))})),Po=Xi((function(r,t){var i=st(t,su(Po));return Qe(r,a,n,t,i)})),Wo=Xi((function(r,t){var i=st(t,su(Wo));return Qe(r,s,n,t,i)})),Zo=eu((function(r,t){return Qe(r,h,n,n,n,t)}));function Mo(n,r){return n===r||n!=n&&r!=r}var $o=qe(Ti),Go=qe((function(n,r){return n>=r})),Jo=zi(function(){return arguments}())?zi:function(n){return uf(n)&&Bn.call(n,"callee")&&!Yn.call(n,"callee")},Ho=fn.isArray,qo=br?Vr(br):function(n){return uf(n)&&Si(n)==z};function Ko(n){return null!=n&&tf(n.length)&&!nf(n)}function Yo(n){return uf(n)&&Ko(n)}var Vo=Jr||ga,Xo=gr?Vr(gr):function(n){return uf(n)&&Si(n)==g};function Qo(n){if(!uf(n))return!1;var r=Si(n);return r==k||"[object DOMException]"==r||"string"==typeof n.message&&"string"==typeof n.name&&!af(n)}function nf(n){if(!ef(n))return!1;var r=Si(n);return r==_||r==A||"[object AsyncFunction]"==r||"[object Proxy]"==r}function rf(n){return"number"==typeof n&&n==yf(n)}function tf(n){return"number"==typeof n&&n>-1&&n%1==0&&n<=v}function ef(n){var r=typeof n;return null!=n&&("object"==r||"function"==r)}function uf(n){return null!=n&&"object"==typeof n}var of=kr?Vr(kr):function(n){return uf(n)&&mu(n)==E};function ff(n){return"number"==typeof n||uf(n)&&Si(n)==x}function af(n){if(!uf(n)||Si(n)!=j)return!1;var r=qn(n);if(null===r)return!0;var t=Bn.call(r,"constructor")&&r.constructor;return"function"==typeof t&&t instanceof t&&Nn.call(t)==Wn}var sf=_r?Vr(_r):function(n){return uf(n)&&Si(n)==T},cf=Ar?Vr(Ar):function(n){return uf(n)&&mu(n)==U};function hf(n){return"string"==typeof n||!Ho(n)&&uf(n)&&Si(n)==R}function lf(n){return"symbol"==typeof n||uf(n)&&Si(n)==C}var vf=Er?Vr(Er):function(n){return uf(n)&&tf(n.length)&&!!or[Si(n)]},df=qe(Pi),pf=qe((function(n,r){return n<=r}));function mf(n){if(!n)return[];if(Ko(n))return hf(n)?vt(n):Ce(n);if(tr&&n[tr])return function(n){for(var r,t=[];!(r=n.next()).done;)t.push(r.value);return t}(n[tr]());var r=mu(n);return(r==E?ft:r==U?ct:$f)(n)}function wf(n){return n?(n=gf(n))===l||n===-1/0?17976931348623157e292*(n<0?-1:1):n==n?n:0:0===n?n:0}function yf(n){var r=wf(n),t=r%1;return r==r?t?r-t:r:0}function bf(n){return n?si(yf(n),0,p):0}function gf(n){if("number"==typeof n)return n;if(lf(n))return d;if(ef(n)){var r="function"==typeof n.valueOf?n.valueOf():n;n=ef(r)?r+"":r}if("string"!=typeof n)return 0===n?n:+n;n=Yr(n);var t=wn.test(n);return t||bn.test(n)?cr(n.slice(2),t?2:8):mn.test(n)?d:+n}function kf(n){return Oe(n,Nf(n))}function _f(n){return null==n?"":he(n)}var Af=De((function(n,r){if(xu(r)||Ko(r))Oe(r,Ff(r),n);else for(var t in r)Bn.call(r,t)&&ii(n,t,r[t])})),Ef=De((function(n,r){Oe(r,Nf(r),n)})),xf=De((function(n,r,t,i){Oe(r,Nf(r),n,i)})),jf=De((function(n,r,t,i){Oe(r,Ff(r),n,i)})),Sf=eu(ai),Tf=Xi((function(r,t){r=Tn(r);var i=-1,e=t.length,u=e>2?t[2]:n;for(u&&ku(t[0],t[1],u)&&(e=1);++i<e;)for(var o=t[i],f=Nf(o),a=-1,s=f.length;++a<s;){var c=f[a],h=r[c];(h===n||Mo(h,Dn[c])&&!Bn.call(r,c))&&(r[c]=o[c])}return r})),Uf=Xi((function(r){return r.push(n,ru),xr(If,n,r)}));function Rf(r,t,i){var e=null==r?n:xi(r,t);return e===n?i:e}function Cf(n,r){return null!=n&&wu(n,r,Ri)}var Of=Me((function(n,r,t){null!=r&&"function"!=typeof r.toString&&(r=Pn.call(r)),n[r]=t}),ea(fa)),zf=Me((function(n,r,t){null!=r&&"function"!=typeof r.toString&&(r=Pn.call(r)),Bn.call(n,r)?n[r].push(t):n[r]=[t]}),cu),Df=Xi(Oi);function Ff(n){return Ko(n)?Xt(n):Ii(n)}function Nf(n){return Ko(n)?Xt(n,!0):Li(n)}var Bf=De((function(n,r,t){$i(n,r,t)})),If=De((function(n,r,t,i){$i(n,r,t,i)})),Lf=eu((function(n,r){var t={};if(null==n)return t;var i=!1;r=zr(r,(function(r){return r=ke(r,n),i||(i=r.length>1),r})),Oe(n,ou(n),t),i&&(t=ci(t,7,tu));for(var e=r.length;e--;)ve(t,r[e]);return t})),Pf=eu((function(n,r){return null==n?{}:function(n,r){return Hi(n,r,(function(r,t){return Cf(n,t)}))}(n,r)}));function Wf(n,r){if(null==n)return{};var t=zr(ou(n),(function(n){return[n]}));return r=cu(r),Hi(n,t,(function(n,t){return r(n,t[0])}))}var Zf=Xe(Ff),Mf=Xe(Nf);function $f(n){return null==n?[]:Xr(n,Ff(n))}var Gf=Ie((function(n,r,t){return r=r.toLowerCase(),n+(t?Jf(r):r)}));function Jf(n){return na(_f(n).toLowerCase())}function Hf(n){return(n=_f(n))&&n.replace(kn,it).replace(Qn,"")}var qf=Ie((function(n,r,t){return n+(t?"-":"")+r.toLowerCase()})),Kf=Ie((function(n,r,t){return n+(t?" ":"")+r.toLowerCase()})),Yf=Be("toLowerCase"),Vf=Ie((function(n,r,t){return n+(t?"_":"")+r.toLowerCase()})),Xf=Ie((function(n,r,t){return n+(t?" ":"")+na(r)})),Qf=Ie((function(n,r,t){return n+(t?" ":"")+r.toUpperCase()})),na=Be("toUpperCase");function ra(r,t,i){return r=_f(r),(t=i?n:t)===n?function(n){return ir.test(n)}(r)?function(n){return n.match(rr)||[]}(r):function(n){return n.match(hn)||[]}(r):r.match(t)||[]}var ta=Xi((function(r,t){try{return xr(r,n,t)}catch(n){return Qo(n)?n:new xn(n)}})),ia=eu((function(n,r){return Sr(r,(function(r){r=Lu(r),fi(n,r,Oo(n[r],n))})),n}));function ea(n){return function(){return n}}var ua=We(),oa=We(!0);function fa(n){return n}function aa(n){return Bi("function"==typeof n?n:ci(n,1))}var sa=Xi((function(n,r){return function(t){return Oi(t,n,r)}})),ca=Xi((function(n,r){return function(t){return Oi(n,t,r)}}));function ha(n,r,t){var i=Ff(r),e=Ei(r,i);null!=t||ef(r)&&(e.length||!i.length)||(t=r,r=n,n=this,e=Ei(r,Ff(r)));var u=!(ef(t)&&"chain"in t&&!t.chain),o=nf(n);return Sr(e,(function(t){var i=r[t];n[t]=i,o&&(n.prototype[t]=function(){var r=this.o;if(u||r){var t=n(this.i),e=t.u=Ce(this.u);return e.push({func:i,args:arguments,thisArg:n}),t.o=r,t}return i.apply(n,Dr([this.value()],arguments))})})),n}function la(){}var va=Ge(zr),da=Ge(Ur),pa=Ge(Br);function ma(n){return _u(n)?Gr(Lu(n)):function(n){return function(r){return xi(r,n)}}(n)}var wa=He(),ya=He(!0);function ba(){return[]}function ga(){return!1}var ka,_a=$e((function(n,r){return n+r}),0),Aa=Ye("ceil"),Ea=$e((function(n,r){return n/r}),1),xa=Ye("floor"),ja=$e((function(n,r){return n*r}),1),Sa=Ye("round"),Ta=$e((function(n,r){return n-r}),0);return Zt.after=function(n,t){if("function"!=typeof t)throw new Cn(r);return n=yf(n),function(){if(--n<1)return t.apply(this,arguments)}},Zt.ary=Ro,Zt.assign=Af,Zt.assignIn=Ef,Zt.assignInWith=xf,Zt.assignWith=jf,Zt.at=Sf,Zt.before=Co,Zt.bind=Oo,Zt.bindAll=ia,Zt.bindKey=zo,Zt.castArray=function(){if(!arguments.length)return[];var n=arguments[0];return Ho(n)?n:[n]},Zt.chain=po,Zt.chunk=function(r,t,i){t=(i?ku(r,t,i):t===n)?1:gt(yf(t),0);var e=null==r?0:r.length;if(!e||t<1)return[];for(var u=0,o=0,f=fn(wr(e/t));u<e;)f[o++]=ue(r,u,u+=t);return f},Zt.compact=function(n){for(var r=-1,t=null==n?0:n.length,i=0,e=[];++r<t;){var u=n[r];u&&(e[i++]=u)}return e},Zt.concat=function(){var n=arguments.length;if(!n)return[];for(var r=fn(n-1),t=arguments[0],i=n;i--;)r[i-1]=arguments[i];return Dr(Ho(t)?Ce(t):[t],bi(r,1))},Zt.cond=function(n){var t=null==n?0:n.length,i=cu();return n=t?zr(n,(function(n){if("function"!=typeof n[1])throw new Cn(r);return[i(n[0]),n[1]]})):[],Xi((function(r){for(var i=-1;++i<t;){var e=n[i];if(xr(e[0],this,r))return xr(e[1],this,r)}}))},Zt.conforms=function(n){return function(n){var r=Ff(n);return function(t){return hi(t,n,r)}}(ci(n,1))},Zt.constant=ea,Zt.countBy=yo,Zt.create=function(n,r){var t=Mt(n);return null==r?t:oi(t,r)},Zt.curry=function r(t,i,e){var u=Qe(t,8,n,n,n,n,n,i=e?n:i);return u.placeholder=r.placeholder,u},Zt.curryRight=function r(t,i,e){var u=Qe(t,f,n,n,n,n,n,i=e?n:i);return u.placeholder=r.placeholder,u},Zt.debounce=Do,Zt.defaults=Tf,Zt.defaultsDeep=Uf,Zt.defer=Fo,Zt.delay=No,Zt.difference=Zu,Zt.differenceBy=Mu,Zt.differenceWith=$u,Zt.drop=function(r,t,i){var e=null==r?0:r.length;return e?ue(r,(t=i||t===n?1:yf(t))<0?0:t,e):[]},Zt.dropRight=function(r,t,i){var e=null==r?0:r.length;return e?ue(r,0,(t=e-(t=i||t===n?1:yf(t)))<0?0:t):[]},Zt.dropRightWhile=function(n,r){return n&&n.length?pe(n,cu(r,3),!0,!0):[]},Zt.dropWhile=function(n,r){return n&&n.length?pe(n,cu(r,3),!0):[]},Zt.fill=function(r,t,i,e){var u=null==r?0:r.length;return u?(i&&"number"!=typeof i&&ku(r,t,i)&&(i=0,e=u),function(r,t,i,e){var u=r.length;for((i=yf(i))<0&&(i=-i>u?0:u+i),(e=e===n||e>u?u:yf(e))<0&&(e+=u),e=i>e?0:bf(e);i<e;)r[i++]=t;return r}(r,t,i,e)):[]},Zt.filter=function(n,r){return(Ho(n)?Rr:yi)(n,cu(r,3))},Zt.flatMap=function(n,r){return bi(jo(n,r),1)},Zt.flatMapDeep=function(n,r){return bi(jo(n,r),l)},Zt.flatMapDepth=function(r,t,i){return i=i===n?1:yf(i),bi(jo(r,t),i)},Zt.flatten=Hu,Zt.flattenDeep=function(n){return null!=n&&n.length?bi(n,l):[]},Zt.flattenDepth=function(r,t){return null!=r&&r.length?bi(r,t=t===n?1:yf(t)):[]},Zt.flip=function(n){return Qe(n,512)},Zt.flow=ua,Zt.flowRight=oa,Zt.fromPairs=function(n){for(var r=-1,t=null==n?0:n.length,i={};++r<t;){var e=n[r];i[e[0]]=e[1]}return i},Zt.functions=function(n){return null==n?[]:Ei(n,Ff(n))},Zt.functionsIn=function(n){return null==n?[]:Ei(n,Nf(n))},Zt.groupBy=Ao,Zt.initial=function(n){return null!=n&&n.length?ue(n,0,-1):[]},Zt.intersection=Ku,Zt.intersectionBy=Yu,Zt.intersectionWith=Vu,Zt.invert=Of,Zt.invertBy=zf,Zt.invokeMap=Eo,Zt.iteratee=aa,Zt.keyBy=xo,Zt.keys=Ff,Zt.keysIn=Nf,Zt.map=jo,Zt.mapKeys=function(n,r){var t={};return r=cu(r,3),_i(n,(function(n,i,e){fi(t,r(n,i,e),n)})),t},Zt.mapValues=function(n,r){var t={};return r=cu(r,3),_i(n,(function(n,i,e){fi(t,i,r(n,i,e))})),t},Zt.matches=function(n){return Zi(ci(n,1))},Zt.matchesProperty=function(n,r){return Mi(n,ci(r,1))},Zt.memoize=Bo,Zt.merge=Bf,Zt.mergeWith=If,Zt.method=sa,Zt.methodOf=ca,Zt.mixin=ha,Zt.negate=Io,Zt.nthArg=function(n){return n=yf(n),Xi((function(r){return Gi(r,n)}))},Zt.omit=Lf,Zt.omitBy=function(n,r){return Wf(n,Io(cu(r)))},Zt.once=function(n){return Co(2,n)},Zt.orderBy=function(r,t,i,e){return null==r?[]:(Ho(t)||(t=null==t?[]:[t]),Ho(i=e?n:i)||(i=null==i?[]:[i]),Ji(r,t,i))},Zt.over=va,Zt.overArgs=Lo,Zt.overEvery=da,Zt.overSome=pa,Zt.partial=Po,Zt.partialRight=Wo,Zt.partition=So,Zt.pick=Pf,Zt.pickBy=Wf,Zt.property=ma,Zt.propertyOf=function(r){return function(t){return null==r?n:xi(r,t)}},Zt.pull=Qu,Zt.pullAll=no,Zt.pullAllBy=function(n,r,t){return n&&n.length&&r&&r.length?qi(n,r,cu(t,2)):n},Zt.pullAllWith=function(r,t,i){return r&&r.length&&t&&t.length?qi(r,t,n,i):r},Zt.pullAt=ro,Zt.range=wa,Zt.rangeRight=ya,Zt.rearg=Zo,Zt.reject=function(n,r){return(Ho(n)?Rr:yi)(n,Io(cu(r,3)))},Zt.remove=function(n,r){var t=[];if(!n||!n.length)return t;var i=-1,e=[],u=n.length;for(r=cu(r,3);++i<u;){var o=n[i];r(o,i,n)&&(t.push(o),e.push(i))}return Ki(n,e),t},Zt.rest=function(t,i){if("function"!=typeof t)throw new Cn(r);return Xi(t,i=i===n?i:yf(i))},Zt.reverse=to,Zt.sampleSize=function(r,t,i){return t=(i?ku(r,t,i):t===n)?1:yf(t),(Ho(r)?ni:ne)(r,t)},Zt.set=function(n,r,t){return null==n?n:re(n,r,t)},Zt.setWith=function(r,t,i,e){return e="function"==typeof e?e:n,null==r?r:re(r,t,i,e)},Zt.shuffle=function(n){return(Ho(n)?ri:ee)(n)},Zt.slice=function(r,t,i){var e=null==r?0:r.length;return e?(i&&"number"!=typeof i&&ku(r,t,i)?(t=0,i=e):(t=null==t?0:yf(t),i=i===n?e:yf(i)),ue(r,t,i)):[]},Zt.sortBy=To,Zt.sortedUniq=function(n){return n&&n.length?se(n):[]},Zt.sortedUniqBy=function(n,r){return n&&n.length?se(n,cu(r,2)):[]},Zt.split=function(r,t,i){return i&&"number"!=typeof i&&ku(r,t,i)&&(t=i=n),(i=i===n?p:i>>>0)?(r=_f(r))&&("string"==typeof t||null!=t&&!sf(t))&&!(t=he(t))&&ot(r)?Ae(vt(r),0,i):r.split(t,i):[]},Zt.spread=function(n,t){if("function"!=typeof n)throw new Cn(r);return t=null==t?0:gt(yf(t),0),Xi((function(r){var i=r[t],e=Ae(r,0,t);return i&&Dr(e,i),xr(n,this,e)}))},Zt.tail=function(n){var r=null==n?0:n.length;return r?ue(n,1,r):[]},Zt.take=function(r,t,i){return r&&r.length?ue(r,0,(t=i||t===n?1:yf(t))<0?0:t):[]},Zt.takeRight=function(r,t,i){var e=null==r?0:r.length;return e?ue(r,(t=e-(t=i||t===n?1:yf(t)))<0?0:t,e):[]},Zt.takeRightWhile=function(n,r){return n&&n.length?pe(n,cu(r,3),!1,!0):[]},Zt.takeWhile=function(n,r){return n&&n.length?pe(n,cu(r,3)):[]},Zt.tap=function(n,r){return r(n),n},Zt.throttle=function(n,t,i){var e=!0,u=!0;if("function"!=typeof n)throw new Cn(r);return ef(i)&&(e="leading"in i?!!i.leading:e,u="trailing"in i?!!i.trailing:u),Do(n,t,{leading:e,maxWait:t,trailing:u})},Zt.thru=mo,Zt.toArray=mf,Zt.toPairs=Zf,Zt.toPairsIn=Mf,Zt.toPath=function(n){return Ho(n)?zr(n,Lu):lf(n)?[n]:Ce(Iu(_f(n)))},Zt.toPlainObject=kf,Zt.transform=function(n,r,t){var i=Ho(n),e=i||Vo(n)||vf(n);if(r=cu(r,4),null==t){var u=n&&n.constructor;t=e?i?new u:[]:ef(n)&&nf(u)?Mt(qn(n)):{}}return(e?Sr:_i)(n,(function(n,i,e){return r(t,n,i,e)})),t},Zt.unary=function(n){return Ro(n,1)},Zt.union=io,Zt.unionBy=eo,Zt.unionWith=uo,Zt.uniq=function(n){return n&&n.length?le(n):[]},Zt.uniqBy=function(n,r){return n&&n.length?le(n,cu(r,2)):[]},Zt.uniqWith=function(r,t){return t="function"==typeof t?t:n,r&&r.length?le(r,n,t):[]},Zt.unset=function(n,r){return null==n||ve(n,r)},Zt.unzip=oo,Zt.unzipWith=fo,Zt.update=function(n,r,t){return null==n?n:de(n,r,ge(t))},Zt.updateWith=function(r,t,i,e){return e="function"==typeof e?e:n,null==r?r:de(r,t,ge(i),e)},Zt.values=$f,Zt.valuesIn=function(n){return null==n?[]:Xr(n,Nf(n))},Zt.without=ao,Zt.words=ra,Zt.wrap=function(n,r){return Po(ge(r),n)},Zt.xor=so,Zt.xorBy=co,Zt.xorWith=ho,Zt.zip=lo,Zt.zipObject=function(n,r){return ye(n||[],r||[],ii)},Zt.zipObjectDeep=function(n,r){return ye(n||[],r||[],re)},Zt.zipWith=vo,Zt.entries=Zf,Zt.entriesIn=Mf,Zt.extend=Ef,Zt.extendWith=xf,ha(Zt,Zt),Zt.add=_a,Zt.attempt=ta,Zt.camelCase=Gf,Zt.capitalize=Jf,Zt.ceil=Aa,Zt.clamp=function(r,t,i){return i===n&&(i=t,t=n),i!==n&&(i=(i=gf(i))==i?i:0),t!==n&&(t=(t=gf(t))==t?t:0),si(gf(r),t,i)},Zt.clone=function(n){return ci(n,4)},Zt.cloneDeep=function(n){return ci(n,5)},Zt.cloneDeepWith=function(r,t){return ci(r,5,t="function"==typeof t?t:n)},Zt.cloneWith=function(r,t){return ci(r,4,t="function"==typeof t?t:n)},Zt.conformsTo=function(n,r){return null==r||hi(n,r,Ff(r))},Zt.deburr=Hf,Zt.defaultTo=function(n,r){return null==n||n!=n?r:n},Zt.divide=Ea,Zt.endsWith=function(r,t,i){r=_f(r),t=he(t);var e=r.length,u=i=i===n?e:si(yf(i),0,e);return(i-=t.length)>=0&&r.slice(i,u)==t},Zt.eq=Mo,Zt.escape=function(n){return(n=_f(n))&&Y.test(n)?n.replace(q,et):n},Zt.escapeRegExp=function(n){return(n=_f(n))&&un.test(n)?n.replace(en,"\\$&"):n},Zt.every=function(r,t,i){var e=Ho(r)?Ur:mi;return i&&ku(r,t,i)&&(t=n),e(r,cu(t,3))},Zt.find=bo,Zt.findIndex=Gu,Zt.findKey=function(n,r){return Lr(n,cu(r,3),_i)},Zt.findLast=go,Zt.findLastIndex=Ju,Zt.findLastKey=function(n,r){return Lr(n,cu(r,3),Ai)},Zt.floor=xa,Zt.forEach=ko,Zt.forEachRight=_o,Zt.forIn=function(n,r){return null==n?n:gi(n,cu(r,3),Nf)},Zt.forInRight=function(n,r){return null==n?n:ki(n,cu(r,3),Nf)},Zt.forOwn=function(n,r){return n&&_i(n,cu(r,3))},Zt.forOwnRight=function(n,r){return n&&Ai(n,cu(r,3))},Zt.get=Rf,Zt.gt=$o,Zt.gte=Go,Zt.has=function(n,r){return null!=n&&wu(n,r,Ui)},Zt.hasIn=Cf,Zt.head=qu,Zt.identity=fa,Zt.includes=function(n,r,t,i){n=Ko(n)?n:$f(n),t=t&&!i?yf(t):0;var e=n.length;return t<0&&(t=gt(e+t,0)),hf(n)?t<=e&&n.indexOf(r,t)>-1:!!e&&Wr(n,r,t)>-1},Zt.indexOf=function(n,r,t){var i=null==n?0:n.length;if(!i)return-1;var e=null==t?0:yf(t);return e<0&&(e=gt(i+e,0)),Wr(n,r,e)},Zt.inRange=function(r,t,i){return t=wf(t),i===n?(i=t,t=0):i=wf(i),function(n,r,t){return n>=kt(r,t)&&n<gt(r,t)}(r=gf(r),t,i)},Zt.invoke=Df,Zt.isArguments=Jo,Zt.isArray=Ho,Zt.isArrayBuffer=qo,Zt.isArrayLike=Ko,Zt.isArrayLikeObject=Yo,Zt.isBoolean=function(n){return!0===n||!1===n||uf(n)&&Si(n)==b},Zt.isBuffer=Vo,Zt.isDate=Xo,Zt.isElement=function(n){return uf(n)&&1===n.nodeType&&!af(n)},Zt.isEmpty=function(n){if(null==n)return!0;if(Ko(n)&&(Ho(n)||"string"==typeof n||"function"==typeof n.splice||Vo(n)||vf(n)||Jo(n)))return!n.length;var r=mu(n);if(r==E||r==U)return!n.size;if(xu(n))return!Ii(n).length;for(var t in n)if(Bn.call(n,t))return!1;return!0},Zt.isEqual=function(n,r){return Di(n,r)},Zt.isEqualWith=function(r,t,i){var e=(i="function"==typeof i?i:n)?i(r,t):n;return e===n?Di(r,t,n,i):!!e},Zt.isError=Qo,Zt.isFinite=function(n){return"number"==typeof n&&wt(n)},Zt.isFunction=nf,Zt.isInteger=rf,Zt.isLength=tf,Zt.isMap=of,Zt.isMatch=function(n,r){return n===r||Fi(n,r,lu(r))},Zt.isMatchWith=function(r,t,i){return i="function"==typeof i?i:n,Fi(r,t,lu(t),i)},Zt.isNaN=function(n){return ff(n)&&n!=+n},Zt.isNative=function(n){if(Eu(n))throw new xn("Unsupported core-js use. Try https://npms.io/search?q=ponyfill.");return Ni(n)},Zt.isNil=function(n){return null==n},Zt.isNull=function(n){return null===n},Zt.isNumber=ff,Zt.isObject=ef,Zt.isObjectLike=uf,Zt.isPlainObject=af,Zt.isRegExp=sf,Zt.isSafeInteger=function(n){return rf(n)&&n>=-9007199254740991&&n<=v},Zt.isSet=cf,Zt.isString=hf,Zt.isSymbol=lf,Zt.isTypedArray=vf,Zt.isUndefined=function(r){return r===n},Zt.isWeakMap=function(n){return uf(n)&&mu(n)==O},Zt.isWeakSet=function(n){return uf(n)&&"[object WeakSet]"==Si(n)},Zt.join=function(n,r){return null==n?"":yt.call(n,r)},Zt.kebabCase=qf,Zt.last=Xu,Zt.lastIndexOf=function(r,t,i){var e=null==r?0:r.length;if(!e)return-1;var u=e;return i!==n&&(u=(u=yf(i))<0?gt(e+u,0):kt(u,e-1)),t==t?function(n,r,t){for(var i=t+1;i--;)if(n[i]===r)return i;return i}(r,t,u):Pr(r,Mr,u,!0)},Zt.lowerCase=Kf,Zt.lowerFirst=Yf,Zt.lt=df,Zt.lte=pf,Zt.max=function(r){return r&&r.length?wi(r,fa,Ti):n},Zt.maxBy=function(r,t){return r&&r.length?wi(r,cu(t,2),Ti):n},Zt.mean=function(n){return $r(n,fa)},Zt.meanBy=function(n,r){return $r(n,cu(r,2))},Zt.min=function(r){return r&&r.length?wi(r,fa,Pi):n},Zt.minBy=function(r,t){return r&&r.length?wi(r,cu(t,2),Pi):n},Zt.stubArray=ba,Zt.stubFalse=ga,Zt.stubObject=function(){return{}},Zt.stubString=function(){return""},Zt.stubTrue=function(){return!0},Zt.multiply=ja,Zt.nth=function(r,t){return r&&r.length?Gi(r,yf(t)):n},Zt.noConflict=function(){return vr._===this&&(vr._=Zn),this},Zt.noop=la,Zt.now=Uo,Zt.pad=function(n,r,t){n=_f(n);var i=(r=yf(r))?lt(n):0;if(!r||i>=r)return n;var e=(r-i)/2;return Je(yr(e),t)+n+Je(wr(e),t)},Zt.padEnd=function(n,r,t){n=_f(n);var i=(r=yf(r))?lt(n):0;return r&&i<r?n+Je(r-i,t):n},Zt.padStart=function(n,r,t){n=_f(n);var i=(r=yf(r))?lt(n):0;return r&&i<r?Je(r-i,t)+n:n},Zt.parseInt=function(n,r,t){return t||null==r?r=0:r&&(r=+r),At(_f(n).replace(on,""),r||0)},Zt.random=function(r,t,i){if(i&&"boolean"!=typeof i&&ku(r,t,i)&&(t=i=n),i===n&&("boolean"==typeof t?(i=t,t=n):"boolean"==typeof r&&(i=r,r=n)),r===n&&t===n?(r=0,t=1):(r=wf(r),t===n?(t=r,r=0):t=wf(t)),r>t){var e=r;r=t,t=e}if(i||r%1||t%1){var u=Et();return kt(r+u*(t-r+sr("1e-"+((u+"").length-1))),t)}return Yi(r,t)},Zt.reduce=function(n,r,t){var i=Ho(n)?Fr:Hr,e=arguments.length<3;return i(n,cu(r,4),t,e,di)},Zt.reduceRight=function(n,r,t){var i=Ho(n)?Nr:Hr,e=arguments.length<3;return i(n,cu(r,4),t,e,pi)},Zt.repeat=function(r,t,i){return t=(i?ku(r,t,i):t===n)?1:yf(t),Vi(_f(r),t)},Zt.replace=function(){var n=arguments,r=_f(n[0]);return n.length<3?r:r.replace(n[1],n[2])},Zt.result=function(r,t,i){var e=-1,u=(t=ke(t,r)).length;for(u||(u=1,r=n);++e<u;){var o=null==r?n:r[Lu(t[e])];o===n&&(e=u,o=i),r=nf(o)?o.call(r):o}return r},Zt.round=Sa,Zt.runInContext=t,Zt.sample=function(n){return(Ho(n)?Qt:Qi)(n)},Zt.size=function(n){if(null==n)return 0;if(Ko(n))return hf(n)?lt(n):n.length;var r=mu(n);return r==E||r==U?n.size:Ii(n).length},Zt.snakeCase=Vf,Zt.some=function(r,t,i){var e=Ho(r)?Br:oe;return i&&ku(r,t,i)&&(t=n),e(r,cu(t,3))},Zt.sortedIndex=function(n,r){return fe(n,r)},Zt.sortedIndexBy=function(n,r,t){return ae(n,r,cu(t,2))},Zt.sortedIndexOf=function(n,r){var t=null==n?0:n.length;if(t){var i=fe(n,r);if(i<t&&Mo(n[i],r))return i}return-1},Zt.sortedLastIndex=function(n,r){return fe(n,r,!0)},Zt.sortedLastIndexBy=function(n,r,t){return ae(n,r,cu(t,2),!0)},Zt.sortedLastIndexOf=function(n,r){if(null!=n&&n.length){var t=fe(n,r,!0)-1;if(Mo(n[t],r))return t}return-1},Zt.startCase=Xf,Zt.startsWith=function(n,r,t){return n=_f(n),t=null==t?0:si(yf(t),0,n.length),r=he(r),n.slice(t,t+r.length)==r},Zt.subtract=Ta,Zt.sum=function(n){return n&&n.length?qr(n,fa):0},Zt.sumBy=function(n,r){return n&&n.length?qr(n,cu(r,2)):0},Zt.template=function(r,t,i){var e=Zt.templateSettings;i&&ku(r,t,i)&&(t=n),r=_f(r),t=xf({},t,e,nu);var u,o,f=xf({},t.imports,e.imports,nu),a=Ff(f),s=Xr(f,a),c=0,h=t.interpolate||_n,l="__p += '",v=Un((t.escape||_n).source+"|"+h.source+"|"+(h===Q?dn:_n).source+"|"+(t.evaluate||_n).source+"|$","g"),d="//# sourceURL="+(Bn.call(t,"sourceURL")?(t.sourceURL+"").replace(/\s/g," "):"lodash.templateSources["+ ++ur+"]")+"\n";r.replace(v,(function(n,t,i,e,f,a){return i||(i=e),l+=r.slice(c,a).replace(An,ut),t&&(u=!0,l+="' +\n__e("+t+") +\n'"),f&&(o=!0,l+="';\n"+f+";\n__p += '"),i&&(l+="' +\n((__t = ("+i+")) == null ? '' : __t) +\n'"),c=a+n.length,n})),l+="';\n";var p=Bn.call(t,"variable")&&t.variable;if(p){if(ln.test(p))throw new xn("Invalid `variable` option passed into `_.template`")}else l="with (obj) {\n"+l+"\n}\n";l=(o?l.replace($,""):l).replace(G,"$1").replace(J,"$1;"),l="function("+(p||"obj")+") {\n"+(p?"":"obj || (obj = {});\n")+"var __t, __p = ''"+(u?", __e = _.escape":"")+(o?", __j = Array.prototype.join;\nfunction print() { __p += __j.call(arguments, '') }\n":";\n")+l+"return __p\n}";var m=ta((function(){return jn(a,d+"return "+l).apply(n,s)}));if(m.source=l,Qo(m))throw m;return m},Zt.times=function(n,r){if((n=yf(n))<1||n>v)return[];var t=p,i=kt(n,p);r=cu(r),n-=p;for(var e=Kr(i,r);++t<n;)r(t);return e},Zt.toFinite=wf,Zt.toInteger=yf,Zt.toLength=bf,Zt.toLower=function(n){return _f(n).toLowerCase()},Zt.toNumber=gf,Zt.toSafeInteger=function(n){return n?si(yf(n),-9007199254740991,v):0===n?n:0},Zt.toString=_f,Zt.toUpper=function(n){return _f(n).toUpperCase()},Zt.trim=function(r,t,i){if((r=_f(r))&&(i||t===n))return Yr(r);if(!r||!(t=he(t)))return r;var e=vt(r),u=vt(t);return Ae(e,nt(e,u),rt(e,u)+1).join("")},Zt.trimEnd=function(r,t,i){if((r=_f(r))&&(i||t===n))return r.slice(0,dt(r)+1);if(!r||!(t=he(t)))return r;var e=vt(r);return Ae(e,0,rt(e,vt(t))+1).join("")},Zt.trimStart=function(r,t,i){if((r=_f(r))&&(i||t===n))return r.replace(on,"");if(!r||!(t=he(t)))return r;var e=vt(r);return Ae(e,nt(e,vt(t))).join("")},Zt.truncate=function(r,t){var i=30,e="...";if(ef(t)){var u="separator"in t?t.separator:u;i="length"in t?yf(t.length):i,e="omission"in t?he(t.omission):e}var o=(r=_f(r)).length;if(ot(r)){var f=vt(r);o=f.length}if(i>=o)return r;var a=i-lt(e);if(a<1)return e;var s=f?Ae(f,0,a).join(""):r.slice(0,a);if(u===n)return s+e;if(f&&(a+=s.length-a),sf(u)){if(r.slice(a).search(u)){var c,h=s;for(u.global||(u=Un(u.source,_f(pn.exec(u))+"g")),u.lastIndex=0;c=u.exec(h);)var l=c.index;s=s.slice(0,l===n?a:l)}}else if(r.indexOf(he(u),a)!=a){var v=s.lastIndexOf(u);v>-1&&(s=s.slice(0,v))}return s+e},Zt.unescape=function(n){return(n=_f(n))&&K.test(n)?n.replace(H,pt):n},Zt.uniqueId=function(n){var r=++In;return _f(n)+r},Zt.upperCase=Qf,Zt.upperFirst=na,Zt.each=ko,Zt.eachRight=_o,Zt.first=qu,ha(Zt,(ka={},_i(Zt,(function(n,r){Bn.call(Zt.prototype,r)||(ka[r]=n)})),ka),{chain:!1}),Zt.VERSION="4.17.21",Sr(["bind","bindKey","curry","curryRight","partial","partialRight"],(function(n){Zt[n].placeholder=Zt})),Sr(["drop","take"],(function(r,t){Jt.prototype[r]=function(i){i=i===n?1:gt(yf(i),0);var e=this.p&&!t?new Jt(this):this.clone();return e.p?e.g=kt(i,e.g):e.k.push({size:kt(i,p),type:r+(e.v<0?"Right":"")}),e},Jt.prototype[r+"Right"]=function(n){return this.reverse()[r](n).reverse()}})),Sr(["filter","map","takeWhile"],(function(n,r){var t=r+1,i=1==t||3==t;Jt.prototype[n]=function(n){var r=this.clone();return r.m.push({iteratee:cu(n,3),type:t}),r.p=r.p||i,r}})),Sr(["head","last"],(function(n,r){var t="take"+(r?"Right":"");Jt.prototype[n]=function(){return this[t](1).value()[0]}})),Sr(["initial","tail"],(function(n,r){var t="drop"+(r?"":"Right");Jt.prototype[n]=function(){return this.p?new Jt(this):this[t](1)}})),Jt.prototype.compact=function(){return this.filter(fa)},Jt.prototype.find=function(n){return this.filter(n).head()},Jt.prototype.findLast=function(n){return this.reverse().find(n)},Jt.prototype.invokeMap=Xi((function(n,r){return"function"==typeof n?new Jt(this):this.map((function(t){return Oi(t,n,r)}))})),Jt.prototype.reject=function(n){return this.filter(Io(cu(n)))},Jt.prototype.slice=function(r,t){r=yf(r);var i=this;return i.p&&(r>0||t<0)?new Jt(i):(r<0?i=i.takeRight(-r):r&&(i=i.drop(r)),t!==n&&(i=(t=yf(t))<0?i.dropRight(-t):i.take(t-r)),i)},Jt.prototype.takeRightWhile=function(n){return this.reverse().takeWhile(n).reverse()},Jt.prototype.toArray=function(){return this.take(p)},_i(Jt.prototype,(function(r,t){var i=/^(?:filter|find|map|reject)|While$/.test(t),e=/^(?:head|last)$/.test(t),u=Zt[e?"take"+("last"==t?"Right":""):t],o=e||/^find/.test(t);u&&(Zt.prototype[t]=function(){var t=this.i,f=e?[1]:arguments,a=t instanceof Jt,s=f[0],c=a||Ho(t),h=function(n){var r=u.apply(Zt,Dr([n],f));return e&&l?r[0]:r};c&&i&&"function"==typeof s&&1!=s.length&&(a=c=!1);var l=this.o,v=!!this.u.length,d=o&&!l,p=a&&!v;if(!o&&c){t=p?t:new Jt(this);var m=r.apply(t,f);return m.u.push({func:mo,args:[h],thisArg:n}),new Gt(m,l)}return d&&p?r.apply(this,f):(m=this.thru(h),d?e?m.value()[0]:m.value():m)})})),Sr(["pop","push","shift","sort","splice","unshift"],(function(n){var r=On[n],t=/^(?:push|sort|unshift)$/.test(n)?"tap":"thru",i=/^(?:pop|shift)$/.test(n);Zt.prototype[n]=function(){var n=arguments;if(i&&!this.o){var e=this.value();return r.apply(Ho(e)?e:[],n)}return this[t]((function(t){return r.apply(Ho(t)?t:[],n)}))}})),_i(Jt.prototype,(function(n,r){var t=Zt[r];if(t){var i=t.name+"";Bn.call(zt,i)||(zt[i]=[]),zt[i].push({name:r,func:t})}})),zt[Ze(n,2).name]=[{name:"wrapper",func:n}],Jt.prototype.clone=function(){var n=new Jt(this.i);return n.u=Ce(this.u),n.v=this.v,n.p=this.p,n.m=Ce(this.m),n.g=this.g,n.k=Ce(this.k),n},Jt.prototype.reverse=function(){if(this.p){var n=new Jt(this);n.v=-1,n.p=!0}else(n=this.clone()).v*=-1;return n},Jt.prototype.value=function(){var n=this.i.value(),r=this.v,t=Ho(n),i=r<0,e=t?n.length:0,u=function(n,r,t){for(var i=-1,e=t.length;++i<e;){var u=t[i],o=u.size;switch(u.type){case"drop":n+=o;break;case"dropRight":r-=o;break;case"take":r=kt(r,n+o);break;case"takeRight":n=gt(n,r-o)}}return{start:n,end:r}}(0,e,this.k),o=u.start,f=u.end,a=f-o,s=i?f:o-1,c=this.m,h=c.length,l=0,v=kt(a,this.g);if(!t||!i&&e==a&&v==a)return me(n,this.u);var d=[];n:for(;a--&&l<v;){for(var p=-1,m=n[s+=r];++p<h;){var w=c[p],y=w.iteratee,b=w.type,g=y(m);if(2==b)m=g;else if(!g){if(1==b)continue n;break n}}d[l++]=m}return d},Zt.prototype.at=wo,Zt.prototype.chain=function(){return po(this)},Zt.prototype.commit=function(){return new Gt(this.value(),this.o)},Zt.prototype.next=function(){this.l===n&&(this.l=mf(this.value()));var r=this.h>=this.l.length;return{done:r,value:r?n:this.l[this.h++]}},Zt.prototype.plant=function(r){for(var t,i=this;i instanceof $t;){var e=Wu(i);e.h=0,e.l=n,t?u.i=e:t=e;var u=e;i=i.i}return u.i=r,t},Zt.prototype.reverse=function(){var r=this.i;if(r instanceof Jt){var t=r;return this.u.length&&(t=new Jt(this)),(t=t.reverse()).u.push({func:mo,args:[to],thisArg:n}),new Gt(t,this.o)}return this.thru(to)},Zt.prototype.toJSON=Zt.prototype.valueOf=Zt.prototype.value=function(){return me(this.i,this.u)},Zt.prototype.first=Zt.prototype.head,tr&&(Zt.prototype[tr]=function(){return this}),Zt}();pr?((pr.exports=mt)._=mt,dr._=mt):vr._=mt}.call(t);var s={exports:{}},c=s.exports=function(){function n(r,t,e){function u(f,a){if(!t[f]){if(!r[f]){if(!a&&i)return i(f);if(o)return o(f,!0);var s=new Error("Cannot find module '"+f+"'");throw s.code="MODULE_NOT_FOUND",s}var c=t[f]={exports:{}};r[f][0].call(c.exports,(function(n){return u(r[f][1][n]||n)}),c,c.exports,n,r,t,e)}return t[f].exports}for(var o=i,f=0;f<e.length;f++)u(e[f]);return u}return n}()({1:[function(n,r,t){var i=n("fs"),e=n("path"),u=n("./utils"),o=!1,f=n("../package.json").version,a="<",s=">",c="%",h="locals",l="ejs",v="(<%%|%%>|<%=|<%-|<%_|<%#|<%|%>|-%>|_%>)",d=["delimiter","scope","context","debug","compileDebug","client","_with","rmWhitespace","strict","filename","async"],p=d.concat("cache"),m=/^\uFEFF/,w=/^[a-zA-Z_$][0-9a-zA-Z_$]*$/;function y(n,r){var e;if(r.some((function(r){return e=t.resolveInclude(n,r,!0),i.existsSync(e)})))return e}function b(n,r){var e,u,o=r.views,f=/^[A-Za-z]+:\\|^\//.exec(n);if(f&&f.length)n=n.replace(/^\/*/,""),e=Array.isArray(r.root)?y(n,r.root):t.resolveInclude(n,r.root||"/",!0);else if(r.filename&&(u=t.resolveInclude(n,r.filename),i.existsSync(u)&&(e=u)),!e&&Array.isArray(o)&&(e=y(n,o)),!e&&"function"!=typeof r.includer)throw new Error('Could not find the include file "'+r.escapeFunction(n)+'"');return e}function g(n,r){var i,e=n.filename,u=arguments.length>1;if(n.cache){if(!e)throw new Error("cache option requires a filename");if(i=t.cache.get(e))return i;u||(r=_(e).toString().replace(m,""))}else if(!u){if(!e)throw new Error("Internal EJS error: no file name or template provided");r=_(e).toString().replace(m,"")}return i=t.compile(r,n),n.cache&&t.cache.set(e,i),i}function k(n,r,i){var e;if(!i){if("function"==typeof t.promiseImpl)return new t.promiseImpl((function(t,i){try{t(e=g(n)(r))}catch(n){i(n)}}));throw new Error("Please provide a callback function")}try{e=g(n)(r)}catch(n){return i(n)}i(null,e)}function _(n){return t.fileLoader(n)}function A(n,r){var t=u.shallowCopy(u.createNullProtoObjWherePossible(),r);if(t.filename=b(n,t),"function"==typeof r.includer){var i=r.includer(n,t.filename);if(i&&(i.filename&&(t.filename=i.filename),i.template))return g(t,i.template)}return g(t)}function E(n,r,t,i,e){var u=r.split("\n"),o=Math.max(i-3,0),f=Math.min(u.length,i+3),a=e(t),s=u.slice(o,f).map((function(n,r){var t=r+o+1;return(t==i?" >> ":"    ")+t+"| "+n})).join("\n");throw n.path=a,n.message=(a||"ejs")+":"+i+"\n"+s+"\n\n"+n.message,n}function x(n){return n.replace(/;(\s*$)/,"$1")}function j(n,r){r=r||u.createNullProtoObjWherePossible();var i=u.createNullProtoObjWherePossible();this.templateText=n,this.mode=null,this.truncate=!1,this.currentLine=1,this.source="",i.client=r.client||!1,i.escapeFunction=r.escape||r.escapeFunction||u.escapeXML,i.compileDebug=!1!==r.compileDebug,i.debug=!!r.debug,i.filename=r.filename,i.openDelimiter=r.openDelimiter||t.openDelimiter||a,i.closeDelimiter=r.closeDelimiter||t.closeDelimiter||s,i.delimiter=r.delimiter||t.delimiter||c,i.strict=r.strict||!1,i.context=r.context,i.cache=r.cache||!1,i.rmWhitespace=r.rmWhitespace,i.root=r.root,i.includer=r.includer,i.outputFunctionName=r.outputFunctionName,i.localsName=r.localsName||t.localsName||h,i.views=r.views,i.async=r.async,i.destructuredLocals=r.destructuredLocals,i.legacyInclude=void 0===r.legacyInclude||!!r.legacyInclude,i.strict?i._with=!1:i._with=void 0===r._with||r._with,this.opts=i,this.regex=this.createRegex()}t.cache=u.cache,t.fileLoader=i.readFileSync,t.localsName=h,t.promiseImpl=new Function("return this;")().Promise,t.resolveInclude=function(n,r,t){var i=e.dirname,u=e.extname,o=(0,e.resolve)(t?r:i(r),n);return u(n)||(o+=".ejs"),o},t.compile=function(n,r){return r&&r.scope&&(o||(console.warn("`scope` option is deprecated and will be removed in EJS 3"),o=!0),r.context||(r.context=r.scope),delete r.scope),new j(n,r).compile()},t.render=function(n,r,t){var i=r||u.createNullProtoObjWherePossible(),e=t||u.createNullProtoObjWherePossible();return 2==arguments.length&&u.shallowCopyFromList(e,i,d),g(e,n)(i)},t.renderFile=function(){var n,r,t,i=Array.prototype.slice.call(arguments),e=i.shift(),o={filename:e};return"function"==typeof arguments[arguments.length-1]&&(n=i.pop()),i.length?(r=i.shift(),i.length?u.shallowCopy(o,i.pop()):(r.settings&&(r.settings.views&&(o.views=r.settings.views),r.settings["view cache"]&&(o.cache=!0),(t=r.settings["view options"])&&u.shallowCopy(o,t)),u.shallowCopyFromList(o,r,p)),o.filename=e):r=u.createNullProtoObjWherePossible(),k(o,r,n)},t.Template=j,t.clearCache=function(){t.cache.reset()},j.modes={EVAL:"eval",ESCAPED:"escaped",RAW:"raw",COMMENT:"comment",LITERAL:"literal"},j.prototype={createRegex:function(){var n=v,r=u.escapeRegExpChars(this.opts.delimiter),t=u.escapeRegExpChars(this.opts.openDelimiter),i=u.escapeRegExpChars(this.opts.closeDelimiter);return n=n.replace(/%/g,r).replace(/</g,t).replace(/>/g,i),new RegExp(n)},compile:function(){var n,r,t,i=this.opts,o="",f="",a=i.escapeFunction,s=i.filename?JSON.stringify(i.filename):"undefined";if(!this.source){if(this.generateSource(),o+='  var __output = "";\n  function __append(s) { if (s !== undefined && s !== null) __output += s }\n',i.outputFunctionName){if(!w.test(i.outputFunctionName))throw new Error("outputFunctionName is not a valid JS identifier.");o+="  var "+i.outputFunctionName+" = __append;\n"}if(i.localsName&&!w.test(i.localsName))throw new Error("localsName is not a valid JS identifier.");if(i.destructuredLocals&&i.destructuredLocals.length){for(var c="  var __locals = ("+i.localsName+" || {}),\n",h=0;h<i.destructuredLocals.length;h++){var l=i.destructuredLocals[h];if(!w.test(l))throw new Error("destructuredLocals["+h+"] is not a valid JS identifier.");h>0&&(c+=",\n  "),c+=l+" = __locals."+l}o+=c+";\n"}!1!==i._with&&(o+="  with ("+i.localsName+" || {}) {\n",f+="  }\n"),f+="  return __output;\n",this.source=o+this.source+f}n=i.compileDebug?"var __line = 1\n  , __lines = "+JSON.stringify(this.templateText)+"\n  , __filename = "+s+";\ntry {\n"+this.source+"} catch (e) {\n  rethrow(e, __lines, __filename, __line, escapeFn);\n}\n":this.source,i.client&&(n="escapeFn = escapeFn || "+a.toString()+";\n"+n,i.compileDebug&&(n="rethrow = rethrow || "+E.toString()+";\n"+n)),i.strict&&(n='"use strict";\n'+n),i.debug&&console.log(n),i.compileDebug&&i.filename&&(n=n+"\n//# sourceURL="+s+"\n");try{if(i.async)try{t=new Function("return (async function(){}).constructor;")()}catch(n){throw n instanceof SyntaxError?new Error("This environment does not support async/await"):n}else t=Function;r=new t(i.localsName+", escapeFn, include, rethrow",n)}catch(n){throw n instanceof SyntaxError&&(i.filename&&(n.message+=" in "+i.filename),n.message+=" while compiling ejs\n\n",n.message+="If the above error is not helpful, you may want to try EJS-Lint:\n",n.message+="https://github.com/RyanZim/EJS-Lint",i.async||(n.message+="\n",n.message+="Or, if you meant to create an async function, pass `async: true` as an option.")),n}var v=i.client?r:function(n){var t=function(r,t){var e=u.shallowCopy(u.createNullProtoObjWherePossible(),n);return t&&(e=u.shallowCopy(e,t)),A(r,i)(e)};return r.apply(i.context,[n||u.createNullProtoObjWherePossible(),a,t,E])};if(i.filename&&"function"==typeof Object.defineProperty){var d=i.filename,p=e.basename(d,e.extname(d));try{Object.defineProperty(v,"name",{value:p,writable:!1,enumerable:!1,configurable:!0})}catch(n){}}return v},generateSource:function(){this.opts.rmWhitespace&&(this.templateText=this.templateText.replace(/[\r\n]+/g,"\n").replace(/^\s+|\s+$/gm,"")),this.templateText=this.templateText.replace(/[ \t]*<%_/gm,"<%_").replace(/_%>[ \t]*/gm,"_%>");var n=this,r=this.parseTemplateText(),t=this.opts.delimiter,i=this.opts.openDelimiter,e=this.opts.closeDelimiter;r&&r.length&&r.forEach((function(u,o){var f;if(0===u.indexOf(i+t)&&0!==u.indexOf(i+t+t)&&(f=r[o+2])!=t+e&&f!="-"+t+e&&f!="_"+t+e)throw new Error('Could not find matching close tag for "'+u+'".');n.scanLine(u)}))},parseTemplateText:function(){for(var n,r=this.templateText,t=this.regex,i=t.exec(r),e=[];i;)0!==(n=i.index)&&(e.push(r.substring(0,n)),r=r.slice(n)),e.push(i[0]),r=r.slice(i[0].length),i=t.exec(r);return r&&e.push(r),e},_addOutput:function(n){if(this.truncate&&(n=n.replace(/^(?:\r\n|\r|\n)/,""),this.truncate=!1),!n)return n;n=(n=(n=(n=n.replace(/\\/g,"\\\\")).replace(/\n/g,"\\n")).replace(/\r/g,"\\r")).replace(/"/g,'\\"'),this.source+='    ; __append("'+n+'")\n'},scanLine:function(n){var r=this,t=this.opts.delimiter,i=this.opts.openDelimiter,e=this.opts.closeDelimiter,u=0;switch(u=n.split("\n").length-1,n){case i+t:case i+t+"_":this.mode=j.modes.EVAL;break;case i+t+"=":this.mode=j.modes.ESCAPED;break;case i+t+"-":this.mode=j.modes.RAW;break;case i+t+"#":this.mode=j.modes.COMMENT;break;case i+t+t:this.mode=j.modes.LITERAL,this.source+='    ; __append("'+n.replace(i+t+t,i+t)+'")\n';break;case t+t+e:this.mode=j.modes.LITERAL,this.source+='    ; __append("'+n.replace(t+t+e,t+e)+'")\n';break;case t+e:case"-"+t+e:case"_"+t+e:this.mode==j.modes.LITERAL&&this._addOutput(n),this.mode=null,this.truncate=0===n.indexOf("-")||0===n.indexOf("_");break;default:if(this.mode){switch(this.mode){case j.modes.EVAL:case j.modes.ESCAPED:case j.modes.RAW:n.lastIndexOf("//")>n.lastIndexOf("\n")&&(n+="\n")}switch(this.mode){case j.modes.EVAL:this.source+="    ; "+n+"\n";break;case j.modes.ESCAPED:this.source+="    ; __append(escapeFn("+x(n)+"))\n";break;case j.modes.RAW:this.source+="    ; __append("+x(n)+")\n";break;case j.modes.COMMENT:break;case j.modes.LITERAL:this._addOutput(n)}}else this._addOutput(n)}r.opts.compileDebug&&u&&(this.currentLine+=u,this.source+="    ; __line = "+this.currentLine+"\n")}},t.escapeXML=u.escapeXML,t.j=t.renderFile,t.VERSION=f,t.name=l,"undefined"!=typeof window&&(window.ejs=t)},{"../package.json":6,"./utils":2,fs:3,path:4}],2:[function(n,r,t){var i=/[|\\{}()[\]^$+*?.]/g,e=Object.prototype.hasOwnProperty,u=function(n,r){return e.apply(n,[r])};t.escapeRegExpChars=function(n){return n?String(n).replace(i,"\\$&"):""};var o={"&":"&amp;","<":"&lt;",">":"&gt;",'"':"&#34;","'":"&#39;"},f=/[&<>'"]/g;function a(n){return o[n]||n}var s='var _ENCODE_HTML_RULES = {\n      "&": "&amp;"\n    , "<": "&lt;"\n    , ">": "&gt;"\n    , \'"\': "&#34;"\n    , "\'": "&#39;"\n    }\n  , _MATCH_HTML = /[&<>\'"]/g;\nfunction encode_char(c) {\n  return _ENCODE_HTML_RULES[c] || c;\n};\n';t.escapeXML=function(n){return null==n?"":String(n).replace(f,a)},t.escapeXML.toString=function(){return Function.prototype.toString.call(this)+";\n"+s},t.shallowCopy=function(n,r){if(r=r||{},null!=n)for(var t in r)u(r,t)&&"__proto__"!==t&&"constructor"!==t&&(n[t]=r[t]);return n},t.shallowCopyFromList=function(n,r,t){if(t=t||[],r=r||{},null!=n)for(var i=0;i<t.length;i++){var e=t[i];if(void 0!==r[e]){if(!u(r,e))continue;if("__proto__"===e||"constructor"===e)continue;n[e]=r[e]}}return n},t.cache={_data:{},set:function(n,r){this._data[n]=r},get:function(n){return this._data[n]},remove:function(n){delete this._data[n]},reset:function(){this._data={}}},t.hyphenToCamel=function(n){return n.replace(/-[a-z]/g,(function(n){return n[1].toUpperCase()}))},t.createNullProtoObjWherePossible="function"==typeof Object.create?function(){return Object.create(null)}:{__proto__:null}instanceof Object?function(){return{}}:function(){return{__proto__:null}}},{}],3:[function(n,r,t){},{}],4:[function(n,r,t){(function(n){function r(n,r){for(var t=0,i=n.length-1;i>=0;i--){var e=n[i];"."===e?n.splice(i,1):".."===e?(n.splice(i,1),t++):t&&(n.splice(i,1),t--)}if(r)for(;t--;t)n.unshift("..");return n}function i(n){"string"!=typeof n&&(n+="");var r,t=0,i=-1,e=!0;for(r=n.length-1;r>=0;--r)if(47===n.charCodeAt(r)){if(!e){t=r+1;break}}else-1===i&&(e=!1,i=r+1);return-1===i?"":n.slice(t,i)}function e(n,r){if(n.filter)return n.filter(r);for(var t=[],i=0;i<n.length;i++)r(n[i],i,n)&&t.push(n[i]);return t}t.resolve=function(){for(var t="",i=!1,u=arguments.length-1;u>=-1&&!i;u--){var o=u>=0?arguments[u]:n.cwd();if("string"!=typeof o)throw new TypeError("Arguments to path.resolve must be strings");o&&(t=o+"/"+t,i="/"===o.charAt(0))}return(i?"/":"")+(t=r(e(t.split("/"),(function(n){return!!n})),!i).join("/"))||"."},t.normalize=function(n){var i=t.isAbsolute(n),o="/"===u(n,-1);return(n=r(e(n.split("/"),(function(n){return!!n})),!i).join("/"))||i||(n="."),n&&o&&(n+="/"),(i?"/":"")+n},t.isAbsolute=function(n){return"/"===n.charAt(0)},t.join=function(){var n=Array.prototype.slice.call(arguments,0);return t.normalize(e(n,(function(n,r){if("string"!=typeof n)throw new TypeError("Arguments to path.join must be strings");return n})).join("/"))},t.relative=function(n,r){function i(n){for(var r=0;r<n.length&&""===n[r];r++);for(var t=n.length-1;t>=0&&""===n[t];t--);return r>t?[]:n.slice(r,t-r+1)}n=t.resolve(n).substr(1),r=t.resolve(r).substr(1);for(var e=i(n.split("/")),u=i(r.split("/")),o=Math.min(e.length,u.length),f=o,a=0;a<o;a++)if(e[a]!==u[a]){f=a;break}var s=[];for(a=f;a<e.length;a++)s.push("..");return(s=s.concat(u.slice(f))).join("/")},t.sep="/",t.delimiter=":",t.dirname=function(n){if("string"!=typeof n&&(n+=""),0===n.length)return".";for(var r=n.charCodeAt(0),t=47===r,i=-1,e=!0,u=n.length-1;u>=1;--u)if(47===(r=n.charCodeAt(u))){if(!e){i=u;break}}else e=!1;return-1===i?t?"/":".":t&&1===i?"/":n.slice(0,i)},t.basename=function(n,r){var t=i(n);return r&&t.substr(-1*r.length)===r&&(t=t.substr(0,t.length-r.length)),t},t.extname=function(n){"string"!=typeof n&&(n+="");for(var r=-1,t=0,i=-1,e=!0,u=0,o=n.length-1;o>=0;--o){var f=n.charCodeAt(o);if(47!==f)-1===i&&(e=!1,i=o+1),46===f?-1===r?r=o:1!==u&&(u=1):-1!==r&&(u=-1);else if(!e){t=o+1;break}}return-1===r||-1===i||0===u||1===u&&r===i-1&&r===t+1?"":n.slice(r,i)};var u="b"==="ab".substr(-1)?function(n,r,t){return n.substr(r,t)}:function(n,r,t){return r<0&&(r=n.length+r),n.substr(r,t)}}).call(this,n("_process"))},{_process:5}],5:[function(n,r,t){var i,e,u=r.exports={};function o(){throw new Error("setTimeout has not been defined")}function f(){throw new Error("clearTimeout has not been defined")}function a(n){if(i===setTimeout)return setTimeout(n,0);if((i===o||!i)&&setTimeout)return i=setTimeout,setTimeout(n,0);try{return i(n,0)}catch(r){try{return i.call(null,n,0)}catch(r){return i.call(this,n,0)}}}function s(n){if(e===clearTimeout)return clearTimeout(n);if((e===f||!e)&&clearTimeout)return e=clearTimeout,clearTimeout(n);try{return e(n)}catch(r){try{return e.call(null,n)}catch(r){return e.call(this,n)}}}!function(){try{i="function"==typeof setTimeout?setTimeout:o}catch(n){i=o}try{e="function"==typeof clearTimeout?clearTimeout:f}catch(n){e=f}}();var c,h=[],l=!1,v=-1;function d(){l&&c&&(l=!1,c.length?h=c.concat(h):v=-1,h.length&&p())}function p(){if(!l){var n=a(d);l=!0;for(var r=h.length;r;){for(c=h,h=[];++v<r;)c&&c[v].run();v=-1,r=h.length}c=null,l=!1,s(n)}}function m(n,r){this.fun=n,this.array=r}function w(){}u.nextTick=function(n){var r=new Array(arguments.length-1);if(arguments.length>1)for(var t=1;t<arguments.length;t++)r[t-1]=arguments[t];h.push(new m(n,r)),1!==h.length||l||a(p)},m.prototype.run=function(){this.fun.apply(null,this.array)},u.title="browser",u.browser=!0,u.env={},u.argv=[],u.version="",u.versions={},u.on=w,u.addListener=w,u.once=w,u.off=w,u.removeListener=w,u.removeAllListeners=w,u.emit=w,u.prependListener=w,u.prependOnceListener=w,u.listeners=function(n){return[]},u.binding=function(n){throw new Error("process.binding is not supported")},u.cwd=function(){return"/"},u.chdir=function(n){throw new Error("process.chdir is not supported")},u.umask=function(){return 0}},{}],6:[function(n,r,t){r.exports={name:"ejs",description:"Embedded JavaScript templates",keywords:["template","engine","ejs"],version:"3.1.7",author:"Matthew Eernisse <mde@fleegix.org> (http://fleegix.org)",license:"Apache-2.0",bin:{ejs:"./bin/cli.js"},main:"./lib/ejs.js",jsdelivr:"ejs.min.js",unpkg:"ejs.min.js",repository:{type:"git",url:"git://github.com/mde/ejs.git"},bugs:"https://github.com/mde/ejs/issues",homepage:"https://github.com/mde/ejs",dependencies:{jake:"^10.8.5"},devDependencies:{browserify:"^16.5.1",eslint:"^6.8.0","git-directory-deploy":"^1.5.1",jsdoc:"^3.6.7","lru-cache":"^4.0.1",mocha:"^7.1.1","uglify-js":"^3.3.16"},engines:{node:">=0.10.0"},scripts:{test:"mocha"}}},{}]},{},[1])(1),h="undefined"==typeof global?window:global;function l(n){var r=function(n){var r=[];if("string"==typeof n)return{htmlSource:/<img/g.test(n)?n.replace(/"data:(\w+\/\w+);(\w+),(\S+)"/g,(function(n,t,i,e){var u="file:///C:/fake/image"+r.length+"."+t.split("/")[1];return r.push(c.render("------=mhtDocumentPart\nContent-Type: <%= contentType %>\nContent-Transfer-Encoding: <%= contentEncoding %>\nContent-Location: <%= contentLocation %>\n\n<%= encodedContent %>\n",{contentType:t,contentEncoding:i,contentLocation:u,encodedContent:e})),'"'.concat(u,'"')})):n,imageContentParts:r};throw new Error("Not a valid source provided!")}(n),t=r.htmlSource,i=r.imageContentParts;return c.render('MIME-Version: 1.0\nContent-Type: multipart/related;\n    type="text/html";\n    boundary="----=mhtDocumentPart"\n\n\n------=mhtDocumentPart\nContent-Type: text/html;\n    charset="utf-8"\nContent-Transfer-Encoding: quoted-printable\nContent-Location: file:///C:/fake/document.html\n\n<%- htmlSource %>\n\n<%= contentParts %>\n\n------=mhtDocumentPart--\n',{htmlSource:t.replace(/\=/g,"=3D"),contentParts:i.join("\n")})}function v(t,i,e){console.log({html:t});var u,o,s,v,d=new f;return d.file("[Content_Types].xml",'<?xml version="1.0" encoding="UTF-8" standalone="yes"?>\n<Types xmlns="http://schemas.openxmlformats.org/package/2006/content-types">\n  <Default Extension="rels" ContentType=\n    "application/vnd.openxmlformats-package.relationships+xml" />\n  <Override PartName="/word/document.xml" ContentType=\n    "application/vnd.openxmlformats-officedocument.wordprocessingml.document.main+xml"/>\n  <Override PartName="/word/afchunk.mht" ContentType="message/rfc822"/>\n</Types>\n'),d.folder("_rels").file(".rels",'<?xml version="1.0" encoding="UTF-8" standalone="yes"?>\n<Relationships xmlns="http://schemas.openxmlformats.org/package/2006/relationships">\n  <Relationship\n      Type="http://schemas.openxmlformats.org/officeDocument/2006/relationships/officeDocument"\n      Target="/word/document.xml" Id="R09c83fafc067488e" />\n</Relationships>\n'),d.folder("word").file("document.xml",(u=i,s=null!==(o=u.orientation)&&void 0!==o?o:"portrait",v={width:"landscape"==s?15840:12240,height:"landscape"==s?12240:15840,orient:s,margins:{top:1440,right:1440,bottom:1440,left:1440,header:720,footer:720,gutter:0}},c.render('<?xml version="1.0" encoding="UTF-8" standalone="yes"?>\n<w:document\n  xmlns:w="http://schemas.openxmlformats.org/wordprocessingml/2006/main"\n  xmlns:m="http://schemas.openxmlformats.org/officeDocument/2006/math"\n  xmlns:r="http://schemas.openxmlformats.org/officeDocument/2006/relationships"\n  xmlns:wp="http://schemas.openxmlformats.org/drawingml/2006/wordprocessingDrawing"\n  xmlns:a="http://schemas.openxmlformats.org/drawingml/2006/main"\n  xmlns:ns6="http://schemas.openxmlformats.org/schemaLibrary/2006/main"\n  xmlns:c="http://schemas.openxmlformats.org/drawingml/2006/chart"\n  xmlns:ns8="http://schemas.openxmlformats.org/drawingml/2006/chartDrawing"\n  xmlns:dgm="http://schemas.openxmlformats.org/drawingml/2006/diagram"\n  xmlns:pic="http://schemas.openxmlformats.org/drawingml/2006/picture"\n  xmlns:ns11="http://schemas.openxmlformats.org/drawingml/2006/spreadsheetDrawing"\n  xmlns:dsp="http://schemas.microsoft.com/office/drawing/2008/diagram"\n  xmlns:ns13="urn:schemas-microsoft-com:office:excel"\n  xmlns:o="urn:schemas-microsoft-com:office:office"\n  xmlns:v="urn:schemas-microsoft-com:vml"\n  xmlns:w10="urn:schemas-microsoft-com:office:word"\n  xmlns:ns17="urn:schemas-microsoft-com:office:powerpoint"\n  xmlns:odx="http://opendope.org/xpaths"\n  xmlns:odc="http://opendope.org/conditions"\n  xmlns:odq="http://opendope.org/questions"\n  xmlns:odi="http://opendope.org/components"\n  xmlns:odgm="http://opendope.org/SmartArt/DataHierarchy"\n  xmlns:ns24="http://schemas.openxmlformats.org/officeDocument/2006/bibliography"\n  xmlns:ns25="http://schemas.openxmlformats.org/drawingml/2006/compatibility"\n  xmlns:ns26="http://schemas.openxmlformats.org/drawingml/2006/lockedCanvas">\n  <w:body>\n    <w:altChunk r:id="htmlChunk" />\n    <w:sectPr>\n      <w:pgSz w:w="<%= width %>" w:h="<%= height %>" w:orient="<%= orient %>" />\n      <w:pgMar w:top="<%= margins.top %>"\n               w:right="<%= margins.right %>"\n               w:bottom="<%= margins.bottom %>"\n               w:left="<%= margins.left %>"\n               w:header="<%= margins.header %>"\n               w:footer="<%= margins.footer %>"\n               w:gutter="<%= margins.gutter %>"/>\n    </w:sectPr>\n  </w:body>\n</w:document>\n',a.exports.merge(v,u)))).file("afchunk.mht",l(t)).folder("_rels").file("document.xml.rels",'<?xml version="1.0" encoding="UTF-8" standalone="yes"?>\n<Relationships xmlns="http://schemas.openxmlformats.org/package/2006/relationships">\n  <Relationship Type="http://schemas.openxmlformats.org/officeDocument/2006/relationships/aFChunk"\n    Target="/word/afchunk.mht" Id="htmlChunk" />\n</Relationships>\n'),function(t,i){return n(this,void 0,void 0,(function(){var n,e;return r(this,(function(r){switch(r.label){case 0:return[4,t.generateAsync({type:"arraybuffer"})];case 1:if(n=r.sent(),e="vnd.openxmlformats-officedocument.wordprocessingml.document","blob"===i)return[2,new Blob([n],{type:"application/".concat(e)})];if("buffer"===i)return[2,new h.Buffer(new Uint8Array(n))];if(h.Blob)return[2,new Blob([n],{type:"application/".concat(e)})];if(h.Buffer)return[2,new h.Buffer(new Uint8Array(n))];throw new Error("Neither Blob nor Buffer are accessible in this environment. Consider adding Blob.js shim")}}))}))}(d,e)}export{v as asBlob};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaHRtbC1kb2N4LmpzIiwic291cmNlcyI6WyIuLi9ub2RlX21vZHVsZXMvdHNsaWIvdHNsaWIuZXM2LmpzIiwiLi4vbm9kZV9tb2R1bGVzL2pzemlwL2Rpc3QvanN6aXAubWluLmpzIiwiLi4vbm9kZV9tb2R1bGVzL2xvZGFzaC9sb2Rhc2guanMiLCIuLi9ub2RlX21vZHVsZXMvZWpzL2Vqcy5taW4uanMiLCIuLi9zcmMvaW5kZXgudHMiXSwic291cmNlc0NvbnRlbnQiOlsiLyoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKlxyXG5Db3B5cmlnaHQgKGMpIE1pY3Jvc29mdCBDb3Jwb3JhdGlvbi5cclxuXHJcblBlcm1pc3Npb24gdG8gdXNlLCBjb3B5LCBtb2RpZnksIGFuZC9vciBkaXN0cmlidXRlIHRoaXMgc29mdHdhcmUgZm9yIGFueVxyXG5wdXJwb3NlIHdpdGggb3Igd2l0aG91dCBmZWUgaXMgaGVyZWJ5IGdyYW50ZWQuXHJcblxyXG5USEUgU09GVFdBUkUgSVMgUFJPVklERUQgXCJBUyBJU1wiIEFORCBUSEUgQVVUSE9SIERJU0NMQUlNUyBBTEwgV0FSUkFOVElFUyBXSVRIXHJcblJFR0FSRCBUTyBUSElTIFNPRlRXQVJFIElOQ0xVRElORyBBTEwgSU1QTElFRCBXQVJSQU5USUVTIE9GIE1FUkNIQU5UQUJJTElUWVxyXG5BTkQgRklUTkVTUy4gSU4gTk8gRVZFTlQgU0hBTEwgVEhFIEFVVEhPUiBCRSBMSUFCTEUgRk9SIEFOWSBTUEVDSUFMLCBESVJFQ1QsXHJcbklORElSRUNULCBPUiBDT05TRVFVRU5USUFMIERBTUFHRVMgT1IgQU5ZIERBTUFHRVMgV0hBVFNPRVZFUiBSRVNVTFRJTkcgRlJPTVxyXG5MT1NTIE9GIFVTRSwgREFUQSBPUiBQUk9GSVRTLCBXSEVUSEVSIElOIEFOIEFDVElPTiBPRiBDT05UUkFDVCwgTkVHTElHRU5DRSBPUlxyXG5PVEhFUiBUT1JUSU9VUyBBQ1RJT04sIEFSSVNJTkcgT1VUIE9GIE9SIElOIENPTk5FQ1RJT04gV0lUSCBUSEUgVVNFIE9SXHJcblBFUkZPUk1BTkNFIE9GIFRISVMgU09GVFdBUkUuXHJcbioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqICovXHJcbi8qIGdsb2JhbCBSZWZsZWN0LCBQcm9taXNlICovXHJcblxyXG52YXIgZXh0ZW5kU3RhdGljcyA9IGZ1bmN0aW9uKGQsIGIpIHtcclxuICAgIGV4dGVuZFN0YXRpY3MgPSBPYmplY3Quc2V0UHJvdG90eXBlT2YgfHxcclxuICAgICAgICAoeyBfX3Byb3RvX186IFtdIH0gaW5zdGFuY2VvZiBBcnJheSAmJiBmdW5jdGlvbiAoZCwgYikgeyBkLl9fcHJvdG9fXyA9IGI7IH0pIHx8XHJcbiAgICAgICAgZnVuY3Rpb24gKGQsIGIpIHsgZm9yICh2YXIgcCBpbiBiKSBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKGIsIHApKSBkW3BdID0gYltwXTsgfTtcclxuICAgIHJldHVybiBleHRlbmRTdGF0aWNzKGQsIGIpO1xyXG59O1xyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIF9fZXh0ZW5kcyhkLCBiKSB7XHJcbiAgICBpZiAodHlwZW9mIGIgIT09IFwiZnVuY3Rpb25cIiAmJiBiICE9PSBudWxsKVxyXG4gICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoXCJDbGFzcyBleHRlbmRzIHZhbHVlIFwiICsgU3RyaW5nKGIpICsgXCIgaXMgbm90IGEgY29uc3RydWN0b3Igb3IgbnVsbFwiKTtcclxuICAgIGV4dGVuZFN0YXRpY3MoZCwgYik7XHJcbiAgICBmdW5jdGlvbiBfXygpIHsgdGhpcy5jb25zdHJ1Y3RvciA9IGQ7IH1cclxuICAgIGQucHJvdG90eXBlID0gYiA9PT0gbnVsbCA/IE9iamVjdC5jcmVhdGUoYikgOiAoX18ucHJvdG90eXBlID0gYi5wcm90b3R5cGUsIG5ldyBfXygpKTtcclxufVxyXG5cclxuZXhwb3J0IHZhciBfX2Fzc2lnbiA9IGZ1bmN0aW9uKCkge1xyXG4gICAgX19hc3NpZ24gPSBPYmplY3QuYXNzaWduIHx8IGZ1bmN0aW9uIF9fYXNzaWduKHQpIHtcclxuICAgICAgICBmb3IgKHZhciBzLCBpID0gMSwgbiA9IGFyZ3VtZW50cy5sZW5ndGg7IGkgPCBuOyBpKyspIHtcclxuICAgICAgICAgICAgcyA9IGFyZ3VtZW50c1tpXTtcclxuICAgICAgICAgICAgZm9yICh2YXIgcCBpbiBzKSBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHMsIHApKSB0W3BdID0gc1twXTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIHQ7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gX19hc3NpZ24uYXBwbHkodGhpcywgYXJndW1lbnRzKTtcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIF9fcmVzdChzLCBlKSB7XHJcbiAgICB2YXIgdCA9IHt9O1xyXG4gICAgZm9yICh2YXIgcCBpbiBzKSBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHMsIHApICYmIGUuaW5kZXhPZihwKSA8IDApXHJcbiAgICAgICAgdFtwXSA9IHNbcF07XHJcbiAgICBpZiAocyAhPSBudWxsICYmIHR5cGVvZiBPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzID09PSBcImZ1bmN0aW9uXCIpXHJcbiAgICAgICAgZm9yICh2YXIgaSA9IDAsIHAgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzKHMpOyBpIDwgcC5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgICAgICBpZiAoZS5pbmRleE9mKHBbaV0pIDwgMCAmJiBPYmplY3QucHJvdG90eXBlLnByb3BlcnR5SXNFbnVtZXJhYmxlLmNhbGwocywgcFtpXSkpXHJcbiAgICAgICAgICAgICAgICB0W3BbaV1dID0gc1twW2ldXTtcclxuICAgICAgICB9XHJcbiAgICByZXR1cm4gdDtcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIF9fZGVjb3JhdGUoZGVjb3JhdG9ycywgdGFyZ2V0LCBrZXksIGRlc2MpIHtcclxuICAgIHZhciBjID0gYXJndW1lbnRzLmxlbmd0aCwgciA9IGMgPCAzID8gdGFyZ2V0IDogZGVzYyA9PT0gbnVsbCA/IGRlc2MgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKHRhcmdldCwga2V5KSA6IGRlc2MsIGQ7XHJcbiAgICBpZiAodHlwZW9mIFJlZmxlY3QgPT09IFwib2JqZWN0XCIgJiYgdHlwZW9mIFJlZmxlY3QuZGVjb3JhdGUgPT09IFwiZnVuY3Rpb25cIikgciA9IFJlZmxlY3QuZGVjb3JhdGUoZGVjb3JhdG9ycywgdGFyZ2V0LCBrZXksIGRlc2MpO1xyXG4gICAgZWxzZSBmb3IgKHZhciBpID0gZGVjb3JhdG9ycy5sZW5ndGggLSAxOyBpID49IDA7IGktLSkgaWYgKGQgPSBkZWNvcmF0b3JzW2ldKSByID0gKGMgPCAzID8gZChyKSA6IGMgPiAzID8gZCh0YXJnZXQsIGtleSwgcikgOiBkKHRhcmdldCwga2V5KSkgfHwgcjtcclxuICAgIHJldHVybiBjID4gMyAmJiByICYmIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGtleSwgciksIHI7XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBfX3BhcmFtKHBhcmFtSW5kZXgsIGRlY29yYXRvcikge1xyXG4gICAgcmV0dXJuIGZ1bmN0aW9uICh0YXJnZXQsIGtleSkgeyBkZWNvcmF0b3IodGFyZ2V0LCBrZXksIHBhcmFtSW5kZXgpOyB9XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBfX21ldGFkYXRhKG1ldGFkYXRhS2V5LCBtZXRhZGF0YVZhbHVlKSB7XHJcbiAgICBpZiAodHlwZW9mIFJlZmxlY3QgPT09IFwib2JqZWN0XCIgJiYgdHlwZW9mIFJlZmxlY3QubWV0YWRhdGEgPT09IFwiZnVuY3Rpb25cIikgcmV0dXJuIFJlZmxlY3QubWV0YWRhdGEobWV0YWRhdGFLZXksIG1ldGFkYXRhVmFsdWUpO1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gX19hd2FpdGVyKHRoaXNBcmcsIF9hcmd1bWVudHMsIFAsIGdlbmVyYXRvcikge1xyXG4gICAgZnVuY3Rpb24gYWRvcHQodmFsdWUpIHsgcmV0dXJuIHZhbHVlIGluc3RhbmNlb2YgUCA/IHZhbHVlIDogbmV3IFAoZnVuY3Rpb24gKHJlc29sdmUpIHsgcmVzb2x2ZSh2YWx1ZSk7IH0pOyB9XHJcbiAgICByZXR1cm4gbmV3IChQIHx8IChQID0gUHJvbWlzZSkpKGZ1bmN0aW9uIChyZXNvbHZlLCByZWplY3QpIHtcclxuICAgICAgICBmdW5jdGlvbiBmdWxmaWxsZWQodmFsdWUpIHsgdHJ5IHsgc3RlcChnZW5lcmF0b3IubmV4dCh2YWx1ZSkpOyB9IGNhdGNoIChlKSB7IHJlamVjdChlKTsgfSB9XHJcbiAgICAgICAgZnVuY3Rpb24gcmVqZWN0ZWQodmFsdWUpIHsgdHJ5IHsgc3RlcChnZW5lcmF0b3JbXCJ0aHJvd1wiXSh2YWx1ZSkpOyB9IGNhdGNoIChlKSB7IHJlamVjdChlKTsgfSB9XHJcbiAgICAgICAgZnVuY3Rpb24gc3RlcChyZXN1bHQpIHsgcmVzdWx0LmRvbmUgPyByZXNvbHZlKHJlc3VsdC52YWx1ZSkgOiBhZG9wdChyZXN1bHQudmFsdWUpLnRoZW4oZnVsZmlsbGVkLCByZWplY3RlZCk7IH1cclxuICAgICAgICBzdGVwKChnZW5lcmF0b3IgPSBnZW5lcmF0b3IuYXBwbHkodGhpc0FyZywgX2FyZ3VtZW50cyB8fCBbXSkpLm5leHQoKSk7XHJcbiAgICB9KTtcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIF9fZ2VuZXJhdG9yKHRoaXNBcmcsIGJvZHkpIHtcclxuICAgIHZhciBfID0geyBsYWJlbDogMCwgc2VudDogZnVuY3Rpb24oKSB7IGlmICh0WzBdICYgMSkgdGhyb3cgdFsxXTsgcmV0dXJuIHRbMV07IH0sIHRyeXM6IFtdLCBvcHM6IFtdIH0sIGYsIHksIHQsIGc7XHJcbiAgICByZXR1cm4gZyA9IHsgbmV4dDogdmVyYigwKSwgXCJ0aHJvd1wiOiB2ZXJiKDEpLCBcInJldHVyblwiOiB2ZXJiKDIpIH0sIHR5cGVvZiBTeW1ib2wgPT09IFwiZnVuY3Rpb25cIiAmJiAoZ1tTeW1ib2wuaXRlcmF0b3JdID0gZnVuY3Rpb24oKSB7IHJldHVybiB0aGlzOyB9KSwgZztcclxuICAgIGZ1bmN0aW9uIHZlcmIobikgeyByZXR1cm4gZnVuY3Rpb24gKHYpIHsgcmV0dXJuIHN0ZXAoW24sIHZdKTsgfTsgfVxyXG4gICAgZnVuY3Rpb24gc3RlcChvcCkge1xyXG4gICAgICAgIGlmIChmKSB0aHJvdyBuZXcgVHlwZUVycm9yKFwiR2VuZXJhdG9yIGlzIGFscmVhZHkgZXhlY3V0aW5nLlwiKTtcclxuICAgICAgICB3aGlsZSAoXykgdHJ5IHtcclxuICAgICAgICAgICAgaWYgKGYgPSAxLCB5ICYmICh0ID0gb3BbMF0gJiAyID8geVtcInJldHVyblwiXSA6IG9wWzBdID8geVtcInRocm93XCJdIHx8ICgodCA9IHlbXCJyZXR1cm5cIl0pICYmIHQuY2FsbCh5KSwgMCkgOiB5Lm5leHQpICYmICEodCA9IHQuY2FsbCh5LCBvcFsxXSkpLmRvbmUpIHJldHVybiB0O1xyXG4gICAgICAgICAgICBpZiAoeSA9IDAsIHQpIG9wID0gW29wWzBdICYgMiwgdC52YWx1ZV07XHJcbiAgICAgICAgICAgIHN3aXRjaCAob3BbMF0pIHtcclxuICAgICAgICAgICAgICAgIGNhc2UgMDogY2FzZSAxOiB0ID0gb3A7IGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgY2FzZSA0OiBfLmxhYmVsKys7IHJldHVybiB7IHZhbHVlOiBvcFsxXSwgZG9uZTogZmFsc2UgfTtcclxuICAgICAgICAgICAgICAgIGNhc2UgNTogXy5sYWJlbCsrOyB5ID0gb3BbMV07IG9wID0gWzBdOyBjb250aW51ZTtcclxuICAgICAgICAgICAgICAgIGNhc2UgNzogb3AgPSBfLm9wcy5wb3AoKTsgXy50cnlzLnBvcCgpOyBjb250aW51ZTtcclxuICAgICAgICAgICAgICAgIGRlZmF1bHQ6XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKCEodCA9IF8udHJ5cywgdCA9IHQubGVuZ3RoID4gMCAmJiB0W3QubGVuZ3RoIC0gMV0pICYmIChvcFswXSA9PT0gNiB8fCBvcFswXSA9PT0gMikpIHsgXyA9IDA7IGNvbnRpbnVlOyB9XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKG9wWzBdID09PSAzICYmICghdCB8fCAob3BbMV0gPiB0WzBdICYmIG9wWzFdIDwgdFszXSkpKSB7IF8ubGFiZWwgPSBvcFsxXTsgYnJlYWs7IH1cclxuICAgICAgICAgICAgICAgICAgICBpZiAob3BbMF0gPT09IDYgJiYgXy5sYWJlbCA8IHRbMV0pIHsgXy5sYWJlbCA9IHRbMV07IHQgPSBvcDsgYnJlYWs7IH1cclxuICAgICAgICAgICAgICAgICAgICBpZiAodCAmJiBfLmxhYmVsIDwgdFsyXSkgeyBfLmxhYmVsID0gdFsyXTsgXy5vcHMucHVzaChvcCk7IGJyZWFrOyB9XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKHRbMl0pIF8ub3BzLnBvcCgpO1xyXG4gICAgICAgICAgICAgICAgICAgIF8udHJ5cy5wb3AoKTsgY29udGludWU7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgb3AgPSBib2R5LmNhbGwodGhpc0FyZywgXyk7XHJcbiAgICAgICAgfSBjYXRjaCAoZSkgeyBvcCA9IFs2LCBlXTsgeSA9IDA7IH0gZmluYWxseSB7IGYgPSB0ID0gMDsgfVxyXG4gICAgICAgIGlmIChvcFswXSAmIDUpIHRocm93IG9wWzFdOyByZXR1cm4geyB2YWx1ZTogb3BbMF0gPyBvcFsxXSA6IHZvaWQgMCwgZG9uZTogdHJ1ZSB9O1xyXG4gICAgfVxyXG59XHJcblxyXG5leHBvcnQgdmFyIF9fY3JlYXRlQmluZGluZyA9IE9iamVjdC5jcmVhdGUgPyAoZnVuY3Rpb24obywgbSwgaywgazIpIHtcclxuICAgIGlmIChrMiA9PT0gdW5kZWZpbmVkKSBrMiA9IGs7XHJcbiAgICB2YXIgZGVzYyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IobSwgayk7XHJcbiAgICBpZiAoIWRlc2MgfHwgKFwiZ2V0XCIgaW4gZGVzYyA/ICFtLl9fZXNNb2R1bGUgOiBkZXNjLndyaXRhYmxlIHx8IGRlc2MuY29uZmlndXJhYmxlKSkge1xyXG4gICAgICAgIGRlc2MgPSB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZnVuY3Rpb24oKSB7IHJldHVybiBtW2tdOyB9IH07XHJcbiAgICB9XHJcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkobywgazIsIGRlc2MpO1xyXG59KSA6IChmdW5jdGlvbihvLCBtLCBrLCBrMikge1xyXG4gICAgaWYgKGsyID09PSB1bmRlZmluZWQpIGsyID0gaztcclxuICAgIG9bazJdID0gbVtrXTtcclxufSk7XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gX19leHBvcnRTdGFyKG0sIG8pIHtcclxuICAgIGZvciAodmFyIHAgaW4gbSkgaWYgKHAgIT09IFwiZGVmYXVsdFwiICYmICFPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwobywgcCkpIF9fY3JlYXRlQmluZGluZyhvLCBtLCBwKTtcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIF9fdmFsdWVzKG8pIHtcclxuICAgIHZhciBzID0gdHlwZW9mIFN5bWJvbCA9PT0gXCJmdW5jdGlvblwiICYmIFN5bWJvbC5pdGVyYXRvciwgbSA9IHMgJiYgb1tzXSwgaSA9IDA7XHJcbiAgICBpZiAobSkgcmV0dXJuIG0uY2FsbChvKTtcclxuICAgIGlmIChvICYmIHR5cGVvZiBvLmxlbmd0aCA9PT0gXCJudW1iZXJcIikgcmV0dXJuIHtcclxuICAgICAgICBuZXh0OiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIGlmIChvICYmIGkgPj0gby5sZW5ndGgpIG8gPSB2b2lkIDA7XHJcbiAgICAgICAgICAgIHJldHVybiB7IHZhbHVlOiBvICYmIG9baSsrXSwgZG9uZTogIW8gfTtcclxuICAgICAgICB9XHJcbiAgICB9O1xyXG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcihzID8gXCJPYmplY3QgaXMgbm90IGl0ZXJhYmxlLlwiIDogXCJTeW1ib2wuaXRlcmF0b3IgaXMgbm90IGRlZmluZWQuXCIpO1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gX19yZWFkKG8sIG4pIHtcclxuICAgIHZhciBtID0gdHlwZW9mIFN5bWJvbCA9PT0gXCJmdW5jdGlvblwiICYmIG9bU3ltYm9sLml0ZXJhdG9yXTtcclxuICAgIGlmICghbSkgcmV0dXJuIG87XHJcbiAgICB2YXIgaSA9IG0uY2FsbChvKSwgciwgYXIgPSBbXSwgZTtcclxuICAgIHRyeSB7XHJcbiAgICAgICAgd2hpbGUgKChuID09PSB2b2lkIDAgfHwgbi0tID4gMCkgJiYgIShyID0gaS5uZXh0KCkpLmRvbmUpIGFyLnB1c2goci52YWx1ZSk7XHJcbiAgICB9XHJcbiAgICBjYXRjaCAoZXJyb3IpIHsgZSA9IHsgZXJyb3I6IGVycm9yIH07IH1cclxuICAgIGZpbmFsbHkge1xyXG4gICAgICAgIHRyeSB7XHJcbiAgICAgICAgICAgIGlmIChyICYmICFyLmRvbmUgJiYgKG0gPSBpW1wicmV0dXJuXCJdKSkgbS5jYWxsKGkpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBmaW5hbGx5IHsgaWYgKGUpIHRocm93IGUuZXJyb3I7IH1cclxuICAgIH1cclxuICAgIHJldHVybiBhcjtcclxufVxyXG5cclxuLyoqIEBkZXByZWNhdGVkICovXHJcbmV4cG9ydCBmdW5jdGlvbiBfX3NwcmVhZCgpIHtcclxuICAgIGZvciAodmFyIGFyID0gW10sIGkgPSAwOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKVxyXG4gICAgICAgIGFyID0gYXIuY29uY2F0KF9fcmVhZChhcmd1bWVudHNbaV0pKTtcclxuICAgIHJldHVybiBhcjtcclxufVxyXG5cclxuLyoqIEBkZXByZWNhdGVkICovXHJcbmV4cG9ydCBmdW5jdGlvbiBfX3NwcmVhZEFycmF5cygpIHtcclxuICAgIGZvciAodmFyIHMgPSAwLCBpID0gMCwgaWwgPSBhcmd1bWVudHMubGVuZ3RoOyBpIDwgaWw7IGkrKykgcyArPSBhcmd1bWVudHNbaV0ubGVuZ3RoO1xyXG4gICAgZm9yICh2YXIgciA9IEFycmF5KHMpLCBrID0gMCwgaSA9IDA7IGkgPCBpbDsgaSsrKVxyXG4gICAgICAgIGZvciAodmFyIGEgPSBhcmd1bWVudHNbaV0sIGogPSAwLCBqbCA9IGEubGVuZ3RoOyBqIDwgamw7IGorKywgaysrKVxyXG4gICAgICAgICAgICByW2tdID0gYVtqXTtcclxuICAgIHJldHVybiByO1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gX19zcHJlYWRBcnJheSh0bywgZnJvbSwgcGFjaykge1xyXG4gICAgaWYgKHBhY2sgfHwgYXJndW1lbnRzLmxlbmd0aCA9PT0gMikgZm9yICh2YXIgaSA9IDAsIGwgPSBmcm9tLmxlbmd0aCwgYXI7IGkgPCBsOyBpKyspIHtcclxuICAgICAgICBpZiAoYXIgfHwgIShpIGluIGZyb20pKSB7XHJcbiAgICAgICAgICAgIGlmICghYXIpIGFyID0gQXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGwoZnJvbSwgMCwgaSk7XHJcbiAgICAgICAgICAgIGFyW2ldID0gZnJvbVtpXTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICByZXR1cm4gdG8uY29uY2F0KGFyIHx8IEFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKGZyb20pKTtcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIF9fYXdhaXQodikge1xyXG4gICAgcmV0dXJuIHRoaXMgaW5zdGFuY2VvZiBfX2F3YWl0ID8gKHRoaXMudiA9IHYsIHRoaXMpIDogbmV3IF9fYXdhaXQodik7XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBfX2FzeW5jR2VuZXJhdG9yKHRoaXNBcmcsIF9hcmd1bWVudHMsIGdlbmVyYXRvcikge1xyXG4gICAgaWYgKCFTeW1ib2wuYXN5bmNJdGVyYXRvcikgdGhyb3cgbmV3IFR5cGVFcnJvcihcIlN5bWJvbC5hc3luY0l0ZXJhdG9yIGlzIG5vdCBkZWZpbmVkLlwiKTtcclxuICAgIHZhciBnID0gZ2VuZXJhdG9yLmFwcGx5KHRoaXNBcmcsIF9hcmd1bWVudHMgfHwgW10pLCBpLCBxID0gW107XHJcbiAgICByZXR1cm4gaSA9IHt9LCB2ZXJiKFwibmV4dFwiKSwgdmVyYihcInRocm93XCIpLCB2ZXJiKFwicmV0dXJuXCIpLCBpW1N5bWJvbC5hc3luY0l0ZXJhdG9yXSA9IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHRoaXM7IH0sIGk7XHJcbiAgICBmdW5jdGlvbiB2ZXJiKG4pIHsgaWYgKGdbbl0pIGlbbl0gPSBmdW5jdGlvbiAodikgeyByZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24gKGEsIGIpIHsgcS5wdXNoKFtuLCB2LCBhLCBiXSkgPiAxIHx8IHJlc3VtZShuLCB2KTsgfSk7IH07IH1cclxuICAgIGZ1bmN0aW9uIHJlc3VtZShuLCB2KSB7IHRyeSB7IHN0ZXAoZ1tuXSh2KSk7IH0gY2F0Y2ggKGUpIHsgc2V0dGxlKHFbMF1bM10sIGUpOyB9IH1cclxuICAgIGZ1bmN0aW9uIHN0ZXAocikgeyByLnZhbHVlIGluc3RhbmNlb2YgX19hd2FpdCA/IFByb21pc2UucmVzb2x2ZShyLnZhbHVlLnYpLnRoZW4oZnVsZmlsbCwgcmVqZWN0KSA6IHNldHRsZShxWzBdWzJdLCByKTsgfVxyXG4gICAgZnVuY3Rpb24gZnVsZmlsbCh2YWx1ZSkgeyByZXN1bWUoXCJuZXh0XCIsIHZhbHVlKTsgfVxyXG4gICAgZnVuY3Rpb24gcmVqZWN0KHZhbHVlKSB7IHJlc3VtZShcInRocm93XCIsIHZhbHVlKTsgfVxyXG4gICAgZnVuY3Rpb24gc2V0dGxlKGYsIHYpIHsgaWYgKGYodiksIHEuc2hpZnQoKSwgcS5sZW5ndGgpIHJlc3VtZShxWzBdWzBdLCBxWzBdWzFdKTsgfVxyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gX19hc3luY0RlbGVnYXRvcihvKSB7XHJcbiAgICB2YXIgaSwgcDtcclxuICAgIHJldHVybiBpID0ge30sIHZlcmIoXCJuZXh0XCIpLCB2ZXJiKFwidGhyb3dcIiwgZnVuY3Rpb24gKGUpIHsgdGhyb3cgZTsgfSksIHZlcmIoXCJyZXR1cm5cIiksIGlbU3ltYm9sLml0ZXJhdG9yXSA9IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHRoaXM7IH0sIGk7XHJcbiAgICBmdW5jdGlvbiB2ZXJiKG4sIGYpIHsgaVtuXSA9IG9bbl0gPyBmdW5jdGlvbiAodikgeyByZXR1cm4gKHAgPSAhcCkgPyB7IHZhbHVlOiBfX2F3YWl0KG9bbl0odikpLCBkb25lOiBuID09PSBcInJldHVyblwiIH0gOiBmID8gZih2KSA6IHY7IH0gOiBmOyB9XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBfX2FzeW5jVmFsdWVzKG8pIHtcclxuICAgIGlmICghU3ltYm9sLmFzeW5jSXRlcmF0b3IpIHRocm93IG5ldyBUeXBlRXJyb3IoXCJTeW1ib2wuYXN5bmNJdGVyYXRvciBpcyBub3QgZGVmaW5lZC5cIik7XHJcbiAgICB2YXIgbSA9IG9bU3ltYm9sLmFzeW5jSXRlcmF0b3JdLCBpO1xyXG4gICAgcmV0dXJuIG0gPyBtLmNhbGwobykgOiAobyA9IHR5cGVvZiBfX3ZhbHVlcyA9PT0gXCJmdW5jdGlvblwiID8gX192YWx1ZXMobykgOiBvW1N5bWJvbC5pdGVyYXRvcl0oKSwgaSA9IHt9LCB2ZXJiKFwibmV4dFwiKSwgdmVyYihcInRocm93XCIpLCB2ZXJiKFwicmV0dXJuXCIpLCBpW1N5bWJvbC5hc3luY0l0ZXJhdG9yXSA9IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHRoaXM7IH0sIGkpO1xyXG4gICAgZnVuY3Rpb24gdmVyYihuKSB7IGlbbl0gPSBvW25dICYmIGZ1bmN0aW9uICh2KSB7IHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbiAocmVzb2x2ZSwgcmVqZWN0KSB7IHYgPSBvW25dKHYpLCBzZXR0bGUocmVzb2x2ZSwgcmVqZWN0LCB2LmRvbmUsIHYudmFsdWUpOyB9KTsgfTsgfVxyXG4gICAgZnVuY3Rpb24gc2V0dGxlKHJlc29sdmUsIHJlamVjdCwgZCwgdikgeyBQcm9taXNlLnJlc29sdmUodikudGhlbihmdW5jdGlvbih2KSB7IHJlc29sdmUoeyB2YWx1ZTogdiwgZG9uZTogZCB9KTsgfSwgcmVqZWN0KTsgfVxyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gX19tYWtlVGVtcGxhdGVPYmplY3QoY29va2VkLCByYXcpIHtcclxuICAgIGlmIChPYmplY3QuZGVmaW5lUHJvcGVydHkpIHsgT2JqZWN0LmRlZmluZVByb3BlcnR5KGNvb2tlZCwgXCJyYXdcIiwgeyB2YWx1ZTogcmF3IH0pOyB9IGVsc2UgeyBjb29rZWQucmF3ID0gcmF3OyB9XHJcbiAgICByZXR1cm4gY29va2VkO1xyXG59O1xyXG5cclxudmFyIF9fc2V0TW9kdWxlRGVmYXVsdCA9IE9iamVjdC5jcmVhdGUgPyAoZnVuY3Rpb24obywgdikge1xyXG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KG8sIFwiZGVmYXVsdFwiLCB7IGVudW1lcmFibGU6IHRydWUsIHZhbHVlOiB2IH0pO1xyXG59KSA6IGZ1bmN0aW9uKG8sIHYpIHtcclxuICAgIG9bXCJkZWZhdWx0XCJdID0gdjtcclxufTtcclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBfX2ltcG9ydFN0YXIobW9kKSB7XHJcbiAgICBpZiAobW9kICYmIG1vZC5fX2VzTW9kdWxlKSByZXR1cm4gbW9kO1xyXG4gICAgdmFyIHJlc3VsdCA9IHt9O1xyXG4gICAgaWYgKG1vZCAhPSBudWxsKSBmb3IgKHZhciBrIGluIG1vZCkgaWYgKGsgIT09IFwiZGVmYXVsdFwiICYmIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChtb2QsIGspKSBfX2NyZWF0ZUJpbmRpbmcocmVzdWx0LCBtb2QsIGspO1xyXG4gICAgX19zZXRNb2R1bGVEZWZhdWx0KHJlc3VsdCwgbW9kKTtcclxuICAgIHJldHVybiByZXN1bHQ7XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBfX2ltcG9ydERlZmF1bHQobW9kKSB7XHJcbiAgICByZXR1cm4gKG1vZCAmJiBtb2QuX19lc01vZHVsZSkgPyBtb2QgOiB7IGRlZmF1bHQ6IG1vZCB9O1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gX19jbGFzc1ByaXZhdGVGaWVsZEdldChyZWNlaXZlciwgc3RhdGUsIGtpbmQsIGYpIHtcclxuICAgIGlmIChraW5kID09PSBcImFcIiAmJiAhZikgdGhyb3cgbmV3IFR5cGVFcnJvcihcIlByaXZhdGUgYWNjZXNzb3Igd2FzIGRlZmluZWQgd2l0aG91dCBhIGdldHRlclwiKTtcclxuICAgIGlmICh0eXBlb2Ygc3RhdGUgPT09IFwiZnVuY3Rpb25cIiA/IHJlY2VpdmVyICE9PSBzdGF0ZSB8fCAhZiA6ICFzdGF0ZS5oYXMocmVjZWl2ZXIpKSB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IHJlYWQgcHJpdmF0ZSBtZW1iZXIgZnJvbSBhbiBvYmplY3Qgd2hvc2UgY2xhc3MgZGlkIG5vdCBkZWNsYXJlIGl0XCIpO1xyXG4gICAgcmV0dXJuIGtpbmQgPT09IFwibVwiID8gZiA6IGtpbmQgPT09IFwiYVwiID8gZi5jYWxsKHJlY2VpdmVyKSA6IGYgPyBmLnZhbHVlIDogc3RhdGUuZ2V0KHJlY2VpdmVyKTtcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIF9fY2xhc3NQcml2YXRlRmllbGRTZXQocmVjZWl2ZXIsIHN0YXRlLCB2YWx1ZSwga2luZCwgZikge1xyXG4gICAgaWYgKGtpbmQgPT09IFwibVwiKSB0aHJvdyBuZXcgVHlwZUVycm9yKFwiUHJpdmF0ZSBtZXRob2QgaXMgbm90IHdyaXRhYmxlXCIpO1xyXG4gICAgaWYgKGtpbmQgPT09IFwiYVwiICYmICFmKSB0aHJvdyBuZXcgVHlwZUVycm9yKFwiUHJpdmF0ZSBhY2Nlc3NvciB3YXMgZGVmaW5lZCB3aXRob3V0IGEgc2V0dGVyXCIpO1xyXG4gICAgaWYgKHR5cGVvZiBzdGF0ZSA9PT0gXCJmdW5jdGlvblwiID8gcmVjZWl2ZXIgIT09IHN0YXRlIHx8ICFmIDogIXN0YXRlLmhhcyhyZWNlaXZlcikpIHRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3Qgd3JpdGUgcHJpdmF0ZSBtZW1iZXIgdG8gYW4gb2JqZWN0IHdob3NlIGNsYXNzIGRpZCBub3QgZGVjbGFyZSBpdFwiKTtcclxuICAgIHJldHVybiAoa2luZCA9PT0gXCJhXCIgPyBmLmNhbGwocmVjZWl2ZXIsIHZhbHVlKSA6IGYgPyBmLnZhbHVlID0gdmFsdWUgOiBzdGF0ZS5zZXQocmVjZWl2ZXIsIHZhbHVlKSksIHZhbHVlO1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gX19jbGFzc1ByaXZhdGVGaWVsZEluKHN0YXRlLCByZWNlaXZlcikge1xyXG4gICAgaWYgKHJlY2VpdmVyID09PSBudWxsIHx8ICh0eXBlb2YgcmVjZWl2ZXIgIT09IFwib2JqZWN0XCIgJiYgdHlwZW9mIHJlY2VpdmVyICE9PSBcImZ1bmN0aW9uXCIpKSB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IHVzZSAnaW4nIG9wZXJhdG9yIG9uIG5vbi1vYmplY3RcIik7XHJcbiAgICByZXR1cm4gdHlwZW9mIHN0YXRlID09PSBcImZ1bmN0aW9uXCIgPyByZWNlaXZlciA9PT0gc3RhdGUgOiBzdGF0ZS5oYXMocmVjZWl2ZXIpO1xyXG59XHJcbiIsIi8qIVxuXG5KU1ppcCB2My4xMC4wIC0gQSBKYXZhU2NyaXB0IGNsYXNzIGZvciBnZW5lcmF0aW5nIGFuZCByZWFkaW5nIHppcCBmaWxlc1xuPGh0dHA6Ly9zdHVhcnRrLmNvbS9qc3ppcD5cblxuKGMpIDIwMDktMjAxNiBTdHVhcnQgS25pZ2h0bGV5IDxzdHVhcnQgW2F0XSBzdHVhcnRrLmNvbT5cbkR1YWwgbGljZW5jZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIG9yIEdQTHYzLiBTZWUgaHR0cHM6Ly9yYXcuZ2l0aHViLmNvbS9TdHVrL2pzemlwL21haW4vTElDRU5TRS5tYXJrZG93bi5cblxuSlNaaXAgdXNlcyB0aGUgbGlicmFyeSBwYWtvIHJlbGVhc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSA6XG5odHRwczovL2dpdGh1Yi5jb20vbm9kZWNhL3Bha28vYmxvYi9tYWluL0xJQ0VOU0VcbiovXG5cbiFmdW5jdGlvbihlKXtpZihcIm9iamVjdFwiPT10eXBlb2YgZXhwb3J0cyYmXCJ1bmRlZmluZWRcIiE9dHlwZW9mIG1vZHVsZSltb2R1bGUuZXhwb3J0cz1lKCk7ZWxzZSBpZihcImZ1bmN0aW9uXCI9PXR5cGVvZiBkZWZpbmUmJmRlZmluZS5hbWQpZGVmaW5lKFtdLGUpO2Vsc2V7KFwidW5kZWZpbmVkXCIhPXR5cGVvZiB3aW5kb3c/d2luZG93OlwidW5kZWZpbmVkXCIhPXR5cGVvZiBnbG9iYWw/Z2xvYmFsOlwidW5kZWZpbmVkXCIhPXR5cGVvZiBzZWxmP3NlbGY6dGhpcykuSlNaaXA9ZSgpfX0oZnVuY3Rpb24oKXtyZXR1cm4gZnVuY3Rpb24gcyhhLG8saCl7ZnVuY3Rpb24gdShyLGUpe2lmKCFvW3JdKXtpZighYVtyXSl7dmFyIHQ9XCJmdW5jdGlvblwiPT10eXBlb2YgcmVxdWlyZSYmcmVxdWlyZTtpZighZSYmdClyZXR1cm4gdChyLCEwKTtpZihsKXJldHVybiBsKHIsITApO3ZhciBuPW5ldyBFcnJvcihcIkNhbm5vdCBmaW5kIG1vZHVsZSAnXCIrcitcIidcIik7dGhyb3cgbi5jb2RlPVwiTU9EVUxFX05PVF9GT1VORFwiLG59dmFyIGk9b1tyXT17ZXhwb3J0czp7fX07YVtyXVswXS5jYWxsKGkuZXhwb3J0cyxmdW5jdGlvbihlKXt2YXIgdD1hW3JdWzFdW2VdO3JldHVybiB1KHR8fGUpfSxpLGkuZXhwb3J0cyxzLGEsbyxoKX1yZXR1cm4gb1tyXS5leHBvcnRzfWZvcih2YXIgbD1cImZ1bmN0aW9uXCI9PXR5cGVvZiByZXF1aXJlJiZyZXF1aXJlLGU9MDtlPGgubGVuZ3RoO2UrKyl1KGhbZV0pO3JldHVybiB1fSh7MTpbZnVuY3Rpb24oZSx0LHIpe1widXNlIHN0cmljdFwiO3ZhciBkPWUoXCIuL3V0aWxzXCIpLGM9ZShcIi4vc3VwcG9ydFwiKSxwPVwiQUJDREVGR0hJSktMTU5PUFFSU1RVVldYWVphYmNkZWZnaGlqa2xtbm9wcXJzdHV2d3h5ejAxMjM0NTY3ODkrLz1cIjtyLmVuY29kZT1mdW5jdGlvbihlKXtmb3IodmFyIHQscixuLGkscyxhLG8saD1bXSx1PTAsbD1lLmxlbmd0aCxmPWwsYz1cInN0cmluZ1wiIT09ZC5nZXRUeXBlT2YoZSk7dTxlLmxlbmd0aDspZj1sLXUsbj1jPyh0PWVbdSsrXSxyPXU8bD9lW3UrK106MCx1PGw/ZVt1KytdOjApOih0PWUuY2hhckNvZGVBdCh1KyspLHI9dTxsP2UuY2hhckNvZGVBdCh1KyspOjAsdTxsP2UuY2hhckNvZGVBdCh1KyspOjApLGk9dD4+MixzPSgzJnQpPDw0fHI+PjQsYT0xPGY/KDE1JnIpPDwyfG4+PjY6NjQsbz0yPGY/NjMmbjo2NCxoLnB1c2gocC5jaGFyQXQoaSkrcC5jaGFyQXQocykrcC5jaGFyQXQoYSkrcC5jaGFyQXQobykpO3JldHVybiBoLmpvaW4oXCJcIil9LHIuZGVjb2RlPWZ1bmN0aW9uKGUpe3ZhciB0LHIsbixpLHMsYSxvPTAsaD0wLHU9XCJkYXRhOlwiO2lmKGUuc3Vic3RyKDAsdS5sZW5ndGgpPT09dSl0aHJvdyBuZXcgRXJyb3IoXCJJbnZhbGlkIGJhc2U2NCBpbnB1dCwgaXQgbG9va3MgbGlrZSBhIGRhdGEgdXJsLlwiKTt2YXIgbCxmPTMqKGU9ZS5yZXBsYWNlKC9bXkEtWmEtejAtOVxcK1xcL1xcPV0vZyxcIlwiKSkubGVuZ3RoLzQ7aWYoZS5jaGFyQXQoZS5sZW5ndGgtMSk9PT1wLmNoYXJBdCg2NCkmJmYtLSxlLmNoYXJBdChlLmxlbmd0aC0yKT09PXAuY2hhckF0KDY0KSYmZi0tLGYlMSE9MCl0aHJvdyBuZXcgRXJyb3IoXCJJbnZhbGlkIGJhc2U2NCBpbnB1dCwgYmFkIGNvbnRlbnQgbGVuZ3RoLlwiKTtmb3IobD1jLnVpbnQ4YXJyYXk/bmV3IFVpbnQ4QXJyYXkoMHxmKTpuZXcgQXJyYXkoMHxmKTtvPGUubGVuZ3RoOyl0PXAuaW5kZXhPZihlLmNoYXJBdChvKyspKTw8MnwoaT1wLmluZGV4T2YoZS5jaGFyQXQobysrKSkpPj40LHI9KDE1JmkpPDw0fChzPXAuaW5kZXhPZihlLmNoYXJBdChvKyspKSk+PjIsbj0oMyZzKTw8NnwoYT1wLmluZGV4T2YoZS5jaGFyQXQobysrKSkpLGxbaCsrXT10LDY0IT09cyYmKGxbaCsrXT1yKSw2NCE9PWEmJihsW2grK109bik7cmV0dXJuIGx9fSx7XCIuL3N1cHBvcnRcIjozMCxcIi4vdXRpbHNcIjozMn1dLDI6W2Z1bmN0aW9uKGUsdCxyKXtcInVzZSBzdHJpY3RcIjt2YXIgbj1lKFwiLi9leHRlcm5hbFwiKSxpPWUoXCIuL3N0cmVhbS9EYXRhV29ya2VyXCIpLHM9ZShcIi4vc3RyZWFtL0NyYzMyUHJvYmVcIiksYT1lKFwiLi9zdHJlYW0vRGF0YUxlbmd0aFByb2JlXCIpO2Z1bmN0aW9uIG8oZSx0LHIsbixpKXt0aGlzLmNvbXByZXNzZWRTaXplPWUsdGhpcy51bmNvbXByZXNzZWRTaXplPXQsdGhpcy5jcmMzMj1yLHRoaXMuY29tcHJlc3Npb249bix0aGlzLmNvbXByZXNzZWRDb250ZW50PWl9by5wcm90b3R5cGU9e2dldENvbnRlbnRXb3JrZXI6ZnVuY3Rpb24oKXt2YXIgZT1uZXcgaShuLlByb21pc2UucmVzb2x2ZSh0aGlzLmNvbXByZXNzZWRDb250ZW50KSkucGlwZSh0aGlzLmNvbXByZXNzaW9uLnVuY29tcHJlc3NXb3JrZXIoKSkucGlwZShuZXcgYShcImRhdGFfbGVuZ3RoXCIpKSx0PXRoaXM7cmV0dXJuIGUub24oXCJlbmRcIixmdW5jdGlvbigpe2lmKHRoaXMuc3RyZWFtSW5mby5kYXRhX2xlbmd0aCE9PXQudW5jb21wcmVzc2VkU2l6ZSl0aHJvdyBuZXcgRXJyb3IoXCJCdWcgOiB1bmNvbXByZXNzZWQgZGF0YSBzaXplIG1pc21hdGNoXCIpfSksZX0sZ2V0Q29tcHJlc3NlZFdvcmtlcjpmdW5jdGlvbigpe3JldHVybiBuZXcgaShuLlByb21pc2UucmVzb2x2ZSh0aGlzLmNvbXByZXNzZWRDb250ZW50KSkud2l0aFN0cmVhbUluZm8oXCJjb21wcmVzc2VkU2l6ZVwiLHRoaXMuY29tcHJlc3NlZFNpemUpLndpdGhTdHJlYW1JbmZvKFwidW5jb21wcmVzc2VkU2l6ZVwiLHRoaXMudW5jb21wcmVzc2VkU2l6ZSkud2l0aFN0cmVhbUluZm8oXCJjcmMzMlwiLHRoaXMuY3JjMzIpLndpdGhTdHJlYW1JbmZvKFwiY29tcHJlc3Npb25cIix0aGlzLmNvbXByZXNzaW9uKX19LG8uY3JlYXRlV29ya2VyRnJvbT1mdW5jdGlvbihlLHQscil7cmV0dXJuIGUucGlwZShuZXcgcykucGlwZShuZXcgYShcInVuY29tcHJlc3NlZFNpemVcIikpLnBpcGUodC5jb21wcmVzc1dvcmtlcihyKSkucGlwZShuZXcgYShcImNvbXByZXNzZWRTaXplXCIpKS53aXRoU3RyZWFtSW5mbyhcImNvbXByZXNzaW9uXCIsdCl9LHQuZXhwb3J0cz1vfSx7XCIuL2V4dGVybmFsXCI6NixcIi4vc3RyZWFtL0NyYzMyUHJvYmVcIjoyNSxcIi4vc3RyZWFtL0RhdGFMZW5ndGhQcm9iZVwiOjI2LFwiLi9zdHJlYW0vRGF0YVdvcmtlclwiOjI3fV0sMzpbZnVuY3Rpb24oZSx0LHIpe1widXNlIHN0cmljdFwiO3ZhciBuPWUoXCIuL3N0cmVhbS9HZW5lcmljV29ya2VyXCIpO3IuU1RPUkU9e21hZ2ljOlwiXFwwXFwwXCIsY29tcHJlc3NXb3JrZXI6ZnVuY3Rpb24oZSl7cmV0dXJuIG5ldyBuKFwiU1RPUkUgY29tcHJlc3Npb25cIil9LHVuY29tcHJlc3NXb3JrZXI6ZnVuY3Rpb24oKXtyZXR1cm4gbmV3IG4oXCJTVE9SRSBkZWNvbXByZXNzaW9uXCIpfX0sci5ERUZMQVRFPWUoXCIuL2ZsYXRlXCIpfSx7XCIuL2ZsYXRlXCI6NyxcIi4vc3RyZWFtL0dlbmVyaWNXb3JrZXJcIjoyOH1dLDQ6W2Z1bmN0aW9uKGUsdCxyKXtcInVzZSBzdHJpY3RcIjt2YXIgbj1lKFwiLi91dGlsc1wiKTt2YXIgbz1mdW5jdGlvbigpe2Zvcih2YXIgZSx0PVtdLHI9MDtyPDI1NjtyKyspe2U9cjtmb3IodmFyIG49MDtuPDg7bisrKWU9MSZlPzM5ODgyOTIzODReZT4+PjE6ZT4+PjE7dFtyXT1lfXJldHVybiB0fSgpO3QuZXhwb3J0cz1mdW5jdGlvbihlLHQpe3JldHVybiB2b2lkIDAhPT1lJiZlLmxlbmd0aD9cInN0cmluZ1wiIT09bi5nZXRUeXBlT2YoZSk/ZnVuY3Rpb24oZSx0LHIsbil7dmFyIGk9byxzPW4rcjtlXj0tMTtmb3IodmFyIGE9bjthPHM7YSsrKWU9ZT4+PjheaVsyNTUmKGVedFthXSldO3JldHVybi0xXmV9KDB8dCxlLGUubGVuZ3RoLDApOmZ1bmN0aW9uKGUsdCxyLG4pe3ZhciBpPW8scz1uK3I7ZV49LTE7Zm9yKHZhciBhPW47YTxzO2ErKyllPWU+Pj44XmlbMjU1JihlXnQuY2hhckNvZGVBdChhKSldO3JldHVybi0xXmV9KDB8dCxlLGUubGVuZ3RoLDApOjB9fSx7XCIuL3V0aWxzXCI6MzJ9XSw1OltmdW5jdGlvbihlLHQscil7XCJ1c2Ugc3RyaWN0XCI7ci5iYXNlNjQ9ITEsci5iaW5hcnk9ITEsci5kaXI9ITEsci5jcmVhdGVGb2xkZXJzPSEwLHIuZGF0ZT1udWxsLHIuY29tcHJlc3Npb249bnVsbCxyLmNvbXByZXNzaW9uT3B0aW9ucz1udWxsLHIuY29tbWVudD1udWxsLHIudW5peFBlcm1pc3Npb25zPW51bGwsci5kb3NQZXJtaXNzaW9ucz1udWxsfSx7fV0sNjpbZnVuY3Rpb24oZSx0LHIpe1widXNlIHN0cmljdFwiO3ZhciBuPW51bGw7bj1cInVuZGVmaW5lZFwiIT10eXBlb2YgUHJvbWlzZT9Qcm9taXNlOmUoXCJsaWVcIiksdC5leHBvcnRzPXtQcm9taXNlOm59fSx7bGllOjM3fV0sNzpbZnVuY3Rpb24oZSx0LHIpe1widXNlIHN0cmljdFwiO3ZhciBuPVwidW5kZWZpbmVkXCIhPXR5cGVvZiBVaW50OEFycmF5JiZcInVuZGVmaW5lZFwiIT10eXBlb2YgVWludDE2QXJyYXkmJlwidW5kZWZpbmVkXCIhPXR5cGVvZiBVaW50MzJBcnJheSxpPWUoXCJwYWtvXCIpLHM9ZShcIi4vdXRpbHNcIiksYT1lKFwiLi9zdHJlYW0vR2VuZXJpY1dvcmtlclwiKSxvPW4/XCJ1aW50OGFycmF5XCI6XCJhcnJheVwiO2Z1bmN0aW9uIGgoZSx0KXthLmNhbGwodGhpcyxcIkZsYXRlV29ya2VyL1wiK2UpLHRoaXMuX3Bha289bnVsbCx0aGlzLl9wYWtvQWN0aW9uPWUsdGhpcy5fcGFrb09wdGlvbnM9dCx0aGlzLm1ldGE9e319ci5tYWdpYz1cIlxcYlxcMFwiLHMuaW5oZXJpdHMoaCxhKSxoLnByb3RvdHlwZS5wcm9jZXNzQ2h1bms9ZnVuY3Rpb24oZSl7dGhpcy5tZXRhPWUubWV0YSxudWxsPT09dGhpcy5fcGFrbyYmdGhpcy5fY3JlYXRlUGFrbygpLHRoaXMuX3Bha28ucHVzaChzLnRyYW5zZm9ybVRvKG8sZS5kYXRhKSwhMSl9LGgucHJvdG90eXBlLmZsdXNoPWZ1bmN0aW9uKCl7YS5wcm90b3R5cGUuZmx1c2guY2FsbCh0aGlzKSxudWxsPT09dGhpcy5fcGFrbyYmdGhpcy5fY3JlYXRlUGFrbygpLHRoaXMuX3Bha28ucHVzaChbXSwhMCl9LGgucHJvdG90eXBlLmNsZWFuVXA9ZnVuY3Rpb24oKXthLnByb3RvdHlwZS5jbGVhblVwLmNhbGwodGhpcyksdGhpcy5fcGFrbz1udWxsfSxoLnByb3RvdHlwZS5fY3JlYXRlUGFrbz1mdW5jdGlvbigpe3RoaXMuX3Bha289bmV3IGlbdGhpcy5fcGFrb0FjdGlvbl0oe3JhdzohMCxsZXZlbDp0aGlzLl9wYWtvT3B0aW9ucy5sZXZlbHx8LTF9KTt2YXIgdD10aGlzO3RoaXMuX3Bha28ub25EYXRhPWZ1bmN0aW9uKGUpe3QucHVzaCh7ZGF0YTplLG1ldGE6dC5tZXRhfSl9fSxyLmNvbXByZXNzV29ya2VyPWZ1bmN0aW9uKGUpe3JldHVybiBuZXcgaChcIkRlZmxhdGVcIixlKX0sci51bmNvbXByZXNzV29ya2VyPWZ1bmN0aW9uKCl7cmV0dXJuIG5ldyBoKFwiSW5mbGF0ZVwiLHt9KX19LHtcIi4vc3RyZWFtL0dlbmVyaWNXb3JrZXJcIjoyOCxcIi4vdXRpbHNcIjozMixwYWtvOjM4fV0sODpbZnVuY3Rpb24oZSx0LHIpe1widXNlIHN0cmljdFwiO2Z1bmN0aW9uIEEoZSx0KXt2YXIgcixuPVwiXCI7Zm9yKHI9MDtyPHQ7cisrKW4rPVN0cmluZy5mcm9tQ2hhckNvZGUoMjU1JmUpLGU+Pj49ODtyZXR1cm4gbn1mdW5jdGlvbiBuKGUsdCxyLG4saSxzKXt2YXIgYSxvLGg9ZS5maWxlLHU9ZS5jb21wcmVzc2lvbixsPXMhPT1PLnV0ZjhlbmNvZGUsZj1JLnRyYW5zZm9ybVRvKFwic3RyaW5nXCIscyhoLm5hbWUpKSxjPUkudHJhbnNmb3JtVG8oXCJzdHJpbmdcIixPLnV0ZjhlbmNvZGUoaC5uYW1lKSksZD1oLmNvbW1lbnQscD1JLnRyYW5zZm9ybVRvKFwic3RyaW5nXCIscyhkKSksbT1JLnRyYW5zZm9ybVRvKFwic3RyaW5nXCIsTy51dGY4ZW5jb2RlKGQpKSxfPWMubGVuZ3RoIT09aC5uYW1lLmxlbmd0aCxnPW0ubGVuZ3RoIT09ZC5sZW5ndGgsYj1cIlwiLHY9XCJcIix5PVwiXCIsdz1oLmRpcixrPWguZGF0ZSx4PXtjcmMzMjowLGNvbXByZXNzZWRTaXplOjAsdW5jb21wcmVzc2VkU2l6ZTowfTt0JiYhcnx8KHguY3JjMzI9ZS5jcmMzMix4LmNvbXByZXNzZWRTaXplPWUuY29tcHJlc3NlZFNpemUseC51bmNvbXByZXNzZWRTaXplPWUudW5jb21wcmVzc2VkU2l6ZSk7dmFyIFM9MDt0JiYoU3w9OCksbHx8IV8mJiFnfHwoU3w9MjA0OCk7dmFyIHo9MCxDPTA7dyYmKHp8PTE2KSxcIlVOSVhcIj09PWk/KEM9Nzk4LHp8PWZ1bmN0aW9uKGUsdCl7dmFyIHI9ZTtyZXR1cm4gZXx8KHI9dD8xNjg5MzozMzIwNCksKDY1NTM1JnIpPDwxNn0oaC51bml4UGVybWlzc2lvbnMsdykpOihDPTIwLHp8PWZ1bmN0aW9uKGUpe3JldHVybiA2MyYoZXx8MCl9KGguZG9zUGVybWlzc2lvbnMpKSxhPWsuZ2V0VVRDSG91cnMoKSxhPDw9NixhfD1rLmdldFVUQ01pbnV0ZXMoKSxhPDw9NSxhfD1rLmdldFVUQ1NlY29uZHMoKS8yLG89ay5nZXRVVENGdWxsWWVhcigpLTE5ODAsbzw8PTQsb3w9ay5nZXRVVENNb250aCgpKzEsbzw8PTUsb3w9ay5nZXRVVENEYXRlKCksXyYmKHY9QSgxLDEpK0EoQihmKSw0KStjLGIrPVwidXBcIitBKHYubGVuZ3RoLDIpK3YpLGcmJih5PUEoMSwxKStBKEIocCksNCkrbSxiKz1cInVjXCIrQSh5Lmxlbmd0aCwyKSt5KTt2YXIgRT1cIlwiO3JldHVybiBFKz1cIlxcblxcMFwiLEUrPUEoUywyKSxFKz11Lm1hZ2ljLEUrPUEoYSwyKSxFKz1BKG8sMiksRSs9QSh4LmNyYzMyLDQpLEUrPUEoeC5jb21wcmVzc2VkU2l6ZSw0KSxFKz1BKHgudW5jb21wcmVzc2VkU2l6ZSw0KSxFKz1BKGYubGVuZ3RoLDIpLEUrPUEoYi5sZW5ndGgsMikse2ZpbGVSZWNvcmQ6Ui5MT0NBTF9GSUxFX0hFQURFUitFK2YrYixkaXJSZWNvcmQ6Ui5DRU5UUkFMX0ZJTEVfSEVBREVSK0EoQywyKStFK0EocC5sZW5ndGgsMikrXCJcXDBcXDBcXDBcXDBcIitBKHosNCkrQShuLDQpK2YrYitwfX12YXIgST1lKFwiLi4vdXRpbHNcIiksaT1lKFwiLi4vc3RyZWFtL0dlbmVyaWNXb3JrZXJcIiksTz1lKFwiLi4vdXRmOFwiKSxCPWUoXCIuLi9jcmMzMlwiKSxSPWUoXCIuLi9zaWduYXR1cmVcIik7ZnVuY3Rpb24gcyhlLHQscixuKXtpLmNhbGwodGhpcyxcIlppcEZpbGVXb3JrZXJcIiksdGhpcy5ieXRlc1dyaXR0ZW49MCx0aGlzLnppcENvbW1lbnQ9dCx0aGlzLnppcFBsYXRmb3JtPXIsdGhpcy5lbmNvZGVGaWxlTmFtZT1uLHRoaXMuc3RyZWFtRmlsZXM9ZSx0aGlzLmFjY3VtdWxhdGU9ITEsdGhpcy5jb250ZW50QnVmZmVyPVtdLHRoaXMuZGlyUmVjb3Jkcz1bXSx0aGlzLmN1cnJlbnRTb3VyY2VPZmZzZXQ9MCx0aGlzLmVudHJpZXNDb3VudD0wLHRoaXMuY3VycmVudEZpbGU9bnVsbCx0aGlzLl9zb3VyY2VzPVtdfUkuaW5oZXJpdHMocyxpKSxzLnByb3RvdHlwZS5wdXNoPWZ1bmN0aW9uKGUpe3ZhciB0PWUubWV0YS5wZXJjZW50fHwwLHI9dGhpcy5lbnRyaWVzQ291bnQsbj10aGlzLl9zb3VyY2VzLmxlbmd0aDt0aGlzLmFjY3VtdWxhdGU/dGhpcy5jb250ZW50QnVmZmVyLnB1c2goZSk6KHRoaXMuYnl0ZXNXcml0dGVuKz1lLmRhdGEubGVuZ3RoLGkucHJvdG90eXBlLnB1c2guY2FsbCh0aGlzLHtkYXRhOmUuZGF0YSxtZXRhOntjdXJyZW50RmlsZTp0aGlzLmN1cnJlbnRGaWxlLHBlcmNlbnQ6cj8odCsxMDAqKHItbi0xKSkvcjoxMDB9fSkpfSxzLnByb3RvdHlwZS5vcGVuZWRTb3VyY2U9ZnVuY3Rpb24oZSl7dGhpcy5jdXJyZW50U291cmNlT2Zmc2V0PXRoaXMuYnl0ZXNXcml0dGVuLHRoaXMuY3VycmVudEZpbGU9ZS5maWxlLm5hbWU7dmFyIHQ9dGhpcy5zdHJlYW1GaWxlcyYmIWUuZmlsZS5kaXI7aWYodCl7dmFyIHI9bihlLHQsITEsdGhpcy5jdXJyZW50U291cmNlT2Zmc2V0LHRoaXMuemlwUGxhdGZvcm0sdGhpcy5lbmNvZGVGaWxlTmFtZSk7dGhpcy5wdXNoKHtkYXRhOnIuZmlsZVJlY29yZCxtZXRhOntwZXJjZW50OjB9fSl9ZWxzZSB0aGlzLmFjY3VtdWxhdGU9ITB9LHMucHJvdG90eXBlLmNsb3NlZFNvdXJjZT1mdW5jdGlvbihlKXt0aGlzLmFjY3VtdWxhdGU9ITE7dmFyIHQ9dGhpcy5zdHJlYW1GaWxlcyYmIWUuZmlsZS5kaXIscj1uKGUsdCwhMCx0aGlzLmN1cnJlbnRTb3VyY2VPZmZzZXQsdGhpcy56aXBQbGF0Zm9ybSx0aGlzLmVuY29kZUZpbGVOYW1lKTtpZih0aGlzLmRpclJlY29yZHMucHVzaChyLmRpclJlY29yZCksdCl0aGlzLnB1c2goe2RhdGE6ZnVuY3Rpb24oZSl7cmV0dXJuIFIuREFUQV9ERVNDUklQVE9SK0EoZS5jcmMzMiw0KStBKGUuY29tcHJlc3NlZFNpemUsNCkrQShlLnVuY29tcHJlc3NlZFNpemUsNCl9KGUpLG1ldGE6e3BlcmNlbnQ6MTAwfX0pO2Vsc2UgZm9yKHRoaXMucHVzaCh7ZGF0YTpyLmZpbGVSZWNvcmQsbWV0YTp7cGVyY2VudDowfX0pO3RoaXMuY29udGVudEJ1ZmZlci5sZW5ndGg7KXRoaXMucHVzaCh0aGlzLmNvbnRlbnRCdWZmZXIuc2hpZnQoKSk7dGhpcy5jdXJyZW50RmlsZT1udWxsfSxzLnByb3RvdHlwZS5mbHVzaD1mdW5jdGlvbigpe2Zvcih2YXIgZT10aGlzLmJ5dGVzV3JpdHRlbix0PTA7dDx0aGlzLmRpclJlY29yZHMubGVuZ3RoO3QrKyl0aGlzLnB1c2goe2RhdGE6dGhpcy5kaXJSZWNvcmRzW3RdLG1ldGE6e3BlcmNlbnQ6MTAwfX0pO3ZhciByPXRoaXMuYnl0ZXNXcml0dGVuLWUsbj1mdW5jdGlvbihlLHQscixuLGkpe3ZhciBzPUkudHJhbnNmb3JtVG8oXCJzdHJpbmdcIixpKG4pKTtyZXR1cm4gUi5DRU5UUkFMX0RJUkVDVE9SWV9FTkQrXCJcXDBcXDBcXDBcXDBcIitBKGUsMikrQShlLDIpK0EodCw0KStBKHIsNCkrQShzLmxlbmd0aCwyKStzfSh0aGlzLmRpclJlY29yZHMubGVuZ3RoLHIsZSx0aGlzLnppcENvbW1lbnQsdGhpcy5lbmNvZGVGaWxlTmFtZSk7dGhpcy5wdXNoKHtkYXRhOm4sbWV0YTp7cGVyY2VudDoxMDB9fSl9LHMucHJvdG90eXBlLnByZXBhcmVOZXh0U291cmNlPWZ1bmN0aW9uKCl7dGhpcy5wcmV2aW91cz10aGlzLl9zb3VyY2VzLnNoaWZ0KCksdGhpcy5vcGVuZWRTb3VyY2UodGhpcy5wcmV2aW91cy5zdHJlYW1JbmZvKSx0aGlzLmlzUGF1c2VkP3RoaXMucHJldmlvdXMucGF1c2UoKTp0aGlzLnByZXZpb3VzLnJlc3VtZSgpfSxzLnByb3RvdHlwZS5yZWdpc3RlclByZXZpb3VzPWZ1bmN0aW9uKGUpe3RoaXMuX3NvdXJjZXMucHVzaChlKTt2YXIgdD10aGlzO3JldHVybiBlLm9uKFwiZGF0YVwiLGZ1bmN0aW9uKGUpe3QucHJvY2Vzc0NodW5rKGUpfSksZS5vbihcImVuZFwiLGZ1bmN0aW9uKCl7dC5jbG9zZWRTb3VyY2UodC5wcmV2aW91cy5zdHJlYW1JbmZvKSx0Ll9zb3VyY2VzLmxlbmd0aD90LnByZXBhcmVOZXh0U291cmNlKCk6dC5lbmQoKX0pLGUub24oXCJlcnJvclwiLGZ1bmN0aW9uKGUpe3QuZXJyb3IoZSl9KSx0aGlzfSxzLnByb3RvdHlwZS5yZXN1bWU9ZnVuY3Rpb24oKXtyZXR1cm4hIWkucHJvdG90eXBlLnJlc3VtZS5jYWxsKHRoaXMpJiYoIXRoaXMucHJldmlvdXMmJnRoaXMuX3NvdXJjZXMubGVuZ3RoPyh0aGlzLnByZXBhcmVOZXh0U291cmNlKCksITApOnRoaXMucHJldmlvdXN8fHRoaXMuX3NvdXJjZXMubGVuZ3RofHx0aGlzLmdlbmVyYXRlZEVycm9yP3ZvaWQgMDoodGhpcy5lbmQoKSwhMCkpfSxzLnByb3RvdHlwZS5lcnJvcj1mdW5jdGlvbihlKXt2YXIgdD10aGlzLl9zb3VyY2VzO2lmKCFpLnByb3RvdHlwZS5lcnJvci5jYWxsKHRoaXMsZSkpcmV0dXJuITE7Zm9yKHZhciByPTA7cjx0Lmxlbmd0aDtyKyspdHJ5e3Rbcl0uZXJyb3IoZSl9Y2F0Y2goZSl7fXJldHVybiEwfSxzLnByb3RvdHlwZS5sb2NrPWZ1bmN0aW9uKCl7aS5wcm90b3R5cGUubG9jay5jYWxsKHRoaXMpO2Zvcih2YXIgZT10aGlzLl9zb3VyY2VzLHQ9MDt0PGUubGVuZ3RoO3QrKyllW3RdLmxvY2soKX0sdC5leHBvcnRzPXN9LHtcIi4uL2NyYzMyXCI6NCxcIi4uL3NpZ25hdHVyZVwiOjIzLFwiLi4vc3RyZWFtL0dlbmVyaWNXb3JrZXJcIjoyOCxcIi4uL3V0ZjhcIjozMSxcIi4uL3V0aWxzXCI6MzJ9XSw5OltmdW5jdGlvbihlLHQscil7XCJ1c2Ugc3RyaWN0XCI7dmFyIHU9ZShcIi4uL2NvbXByZXNzaW9uc1wiKSxuPWUoXCIuL1ppcEZpbGVXb3JrZXJcIik7ci5nZW5lcmF0ZVdvcmtlcj1mdW5jdGlvbihlLGEsdCl7dmFyIG89bmV3IG4oYS5zdHJlYW1GaWxlcyx0LGEucGxhdGZvcm0sYS5lbmNvZGVGaWxlTmFtZSksaD0wO3RyeXtlLmZvckVhY2goZnVuY3Rpb24oZSx0KXtoKys7dmFyIHI9ZnVuY3Rpb24oZSx0KXt2YXIgcj1lfHx0LG49dVtyXTtpZighbil0aHJvdyBuZXcgRXJyb3IocitcIiBpcyBub3QgYSB2YWxpZCBjb21wcmVzc2lvbiBtZXRob2QgIVwiKTtyZXR1cm4gbn0odC5vcHRpb25zLmNvbXByZXNzaW9uLGEuY29tcHJlc3Npb24pLG49dC5vcHRpb25zLmNvbXByZXNzaW9uT3B0aW9uc3x8YS5jb21wcmVzc2lvbk9wdGlvbnN8fHt9LGk9dC5kaXIscz10LmRhdGU7dC5fY29tcHJlc3NXb3JrZXIocixuKS53aXRoU3RyZWFtSW5mbyhcImZpbGVcIix7bmFtZTplLGRpcjppLGRhdGU6cyxjb21tZW50OnQuY29tbWVudHx8XCJcIix1bml4UGVybWlzc2lvbnM6dC51bml4UGVybWlzc2lvbnMsZG9zUGVybWlzc2lvbnM6dC5kb3NQZXJtaXNzaW9uc30pLnBpcGUobyl9KSxvLmVudHJpZXNDb3VudD1ofWNhdGNoKGUpe28uZXJyb3IoZSl9cmV0dXJuIG99fSx7XCIuLi9jb21wcmVzc2lvbnNcIjozLFwiLi9aaXBGaWxlV29ya2VyXCI6OH1dLDEwOltmdW5jdGlvbihlLHQscil7XCJ1c2Ugc3RyaWN0XCI7ZnVuY3Rpb24gbigpe2lmKCEodGhpcyBpbnN0YW5jZW9mIG4pKXJldHVybiBuZXcgbjtpZihhcmd1bWVudHMubGVuZ3RoKXRocm93IG5ldyBFcnJvcihcIlRoZSBjb25zdHJ1Y3RvciB3aXRoIHBhcmFtZXRlcnMgaGFzIGJlZW4gcmVtb3ZlZCBpbiBKU1ppcCAzLjAsIHBsZWFzZSBjaGVjayB0aGUgdXBncmFkZSBndWlkZS5cIik7dGhpcy5maWxlcz1PYmplY3QuY3JlYXRlKG51bGwpLHRoaXMuY29tbWVudD1udWxsLHRoaXMucm9vdD1cIlwiLHRoaXMuY2xvbmU9ZnVuY3Rpb24oKXt2YXIgZT1uZXcgbjtmb3IodmFyIHQgaW4gdGhpcylcImZ1bmN0aW9uXCIhPXR5cGVvZiB0aGlzW3RdJiYoZVt0XT10aGlzW3RdKTtyZXR1cm4gZX19KG4ucHJvdG90eXBlPWUoXCIuL29iamVjdFwiKSkubG9hZEFzeW5jPWUoXCIuL2xvYWRcIiksbi5zdXBwb3J0PWUoXCIuL3N1cHBvcnRcIiksbi5kZWZhdWx0cz1lKFwiLi9kZWZhdWx0c1wiKSxuLnZlcnNpb249XCIzLjEwLjBcIixuLmxvYWRBc3luYz1mdW5jdGlvbihlLHQpe3JldHVybihuZXcgbikubG9hZEFzeW5jKGUsdCl9LG4uZXh0ZXJuYWw9ZShcIi4vZXh0ZXJuYWxcIiksdC5leHBvcnRzPW59LHtcIi4vZGVmYXVsdHNcIjo1LFwiLi9leHRlcm5hbFwiOjYsXCIuL2xvYWRcIjoxMSxcIi4vb2JqZWN0XCI6MTUsXCIuL3N1cHBvcnRcIjozMH1dLDExOltmdW5jdGlvbihlLHQscil7XCJ1c2Ugc3RyaWN0XCI7dmFyIHU9ZShcIi4vdXRpbHNcIiksaT1lKFwiLi9leHRlcm5hbFwiKSxuPWUoXCIuL3V0ZjhcIikscz1lKFwiLi96aXBFbnRyaWVzXCIpLGE9ZShcIi4vc3RyZWFtL0NyYzMyUHJvYmVcIiksbD1lKFwiLi9ub2RlanNVdGlsc1wiKTtmdW5jdGlvbiBmKG4pe3JldHVybiBuZXcgaS5Qcm9taXNlKGZ1bmN0aW9uKGUsdCl7dmFyIHI9bi5kZWNvbXByZXNzZWQuZ2V0Q29udGVudFdvcmtlcigpLnBpcGUobmV3IGEpO3Iub24oXCJlcnJvclwiLGZ1bmN0aW9uKGUpe3QoZSl9KS5vbihcImVuZFwiLGZ1bmN0aW9uKCl7ci5zdHJlYW1JbmZvLmNyYzMyIT09bi5kZWNvbXByZXNzZWQuY3JjMzI/dChuZXcgRXJyb3IoXCJDb3JydXB0ZWQgemlwIDogQ1JDMzIgbWlzbWF0Y2hcIikpOmUoKX0pLnJlc3VtZSgpfSl9dC5leHBvcnRzPWZ1bmN0aW9uKGUsbyl7dmFyIGg9dGhpcztyZXR1cm4gbz11LmV4dGVuZChvfHx7fSx7YmFzZTY0OiExLGNoZWNrQ1JDMzI6ITEsb3B0aW1pemVkQmluYXJ5U3RyaW5nOiExLGNyZWF0ZUZvbGRlcnM6ITEsZGVjb2RlRmlsZU5hbWU6bi51dGY4ZGVjb2RlfSksbC5pc05vZGUmJmwuaXNTdHJlYW0oZSk/aS5Qcm9taXNlLnJlamVjdChuZXcgRXJyb3IoXCJKU1ppcCBjYW4ndCBhY2NlcHQgYSBzdHJlYW0gd2hlbiBsb2FkaW5nIGEgemlwIGZpbGUuXCIpKTp1LnByZXBhcmVDb250ZW50KFwidGhlIGxvYWRlZCB6aXAgZmlsZVwiLGUsITAsby5vcHRpbWl6ZWRCaW5hcnlTdHJpbmcsby5iYXNlNjQpLnRoZW4oZnVuY3Rpb24oZSl7dmFyIHQ9bmV3IHMobyk7cmV0dXJuIHQubG9hZChlKSx0fSkudGhlbihmdW5jdGlvbihlKXt2YXIgdD1baS5Qcm9taXNlLnJlc29sdmUoZSldLHI9ZS5maWxlcztpZihvLmNoZWNrQ1JDMzIpZm9yKHZhciBuPTA7bjxyLmxlbmd0aDtuKyspdC5wdXNoKGYocltuXSkpO3JldHVybiBpLlByb21pc2UuYWxsKHQpfSkudGhlbihmdW5jdGlvbihlKXtmb3IodmFyIHQ9ZS5zaGlmdCgpLHI9dC5maWxlcyxuPTA7bjxyLmxlbmd0aDtuKyspe3ZhciBpPXJbbl0scz1pLmZpbGVOYW1lU3RyLGE9dS5yZXNvbHZlKGkuZmlsZU5hbWVTdHIpO2guZmlsZShhLGkuZGVjb21wcmVzc2VkLHtiaW5hcnk6ITAsb3B0aW1pemVkQmluYXJ5U3RyaW5nOiEwLGRhdGU6aS5kYXRlLGRpcjppLmRpcixjb21tZW50OmkuZmlsZUNvbW1lbnRTdHIubGVuZ3RoP2kuZmlsZUNvbW1lbnRTdHI6bnVsbCx1bml4UGVybWlzc2lvbnM6aS51bml4UGVybWlzc2lvbnMsZG9zUGVybWlzc2lvbnM6aS5kb3NQZXJtaXNzaW9ucyxjcmVhdGVGb2xkZXJzOm8uY3JlYXRlRm9sZGVyc30pLGkuZGlyfHwoaC5maWxlKGEpLnVuc2FmZU9yaWdpbmFsTmFtZT1zKX1yZXR1cm4gdC56aXBDb21tZW50Lmxlbmd0aCYmKGguY29tbWVudD10LnppcENvbW1lbnQpLGh9KX19LHtcIi4vZXh0ZXJuYWxcIjo2LFwiLi9ub2RlanNVdGlsc1wiOjE0LFwiLi9zdHJlYW0vQ3JjMzJQcm9iZVwiOjI1LFwiLi91dGY4XCI6MzEsXCIuL3V0aWxzXCI6MzIsXCIuL3ppcEVudHJpZXNcIjozM31dLDEyOltmdW5jdGlvbihlLHQscil7XCJ1c2Ugc3RyaWN0XCI7dmFyIG49ZShcIi4uL3V0aWxzXCIpLGk9ZShcIi4uL3N0cmVhbS9HZW5lcmljV29ya2VyXCIpO2Z1bmN0aW9uIHMoZSx0KXtpLmNhbGwodGhpcyxcIk5vZGVqcyBzdHJlYW0gaW5wdXQgYWRhcHRlciBmb3IgXCIrZSksdGhpcy5fdXBzdHJlYW1FbmRlZD0hMSx0aGlzLl9iaW5kU3RyZWFtKHQpfW4uaW5oZXJpdHMocyxpKSxzLnByb3RvdHlwZS5fYmluZFN0cmVhbT1mdW5jdGlvbihlKXt2YXIgdD10aGlzOyh0aGlzLl9zdHJlYW09ZSkucGF1c2UoKSxlLm9uKFwiZGF0YVwiLGZ1bmN0aW9uKGUpe3QucHVzaCh7ZGF0YTplLG1ldGE6e3BlcmNlbnQ6MH19KX0pLm9uKFwiZXJyb3JcIixmdW5jdGlvbihlKXt0LmlzUGF1c2VkP3RoaXMuZ2VuZXJhdGVkRXJyb3I9ZTp0LmVycm9yKGUpfSkub24oXCJlbmRcIixmdW5jdGlvbigpe3QuaXNQYXVzZWQ/dC5fdXBzdHJlYW1FbmRlZD0hMDp0LmVuZCgpfSl9LHMucHJvdG90eXBlLnBhdXNlPWZ1bmN0aW9uKCl7cmV0dXJuISFpLnByb3RvdHlwZS5wYXVzZS5jYWxsKHRoaXMpJiYodGhpcy5fc3RyZWFtLnBhdXNlKCksITApfSxzLnByb3RvdHlwZS5yZXN1bWU9ZnVuY3Rpb24oKXtyZXR1cm4hIWkucHJvdG90eXBlLnJlc3VtZS5jYWxsKHRoaXMpJiYodGhpcy5fdXBzdHJlYW1FbmRlZD90aGlzLmVuZCgpOnRoaXMuX3N0cmVhbS5yZXN1bWUoKSwhMCl9LHQuZXhwb3J0cz1zfSx7XCIuLi9zdHJlYW0vR2VuZXJpY1dvcmtlclwiOjI4LFwiLi4vdXRpbHNcIjozMn1dLDEzOltmdW5jdGlvbihlLHQscil7XCJ1c2Ugc3RyaWN0XCI7dmFyIGk9ZShcInJlYWRhYmxlLXN0cmVhbVwiKS5SZWFkYWJsZTtmdW5jdGlvbiBuKGUsdCxyKXtpLmNhbGwodGhpcyx0KSx0aGlzLl9oZWxwZXI9ZTt2YXIgbj10aGlzO2Uub24oXCJkYXRhXCIsZnVuY3Rpb24oZSx0KXtuLnB1c2goZSl8fG4uX2hlbHBlci5wYXVzZSgpLHImJnIodCl9KS5vbihcImVycm9yXCIsZnVuY3Rpb24oZSl7bi5lbWl0KFwiZXJyb3JcIixlKX0pLm9uKFwiZW5kXCIsZnVuY3Rpb24oKXtuLnB1c2gobnVsbCl9KX1lKFwiLi4vdXRpbHNcIikuaW5oZXJpdHMobixpKSxuLnByb3RvdHlwZS5fcmVhZD1mdW5jdGlvbigpe3RoaXMuX2hlbHBlci5yZXN1bWUoKX0sdC5leHBvcnRzPW59LHtcIi4uL3V0aWxzXCI6MzIsXCJyZWFkYWJsZS1zdHJlYW1cIjoxNn1dLDE0OltmdW5jdGlvbihlLHQscil7XCJ1c2Ugc3RyaWN0XCI7dC5leHBvcnRzPXtpc05vZGU6XCJ1bmRlZmluZWRcIiE9dHlwZW9mIEJ1ZmZlcixuZXdCdWZmZXJGcm9tOmZ1bmN0aW9uKGUsdCl7aWYoQnVmZmVyLmZyb20mJkJ1ZmZlci5mcm9tIT09VWludDhBcnJheS5mcm9tKXJldHVybiBCdWZmZXIuZnJvbShlLHQpO2lmKFwibnVtYmVyXCI9PXR5cGVvZiBlKXRocm93IG5ldyBFcnJvcignVGhlIFwiZGF0YVwiIGFyZ3VtZW50IG11c3Qgbm90IGJlIGEgbnVtYmVyJyk7cmV0dXJuIG5ldyBCdWZmZXIoZSx0KX0sYWxsb2NCdWZmZXI6ZnVuY3Rpb24oZSl7aWYoQnVmZmVyLmFsbG9jKXJldHVybiBCdWZmZXIuYWxsb2MoZSk7dmFyIHQ9bmV3IEJ1ZmZlcihlKTtyZXR1cm4gdC5maWxsKDApLHR9LGlzQnVmZmVyOmZ1bmN0aW9uKGUpe3JldHVybiBCdWZmZXIuaXNCdWZmZXIoZSl9LGlzU3RyZWFtOmZ1bmN0aW9uKGUpe3JldHVybiBlJiZcImZ1bmN0aW9uXCI9PXR5cGVvZiBlLm9uJiZcImZ1bmN0aW9uXCI9PXR5cGVvZiBlLnBhdXNlJiZcImZ1bmN0aW9uXCI9PXR5cGVvZiBlLnJlc3VtZX19fSx7fV0sMTU6W2Z1bmN0aW9uKGUsdCxyKXtcInVzZSBzdHJpY3RcIjtmdW5jdGlvbiBzKGUsdCxyKXt2YXIgbixpPXUuZ2V0VHlwZU9mKHQpLHM9dS5leHRlbmQocnx8e30sZik7cy5kYXRlPXMuZGF0ZXx8bmV3IERhdGUsbnVsbCE9PXMuY29tcHJlc3Npb24mJihzLmNvbXByZXNzaW9uPXMuY29tcHJlc3Npb24udG9VcHBlckNhc2UoKSksXCJzdHJpbmdcIj09dHlwZW9mIHMudW5peFBlcm1pc3Npb25zJiYocy51bml4UGVybWlzc2lvbnM9cGFyc2VJbnQocy51bml4UGVybWlzc2lvbnMsOCkpLHMudW5peFBlcm1pc3Npb25zJiYxNjM4NCZzLnVuaXhQZXJtaXNzaW9ucyYmKHMuZGlyPSEwKSxzLmRvc1Blcm1pc3Npb25zJiYxNiZzLmRvc1Blcm1pc3Npb25zJiYocy5kaXI9ITApLHMuZGlyJiYoZT1nKGUpKSxzLmNyZWF0ZUZvbGRlcnMmJihuPV8oZSkpJiZiLmNhbGwodGhpcyxuLCEwKTt2YXIgYT1cInN0cmluZ1wiPT09aSYmITE9PT1zLmJpbmFyeSYmITE9PT1zLmJhc2U2NDtyJiZ2b2lkIDAhPT1yLmJpbmFyeXx8KHMuYmluYXJ5PSFhKSwodCBpbnN0YW5jZW9mIGMmJjA9PT10LnVuY29tcHJlc3NlZFNpemV8fHMuZGlyfHwhdHx8MD09PXQubGVuZ3RoKSYmKHMuYmFzZTY0PSExLHMuYmluYXJ5PSEwLHQ9XCJcIixzLmNvbXByZXNzaW9uPVwiU1RPUkVcIixpPVwic3RyaW5nXCIpO3ZhciBvPW51bGw7bz10IGluc3RhbmNlb2YgY3x8dCBpbnN0YW5jZW9mIGw/dDpwLmlzTm9kZSYmcC5pc1N0cmVhbSh0KT9uZXcgbShlLHQpOnUucHJlcGFyZUNvbnRlbnQoZSx0LHMuYmluYXJ5LHMub3B0aW1pemVkQmluYXJ5U3RyaW5nLHMuYmFzZTY0KTt2YXIgaD1uZXcgZChlLG8scyk7dGhpcy5maWxlc1tlXT1ofXZhciBpPWUoXCIuL3V0ZjhcIiksdT1lKFwiLi91dGlsc1wiKSxsPWUoXCIuL3N0cmVhbS9HZW5lcmljV29ya2VyXCIpLGE9ZShcIi4vc3RyZWFtL1N0cmVhbUhlbHBlclwiKSxmPWUoXCIuL2RlZmF1bHRzXCIpLGM9ZShcIi4vY29tcHJlc3NlZE9iamVjdFwiKSxkPWUoXCIuL3ppcE9iamVjdFwiKSxvPWUoXCIuL2dlbmVyYXRlXCIpLHA9ZShcIi4vbm9kZWpzVXRpbHNcIiksbT1lKFwiLi9ub2RlanMvTm9kZWpzU3RyZWFtSW5wdXRBZGFwdGVyXCIpLF89ZnVuY3Rpb24oZSl7XCIvXCI9PT1lLnNsaWNlKC0xKSYmKGU9ZS5zdWJzdHJpbmcoMCxlLmxlbmd0aC0xKSk7dmFyIHQ9ZS5sYXN0SW5kZXhPZihcIi9cIik7cmV0dXJuIDA8dD9lLnN1YnN0cmluZygwLHQpOlwiXCJ9LGc9ZnVuY3Rpb24oZSl7cmV0dXJuXCIvXCIhPT1lLnNsaWNlKC0xKSYmKGUrPVwiL1wiKSxlfSxiPWZ1bmN0aW9uKGUsdCl7cmV0dXJuIHQ9dm9pZCAwIT09dD90OmYuY3JlYXRlRm9sZGVycyxlPWcoZSksdGhpcy5maWxlc1tlXXx8cy5jYWxsKHRoaXMsZSxudWxsLHtkaXI6ITAsY3JlYXRlRm9sZGVyczp0fSksdGhpcy5maWxlc1tlXX07ZnVuY3Rpb24gaChlKXtyZXR1cm5cIltvYmplY3QgUmVnRXhwXVwiPT09T2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKGUpfXZhciBuPXtsb2FkOmZ1bmN0aW9uKCl7dGhyb3cgbmV3IEVycm9yKFwiVGhpcyBtZXRob2QgaGFzIGJlZW4gcmVtb3ZlZCBpbiBKU1ppcCAzLjAsIHBsZWFzZSBjaGVjayB0aGUgdXBncmFkZSBndWlkZS5cIil9LGZvckVhY2g6ZnVuY3Rpb24oZSl7dmFyIHQscixuO2Zvcih0IGluIHRoaXMuZmlsZXMpbj10aGlzLmZpbGVzW3RdLChyPXQuc2xpY2UodGhpcy5yb290Lmxlbmd0aCx0Lmxlbmd0aCkpJiZ0LnNsaWNlKDAsdGhpcy5yb290Lmxlbmd0aCk9PT10aGlzLnJvb3QmJmUocixuKX0sZmlsdGVyOmZ1bmN0aW9uKHIpe3ZhciBuPVtdO3JldHVybiB0aGlzLmZvckVhY2goZnVuY3Rpb24oZSx0KXtyKGUsdCkmJm4ucHVzaCh0KX0pLG59LGZpbGU6ZnVuY3Rpb24oZSx0LHIpe2lmKDEhPT1hcmd1bWVudHMubGVuZ3RoKXJldHVybiBlPXRoaXMucm9vdCtlLHMuY2FsbCh0aGlzLGUsdCxyKSx0aGlzO2lmKGgoZSkpe3ZhciBuPWU7cmV0dXJuIHRoaXMuZmlsdGVyKGZ1bmN0aW9uKGUsdCl7cmV0dXJuIXQuZGlyJiZuLnRlc3QoZSl9KX12YXIgaT10aGlzLmZpbGVzW3RoaXMucm9vdCtlXTtyZXR1cm4gaSYmIWkuZGlyP2k6bnVsbH0sZm9sZGVyOmZ1bmN0aW9uKHIpe2lmKCFyKXJldHVybiB0aGlzO2lmKGgocikpcmV0dXJuIHRoaXMuZmlsdGVyKGZ1bmN0aW9uKGUsdCl7cmV0dXJuIHQuZGlyJiZyLnRlc3QoZSl9KTt2YXIgZT10aGlzLnJvb3Qrcix0PWIuY2FsbCh0aGlzLGUpLG49dGhpcy5jbG9uZSgpO3JldHVybiBuLnJvb3Q9dC5uYW1lLG59LHJlbW92ZTpmdW5jdGlvbihyKXtyPXRoaXMucm9vdCtyO3ZhciBlPXRoaXMuZmlsZXNbcl07aWYoZXx8KFwiL1wiIT09ci5zbGljZSgtMSkmJihyKz1cIi9cIiksZT10aGlzLmZpbGVzW3JdKSxlJiYhZS5kaXIpZGVsZXRlIHRoaXMuZmlsZXNbcl07ZWxzZSBmb3IodmFyIHQ9dGhpcy5maWx0ZXIoZnVuY3Rpb24oZSx0KXtyZXR1cm4gdC5uYW1lLnNsaWNlKDAsci5sZW5ndGgpPT09cn0pLG49MDtuPHQubGVuZ3RoO24rKylkZWxldGUgdGhpcy5maWxlc1t0W25dLm5hbWVdO3JldHVybiB0aGlzfSxnZW5lcmF0ZTpmdW5jdGlvbihlKXt0aHJvdyBuZXcgRXJyb3IoXCJUaGlzIG1ldGhvZCBoYXMgYmVlbiByZW1vdmVkIGluIEpTWmlwIDMuMCwgcGxlYXNlIGNoZWNrIHRoZSB1cGdyYWRlIGd1aWRlLlwiKX0sZ2VuZXJhdGVJbnRlcm5hbFN0cmVhbTpmdW5jdGlvbihlKXt2YXIgdCxyPXt9O3RyeXtpZigocj11LmV4dGVuZChlfHx7fSx7c3RyZWFtRmlsZXM6ITEsY29tcHJlc3Npb246XCJTVE9SRVwiLGNvbXByZXNzaW9uT3B0aW9uczpudWxsLHR5cGU6XCJcIixwbGF0Zm9ybTpcIkRPU1wiLGNvbW1lbnQ6bnVsbCxtaW1lVHlwZTpcImFwcGxpY2F0aW9uL3ppcFwiLGVuY29kZUZpbGVOYW1lOmkudXRmOGVuY29kZX0pKS50eXBlPXIudHlwZS50b0xvd2VyQ2FzZSgpLHIuY29tcHJlc3Npb249ci5jb21wcmVzc2lvbi50b1VwcGVyQ2FzZSgpLFwiYmluYXJ5c3RyaW5nXCI9PT1yLnR5cGUmJihyLnR5cGU9XCJzdHJpbmdcIiksIXIudHlwZSl0aHJvdyBuZXcgRXJyb3IoXCJObyBvdXRwdXQgdHlwZSBzcGVjaWZpZWQuXCIpO3UuY2hlY2tTdXBwb3J0KHIudHlwZSksXCJkYXJ3aW5cIiE9PXIucGxhdGZvcm0mJlwiZnJlZWJzZFwiIT09ci5wbGF0Zm9ybSYmXCJsaW51eFwiIT09ci5wbGF0Zm9ybSYmXCJzdW5vc1wiIT09ci5wbGF0Zm9ybXx8KHIucGxhdGZvcm09XCJVTklYXCIpLFwid2luMzJcIj09PXIucGxhdGZvcm0mJihyLnBsYXRmb3JtPVwiRE9TXCIpO3ZhciBuPXIuY29tbWVudHx8dGhpcy5jb21tZW50fHxcIlwiO3Q9by5nZW5lcmF0ZVdvcmtlcih0aGlzLHIsbil9Y2F0Y2goZSl7KHQ9bmV3IGwoXCJlcnJvclwiKSkuZXJyb3IoZSl9cmV0dXJuIG5ldyBhKHQsci50eXBlfHxcInN0cmluZ1wiLHIubWltZVR5cGUpfSxnZW5lcmF0ZUFzeW5jOmZ1bmN0aW9uKGUsdCl7cmV0dXJuIHRoaXMuZ2VuZXJhdGVJbnRlcm5hbFN0cmVhbShlKS5hY2N1bXVsYXRlKHQpfSxnZW5lcmF0ZU5vZGVTdHJlYW06ZnVuY3Rpb24oZSx0KXtyZXR1cm4oZT1lfHx7fSkudHlwZXx8KGUudHlwZT1cIm5vZGVidWZmZXJcIiksdGhpcy5nZW5lcmF0ZUludGVybmFsU3RyZWFtKGUpLnRvTm9kZWpzU3RyZWFtKHQpfX07dC5leHBvcnRzPW59LHtcIi4vY29tcHJlc3NlZE9iamVjdFwiOjIsXCIuL2RlZmF1bHRzXCI6NSxcIi4vZ2VuZXJhdGVcIjo5LFwiLi9ub2RlanMvTm9kZWpzU3RyZWFtSW5wdXRBZGFwdGVyXCI6MTIsXCIuL25vZGVqc1V0aWxzXCI6MTQsXCIuL3N0cmVhbS9HZW5lcmljV29ya2VyXCI6MjgsXCIuL3N0cmVhbS9TdHJlYW1IZWxwZXJcIjoyOSxcIi4vdXRmOFwiOjMxLFwiLi91dGlsc1wiOjMyLFwiLi96aXBPYmplY3RcIjozNX1dLDE2OltmdW5jdGlvbihlLHQscil7dC5leHBvcnRzPWUoXCJzdHJlYW1cIil9LHtzdHJlYW06dm9pZCAwfV0sMTc6W2Z1bmN0aW9uKGUsdCxyKXtcInVzZSBzdHJpY3RcIjt2YXIgbj1lKFwiLi9EYXRhUmVhZGVyXCIpO2Z1bmN0aW9uIGkoZSl7bi5jYWxsKHRoaXMsZSk7Zm9yKHZhciB0PTA7dDx0aGlzLmRhdGEubGVuZ3RoO3QrKyllW3RdPTI1NSZlW3RdfWUoXCIuLi91dGlsc1wiKS5pbmhlcml0cyhpLG4pLGkucHJvdG90eXBlLmJ5dGVBdD1mdW5jdGlvbihlKXtyZXR1cm4gdGhpcy5kYXRhW3RoaXMuemVybytlXX0saS5wcm90b3R5cGUubGFzdEluZGV4T2ZTaWduYXR1cmU9ZnVuY3Rpb24oZSl7Zm9yKHZhciB0PWUuY2hhckNvZGVBdCgwKSxyPWUuY2hhckNvZGVBdCgxKSxuPWUuY2hhckNvZGVBdCgyKSxpPWUuY2hhckNvZGVBdCgzKSxzPXRoaXMubGVuZ3RoLTQ7MDw9czstLXMpaWYodGhpcy5kYXRhW3NdPT09dCYmdGhpcy5kYXRhW3MrMV09PT1yJiZ0aGlzLmRhdGFbcysyXT09PW4mJnRoaXMuZGF0YVtzKzNdPT09aSlyZXR1cm4gcy10aGlzLnplcm87cmV0dXJuLTF9LGkucHJvdG90eXBlLnJlYWRBbmRDaGVja1NpZ25hdHVyZT1mdW5jdGlvbihlKXt2YXIgdD1lLmNoYXJDb2RlQXQoMCkscj1lLmNoYXJDb2RlQXQoMSksbj1lLmNoYXJDb2RlQXQoMiksaT1lLmNoYXJDb2RlQXQoMykscz10aGlzLnJlYWREYXRhKDQpO3JldHVybiB0PT09c1swXSYmcj09PXNbMV0mJm49PT1zWzJdJiZpPT09c1szXX0saS5wcm90b3R5cGUucmVhZERhdGE9ZnVuY3Rpb24oZSl7aWYodGhpcy5jaGVja09mZnNldChlKSwwPT09ZSlyZXR1cm5bXTt2YXIgdD10aGlzLmRhdGEuc2xpY2UodGhpcy56ZXJvK3RoaXMuaW5kZXgsdGhpcy56ZXJvK3RoaXMuaW5kZXgrZSk7cmV0dXJuIHRoaXMuaW5kZXgrPWUsdH0sdC5leHBvcnRzPWl9LHtcIi4uL3V0aWxzXCI6MzIsXCIuL0RhdGFSZWFkZXJcIjoxOH1dLDE4OltmdW5jdGlvbihlLHQscil7XCJ1c2Ugc3RyaWN0XCI7dmFyIG49ZShcIi4uL3V0aWxzXCIpO2Z1bmN0aW9uIGkoZSl7dGhpcy5kYXRhPWUsdGhpcy5sZW5ndGg9ZS5sZW5ndGgsdGhpcy5pbmRleD0wLHRoaXMuemVybz0wfWkucHJvdG90eXBlPXtjaGVja09mZnNldDpmdW5jdGlvbihlKXt0aGlzLmNoZWNrSW5kZXgodGhpcy5pbmRleCtlKX0sY2hlY2tJbmRleDpmdW5jdGlvbihlKXtpZih0aGlzLmxlbmd0aDx0aGlzLnplcm8rZXx8ZTwwKXRocm93IG5ldyBFcnJvcihcIkVuZCBvZiBkYXRhIHJlYWNoZWQgKGRhdGEgbGVuZ3RoID0gXCIrdGhpcy5sZW5ndGgrXCIsIGFza2VkIGluZGV4ID0gXCIrZStcIikuIENvcnJ1cHRlZCB6aXAgP1wiKX0sc2V0SW5kZXg6ZnVuY3Rpb24oZSl7dGhpcy5jaGVja0luZGV4KGUpLHRoaXMuaW5kZXg9ZX0sc2tpcDpmdW5jdGlvbihlKXt0aGlzLnNldEluZGV4KHRoaXMuaW5kZXgrZSl9LGJ5dGVBdDpmdW5jdGlvbihlKXt9LHJlYWRJbnQ6ZnVuY3Rpb24oZSl7dmFyIHQscj0wO2Zvcih0aGlzLmNoZWNrT2Zmc2V0KGUpLHQ9dGhpcy5pbmRleCtlLTE7dD49dGhpcy5pbmRleDt0LS0pcj0ocjw8OCkrdGhpcy5ieXRlQXQodCk7cmV0dXJuIHRoaXMuaW5kZXgrPWUscn0scmVhZFN0cmluZzpmdW5jdGlvbihlKXtyZXR1cm4gbi50cmFuc2Zvcm1UbyhcInN0cmluZ1wiLHRoaXMucmVhZERhdGEoZSkpfSxyZWFkRGF0YTpmdW5jdGlvbihlKXt9LGxhc3RJbmRleE9mU2lnbmF0dXJlOmZ1bmN0aW9uKGUpe30scmVhZEFuZENoZWNrU2lnbmF0dXJlOmZ1bmN0aW9uKGUpe30scmVhZERhdGU6ZnVuY3Rpb24oKXt2YXIgZT10aGlzLnJlYWRJbnQoNCk7cmV0dXJuIG5ldyBEYXRlKERhdGUuVVRDKDE5ODArKGU+PjI1JjEyNyksKGU+PjIxJjE1KS0xLGU+PjE2JjMxLGU+PjExJjMxLGU+PjUmNjMsKDMxJmUpPDwxKSl9fSx0LmV4cG9ydHM9aX0se1wiLi4vdXRpbHNcIjozMn1dLDE5OltmdW5jdGlvbihlLHQscil7XCJ1c2Ugc3RyaWN0XCI7dmFyIG49ZShcIi4vVWludDhBcnJheVJlYWRlclwiKTtmdW5jdGlvbiBpKGUpe24uY2FsbCh0aGlzLGUpfWUoXCIuLi91dGlsc1wiKS5pbmhlcml0cyhpLG4pLGkucHJvdG90eXBlLnJlYWREYXRhPWZ1bmN0aW9uKGUpe3RoaXMuY2hlY2tPZmZzZXQoZSk7dmFyIHQ9dGhpcy5kYXRhLnNsaWNlKHRoaXMuemVybyt0aGlzLmluZGV4LHRoaXMuemVybyt0aGlzLmluZGV4K2UpO3JldHVybiB0aGlzLmluZGV4Kz1lLHR9LHQuZXhwb3J0cz1pfSx7XCIuLi91dGlsc1wiOjMyLFwiLi9VaW50OEFycmF5UmVhZGVyXCI6MjF9XSwyMDpbZnVuY3Rpb24oZSx0LHIpe1widXNlIHN0cmljdFwiO3ZhciBuPWUoXCIuL0RhdGFSZWFkZXJcIik7ZnVuY3Rpb24gaShlKXtuLmNhbGwodGhpcyxlKX1lKFwiLi4vdXRpbHNcIikuaW5oZXJpdHMoaSxuKSxpLnByb3RvdHlwZS5ieXRlQXQ9ZnVuY3Rpb24oZSl7cmV0dXJuIHRoaXMuZGF0YS5jaGFyQ29kZUF0KHRoaXMuemVybytlKX0saS5wcm90b3R5cGUubGFzdEluZGV4T2ZTaWduYXR1cmU9ZnVuY3Rpb24oZSl7cmV0dXJuIHRoaXMuZGF0YS5sYXN0SW5kZXhPZihlKS10aGlzLnplcm99LGkucHJvdG90eXBlLnJlYWRBbmRDaGVja1NpZ25hdHVyZT1mdW5jdGlvbihlKXtyZXR1cm4gZT09PXRoaXMucmVhZERhdGEoNCl9LGkucHJvdG90eXBlLnJlYWREYXRhPWZ1bmN0aW9uKGUpe3RoaXMuY2hlY2tPZmZzZXQoZSk7dmFyIHQ9dGhpcy5kYXRhLnNsaWNlKHRoaXMuemVybyt0aGlzLmluZGV4LHRoaXMuemVybyt0aGlzLmluZGV4K2UpO3JldHVybiB0aGlzLmluZGV4Kz1lLHR9LHQuZXhwb3J0cz1pfSx7XCIuLi91dGlsc1wiOjMyLFwiLi9EYXRhUmVhZGVyXCI6MTh9XSwyMTpbZnVuY3Rpb24oZSx0LHIpe1widXNlIHN0cmljdFwiO3ZhciBuPWUoXCIuL0FycmF5UmVhZGVyXCIpO2Z1bmN0aW9uIGkoZSl7bi5jYWxsKHRoaXMsZSl9ZShcIi4uL3V0aWxzXCIpLmluaGVyaXRzKGksbiksaS5wcm90b3R5cGUucmVhZERhdGE9ZnVuY3Rpb24oZSl7aWYodGhpcy5jaGVja09mZnNldChlKSwwPT09ZSlyZXR1cm4gbmV3IFVpbnQ4QXJyYXkoMCk7dmFyIHQ9dGhpcy5kYXRhLnN1YmFycmF5KHRoaXMuemVybyt0aGlzLmluZGV4LHRoaXMuemVybyt0aGlzLmluZGV4K2UpO3JldHVybiB0aGlzLmluZGV4Kz1lLHR9LHQuZXhwb3J0cz1pfSx7XCIuLi91dGlsc1wiOjMyLFwiLi9BcnJheVJlYWRlclwiOjE3fV0sMjI6W2Z1bmN0aW9uKGUsdCxyKXtcInVzZSBzdHJpY3RcIjt2YXIgbj1lKFwiLi4vdXRpbHNcIiksaT1lKFwiLi4vc3VwcG9ydFwiKSxzPWUoXCIuL0FycmF5UmVhZGVyXCIpLGE9ZShcIi4vU3RyaW5nUmVhZGVyXCIpLG89ZShcIi4vTm9kZUJ1ZmZlclJlYWRlclwiKSxoPWUoXCIuL1VpbnQ4QXJyYXlSZWFkZXJcIik7dC5leHBvcnRzPWZ1bmN0aW9uKGUpe3ZhciB0PW4uZ2V0VHlwZU9mKGUpO3JldHVybiBuLmNoZWNrU3VwcG9ydCh0KSxcInN0cmluZ1wiIT09dHx8aS51aW50OGFycmF5P1wibm9kZWJ1ZmZlclwiPT09dD9uZXcgbyhlKTppLnVpbnQ4YXJyYXk/bmV3IGgobi50cmFuc2Zvcm1UbyhcInVpbnQ4YXJyYXlcIixlKSk6bmV3IHMobi50cmFuc2Zvcm1UbyhcImFycmF5XCIsZSkpOm5ldyBhKGUpfX0se1wiLi4vc3VwcG9ydFwiOjMwLFwiLi4vdXRpbHNcIjozMixcIi4vQXJyYXlSZWFkZXJcIjoxNyxcIi4vTm9kZUJ1ZmZlclJlYWRlclwiOjE5LFwiLi9TdHJpbmdSZWFkZXJcIjoyMCxcIi4vVWludDhBcnJheVJlYWRlclwiOjIxfV0sMjM6W2Z1bmN0aW9uKGUsdCxyKXtcInVzZSBzdHJpY3RcIjtyLkxPQ0FMX0ZJTEVfSEVBREVSPVwiUEtcdTAwMDNcdTAwMDRcIixyLkNFTlRSQUxfRklMRV9IRUFERVI9XCJQS1x1MDAwMVx1MDAwMlwiLHIuQ0VOVFJBTF9ESVJFQ1RPUllfRU5EPVwiUEtcdTAwMDVcdTAwMDZcIixyLlpJUDY0X0NFTlRSQUxfRElSRUNUT1JZX0xPQ0FUT1I9XCJQS1x1MDAwNlx1MDAwN1wiLHIuWklQNjRfQ0VOVFJBTF9ESVJFQ1RPUllfRU5EPVwiUEtcdTAwMDZcdTAwMDZcIixyLkRBVEFfREVTQ1JJUFRPUj1cIlBLXHUwMDA3XFxiXCJ9LHt9XSwyNDpbZnVuY3Rpb24oZSx0LHIpe1widXNlIHN0cmljdFwiO3ZhciBuPWUoXCIuL0dlbmVyaWNXb3JrZXJcIiksaT1lKFwiLi4vdXRpbHNcIik7ZnVuY3Rpb24gcyhlKXtuLmNhbGwodGhpcyxcIkNvbnZlcnRXb3JrZXIgdG8gXCIrZSksdGhpcy5kZXN0VHlwZT1lfWkuaW5oZXJpdHMocyxuKSxzLnByb3RvdHlwZS5wcm9jZXNzQ2h1bms9ZnVuY3Rpb24oZSl7dGhpcy5wdXNoKHtkYXRhOmkudHJhbnNmb3JtVG8odGhpcy5kZXN0VHlwZSxlLmRhdGEpLG1ldGE6ZS5tZXRhfSl9LHQuZXhwb3J0cz1zfSx7XCIuLi91dGlsc1wiOjMyLFwiLi9HZW5lcmljV29ya2VyXCI6Mjh9XSwyNTpbZnVuY3Rpb24oZSx0LHIpe1widXNlIHN0cmljdFwiO3ZhciBuPWUoXCIuL0dlbmVyaWNXb3JrZXJcIiksaT1lKFwiLi4vY3JjMzJcIik7ZnVuY3Rpb24gcygpe24uY2FsbCh0aGlzLFwiQ3JjMzJQcm9iZVwiKSx0aGlzLndpdGhTdHJlYW1JbmZvKFwiY3JjMzJcIiwwKX1lKFwiLi4vdXRpbHNcIikuaW5oZXJpdHMocyxuKSxzLnByb3RvdHlwZS5wcm9jZXNzQ2h1bms9ZnVuY3Rpb24oZSl7dGhpcy5zdHJlYW1JbmZvLmNyYzMyPWkoZS5kYXRhLHRoaXMuc3RyZWFtSW5mby5jcmMzMnx8MCksdGhpcy5wdXNoKGUpfSx0LmV4cG9ydHM9c30se1wiLi4vY3JjMzJcIjo0LFwiLi4vdXRpbHNcIjozMixcIi4vR2VuZXJpY1dvcmtlclwiOjI4fV0sMjY6W2Z1bmN0aW9uKGUsdCxyKXtcInVzZSBzdHJpY3RcIjt2YXIgbj1lKFwiLi4vdXRpbHNcIiksaT1lKFwiLi9HZW5lcmljV29ya2VyXCIpO2Z1bmN0aW9uIHMoZSl7aS5jYWxsKHRoaXMsXCJEYXRhTGVuZ3RoUHJvYmUgZm9yIFwiK2UpLHRoaXMucHJvcE5hbWU9ZSx0aGlzLndpdGhTdHJlYW1JbmZvKGUsMCl9bi5pbmhlcml0cyhzLGkpLHMucHJvdG90eXBlLnByb2Nlc3NDaHVuaz1mdW5jdGlvbihlKXtpZihlKXt2YXIgdD10aGlzLnN0cmVhbUluZm9bdGhpcy5wcm9wTmFtZV18fDA7dGhpcy5zdHJlYW1JbmZvW3RoaXMucHJvcE5hbWVdPXQrZS5kYXRhLmxlbmd0aH1pLnByb3RvdHlwZS5wcm9jZXNzQ2h1bmsuY2FsbCh0aGlzLGUpfSx0LmV4cG9ydHM9c30se1wiLi4vdXRpbHNcIjozMixcIi4vR2VuZXJpY1dvcmtlclwiOjI4fV0sMjc6W2Z1bmN0aW9uKGUsdCxyKXtcInVzZSBzdHJpY3RcIjt2YXIgbj1lKFwiLi4vdXRpbHNcIiksaT1lKFwiLi9HZW5lcmljV29ya2VyXCIpO2Z1bmN0aW9uIHMoZSl7aS5jYWxsKHRoaXMsXCJEYXRhV29ya2VyXCIpO3ZhciB0PXRoaXM7dGhpcy5kYXRhSXNSZWFkeT0hMSx0aGlzLmluZGV4PTAsdGhpcy5tYXg9MCx0aGlzLmRhdGE9bnVsbCx0aGlzLnR5cGU9XCJcIix0aGlzLl90aWNrU2NoZWR1bGVkPSExLGUudGhlbihmdW5jdGlvbihlKXt0LmRhdGFJc1JlYWR5PSEwLHQuZGF0YT1lLHQubWF4PWUmJmUubGVuZ3RofHwwLHQudHlwZT1uLmdldFR5cGVPZihlKSx0LmlzUGF1c2VkfHx0Ll90aWNrQW5kUmVwZWF0KCl9LGZ1bmN0aW9uKGUpe3QuZXJyb3IoZSl9KX1uLmluaGVyaXRzKHMsaSkscy5wcm90b3R5cGUuY2xlYW5VcD1mdW5jdGlvbigpe2kucHJvdG90eXBlLmNsZWFuVXAuY2FsbCh0aGlzKSx0aGlzLmRhdGE9bnVsbH0scy5wcm90b3R5cGUucmVzdW1lPWZ1bmN0aW9uKCl7cmV0dXJuISFpLnByb3RvdHlwZS5yZXN1bWUuY2FsbCh0aGlzKSYmKCF0aGlzLl90aWNrU2NoZWR1bGVkJiZ0aGlzLmRhdGFJc1JlYWR5JiYodGhpcy5fdGlja1NjaGVkdWxlZD0hMCxuLmRlbGF5KHRoaXMuX3RpY2tBbmRSZXBlYXQsW10sdGhpcykpLCEwKX0scy5wcm90b3R5cGUuX3RpY2tBbmRSZXBlYXQ9ZnVuY3Rpb24oKXt0aGlzLl90aWNrU2NoZWR1bGVkPSExLHRoaXMuaXNQYXVzZWR8fHRoaXMuaXNGaW5pc2hlZHx8KHRoaXMuX3RpY2soKSx0aGlzLmlzRmluaXNoZWR8fChuLmRlbGF5KHRoaXMuX3RpY2tBbmRSZXBlYXQsW10sdGhpcyksdGhpcy5fdGlja1NjaGVkdWxlZD0hMCkpfSxzLnByb3RvdHlwZS5fdGljaz1mdW5jdGlvbigpe2lmKHRoaXMuaXNQYXVzZWR8fHRoaXMuaXNGaW5pc2hlZClyZXR1cm4hMTt2YXIgZT1udWxsLHQ9TWF0aC5taW4odGhpcy5tYXgsdGhpcy5pbmRleCsxNjM4NCk7aWYodGhpcy5pbmRleD49dGhpcy5tYXgpcmV0dXJuIHRoaXMuZW5kKCk7c3dpdGNoKHRoaXMudHlwZSl7Y2FzZVwic3RyaW5nXCI6ZT10aGlzLmRhdGEuc3Vic3RyaW5nKHRoaXMuaW5kZXgsdCk7YnJlYWs7Y2FzZVwidWludDhhcnJheVwiOmU9dGhpcy5kYXRhLnN1YmFycmF5KHRoaXMuaW5kZXgsdCk7YnJlYWs7Y2FzZVwiYXJyYXlcIjpjYXNlXCJub2RlYnVmZmVyXCI6ZT10aGlzLmRhdGEuc2xpY2UodGhpcy5pbmRleCx0KX1yZXR1cm4gdGhpcy5pbmRleD10LHRoaXMucHVzaCh7ZGF0YTplLG1ldGE6e3BlcmNlbnQ6dGhpcy5tYXg/dGhpcy5pbmRleC90aGlzLm1heCoxMDA6MH19KX0sdC5leHBvcnRzPXN9LHtcIi4uL3V0aWxzXCI6MzIsXCIuL0dlbmVyaWNXb3JrZXJcIjoyOH1dLDI4OltmdW5jdGlvbihlLHQscil7XCJ1c2Ugc3RyaWN0XCI7ZnVuY3Rpb24gbihlKXt0aGlzLm5hbWU9ZXx8XCJkZWZhdWx0XCIsdGhpcy5zdHJlYW1JbmZvPXt9LHRoaXMuZ2VuZXJhdGVkRXJyb3I9bnVsbCx0aGlzLmV4dHJhU3RyZWFtSW5mbz17fSx0aGlzLmlzUGF1c2VkPSEwLHRoaXMuaXNGaW5pc2hlZD0hMSx0aGlzLmlzTG9ja2VkPSExLHRoaXMuX2xpc3RlbmVycz17ZGF0YTpbXSxlbmQ6W10sZXJyb3I6W119LHRoaXMucHJldmlvdXM9bnVsbH1uLnByb3RvdHlwZT17cHVzaDpmdW5jdGlvbihlKXt0aGlzLmVtaXQoXCJkYXRhXCIsZSl9LGVuZDpmdW5jdGlvbigpe2lmKHRoaXMuaXNGaW5pc2hlZClyZXR1cm4hMTt0aGlzLmZsdXNoKCk7dHJ5e3RoaXMuZW1pdChcImVuZFwiKSx0aGlzLmNsZWFuVXAoKSx0aGlzLmlzRmluaXNoZWQ9ITB9Y2F0Y2goZSl7dGhpcy5lbWl0KFwiZXJyb3JcIixlKX1yZXR1cm4hMH0sZXJyb3I6ZnVuY3Rpb24oZSl7cmV0dXJuIXRoaXMuaXNGaW5pc2hlZCYmKHRoaXMuaXNQYXVzZWQ/dGhpcy5nZW5lcmF0ZWRFcnJvcj1lOih0aGlzLmlzRmluaXNoZWQ9ITAsdGhpcy5lbWl0KFwiZXJyb3JcIixlKSx0aGlzLnByZXZpb3VzJiZ0aGlzLnByZXZpb3VzLmVycm9yKGUpLHRoaXMuY2xlYW5VcCgpKSwhMCl9LG9uOmZ1bmN0aW9uKGUsdCl7cmV0dXJuIHRoaXMuX2xpc3RlbmVyc1tlXS5wdXNoKHQpLHRoaXN9LGNsZWFuVXA6ZnVuY3Rpb24oKXt0aGlzLnN0cmVhbUluZm89dGhpcy5nZW5lcmF0ZWRFcnJvcj10aGlzLmV4dHJhU3RyZWFtSW5mbz1udWxsLHRoaXMuX2xpc3RlbmVycz1bXX0sZW1pdDpmdW5jdGlvbihlLHQpe2lmKHRoaXMuX2xpc3RlbmVyc1tlXSlmb3IodmFyIHI9MDtyPHRoaXMuX2xpc3RlbmVyc1tlXS5sZW5ndGg7cisrKXRoaXMuX2xpc3RlbmVyc1tlXVtyXS5jYWxsKHRoaXMsdCl9LHBpcGU6ZnVuY3Rpb24oZSl7cmV0dXJuIGUucmVnaXN0ZXJQcmV2aW91cyh0aGlzKX0scmVnaXN0ZXJQcmV2aW91czpmdW5jdGlvbihlKXtpZih0aGlzLmlzTG9ja2VkKXRocm93IG5ldyBFcnJvcihcIlRoZSBzdHJlYW0gJ1wiK3RoaXMrXCInIGhhcyBhbHJlYWR5IGJlZW4gdXNlZC5cIik7dGhpcy5zdHJlYW1JbmZvPWUuc3RyZWFtSW5mbyx0aGlzLm1lcmdlU3RyZWFtSW5mbygpLHRoaXMucHJldmlvdXM9ZTt2YXIgdD10aGlzO3JldHVybiBlLm9uKFwiZGF0YVwiLGZ1bmN0aW9uKGUpe3QucHJvY2Vzc0NodW5rKGUpfSksZS5vbihcImVuZFwiLGZ1bmN0aW9uKCl7dC5lbmQoKX0pLGUub24oXCJlcnJvclwiLGZ1bmN0aW9uKGUpe3QuZXJyb3IoZSl9KSx0aGlzfSxwYXVzZTpmdW5jdGlvbigpe3JldHVybiF0aGlzLmlzUGF1c2VkJiYhdGhpcy5pc0ZpbmlzaGVkJiYodGhpcy5pc1BhdXNlZD0hMCx0aGlzLnByZXZpb3VzJiZ0aGlzLnByZXZpb3VzLnBhdXNlKCksITApfSxyZXN1bWU6ZnVuY3Rpb24oKXtpZighdGhpcy5pc1BhdXNlZHx8dGhpcy5pc0ZpbmlzaGVkKXJldHVybiExO3ZhciBlPXRoaXMuaXNQYXVzZWQ9ITE7cmV0dXJuIHRoaXMuZ2VuZXJhdGVkRXJyb3ImJih0aGlzLmVycm9yKHRoaXMuZ2VuZXJhdGVkRXJyb3IpLGU9ITApLHRoaXMucHJldmlvdXMmJnRoaXMucHJldmlvdXMucmVzdW1lKCksIWV9LGZsdXNoOmZ1bmN0aW9uKCl7fSxwcm9jZXNzQ2h1bms6ZnVuY3Rpb24oZSl7dGhpcy5wdXNoKGUpfSx3aXRoU3RyZWFtSW5mbzpmdW5jdGlvbihlLHQpe3JldHVybiB0aGlzLmV4dHJhU3RyZWFtSW5mb1tlXT10LHRoaXMubWVyZ2VTdHJlYW1JbmZvKCksdGhpc30sbWVyZ2VTdHJlYW1JbmZvOmZ1bmN0aW9uKCl7Zm9yKHZhciBlIGluIHRoaXMuZXh0cmFTdHJlYW1JbmZvKXRoaXMuZXh0cmFTdHJlYW1JbmZvLmhhc093blByb3BlcnR5KGUpJiYodGhpcy5zdHJlYW1JbmZvW2VdPXRoaXMuZXh0cmFTdHJlYW1JbmZvW2VdKX0sbG9jazpmdW5jdGlvbigpe2lmKHRoaXMuaXNMb2NrZWQpdGhyb3cgbmV3IEVycm9yKFwiVGhlIHN0cmVhbSAnXCIrdGhpcytcIicgaGFzIGFscmVhZHkgYmVlbiB1c2VkLlwiKTt0aGlzLmlzTG9ja2VkPSEwLHRoaXMucHJldmlvdXMmJnRoaXMucHJldmlvdXMubG9jaygpfSx0b1N0cmluZzpmdW5jdGlvbigpe3ZhciBlPVwiV29ya2VyIFwiK3RoaXMubmFtZTtyZXR1cm4gdGhpcy5wcmV2aW91cz90aGlzLnByZXZpb3VzK1wiIC0+IFwiK2U6ZX19LHQuZXhwb3J0cz1ufSx7fV0sMjk6W2Z1bmN0aW9uKGUsdCxyKXtcInVzZSBzdHJpY3RcIjt2YXIgaD1lKFwiLi4vdXRpbHNcIiksaT1lKFwiLi9Db252ZXJ0V29ya2VyXCIpLHM9ZShcIi4vR2VuZXJpY1dvcmtlclwiKSx1PWUoXCIuLi9iYXNlNjRcIiksbj1lKFwiLi4vc3VwcG9ydFwiKSxhPWUoXCIuLi9leHRlcm5hbFwiKSxvPW51bGw7aWYobi5ub2Rlc3RyZWFtKXRyeXtvPWUoXCIuLi9ub2RlanMvTm9kZWpzU3RyZWFtT3V0cHV0QWRhcHRlclwiKX1jYXRjaChlKXt9ZnVuY3Rpb24gbChlLG8pe3JldHVybiBuZXcgYS5Qcm9taXNlKGZ1bmN0aW9uKHQscil7dmFyIG49W10saT1lLl9pbnRlcm5hbFR5cGUscz1lLl9vdXRwdXRUeXBlLGE9ZS5fbWltZVR5cGU7ZS5vbihcImRhdGFcIixmdW5jdGlvbihlLHQpe24ucHVzaChlKSxvJiZvKHQpfSkub24oXCJlcnJvclwiLGZ1bmN0aW9uKGUpe249W10scihlKX0pLm9uKFwiZW5kXCIsZnVuY3Rpb24oKXt0cnl7dmFyIGU9ZnVuY3Rpb24oZSx0LHIpe3N3aXRjaChlKXtjYXNlXCJibG9iXCI6cmV0dXJuIGgubmV3QmxvYihoLnRyYW5zZm9ybVRvKFwiYXJyYXlidWZmZXJcIix0KSxyKTtjYXNlXCJiYXNlNjRcIjpyZXR1cm4gdS5lbmNvZGUodCk7ZGVmYXVsdDpyZXR1cm4gaC50cmFuc2Zvcm1UbyhlLHQpfX0ocyxmdW5jdGlvbihlLHQpe3ZhciByLG49MCxpPW51bGwscz0wO2ZvcihyPTA7cjx0Lmxlbmd0aDtyKyspcys9dFtyXS5sZW5ndGg7c3dpdGNoKGUpe2Nhc2VcInN0cmluZ1wiOnJldHVybiB0LmpvaW4oXCJcIik7Y2FzZVwiYXJyYXlcIjpyZXR1cm4gQXJyYXkucHJvdG90eXBlLmNvbmNhdC5hcHBseShbXSx0KTtjYXNlXCJ1aW50OGFycmF5XCI6Zm9yKGk9bmV3IFVpbnQ4QXJyYXkocykscj0wO3I8dC5sZW5ndGg7cisrKWkuc2V0KHRbcl0sbiksbis9dFtyXS5sZW5ndGg7cmV0dXJuIGk7Y2FzZVwibm9kZWJ1ZmZlclwiOnJldHVybiBCdWZmZXIuY29uY2F0KHQpO2RlZmF1bHQ6dGhyb3cgbmV3IEVycm9yKFwiY29uY2F0IDogdW5zdXBwb3J0ZWQgdHlwZSAnXCIrZStcIidcIil9fShpLG4pLGEpO3QoZSl9Y2F0Y2goZSl7cihlKX1uPVtdfSkucmVzdW1lKCl9KX1mdW5jdGlvbiBmKGUsdCxyKXt2YXIgbj10O3N3aXRjaCh0KXtjYXNlXCJibG9iXCI6Y2FzZVwiYXJyYXlidWZmZXJcIjpuPVwidWludDhhcnJheVwiO2JyZWFrO2Nhc2VcImJhc2U2NFwiOm49XCJzdHJpbmdcIn10cnl7dGhpcy5faW50ZXJuYWxUeXBlPW4sdGhpcy5fb3V0cHV0VHlwZT10LHRoaXMuX21pbWVUeXBlPXIsaC5jaGVja1N1cHBvcnQobiksdGhpcy5fd29ya2VyPWUucGlwZShuZXcgaShuKSksZS5sb2NrKCl9Y2F0Y2goZSl7dGhpcy5fd29ya2VyPW5ldyBzKFwiZXJyb3JcIiksdGhpcy5fd29ya2VyLmVycm9yKGUpfX1mLnByb3RvdHlwZT17YWNjdW11bGF0ZTpmdW5jdGlvbihlKXtyZXR1cm4gbCh0aGlzLGUpfSxvbjpmdW5jdGlvbihlLHQpe3ZhciByPXRoaXM7cmV0dXJuXCJkYXRhXCI9PT1lP3RoaXMuX3dvcmtlci5vbihlLGZ1bmN0aW9uKGUpe3QuY2FsbChyLGUuZGF0YSxlLm1ldGEpfSk6dGhpcy5fd29ya2VyLm9uKGUsZnVuY3Rpb24oKXtoLmRlbGF5KHQsYXJndW1lbnRzLHIpfSksdGhpc30scmVzdW1lOmZ1bmN0aW9uKCl7cmV0dXJuIGguZGVsYXkodGhpcy5fd29ya2VyLnJlc3VtZSxbXSx0aGlzLl93b3JrZXIpLHRoaXN9LHBhdXNlOmZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuX3dvcmtlci5wYXVzZSgpLHRoaXN9LHRvTm9kZWpzU3RyZWFtOmZ1bmN0aW9uKGUpe2lmKGguY2hlY2tTdXBwb3J0KFwibm9kZXN0cmVhbVwiKSxcIm5vZGVidWZmZXJcIiE9PXRoaXMuX291dHB1dFR5cGUpdGhyb3cgbmV3IEVycm9yKHRoaXMuX291dHB1dFR5cGUrXCIgaXMgbm90IHN1cHBvcnRlZCBieSB0aGlzIG1ldGhvZFwiKTtyZXR1cm4gbmV3IG8odGhpcyx7b2JqZWN0TW9kZTpcIm5vZGVidWZmZXJcIiE9PXRoaXMuX291dHB1dFR5cGV9LGUpfX0sdC5leHBvcnRzPWZ9LHtcIi4uL2Jhc2U2NFwiOjEsXCIuLi9leHRlcm5hbFwiOjYsXCIuLi9ub2RlanMvTm9kZWpzU3RyZWFtT3V0cHV0QWRhcHRlclwiOjEzLFwiLi4vc3VwcG9ydFwiOjMwLFwiLi4vdXRpbHNcIjozMixcIi4vQ29udmVydFdvcmtlclwiOjI0LFwiLi9HZW5lcmljV29ya2VyXCI6Mjh9XSwzMDpbZnVuY3Rpb24oZSx0LHIpe1widXNlIHN0cmljdFwiO2lmKHIuYmFzZTY0PSEwLHIuYXJyYXk9ITAsci5zdHJpbmc9ITAsci5hcnJheWJ1ZmZlcj1cInVuZGVmaW5lZFwiIT10eXBlb2YgQXJyYXlCdWZmZXImJlwidW5kZWZpbmVkXCIhPXR5cGVvZiBVaW50OEFycmF5LHIubm9kZWJ1ZmZlcj1cInVuZGVmaW5lZFwiIT10eXBlb2YgQnVmZmVyLHIudWludDhhcnJheT1cInVuZGVmaW5lZFwiIT10eXBlb2YgVWludDhBcnJheSxcInVuZGVmaW5lZFwiPT10eXBlb2YgQXJyYXlCdWZmZXIpci5ibG9iPSExO2Vsc2V7dmFyIG49bmV3IEFycmF5QnVmZmVyKDApO3RyeXtyLmJsb2I9MD09PW5ldyBCbG9iKFtuXSx7dHlwZTpcImFwcGxpY2F0aW9uL3ppcFwifSkuc2l6ZX1jYXRjaChlKXt0cnl7dmFyIGk9bmV3KHNlbGYuQmxvYkJ1aWxkZXJ8fHNlbGYuV2ViS2l0QmxvYkJ1aWxkZXJ8fHNlbGYuTW96QmxvYkJ1aWxkZXJ8fHNlbGYuTVNCbG9iQnVpbGRlcik7aS5hcHBlbmQobiksci5ibG9iPTA9PT1pLmdldEJsb2IoXCJhcHBsaWNhdGlvbi96aXBcIikuc2l6ZX1jYXRjaChlKXtyLmJsb2I9ITF9fX10cnl7ci5ub2Rlc3RyZWFtPSEhZShcInJlYWRhYmxlLXN0cmVhbVwiKS5SZWFkYWJsZX1jYXRjaChlKXtyLm5vZGVzdHJlYW09ITF9fSx7XCJyZWFkYWJsZS1zdHJlYW1cIjoxNn1dLDMxOltmdW5jdGlvbihlLHQscyl7XCJ1c2Ugc3RyaWN0XCI7Zm9yKHZhciBvPWUoXCIuL3V0aWxzXCIpLGg9ZShcIi4vc3VwcG9ydFwiKSxyPWUoXCIuL25vZGVqc1V0aWxzXCIpLG49ZShcIi4vc3RyZWFtL0dlbmVyaWNXb3JrZXJcIiksdT1uZXcgQXJyYXkoMjU2KSxpPTA7aTwyNTY7aSsrKXVbaV09MjUyPD1pPzY6MjQ4PD1pPzU6MjQwPD1pPzQ6MjI0PD1pPzM6MTkyPD1pPzI6MTt1WzI1NF09dVsyNTRdPTE7ZnVuY3Rpb24gYSgpe24uY2FsbCh0aGlzLFwidXRmLTggZGVjb2RlXCIpLHRoaXMubGVmdE92ZXI9bnVsbH1mdW5jdGlvbiBsKCl7bi5jYWxsKHRoaXMsXCJ1dGYtOCBlbmNvZGVcIil9cy51dGY4ZW5jb2RlPWZ1bmN0aW9uKGUpe3JldHVybiBoLm5vZGVidWZmZXI/ci5uZXdCdWZmZXJGcm9tKGUsXCJ1dGYtOFwiKTpmdW5jdGlvbihlKXt2YXIgdCxyLG4saSxzLGE9ZS5sZW5ndGgsbz0wO2ZvcihpPTA7aTxhO2krKyk1NTI5Nj09KDY0NTEyJihyPWUuY2hhckNvZGVBdChpKSkpJiZpKzE8YSYmNTYzMjA9PSg2NDUxMiYobj1lLmNoYXJDb2RlQXQoaSsxKSkpJiYocj02NTUzNisoci01NTI5Njw8MTApKyhuLTU2MzIwKSxpKyspLG8rPXI8MTI4PzE6cjwyMDQ4PzI6cjw2NTUzNj8zOjQ7Zm9yKHQ9aC51aW50OGFycmF5P25ldyBVaW50OEFycmF5KG8pOm5ldyBBcnJheShvKSxpPXM9MDtzPG87aSsrKTU1Mjk2PT0oNjQ1MTImKHI9ZS5jaGFyQ29kZUF0KGkpKSkmJmkrMTxhJiY1NjMyMD09KDY0NTEyJihuPWUuY2hhckNvZGVBdChpKzEpKSkmJihyPTY1NTM2KyhyLTU1Mjk2PDwxMCkrKG4tNTYzMjApLGkrKykscjwxMjg/dFtzKytdPXI6KHI8MjA0OD90W3MrK109MTkyfHI+Pj42OihyPDY1NTM2P3RbcysrXT0yMjR8cj4+PjEyOih0W3MrK109MjQwfHI+Pj4xOCx0W3MrK109MTI4fHI+Pj4xMiY2MyksdFtzKytdPTEyOHxyPj4+NiY2MyksdFtzKytdPTEyOHw2MyZyKTtyZXR1cm4gdH0oZSl9LHMudXRmOGRlY29kZT1mdW5jdGlvbihlKXtyZXR1cm4gaC5ub2RlYnVmZmVyP28udHJhbnNmb3JtVG8oXCJub2RlYnVmZmVyXCIsZSkudG9TdHJpbmcoXCJ1dGYtOFwiKTpmdW5jdGlvbihlKXt2YXIgdCxyLG4saSxzPWUubGVuZ3RoLGE9bmV3IEFycmF5KDIqcyk7Zm9yKHQ9cj0wO3Q8czspaWYoKG49ZVt0KytdKTwxMjgpYVtyKytdPW47ZWxzZSBpZig0PChpPXVbbl0pKWFbcisrXT02NTUzMyx0Kz1pLTE7ZWxzZXtmb3IobiY9Mj09PWk/MzE6Mz09PWk/MTU6NzsxPGkmJnQ8czspbj1uPDw2fDYzJmVbdCsrXSxpLS07MTxpP2FbcisrXT02NTUzMzpuPDY1NTM2P2FbcisrXT1uOihuLT02NTUzNixhW3IrK109NTUyOTZ8bj4+MTAmMTAyMyxhW3IrK109NTYzMjB8MTAyMyZuKX1yZXR1cm4gYS5sZW5ndGghPT1yJiYoYS5zdWJhcnJheT9hPWEuc3ViYXJyYXkoMCxyKTphLmxlbmd0aD1yKSxvLmFwcGx5RnJvbUNoYXJDb2RlKGEpfShlPW8udHJhbnNmb3JtVG8oaC51aW50OGFycmF5P1widWludDhhcnJheVwiOlwiYXJyYXlcIixlKSl9LG8uaW5oZXJpdHMoYSxuKSxhLnByb3RvdHlwZS5wcm9jZXNzQ2h1bms9ZnVuY3Rpb24oZSl7dmFyIHQ9by50cmFuc2Zvcm1UbyhoLnVpbnQ4YXJyYXk/XCJ1aW50OGFycmF5XCI6XCJhcnJheVwiLGUuZGF0YSk7aWYodGhpcy5sZWZ0T3ZlciYmdGhpcy5sZWZ0T3Zlci5sZW5ndGgpe2lmKGgudWludDhhcnJheSl7dmFyIHI9dDsodD1uZXcgVWludDhBcnJheShyLmxlbmd0aCt0aGlzLmxlZnRPdmVyLmxlbmd0aCkpLnNldCh0aGlzLmxlZnRPdmVyLDApLHQuc2V0KHIsdGhpcy5sZWZ0T3Zlci5sZW5ndGgpfWVsc2UgdD10aGlzLmxlZnRPdmVyLmNvbmNhdCh0KTt0aGlzLmxlZnRPdmVyPW51bGx9dmFyIG49ZnVuY3Rpb24oZSx0KXt2YXIgcjtmb3IoKHQ9dHx8ZS5sZW5ndGgpPmUubGVuZ3RoJiYodD1lLmxlbmd0aCkscj10LTE7MDw9ciYmMTI4PT0oMTkyJmVbcl0pOylyLS07cmV0dXJuIHI8MD90OjA9PT1yP3Q6cit1W2Vbcl1dPnQ/cjp0fSh0KSxpPXQ7biE9PXQubGVuZ3RoJiYoaC51aW50OGFycmF5PyhpPXQuc3ViYXJyYXkoMCxuKSx0aGlzLmxlZnRPdmVyPXQuc3ViYXJyYXkobix0Lmxlbmd0aCkpOihpPXQuc2xpY2UoMCxuKSx0aGlzLmxlZnRPdmVyPXQuc2xpY2Uobix0Lmxlbmd0aCkpKSx0aGlzLnB1c2goe2RhdGE6cy51dGY4ZGVjb2RlKGkpLG1ldGE6ZS5tZXRhfSl9LGEucHJvdG90eXBlLmZsdXNoPWZ1bmN0aW9uKCl7dGhpcy5sZWZ0T3ZlciYmdGhpcy5sZWZ0T3Zlci5sZW5ndGgmJih0aGlzLnB1c2goe2RhdGE6cy51dGY4ZGVjb2RlKHRoaXMubGVmdE92ZXIpLG1ldGE6e319KSx0aGlzLmxlZnRPdmVyPW51bGwpfSxzLlV0ZjhEZWNvZGVXb3JrZXI9YSxvLmluaGVyaXRzKGwsbiksbC5wcm90b3R5cGUucHJvY2Vzc0NodW5rPWZ1bmN0aW9uKGUpe3RoaXMucHVzaCh7ZGF0YTpzLnV0ZjhlbmNvZGUoZS5kYXRhKSxtZXRhOmUubWV0YX0pfSxzLlV0ZjhFbmNvZGVXb3JrZXI9bH0se1wiLi9ub2RlanNVdGlsc1wiOjE0LFwiLi9zdHJlYW0vR2VuZXJpY1dvcmtlclwiOjI4LFwiLi9zdXBwb3J0XCI6MzAsXCIuL3V0aWxzXCI6MzJ9XSwzMjpbZnVuY3Rpb24oZSx0LGEpe1widXNlIHN0cmljdFwiO3ZhciBvPWUoXCIuL3N1cHBvcnRcIiksaD1lKFwiLi9iYXNlNjRcIikscj1lKFwiLi9ub2RlanNVdGlsc1wiKSx1PWUoXCIuL2V4dGVybmFsXCIpO2Z1bmN0aW9uIG4oZSl7cmV0dXJuIGV9ZnVuY3Rpb24gbChlLHQpe2Zvcih2YXIgcj0wO3I8ZS5sZW5ndGg7KytyKXRbcl09MjU1JmUuY2hhckNvZGVBdChyKTtyZXR1cm4gdH1lKFwic2V0aW1tZWRpYXRlXCIpLGEubmV3QmxvYj1mdW5jdGlvbih0LHIpe2EuY2hlY2tTdXBwb3J0KFwiYmxvYlwiKTt0cnl7cmV0dXJuIG5ldyBCbG9iKFt0XSx7dHlwZTpyfSl9Y2F0Y2goZSl7dHJ5e3ZhciBuPW5ldyhzZWxmLkJsb2JCdWlsZGVyfHxzZWxmLldlYktpdEJsb2JCdWlsZGVyfHxzZWxmLk1vekJsb2JCdWlsZGVyfHxzZWxmLk1TQmxvYkJ1aWxkZXIpO3JldHVybiBuLmFwcGVuZCh0KSxuLmdldEJsb2Iocil9Y2F0Y2goZSl7dGhyb3cgbmV3IEVycm9yKFwiQnVnIDogY2FuJ3QgY29uc3RydWN0IHRoZSBCbG9iLlwiKX19fTt2YXIgaT17c3RyaW5naWZ5QnlDaHVuazpmdW5jdGlvbihlLHQscil7dmFyIG49W10saT0wLHM9ZS5sZW5ndGg7aWYoczw9cilyZXR1cm4gU3RyaW5nLmZyb21DaGFyQ29kZS5hcHBseShudWxsLGUpO2Zvcig7aTxzOylcImFycmF5XCI9PT10fHxcIm5vZGVidWZmZXJcIj09PXQ/bi5wdXNoKFN0cmluZy5mcm9tQ2hhckNvZGUuYXBwbHkobnVsbCxlLnNsaWNlKGksTWF0aC5taW4oaStyLHMpKSkpOm4ucHVzaChTdHJpbmcuZnJvbUNoYXJDb2RlLmFwcGx5KG51bGwsZS5zdWJhcnJheShpLE1hdGgubWluKGkrcixzKSkpKSxpKz1yO3JldHVybiBuLmpvaW4oXCJcIil9LHN0cmluZ2lmeUJ5Q2hhcjpmdW5jdGlvbihlKXtmb3IodmFyIHQ9XCJcIixyPTA7cjxlLmxlbmd0aDtyKyspdCs9U3RyaW5nLmZyb21DaGFyQ29kZShlW3JdKTtyZXR1cm4gdH0sYXBwbHlDYW5CZVVzZWQ6e3VpbnQ4YXJyYXk6ZnVuY3Rpb24oKXt0cnl7cmV0dXJuIG8udWludDhhcnJheSYmMT09PVN0cmluZy5mcm9tQ2hhckNvZGUuYXBwbHkobnVsbCxuZXcgVWludDhBcnJheSgxKSkubGVuZ3RofWNhdGNoKGUpe3JldHVybiExfX0oKSxub2RlYnVmZmVyOmZ1bmN0aW9uKCl7dHJ5e3JldHVybiBvLm5vZGVidWZmZXImJjE9PT1TdHJpbmcuZnJvbUNoYXJDb2RlLmFwcGx5KG51bGwsci5hbGxvY0J1ZmZlcigxKSkubGVuZ3RofWNhdGNoKGUpe3JldHVybiExfX0oKX19O2Z1bmN0aW9uIHMoZSl7dmFyIHQ9NjU1MzYscj1hLmdldFR5cGVPZihlKSxuPSEwO2lmKFwidWludDhhcnJheVwiPT09cj9uPWkuYXBwbHlDYW5CZVVzZWQudWludDhhcnJheTpcIm5vZGVidWZmZXJcIj09PXImJihuPWkuYXBwbHlDYW5CZVVzZWQubm9kZWJ1ZmZlciksbilmb3IoOzE8dDspdHJ5e3JldHVybiBpLnN0cmluZ2lmeUJ5Q2h1bmsoZSxyLHQpfWNhdGNoKGUpe3Q9TWF0aC5mbG9vcih0LzIpfXJldHVybiBpLnN0cmluZ2lmeUJ5Q2hhcihlKX1mdW5jdGlvbiBmKGUsdCl7Zm9yKHZhciByPTA7cjxlLmxlbmd0aDtyKyspdFtyXT1lW3JdO3JldHVybiB0fWEuYXBwbHlGcm9tQ2hhckNvZGU9czt2YXIgYz17fTtjLnN0cmluZz17c3RyaW5nOm4sYXJyYXk6ZnVuY3Rpb24oZSl7cmV0dXJuIGwoZSxuZXcgQXJyYXkoZS5sZW5ndGgpKX0sYXJyYXlidWZmZXI6ZnVuY3Rpb24oZSl7cmV0dXJuIGMuc3RyaW5nLnVpbnQ4YXJyYXkoZSkuYnVmZmVyfSx1aW50OGFycmF5OmZ1bmN0aW9uKGUpe3JldHVybiBsKGUsbmV3IFVpbnQ4QXJyYXkoZS5sZW5ndGgpKX0sbm9kZWJ1ZmZlcjpmdW5jdGlvbihlKXtyZXR1cm4gbChlLHIuYWxsb2NCdWZmZXIoZS5sZW5ndGgpKX19LGMuYXJyYXk9e3N0cmluZzpzLGFycmF5Om4sYXJyYXlidWZmZXI6ZnVuY3Rpb24oZSl7cmV0dXJuIG5ldyBVaW50OEFycmF5KGUpLmJ1ZmZlcn0sdWludDhhcnJheTpmdW5jdGlvbihlKXtyZXR1cm4gbmV3IFVpbnQ4QXJyYXkoZSl9LG5vZGVidWZmZXI6ZnVuY3Rpb24oZSl7cmV0dXJuIHIubmV3QnVmZmVyRnJvbShlKX19LGMuYXJyYXlidWZmZXI9e3N0cmluZzpmdW5jdGlvbihlKXtyZXR1cm4gcyhuZXcgVWludDhBcnJheShlKSl9LGFycmF5OmZ1bmN0aW9uKGUpe3JldHVybiBmKG5ldyBVaW50OEFycmF5KGUpLG5ldyBBcnJheShlLmJ5dGVMZW5ndGgpKX0sYXJyYXlidWZmZXI6bix1aW50OGFycmF5OmZ1bmN0aW9uKGUpe3JldHVybiBuZXcgVWludDhBcnJheShlKX0sbm9kZWJ1ZmZlcjpmdW5jdGlvbihlKXtyZXR1cm4gci5uZXdCdWZmZXJGcm9tKG5ldyBVaW50OEFycmF5KGUpKX19LGMudWludDhhcnJheT17c3RyaW5nOnMsYXJyYXk6ZnVuY3Rpb24oZSl7cmV0dXJuIGYoZSxuZXcgQXJyYXkoZS5sZW5ndGgpKX0sYXJyYXlidWZmZXI6ZnVuY3Rpb24oZSl7cmV0dXJuIGUuYnVmZmVyfSx1aW50OGFycmF5Om4sbm9kZWJ1ZmZlcjpmdW5jdGlvbihlKXtyZXR1cm4gci5uZXdCdWZmZXJGcm9tKGUpfX0sYy5ub2RlYnVmZmVyPXtzdHJpbmc6cyxhcnJheTpmdW5jdGlvbihlKXtyZXR1cm4gZihlLG5ldyBBcnJheShlLmxlbmd0aCkpfSxhcnJheWJ1ZmZlcjpmdW5jdGlvbihlKXtyZXR1cm4gYy5ub2RlYnVmZmVyLnVpbnQ4YXJyYXkoZSkuYnVmZmVyfSx1aW50OGFycmF5OmZ1bmN0aW9uKGUpe3JldHVybiBmKGUsbmV3IFVpbnQ4QXJyYXkoZS5sZW5ndGgpKX0sbm9kZWJ1ZmZlcjpufSxhLnRyYW5zZm9ybVRvPWZ1bmN0aW9uKGUsdCl7aWYodD10fHxcIlwiLCFlKXJldHVybiB0O2EuY2hlY2tTdXBwb3J0KGUpO3ZhciByPWEuZ2V0VHlwZU9mKHQpO3JldHVybiBjW3JdW2VdKHQpfSxhLnJlc29sdmU9ZnVuY3Rpb24oZSl7Zm9yKHZhciB0PWUuc3BsaXQoXCIvXCIpLHI9W10sbj0wO248dC5sZW5ndGg7bisrKXt2YXIgaT10W25dO1wiLlwiPT09aXx8XCJcIj09PWkmJjAhPT1uJiZuIT09dC5sZW5ndGgtMXx8KFwiLi5cIj09PWk/ci5wb3AoKTpyLnB1c2goaSkpfXJldHVybiByLmpvaW4oXCIvXCIpfSxhLmdldFR5cGVPZj1mdW5jdGlvbihlKXtyZXR1cm5cInN0cmluZ1wiPT10eXBlb2YgZT9cInN0cmluZ1wiOlwiW29iamVjdCBBcnJheV1cIj09PU9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChlKT9cImFycmF5XCI6by5ub2RlYnVmZmVyJiZyLmlzQnVmZmVyKGUpP1wibm9kZWJ1ZmZlclwiOm8udWludDhhcnJheSYmZSBpbnN0YW5jZW9mIFVpbnQ4QXJyYXk/XCJ1aW50OGFycmF5XCI6by5hcnJheWJ1ZmZlciYmZSBpbnN0YW5jZW9mIEFycmF5QnVmZmVyP1wiYXJyYXlidWZmZXJcIjp2b2lkIDB9LGEuY2hlY2tTdXBwb3J0PWZ1bmN0aW9uKGUpe2lmKCFvW2UudG9Mb3dlckNhc2UoKV0pdGhyb3cgbmV3IEVycm9yKGUrXCIgaXMgbm90IHN1cHBvcnRlZCBieSB0aGlzIHBsYXRmb3JtXCIpfSxhLk1BWF9WQUxVRV8xNkJJVFM9NjU1MzUsYS5NQVhfVkFMVUVfMzJCSVRTPS0xLGEucHJldHR5PWZ1bmN0aW9uKGUpe3ZhciB0LHIsbj1cIlwiO2ZvcihyPTA7cjwoZXx8XCJcIikubGVuZ3RoO3IrKyluKz1cIlxcXFx4XCIrKCh0PWUuY2hhckNvZGVBdChyKSk8MTY/XCIwXCI6XCJcIikrdC50b1N0cmluZygxNikudG9VcHBlckNhc2UoKTtyZXR1cm4gbn0sYS5kZWxheT1mdW5jdGlvbihlLHQscil7c2V0SW1tZWRpYXRlKGZ1bmN0aW9uKCl7ZS5hcHBseShyfHxudWxsLHR8fFtdKX0pfSxhLmluaGVyaXRzPWZ1bmN0aW9uKGUsdCl7ZnVuY3Rpb24gcigpe31yLnByb3RvdHlwZT10LnByb3RvdHlwZSxlLnByb3RvdHlwZT1uZXcgcn0sYS5leHRlbmQ9ZnVuY3Rpb24oKXt2YXIgZSx0LHI9e307Zm9yKGU9MDtlPGFyZ3VtZW50cy5sZW5ndGg7ZSsrKWZvcih0IGluIGFyZ3VtZW50c1tlXSlhcmd1bWVudHNbZV0uaGFzT3duUHJvcGVydHkodCkmJnZvaWQgMD09PXJbdF0mJihyW3RdPWFyZ3VtZW50c1tlXVt0XSk7cmV0dXJuIHJ9LGEucHJlcGFyZUNvbnRlbnQ9ZnVuY3Rpb24ocixlLG4saSxzKXtyZXR1cm4gdS5Qcm9taXNlLnJlc29sdmUoZSkudGhlbihmdW5jdGlvbihuKXtyZXR1cm4gby5ibG9iJiYobiBpbnN0YW5jZW9mIEJsb2J8fC0xIT09W1wiW29iamVjdCBGaWxlXVwiLFwiW29iamVjdCBCbG9iXVwiXS5pbmRleE9mKE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChuKSkpJiZcInVuZGVmaW5lZFwiIT10eXBlb2YgRmlsZVJlYWRlcj9uZXcgdS5Qcm9taXNlKGZ1bmN0aW9uKHQscil7dmFyIGU9bmV3IEZpbGVSZWFkZXI7ZS5vbmxvYWQ9ZnVuY3Rpb24oZSl7dChlLnRhcmdldC5yZXN1bHQpfSxlLm9uZXJyb3I9ZnVuY3Rpb24oZSl7cihlLnRhcmdldC5lcnJvcil9LGUucmVhZEFzQXJyYXlCdWZmZXIobil9KTpufSkudGhlbihmdW5jdGlvbihlKXt2YXIgdD1hLmdldFR5cGVPZihlKTtyZXR1cm4gdD8oXCJhcnJheWJ1ZmZlclwiPT09dD9lPWEudHJhbnNmb3JtVG8oXCJ1aW50OGFycmF5XCIsZSk6XCJzdHJpbmdcIj09PXQmJihzP2U9aC5kZWNvZGUoZSk6biYmITAhPT1pJiYoZT1mdW5jdGlvbihlKXtyZXR1cm4gbChlLG8udWludDhhcnJheT9uZXcgVWludDhBcnJheShlLmxlbmd0aCk6bmV3IEFycmF5KGUubGVuZ3RoKSl9KGUpKSksZSk6dS5Qcm9taXNlLnJlamVjdChuZXcgRXJyb3IoXCJDYW4ndCByZWFkIHRoZSBkYXRhIG9mICdcIityK1wiJy4gSXMgaXQgaW4gYSBzdXBwb3J0ZWQgSmF2YVNjcmlwdCB0eXBlIChTdHJpbmcsIEJsb2IsIEFycmF5QnVmZmVyLCBldGMpID9cIikpfSl9fSx7XCIuL2Jhc2U2NFwiOjEsXCIuL2V4dGVybmFsXCI6NixcIi4vbm9kZWpzVXRpbHNcIjoxNCxcIi4vc3VwcG9ydFwiOjMwLHNldGltbWVkaWF0ZTo1NH1dLDMzOltmdW5jdGlvbihlLHQscil7XCJ1c2Ugc3RyaWN0XCI7dmFyIG49ZShcIi4vcmVhZGVyL3JlYWRlckZvclwiKSxpPWUoXCIuL3V0aWxzXCIpLHM9ZShcIi4vc2lnbmF0dXJlXCIpLGE9ZShcIi4vemlwRW50cnlcIiksbz0oZShcIi4vdXRmOFwiKSxlKFwiLi9zdXBwb3J0XCIpKTtmdW5jdGlvbiBoKGUpe3RoaXMuZmlsZXM9W10sdGhpcy5sb2FkT3B0aW9ucz1lfWgucHJvdG90eXBlPXtjaGVja1NpZ25hdHVyZTpmdW5jdGlvbihlKXtpZighdGhpcy5yZWFkZXIucmVhZEFuZENoZWNrU2lnbmF0dXJlKGUpKXt0aGlzLnJlYWRlci5pbmRleC09NDt2YXIgdD10aGlzLnJlYWRlci5yZWFkU3RyaW5nKDQpO3Rocm93IG5ldyBFcnJvcihcIkNvcnJ1cHRlZCB6aXAgb3IgYnVnOiB1bmV4cGVjdGVkIHNpZ25hdHVyZSAoXCIraS5wcmV0dHkodCkrXCIsIGV4cGVjdGVkIFwiK2kucHJldHR5KGUpK1wiKVwiKX19LGlzU2lnbmF0dXJlOmZ1bmN0aW9uKGUsdCl7dmFyIHI9dGhpcy5yZWFkZXIuaW5kZXg7dGhpcy5yZWFkZXIuc2V0SW5kZXgoZSk7dmFyIG49dGhpcy5yZWFkZXIucmVhZFN0cmluZyg0KT09PXQ7cmV0dXJuIHRoaXMucmVhZGVyLnNldEluZGV4KHIpLG59LHJlYWRCbG9ja0VuZE9mQ2VudHJhbDpmdW5jdGlvbigpe3RoaXMuZGlza051bWJlcj10aGlzLnJlYWRlci5yZWFkSW50KDIpLHRoaXMuZGlza1dpdGhDZW50cmFsRGlyU3RhcnQ9dGhpcy5yZWFkZXIucmVhZEludCgyKSx0aGlzLmNlbnRyYWxEaXJSZWNvcmRzT25UaGlzRGlzaz10aGlzLnJlYWRlci5yZWFkSW50KDIpLHRoaXMuY2VudHJhbERpclJlY29yZHM9dGhpcy5yZWFkZXIucmVhZEludCgyKSx0aGlzLmNlbnRyYWxEaXJTaXplPXRoaXMucmVhZGVyLnJlYWRJbnQoNCksdGhpcy5jZW50cmFsRGlyT2Zmc2V0PXRoaXMucmVhZGVyLnJlYWRJbnQoNCksdGhpcy56aXBDb21tZW50TGVuZ3RoPXRoaXMucmVhZGVyLnJlYWRJbnQoMik7dmFyIGU9dGhpcy5yZWFkZXIucmVhZERhdGEodGhpcy56aXBDb21tZW50TGVuZ3RoKSx0PW8udWludDhhcnJheT9cInVpbnQ4YXJyYXlcIjpcImFycmF5XCIscj1pLnRyYW5zZm9ybVRvKHQsZSk7dGhpcy56aXBDb21tZW50PXRoaXMubG9hZE9wdGlvbnMuZGVjb2RlRmlsZU5hbWUocil9LHJlYWRCbG9ja1ppcDY0RW5kT2ZDZW50cmFsOmZ1bmN0aW9uKCl7dGhpcy56aXA2NEVuZE9mQ2VudHJhbFNpemU9dGhpcy5yZWFkZXIucmVhZEludCg4KSx0aGlzLnJlYWRlci5za2lwKDQpLHRoaXMuZGlza051bWJlcj10aGlzLnJlYWRlci5yZWFkSW50KDQpLHRoaXMuZGlza1dpdGhDZW50cmFsRGlyU3RhcnQ9dGhpcy5yZWFkZXIucmVhZEludCg0KSx0aGlzLmNlbnRyYWxEaXJSZWNvcmRzT25UaGlzRGlzaz10aGlzLnJlYWRlci5yZWFkSW50KDgpLHRoaXMuY2VudHJhbERpclJlY29yZHM9dGhpcy5yZWFkZXIucmVhZEludCg4KSx0aGlzLmNlbnRyYWxEaXJTaXplPXRoaXMucmVhZGVyLnJlYWRJbnQoOCksdGhpcy5jZW50cmFsRGlyT2Zmc2V0PXRoaXMucmVhZGVyLnJlYWRJbnQoOCksdGhpcy56aXA2NEV4dGVuc2libGVEYXRhPXt9O2Zvcih2YXIgZSx0LHIsbj10aGlzLnppcDY0RW5kT2ZDZW50cmFsU2l6ZS00NDswPG47KWU9dGhpcy5yZWFkZXIucmVhZEludCgyKSx0PXRoaXMucmVhZGVyLnJlYWRJbnQoNCkscj10aGlzLnJlYWRlci5yZWFkRGF0YSh0KSx0aGlzLnppcDY0RXh0ZW5zaWJsZURhdGFbZV09e2lkOmUsbGVuZ3RoOnQsdmFsdWU6cn19LHJlYWRCbG9ja1ppcDY0RW5kT2ZDZW50cmFsTG9jYXRvcjpmdW5jdGlvbigpe2lmKHRoaXMuZGlza1dpdGhaaXA2NENlbnRyYWxEaXJTdGFydD10aGlzLnJlYWRlci5yZWFkSW50KDQpLHRoaXMucmVsYXRpdmVPZmZzZXRFbmRPZlppcDY0Q2VudHJhbERpcj10aGlzLnJlYWRlci5yZWFkSW50KDgpLHRoaXMuZGlza3NDb3VudD10aGlzLnJlYWRlci5yZWFkSW50KDQpLDE8dGhpcy5kaXNrc0NvdW50KXRocm93IG5ldyBFcnJvcihcIk11bHRpLXZvbHVtZXMgemlwIGFyZSBub3Qgc3VwcG9ydGVkXCIpfSxyZWFkTG9jYWxGaWxlczpmdW5jdGlvbigpe3ZhciBlLHQ7Zm9yKGU9MDtlPHRoaXMuZmlsZXMubGVuZ3RoO2UrKyl0PXRoaXMuZmlsZXNbZV0sdGhpcy5yZWFkZXIuc2V0SW5kZXgodC5sb2NhbEhlYWRlck9mZnNldCksdGhpcy5jaGVja1NpZ25hdHVyZShzLkxPQ0FMX0ZJTEVfSEVBREVSKSx0LnJlYWRMb2NhbFBhcnQodGhpcy5yZWFkZXIpLHQuaGFuZGxlVVRGOCgpLHQucHJvY2Vzc0F0dHJpYnV0ZXMoKX0scmVhZENlbnRyYWxEaXI6ZnVuY3Rpb24oKXt2YXIgZTtmb3IodGhpcy5yZWFkZXIuc2V0SW5kZXgodGhpcy5jZW50cmFsRGlyT2Zmc2V0KTt0aGlzLnJlYWRlci5yZWFkQW5kQ2hlY2tTaWduYXR1cmUocy5DRU5UUkFMX0ZJTEVfSEVBREVSKTspKGU9bmV3IGEoe3ppcDY0OnRoaXMuemlwNjR9LHRoaXMubG9hZE9wdGlvbnMpKS5yZWFkQ2VudHJhbFBhcnQodGhpcy5yZWFkZXIpLHRoaXMuZmlsZXMucHVzaChlKTtpZih0aGlzLmNlbnRyYWxEaXJSZWNvcmRzIT09dGhpcy5maWxlcy5sZW5ndGgmJjAhPT10aGlzLmNlbnRyYWxEaXJSZWNvcmRzJiYwPT09dGhpcy5maWxlcy5sZW5ndGgpdGhyb3cgbmV3IEVycm9yKFwiQ29ycnVwdGVkIHppcCBvciBidWc6IGV4cGVjdGVkIFwiK3RoaXMuY2VudHJhbERpclJlY29yZHMrXCIgcmVjb3JkcyBpbiBjZW50cmFsIGRpciwgZ290IFwiK3RoaXMuZmlsZXMubGVuZ3RoKX0scmVhZEVuZE9mQ2VudHJhbDpmdW5jdGlvbigpe3ZhciBlPXRoaXMucmVhZGVyLmxhc3RJbmRleE9mU2lnbmF0dXJlKHMuQ0VOVFJBTF9ESVJFQ1RPUllfRU5EKTtpZihlPDApdGhyb3chdGhpcy5pc1NpZ25hdHVyZSgwLHMuTE9DQUxfRklMRV9IRUFERVIpP25ldyBFcnJvcihcIkNhbid0IGZpbmQgZW5kIG9mIGNlbnRyYWwgZGlyZWN0b3J5IDogaXMgdGhpcyBhIHppcCBmaWxlID8gSWYgaXQgaXMsIHNlZSBodHRwczovL3N0dWsuZ2l0aHViLmlvL2pzemlwL2RvY3VtZW50YXRpb24vaG93dG8vcmVhZF96aXAuaHRtbFwiKTpuZXcgRXJyb3IoXCJDb3JydXB0ZWQgemlwOiBjYW4ndCBmaW5kIGVuZCBvZiBjZW50cmFsIGRpcmVjdG9yeVwiKTt0aGlzLnJlYWRlci5zZXRJbmRleChlKTt2YXIgdD1lO2lmKHRoaXMuY2hlY2tTaWduYXR1cmUocy5DRU5UUkFMX0RJUkVDVE9SWV9FTkQpLHRoaXMucmVhZEJsb2NrRW5kT2ZDZW50cmFsKCksdGhpcy5kaXNrTnVtYmVyPT09aS5NQVhfVkFMVUVfMTZCSVRTfHx0aGlzLmRpc2tXaXRoQ2VudHJhbERpclN0YXJ0PT09aS5NQVhfVkFMVUVfMTZCSVRTfHx0aGlzLmNlbnRyYWxEaXJSZWNvcmRzT25UaGlzRGlzaz09PWkuTUFYX1ZBTFVFXzE2QklUU3x8dGhpcy5jZW50cmFsRGlyUmVjb3Jkcz09PWkuTUFYX1ZBTFVFXzE2QklUU3x8dGhpcy5jZW50cmFsRGlyU2l6ZT09PWkuTUFYX1ZBTFVFXzMyQklUU3x8dGhpcy5jZW50cmFsRGlyT2Zmc2V0PT09aS5NQVhfVkFMVUVfMzJCSVRTKXtpZih0aGlzLnppcDY0PSEwLChlPXRoaXMucmVhZGVyLmxhc3RJbmRleE9mU2lnbmF0dXJlKHMuWklQNjRfQ0VOVFJBTF9ESVJFQ1RPUllfTE9DQVRPUikpPDApdGhyb3cgbmV3IEVycm9yKFwiQ29ycnVwdGVkIHppcDogY2FuJ3QgZmluZCB0aGUgWklQNjQgZW5kIG9mIGNlbnRyYWwgZGlyZWN0b3J5IGxvY2F0b3JcIik7aWYodGhpcy5yZWFkZXIuc2V0SW5kZXgoZSksdGhpcy5jaGVja1NpZ25hdHVyZShzLlpJUDY0X0NFTlRSQUxfRElSRUNUT1JZX0xPQ0FUT1IpLHRoaXMucmVhZEJsb2NrWmlwNjRFbmRPZkNlbnRyYWxMb2NhdG9yKCksIXRoaXMuaXNTaWduYXR1cmUodGhpcy5yZWxhdGl2ZU9mZnNldEVuZE9mWmlwNjRDZW50cmFsRGlyLHMuWklQNjRfQ0VOVFJBTF9ESVJFQ1RPUllfRU5EKSYmKHRoaXMucmVsYXRpdmVPZmZzZXRFbmRPZlppcDY0Q2VudHJhbERpcj10aGlzLnJlYWRlci5sYXN0SW5kZXhPZlNpZ25hdHVyZShzLlpJUDY0X0NFTlRSQUxfRElSRUNUT1JZX0VORCksdGhpcy5yZWxhdGl2ZU9mZnNldEVuZE9mWmlwNjRDZW50cmFsRGlyPDApKXRocm93IG5ldyBFcnJvcihcIkNvcnJ1cHRlZCB6aXA6IGNhbid0IGZpbmQgdGhlIFpJUDY0IGVuZCBvZiBjZW50cmFsIGRpcmVjdG9yeVwiKTt0aGlzLnJlYWRlci5zZXRJbmRleCh0aGlzLnJlbGF0aXZlT2Zmc2V0RW5kT2ZaaXA2NENlbnRyYWxEaXIpLHRoaXMuY2hlY2tTaWduYXR1cmUocy5aSVA2NF9DRU5UUkFMX0RJUkVDVE9SWV9FTkQpLHRoaXMucmVhZEJsb2NrWmlwNjRFbmRPZkNlbnRyYWwoKX12YXIgcj10aGlzLmNlbnRyYWxEaXJPZmZzZXQrdGhpcy5jZW50cmFsRGlyU2l6ZTt0aGlzLnppcDY0JiYocis9MjAscis9MTIrdGhpcy56aXA2NEVuZE9mQ2VudHJhbFNpemUpO3ZhciBuPXQtcjtpZigwPG4pdGhpcy5pc1NpZ25hdHVyZSh0LHMuQ0VOVFJBTF9GSUxFX0hFQURFUil8fCh0aGlzLnJlYWRlci56ZXJvPW4pO2Vsc2UgaWYobjwwKXRocm93IG5ldyBFcnJvcihcIkNvcnJ1cHRlZCB6aXA6IG1pc3NpbmcgXCIrTWF0aC5hYnMobikrXCIgYnl0ZXMuXCIpfSxwcmVwYXJlUmVhZGVyOmZ1bmN0aW9uKGUpe3RoaXMucmVhZGVyPW4oZSl9LGxvYWQ6ZnVuY3Rpb24oZSl7dGhpcy5wcmVwYXJlUmVhZGVyKGUpLHRoaXMucmVhZEVuZE9mQ2VudHJhbCgpLHRoaXMucmVhZENlbnRyYWxEaXIoKSx0aGlzLnJlYWRMb2NhbEZpbGVzKCl9fSx0LmV4cG9ydHM9aH0se1wiLi9yZWFkZXIvcmVhZGVyRm9yXCI6MjIsXCIuL3NpZ25hdHVyZVwiOjIzLFwiLi9zdXBwb3J0XCI6MzAsXCIuL3V0ZjhcIjozMSxcIi4vdXRpbHNcIjozMixcIi4vemlwRW50cnlcIjozNH1dLDM0OltmdW5jdGlvbihlLHQscil7XCJ1c2Ugc3RyaWN0XCI7dmFyIG49ZShcIi4vcmVhZGVyL3JlYWRlckZvclwiKSxzPWUoXCIuL3V0aWxzXCIpLGk9ZShcIi4vY29tcHJlc3NlZE9iamVjdFwiKSxhPWUoXCIuL2NyYzMyXCIpLG89ZShcIi4vdXRmOFwiKSxoPWUoXCIuL2NvbXByZXNzaW9uc1wiKSx1PWUoXCIuL3N1cHBvcnRcIik7ZnVuY3Rpb24gbChlLHQpe3RoaXMub3B0aW9ucz1lLHRoaXMubG9hZE9wdGlvbnM9dH1sLnByb3RvdHlwZT17aXNFbmNyeXB0ZWQ6ZnVuY3Rpb24oKXtyZXR1cm4gMT09KDEmdGhpcy5iaXRGbGFnKX0sdXNlVVRGODpmdW5jdGlvbigpe3JldHVybiAyMDQ4PT0oMjA0OCZ0aGlzLmJpdEZsYWcpfSxyZWFkTG9jYWxQYXJ0OmZ1bmN0aW9uKGUpe3ZhciB0LHI7aWYoZS5za2lwKDIyKSx0aGlzLmZpbGVOYW1lTGVuZ3RoPWUucmVhZEludCgyKSxyPWUucmVhZEludCgyKSx0aGlzLmZpbGVOYW1lPWUucmVhZERhdGEodGhpcy5maWxlTmFtZUxlbmd0aCksZS5za2lwKHIpLC0xPT09dGhpcy5jb21wcmVzc2VkU2l6ZXx8LTE9PT10aGlzLnVuY29tcHJlc3NlZFNpemUpdGhyb3cgbmV3IEVycm9yKFwiQnVnIG9yIGNvcnJ1cHRlZCB6aXAgOiBkaWRuJ3QgZ2V0IGVub3VnaCBpbmZvcm1hdGlvbiBmcm9tIHRoZSBjZW50cmFsIGRpcmVjdG9yeSAoY29tcHJlc3NlZFNpemUgPT09IC0xIHx8IHVuY29tcHJlc3NlZFNpemUgPT09IC0xKVwiKTtpZihudWxsPT09KHQ9ZnVuY3Rpb24oZSl7Zm9yKHZhciB0IGluIGgpaWYoaC5oYXNPd25Qcm9wZXJ0eSh0KSYmaFt0XS5tYWdpYz09PWUpcmV0dXJuIGhbdF07cmV0dXJuIG51bGx9KHRoaXMuY29tcHJlc3Npb25NZXRob2QpKSl0aHJvdyBuZXcgRXJyb3IoXCJDb3JydXB0ZWQgemlwIDogY29tcHJlc3Npb24gXCIrcy5wcmV0dHkodGhpcy5jb21wcmVzc2lvbk1ldGhvZCkrXCIgdW5rbm93biAoaW5uZXIgZmlsZSA6IFwiK3MudHJhbnNmb3JtVG8oXCJzdHJpbmdcIix0aGlzLmZpbGVOYW1lKStcIilcIik7dGhpcy5kZWNvbXByZXNzZWQ9bmV3IGkodGhpcy5jb21wcmVzc2VkU2l6ZSx0aGlzLnVuY29tcHJlc3NlZFNpemUsdGhpcy5jcmMzMix0LGUucmVhZERhdGEodGhpcy5jb21wcmVzc2VkU2l6ZSkpfSxyZWFkQ2VudHJhbFBhcnQ6ZnVuY3Rpb24oZSl7dGhpcy52ZXJzaW9uTWFkZUJ5PWUucmVhZEludCgyKSxlLnNraXAoMiksdGhpcy5iaXRGbGFnPWUucmVhZEludCgyKSx0aGlzLmNvbXByZXNzaW9uTWV0aG9kPWUucmVhZFN0cmluZygyKSx0aGlzLmRhdGU9ZS5yZWFkRGF0ZSgpLHRoaXMuY3JjMzI9ZS5yZWFkSW50KDQpLHRoaXMuY29tcHJlc3NlZFNpemU9ZS5yZWFkSW50KDQpLHRoaXMudW5jb21wcmVzc2VkU2l6ZT1lLnJlYWRJbnQoNCk7dmFyIHQ9ZS5yZWFkSW50KDIpO2lmKHRoaXMuZXh0cmFGaWVsZHNMZW5ndGg9ZS5yZWFkSW50KDIpLHRoaXMuZmlsZUNvbW1lbnRMZW5ndGg9ZS5yZWFkSW50KDIpLHRoaXMuZGlza051bWJlclN0YXJ0PWUucmVhZEludCgyKSx0aGlzLmludGVybmFsRmlsZUF0dHJpYnV0ZXM9ZS5yZWFkSW50KDIpLHRoaXMuZXh0ZXJuYWxGaWxlQXR0cmlidXRlcz1lLnJlYWRJbnQoNCksdGhpcy5sb2NhbEhlYWRlck9mZnNldD1lLnJlYWRJbnQoNCksdGhpcy5pc0VuY3J5cHRlZCgpKXRocm93IG5ldyBFcnJvcihcIkVuY3J5cHRlZCB6aXAgYXJlIG5vdCBzdXBwb3J0ZWRcIik7ZS5za2lwKHQpLHRoaXMucmVhZEV4dHJhRmllbGRzKGUpLHRoaXMucGFyc2VaSVA2NEV4dHJhRmllbGQoZSksdGhpcy5maWxlQ29tbWVudD1lLnJlYWREYXRhKHRoaXMuZmlsZUNvbW1lbnRMZW5ndGgpfSxwcm9jZXNzQXR0cmlidXRlczpmdW5jdGlvbigpe3RoaXMudW5peFBlcm1pc3Npb25zPW51bGwsdGhpcy5kb3NQZXJtaXNzaW9ucz1udWxsO3ZhciBlPXRoaXMudmVyc2lvbk1hZGVCeT4+ODt0aGlzLmRpcj0hISgxNiZ0aGlzLmV4dGVybmFsRmlsZUF0dHJpYnV0ZXMpLDA9PWUmJih0aGlzLmRvc1Blcm1pc3Npb25zPTYzJnRoaXMuZXh0ZXJuYWxGaWxlQXR0cmlidXRlcyksMz09ZSYmKHRoaXMudW5peFBlcm1pc3Npb25zPXRoaXMuZXh0ZXJuYWxGaWxlQXR0cmlidXRlcz4+MTYmNjU1MzUpLHRoaXMuZGlyfHxcIi9cIiE9PXRoaXMuZmlsZU5hbWVTdHIuc2xpY2UoLTEpfHwodGhpcy5kaXI9ITApfSxwYXJzZVpJUDY0RXh0cmFGaWVsZDpmdW5jdGlvbihlKXtpZih0aGlzLmV4dHJhRmllbGRzWzFdKXt2YXIgdD1uKHRoaXMuZXh0cmFGaWVsZHNbMV0udmFsdWUpO3RoaXMudW5jb21wcmVzc2VkU2l6ZT09PXMuTUFYX1ZBTFVFXzMyQklUUyYmKHRoaXMudW5jb21wcmVzc2VkU2l6ZT10LnJlYWRJbnQoOCkpLHRoaXMuY29tcHJlc3NlZFNpemU9PT1zLk1BWF9WQUxVRV8zMkJJVFMmJih0aGlzLmNvbXByZXNzZWRTaXplPXQucmVhZEludCg4KSksdGhpcy5sb2NhbEhlYWRlck9mZnNldD09PXMuTUFYX1ZBTFVFXzMyQklUUyYmKHRoaXMubG9jYWxIZWFkZXJPZmZzZXQ9dC5yZWFkSW50KDgpKSx0aGlzLmRpc2tOdW1iZXJTdGFydD09PXMuTUFYX1ZBTFVFXzMyQklUUyYmKHRoaXMuZGlza051bWJlclN0YXJ0PXQucmVhZEludCg0KSl9fSxyZWFkRXh0cmFGaWVsZHM6ZnVuY3Rpb24oZSl7dmFyIHQscixuLGk9ZS5pbmRleCt0aGlzLmV4dHJhRmllbGRzTGVuZ3RoO2Zvcih0aGlzLmV4dHJhRmllbGRzfHwodGhpcy5leHRyYUZpZWxkcz17fSk7ZS5pbmRleCs0PGk7KXQ9ZS5yZWFkSW50KDIpLHI9ZS5yZWFkSW50KDIpLG49ZS5yZWFkRGF0YShyKSx0aGlzLmV4dHJhRmllbGRzW3RdPXtpZDp0LGxlbmd0aDpyLHZhbHVlOm59O2Uuc2V0SW5kZXgoaSl9LGhhbmRsZVVURjg6ZnVuY3Rpb24oKXt2YXIgZT11LnVpbnQ4YXJyYXk/XCJ1aW50OGFycmF5XCI6XCJhcnJheVwiO2lmKHRoaXMudXNlVVRGOCgpKXRoaXMuZmlsZU5hbWVTdHI9by51dGY4ZGVjb2RlKHRoaXMuZmlsZU5hbWUpLHRoaXMuZmlsZUNvbW1lbnRTdHI9by51dGY4ZGVjb2RlKHRoaXMuZmlsZUNvbW1lbnQpO2Vsc2V7dmFyIHQ9dGhpcy5maW5kRXh0cmFGaWVsZFVuaWNvZGVQYXRoKCk7aWYobnVsbCE9PXQpdGhpcy5maWxlTmFtZVN0cj10O2Vsc2V7dmFyIHI9cy50cmFuc2Zvcm1UbyhlLHRoaXMuZmlsZU5hbWUpO3RoaXMuZmlsZU5hbWVTdHI9dGhpcy5sb2FkT3B0aW9ucy5kZWNvZGVGaWxlTmFtZShyKX12YXIgbj10aGlzLmZpbmRFeHRyYUZpZWxkVW5pY29kZUNvbW1lbnQoKTtpZihudWxsIT09bil0aGlzLmZpbGVDb21tZW50U3RyPW47ZWxzZXt2YXIgaT1zLnRyYW5zZm9ybVRvKGUsdGhpcy5maWxlQ29tbWVudCk7dGhpcy5maWxlQ29tbWVudFN0cj10aGlzLmxvYWRPcHRpb25zLmRlY29kZUZpbGVOYW1lKGkpfX19LGZpbmRFeHRyYUZpZWxkVW5pY29kZVBhdGg6ZnVuY3Rpb24oKXt2YXIgZT10aGlzLmV4dHJhRmllbGRzWzI4Nzg5XTtpZihlKXt2YXIgdD1uKGUudmFsdWUpO3JldHVybiAxIT09dC5yZWFkSW50KDEpP251bGw6YSh0aGlzLmZpbGVOYW1lKSE9PXQucmVhZEludCg0KT9udWxsOm8udXRmOGRlY29kZSh0LnJlYWREYXRhKGUubGVuZ3RoLTUpKX1yZXR1cm4gbnVsbH0sZmluZEV4dHJhRmllbGRVbmljb2RlQ29tbWVudDpmdW5jdGlvbigpe3ZhciBlPXRoaXMuZXh0cmFGaWVsZHNbMjU0NjFdO2lmKGUpe3ZhciB0PW4oZS52YWx1ZSk7cmV0dXJuIDEhPT10LnJlYWRJbnQoMSk/bnVsbDphKHRoaXMuZmlsZUNvbW1lbnQpIT09dC5yZWFkSW50KDQpP251bGw6by51dGY4ZGVjb2RlKHQucmVhZERhdGEoZS5sZW5ndGgtNSkpfXJldHVybiBudWxsfX0sdC5leHBvcnRzPWx9LHtcIi4vY29tcHJlc3NlZE9iamVjdFwiOjIsXCIuL2NvbXByZXNzaW9uc1wiOjMsXCIuL2NyYzMyXCI6NCxcIi4vcmVhZGVyL3JlYWRlckZvclwiOjIyLFwiLi9zdXBwb3J0XCI6MzAsXCIuL3V0ZjhcIjozMSxcIi4vdXRpbHNcIjozMn1dLDM1OltmdW5jdGlvbihlLHQscil7XCJ1c2Ugc3RyaWN0XCI7ZnVuY3Rpb24gbihlLHQscil7dGhpcy5uYW1lPWUsdGhpcy5kaXI9ci5kaXIsdGhpcy5kYXRlPXIuZGF0ZSx0aGlzLmNvbW1lbnQ9ci5jb21tZW50LHRoaXMudW5peFBlcm1pc3Npb25zPXIudW5peFBlcm1pc3Npb25zLHRoaXMuZG9zUGVybWlzc2lvbnM9ci5kb3NQZXJtaXNzaW9ucyx0aGlzLl9kYXRhPXQsdGhpcy5fZGF0YUJpbmFyeT1yLmJpbmFyeSx0aGlzLm9wdGlvbnM9e2NvbXByZXNzaW9uOnIuY29tcHJlc3Npb24sY29tcHJlc3Npb25PcHRpb25zOnIuY29tcHJlc3Npb25PcHRpb25zfX12YXIgcz1lKFwiLi9zdHJlYW0vU3RyZWFtSGVscGVyXCIpLGk9ZShcIi4vc3RyZWFtL0RhdGFXb3JrZXJcIiksYT1lKFwiLi91dGY4XCIpLG89ZShcIi4vY29tcHJlc3NlZE9iamVjdFwiKSxoPWUoXCIuL3N0cmVhbS9HZW5lcmljV29ya2VyXCIpO24ucHJvdG90eXBlPXtpbnRlcm5hbFN0cmVhbTpmdW5jdGlvbihlKXt2YXIgdD1udWxsLHI9XCJzdHJpbmdcIjt0cnl7aWYoIWUpdGhyb3cgbmV3IEVycm9yKFwiTm8gb3V0cHV0IHR5cGUgc3BlY2lmaWVkLlwiKTt2YXIgbj1cInN0cmluZ1wiPT09KHI9ZS50b0xvd2VyQ2FzZSgpKXx8XCJ0ZXh0XCI9PT1yO1wiYmluYXJ5c3RyaW5nXCIhPT1yJiZcInRleHRcIiE9PXJ8fChyPVwic3RyaW5nXCIpLHQ9dGhpcy5fZGVjb21wcmVzc1dvcmtlcigpO3ZhciBpPSF0aGlzLl9kYXRhQmluYXJ5O2kmJiFuJiYodD10LnBpcGUobmV3IGEuVXRmOEVuY29kZVdvcmtlcikpLCFpJiZuJiYodD10LnBpcGUobmV3IGEuVXRmOERlY29kZVdvcmtlcikpfWNhdGNoKGUpeyh0PW5ldyBoKFwiZXJyb3JcIikpLmVycm9yKGUpfXJldHVybiBuZXcgcyh0LHIsXCJcIil9LGFzeW5jOmZ1bmN0aW9uKGUsdCl7cmV0dXJuIHRoaXMuaW50ZXJuYWxTdHJlYW0oZSkuYWNjdW11bGF0ZSh0KX0sbm9kZVN0cmVhbTpmdW5jdGlvbihlLHQpe3JldHVybiB0aGlzLmludGVybmFsU3RyZWFtKGV8fFwibm9kZWJ1ZmZlclwiKS50b05vZGVqc1N0cmVhbSh0KX0sX2NvbXByZXNzV29ya2VyOmZ1bmN0aW9uKGUsdCl7aWYodGhpcy5fZGF0YSBpbnN0YW5jZW9mIG8mJnRoaXMuX2RhdGEuY29tcHJlc3Npb24ubWFnaWM9PT1lLm1hZ2ljKXJldHVybiB0aGlzLl9kYXRhLmdldENvbXByZXNzZWRXb3JrZXIoKTt2YXIgcj10aGlzLl9kZWNvbXByZXNzV29ya2VyKCk7cmV0dXJuIHRoaXMuX2RhdGFCaW5hcnl8fChyPXIucGlwZShuZXcgYS5VdGY4RW5jb2RlV29ya2VyKSksby5jcmVhdGVXb3JrZXJGcm9tKHIsZSx0KX0sX2RlY29tcHJlc3NXb3JrZXI6ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5fZGF0YSBpbnN0YW5jZW9mIG8/dGhpcy5fZGF0YS5nZXRDb250ZW50V29ya2VyKCk6dGhpcy5fZGF0YSBpbnN0YW5jZW9mIGg/dGhpcy5fZGF0YTpuZXcgaSh0aGlzLl9kYXRhKX19O2Zvcih2YXIgdT1bXCJhc1RleHRcIixcImFzQmluYXJ5XCIsXCJhc05vZGVCdWZmZXJcIixcImFzVWludDhBcnJheVwiLFwiYXNBcnJheUJ1ZmZlclwiXSxsPWZ1bmN0aW9uKCl7dGhyb3cgbmV3IEVycm9yKFwiVGhpcyBtZXRob2QgaGFzIGJlZW4gcmVtb3ZlZCBpbiBKU1ppcCAzLjAsIHBsZWFzZSBjaGVjayB0aGUgdXBncmFkZSBndWlkZS5cIil9LGY9MDtmPHUubGVuZ3RoO2YrKyluLnByb3RvdHlwZVt1W2ZdXT1sO3QuZXhwb3J0cz1ufSx7XCIuL2NvbXByZXNzZWRPYmplY3RcIjoyLFwiLi9zdHJlYW0vRGF0YVdvcmtlclwiOjI3LFwiLi9zdHJlYW0vR2VuZXJpY1dvcmtlclwiOjI4LFwiLi9zdHJlYW0vU3RyZWFtSGVscGVyXCI6MjksXCIuL3V0ZjhcIjozMX1dLDM2OltmdW5jdGlvbihlLGwsdCl7KGZ1bmN0aW9uKHQpe1widXNlIHN0cmljdFwiO3ZhciByLG4sZT10Lk11dGF0aW9uT2JzZXJ2ZXJ8fHQuV2ViS2l0TXV0YXRpb25PYnNlcnZlcjtpZihlKXt2YXIgaT0wLHM9bmV3IGUodSksYT10LmRvY3VtZW50LmNyZWF0ZVRleHROb2RlKFwiXCIpO3Mub2JzZXJ2ZShhLHtjaGFyYWN0ZXJEYXRhOiEwfSkscj1mdW5jdGlvbigpe2EuZGF0YT1pPSsraSUyfX1lbHNlIGlmKHQuc2V0SW1tZWRpYXRlfHx2b2lkIDA9PT10Lk1lc3NhZ2VDaGFubmVsKXI9XCJkb2N1bWVudFwiaW4gdCYmXCJvbnJlYWR5c3RhdGVjaGFuZ2VcImluIHQuZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcInNjcmlwdFwiKT9mdW5jdGlvbigpe3ZhciBlPXQuZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcInNjcmlwdFwiKTtlLm9ucmVhZHlzdGF0ZWNoYW5nZT1mdW5jdGlvbigpe3UoKSxlLm9ucmVhZHlzdGF0ZWNoYW5nZT1udWxsLGUucGFyZW50Tm9kZS5yZW1vdmVDaGlsZChlKSxlPW51bGx9LHQuZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LmFwcGVuZENoaWxkKGUpfTpmdW5jdGlvbigpe3NldFRpbWVvdXQodSwwKX07ZWxzZXt2YXIgbz1uZXcgdC5NZXNzYWdlQ2hhbm5lbDtvLnBvcnQxLm9ubWVzc2FnZT11LHI9ZnVuY3Rpb24oKXtvLnBvcnQyLnBvc3RNZXNzYWdlKDApfX12YXIgaD1bXTtmdW5jdGlvbiB1KCl7dmFyIGUsdDtuPSEwO2Zvcih2YXIgcj1oLmxlbmd0aDtyOyl7Zm9yKHQ9aCxoPVtdLGU9LTE7KytlPHI7KXRbZV0oKTtyPWgubGVuZ3RofW49ITF9bC5leHBvcnRzPWZ1bmN0aW9uKGUpezEhPT1oLnB1c2goZSl8fG58fHIoKX19KS5jYWxsKHRoaXMsXCJ1bmRlZmluZWRcIiE9dHlwZW9mIGdsb2JhbD9nbG9iYWw6XCJ1bmRlZmluZWRcIiE9dHlwZW9mIHNlbGY/c2VsZjpcInVuZGVmaW5lZFwiIT10eXBlb2Ygd2luZG93P3dpbmRvdzp7fSl9LHt9XSwzNzpbZnVuY3Rpb24oZSx0LHIpe1widXNlIHN0cmljdFwiO3ZhciBpPWUoXCJpbW1lZGlhdGVcIik7ZnVuY3Rpb24gdSgpe312YXIgbD17fSxzPVtcIlJFSkVDVEVEXCJdLGE9W1wiRlVMRklMTEVEXCJdLG49W1wiUEVORElOR1wiXTtmdW5jdGlvbiBvKGUpe2lmKFwiZnVuY3Rpb25cIiE9dHlwZW9mIGUpdGhyb3cgbmV3IFR5cGVFcnJvcihcInJlc29sdmVyIG11c3QgYmUgYSBmdW5jdGlvblwiKTt0aGlzLnN0YXRlPW4sdGhpcy5xdWV1ZT1bXSx0aGlzLm91dGNvbWU9dm9pZCAwLGUhPT11JiZkKHRoaXMsZSl9ZnVuY3Rpb24gaChlLHQscil7dGhpcy5wcm9taXNlPWUsXCJmdW5jdGlvblwiPT10eXBlb2YgdCYmKHRoaXMub25GdWxmaWxsZWQ9dCx0aGlzLmNhbGxGdWxmaWxsZWQ9dGhpcy5vdGhlckNhbGxGdWxmaWxsZWQpLFwiZnVuY3Rpb25cIj09dHlwZW9mIHImJih0aGlzLm9uUmVqZWN0ZWQ9cix0aGlzLmNhbGxSZWplY3RlZD10aGlzLm90aGVyQ2FsbFJlamVjdGVkKX1mdW5jdGlvbiBmKHQscixuKXtpKGZ1bmN0aW9uKCl7dmFyIGU7dHJ5e2U9cihuKX1jYXRjaChlKXtyZXR1cm4gbC5yZWplY3QodCxlKX1lPT09dD9sLnJlamVjdCh0LG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgcmVzb2x2ZSBwcm9taXNlIHdpdGggaXRzZWxmXCIpKTpsLnJlc29sdmUodCxlKX0pfWZ1bmN0aW9uIGMoZSl7dmFyIHQ9ZSYmZS50aGVuO2lmKGUmJihcIm9iamVjdFwiPT10eXBlb2YgZXx8XCJmdW5jdGlvblwiPT10eXBlb2YgZSkmJlwiZnVuY3Rpb25cIj09dHlwZW9mIHQpcmV0dXJuIGZ1bmN0aW9uKCl7dC5hcHBseShlLGFyZ3VtZW50cyl9fWZ1bmN0aW9uIGQodCxlKXt2YXIgcj0hMTtmdW5jdGlvbiBuKGUpe3J8fChyPSEwLGwucmVqZWN0KHQsZSkpfWZ1bmN0aW9uIGkoZSl7cnx8KHI9ITAsbC5yZXNvbHZlKHQsZSkpfXZhciBzPXAoZnVuY3Rpb24oKXtlKGksbil9KTtcImVycm9yXCI9PT1zLnN0YXR1cyYmbihzLnZhbHVlKX1mdW5jdGlvbiBwKGUsdCl7dmFyIHI9e307dHJ5e3IudmFsdWU9ZSh0KSxyLnN0YXR1cz1cInN1Y2Nlc3NcIn1jYXRjaChlKXtyLnN0YXR1cz1cImVycm9yXCIsci52YWx1ZT1lfXJldHVybiByfSh0LmV4cG9ydHM9bykucHJvdG90eXBlLmZpbmFsbHk9ZnVuY3Rpb24odCl7aWYoXCJmdW5jdGlvblwiIT10eXBlb2YgdClyZXR1cm4gdGhpczt2YXIgcj10aGlzLmNvbnN0cnVjdG9yO3JldHVybiB0aGlzLnRoZW4oZnVuY3Rpb24oZSl7cmV0dXJuIHIucmVzb2x2ZSh0KCkpLnRoZW4oZnVuY3Rpb24oKXtyZXR1cm4gZX0pfSxmdW5jdGlvbihlKXtyZXR1cm4gci5yZXNvbHZlKHQoKSkudGhlbihmdW5jdGlvbigpe3Rocm93IGV9KX0pfSxvLnByb3RvdHlwZS5jYXRjaD1mdW5jdGlvbihlKXtyZXR1cm4gdGhpcy50aGVuKG51bGwsZSl9LG8ucHJvdG90eXBlLnRoZW49ZnVuY3Rpb24oZSx0KXtpZihcImZ1bmN0aW9uXCIhPXR5cGVvZiBlJiZ0aGlzLnN0YXRlPT09YXx8XCJmdW5jdGlvblwiIT10eXBlb2YgdCYmdGhpcy5zdGF0ZT09PXMpcmV0dXJuIHRoaXM7dmFyIHI9bmV3IHRoaXMuY29uc3RydWN0b3IodSk7dGhpcy5zdGF0ZSE9PW4/ZihyLHRoaXMuc3RhdGU9PT1hP2U6dCx0aGlzLm91dGNvbWUpOnRoaXMucXVldWUucHVzaChuZXcgaChyLGUsdCkpO3JldHVybiByfSxoLnByb3RvdHlwZS5jYWxsRnVsZmlsbGVkPWZ1bmN0aW9uKGUpe2wucmVzb2x2ZSh0aGlzLnByb21pc2UsZSl9LGgucHJvdG90eXBlLm90aGVyQ2FsbEZ1bGZpbGxlZD1mdW5jdGlvbihlKXtmKHRoaXMucHJvbWlzZSx0aGlzLm9uRnVsZmlsbGVkLGUpfSxoLnByb3RvdHlwZS5jYWxsUmVqZWN0ZWQ9ZnVuY3Rpb24oZSl7bC5yZWplY3QodGhpcy5wcm9taXNlLGUpfSxoLnByb3RvdHlwZS5vdGhlckNhbGxSZWplY3RlZD1mdW5jdGlvbihlKXtmKHRoaXMucHJvbWlzZSx0aGlzLm9uUmVqZWN0ZWQsZSl9LGwucmVzb2x2ZT1mdW5jdGlvbihlLHQpe3ZhciByPXAoYyx0KTtpZihcImVycm9yXCI9PT1yLnN0YXR1cylyZXR1cm4gbC5yZWplY3QoZSxyLnZhbHVlKTt2YXIgbj1yLnZhbHVlO2lmKG4pZChlLG4pO2Vsc2V7ZS5zdGF0ZT1hLGUub3V0Y29tZT10O2Zvcih2YXIgaT0tMSxzPWUucXVldWUubGVuZ3RoOysraTxzOyllLnF1ZXVlW2ldLmNhbGxGdWxmaWxsZWQodCl9cmV0dXJuIGV9LGwucmVqZWN0PWZ1bmN0aW9uKGUsdCl7ZS5zdGF0ZT1zLGUub3V0Y29tZT10O2Zvcih2YXIgcj0tMSxuPWUucXVldWUubGVuZ3RoOysrcjxuOyllLnF1ZXVlW3JdLmNhbGxSZWplY3RlZCh0KTtyZXR1cm4gZX0sby5yZXNvbHZlPWZ1bmN0aW9uKGUpe2lmKGUgaW5zdGFuY2VvZiB0aGlzKXJldHVybiBlO3JldHVybiBsLnJlc29sdmUobmV3IHRoaXModSksZSl9LG8ucmVqZWN0PWZ1bmN0aW9uKGUpe3ZhciB0PW5ldyB0aGlzKHUpO3JldHVybiBsLnJlamVjdCh0LGUpfSxvLmFsbD1mdW5jdGlvbihlKXt2YXIgcj10aGlzO2lmKFwiW29iamVjdCBBcnJheV1cIiE9PU9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChlKSlyZXR1cm4gdGhpcy5yZWplY3QobmV3IFR5cGVFcnJvcihcIm11c3QgYmUgYW4gYXJyYXlcIikpO3ZhciBuPWUubGVuZ3RoLGk9ITE7aWYoIW4pcmV0dXJuIHRoaXMucmVzb2x2ZShbXSk7dmFyIHM9bmV3IEFycmF5KG4pLGE9MCx0PS0xLG89bmV3IHRoaXModSk7Zm9yKDsrK3Q8bjspaChlW3RdLHQpO3JldHVybiBvO2Z1bmN0aW9uIGgoZSx0KXtyLnJlc29sdmUoZSkudGhlbihmdW5jdGlvbihlKXtzW3RdPWUsKythIT09bnx8aXx8KGk9ITAsbC5yZXNvbHZlKG8scykpfSxmdW5jdGlvbihlKXtpfHwoaT0hMCxsLnJlamVjdChvLGUpKX0pfX0sby5yYWNlPWZ1bmN0aW9uKGUpe3ZhciB0PXRoaXM7aWYoXCJbb2JqZWN0IEFycmF5XVwiIT09T2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKGUpKXJldHVybiB0aGlzLnJlamVjdChuZXcgVHlwZUVycm9yKFwibXVzdCBiZSBhbiBhcnJheVwiKSk7dmFyIHI9ZS5sZW5ndGgsbj0hMTtpZighcilyZXR1cm4gdGhpcy5yZXNvbHZlKFtdKTt2YXIgaT0tMSxzPW5ldyB0aGlzKHUpO2Zvcig7KytpPHI7KWE9ZVtpXSx0LnJlc29sdmUoYSkudGhlbihmdW5jdGlvbihlKXtufHwobj0hMCxsLnJlc29sdmUocyxlKSl9LGZ1bmN0aW9uKGUpe258fChuPSEwLGwucmVqZWN0KHMsZSkpfSk7dmFyIGE7cmV0dXJuIHN9fSx7aW1tZWRpYXRlOjM2fV0sMzg6W2Z1bmN0aW9uKGUsdCxyKXtcInVzZSBzdHJpY3RcIjt2YXIgbj17fTsoMCxlKFwiLi9saWIvdXRpbHMvY29tbW9uXCIpLmFzc2lnbikobixlKFwiLi9saWIvZGVmbGF0ZVwiKSxlKFwiLi9saWIvaW5mbGF0ZVwiKSxlKFwiLi9saWIvemxpYi9jb25zdGFudHNcIikpLHQuZXhwb3J0cz1ufSx7XCIuL2xpYi9kZWZsYXRlXCI6MzksXCIuL2xpYi9pbmZsYXRlXCI6NDAsXCIuL2xpYi91dGlscy9jb21tb25cIjo0MSxcIi4vbGliL3psaWIvY29uc3RhbnRzXCI6NDR9XSwzOTpbZnVuY3Rpb24oZSx0LHIpe1widXNlIHN0cmljdFwiO3ZhciBhPWUoXCIuL3psaWIvZGVmbGF0ZVwiKSxvPWUoXCIuL3V0aWxzL2NvbW1vblwiKSxoPWUoXCIuL3V0aWxzL3N0cmluZ3NcIiksaT1lKFwiLi96bGliL21lc3NhZ2VzXCIpLHM9ZShcIi4vemxpYi96c3RyZWFtXCIpLHU9T2JqZWN0LnByb3RvdHlwZS50b1N0cmluZyxsPTAsZj0tMSxjPTAsZD04O2Z1bmN0aW9uIHAoZSl7aWYoISh0aGlzIGluc3RhbmNlb2YgcCkpcmV0dXJuIG5ldyBwKGUpO3RoaXMub3B0aW9ucz1vLmFzc2lnbih7bGV2ZWw6ZixtZXRob2Q6ZCxjaHVua1NpemU6MTYzODQsd2luZG93Qml0czoxNSxtZW1MZXZlbDo4LHN0cmF0ZWd5OmMsdG86XCJcIn0sZXx8e30pO3ZhciB0PXRoaXMub3B0aW9uczt0LnJhdyYmMDx0LndpbmRvd0JpdHM/dC53aW5kb3dCaXRzPS10LndpbmRvd0JpdHM6dC5nemlwJiYwPHQud2luZG93Qml0cyYmdC53aW5kb3dCaXRzPDE2JiYodC53aW5kb3dCaXRzKz0xNiksdGhpcy5lcnI9MCx0aGlzLm1zZz1cIlwiLHRoaXMuZW5kZWQ9ITEsdGhpcy5jaHVua3M9W10sdGhpcy5zdHJtPW5ldyBzLHRoaXMuc3RybS5hdmFpbF9vdXQ9MDt2YXIgcj1hLmRlZmxhdGVJbml0Mih0aGlzLnN0cm0sdC5sZXZlbCx0Lm1ldGhvZCx0LndpbmRvd0JpdHMsdC5tZW1MZXZlbCx0LnN0cmF0ZWd5KTtpZihyIT09bCl0aHJvdyBuZXcgRXJyb3IoaVtyXSk7aWYodC5oZWFkZXImJmEuZGVmbGF0ZVNldEhlYWRlcih0aGlzLnN0cm0sdC5oZWFkZXIpLHQuZGljdGlvbmFyeSl7dmFyIG47aWYobj1cInN0cmluZ1wiPT10eXBlb2YgdC5kaWN0aW9uYXJ5P2guc3RyaW5nMmJ1Zih0LmRpY3Rpb25hcnkpOlwiW29iamVjdCBBcnJheUJ1ZmZlcl1cIj09PXUuY2FsbCh0LmRpY3Rpb25hcnkpP25ldyBVaW50OEFycmF5KHQuZGljdGlvbmFyeSk6dC5kaWN0aW9uYXJ5LChyPWEuZGVmbGF0ZVNldERpY3Rpb25hcnkodGhpcy5zdHJtLG4pKSE9PWwpdGhyb3cgbmV3IEVycm9yKGlbcl0pO3RoaXMuX2RpY3Rfc2V0PSEwfX1mdW5jdGlvbiBuKGUsdCl7dmFyIHI9bmV3IHAodCk7aWYoci5wdXNoKGUsITApLHIuZXJyKXRocm93IHIubXNnfHxpW3IuZXJyXTtyZXR1cm4gci5yZXN1bHR9cC5wcm90b3R5cGUucHVzaD1mdW5jdGlvbihlLHQpe3ZhciByLG4saT10aGlzLnN0cm0scz10aGlzLm9wdGlvbnMuY2h1bmtTaXplO2lmKHRoaXMuZW5kZWQpcmV0dXJuITE7bj10PT09fn50P3Q6ITA9PT10PzQ6MCxcInN0cmluZ1wiPT10eXBlb2YgZT9pLmlucHV0PWguc3RyaW5nMmJ1ZihlKTpcIltvYmplY3QgQXJyYXlCdWZmZXJdXCI9PT11LmNhbGwoZSk/aS5pbnB1dD1uZXcgVWludDhBcnJheShlKTppLmlucHV0PWUsaS5uZXh0X2luPTAsaS5hdmFpbF9pbj1pLmlucHV0Lmxlbmd0aDtkb3tpZigwPT09aS5hdmFpbF9vdXQmJihpLm91dHB1dD1uZXcgby5CdWY4KHMpLGkubmV4dF9vdXQ9MCxpLmF2YWlsX291dD1zKSwxIT09KHI9YS5kZWZsYXRlKGksbikpJiZyIT09bClyZXR1cm4gdGhpcy5vbkVuZChyKSwhKHRoaXMuZW5kZWQ9ITApOzAhPT1pLmF2YWlsX291dCYmKDAhPT1pLmF2YWlsX2lufHw0IT09biYmMiE9PW4pfHwoXCJzdHJpbmdcIj09PXRoaXMub3B0aW9ucy50bz90aGlzLm9uRGF0YShoLmJ1ZjJiaW5zdHJpbmcoby5zaHJpbmtCdWYoaS5vdXRwdXQsaS5uZXh0X291dCkpKTp0aGlzLm9uRGF0YShvLnNocmlua0J1ZihpLm91dHB1dCxpLm5leHRfb3V0KSkpfXdoaWxlKCgwPGkuYXZhaWxfaW58fDA9PT1pLmF2YWlsX291dCkmJjEhPT1yKTtyZXR1cm4gND09PW4/KHI9YS5kZWZsYXRlRW5kKHRoaXMuc3RybSksdGhpcy5vbkVuZChyKSx0aGlzLmVuZGVkPSEwLHI9PT1sKToyIT09bnx8KHRoaXMub25FbmQobCksIShpLmF2YWlsX291dD0wKSl9LHAucHJvdG90eXBlLm9uRGF0YT1mdW5jdGlvbihlKXt0aGlzLmNodW5rcy5wdXNoKGUpfSxwLnByb3RvdHlwZS5vbkVuZD1mdW5jdGlvbihlKXtlPT09bCYmKFwic3RyaW5nXCI9PT10aGlzLm9wdGlvbnMudG8/dGhpcy5yZXN1bHQ9dGhpcy5jaHVua3Muam9pbihcIlwiKTp0aGlzLnJlc3VsdD1vLmZsYXR0ZW5DaHVua3ModGhpcy5jaHVua3MpKSx0aGlzLmNodW5rcz1bXSx0aGlzLmVycj1lLHRoaXMubXNnPXRoaXMuc3RybS5tc2d9LHIuRGVmbGF0ZT1wLHIuZGVmbGF0ZT1uLHIuZGVmbGF0ZVJhdz1mdW5jdGlvbihlLHQpe3JldHVybih0PXR8fHt9KS5yYXc9ITAsbihlLHQpfSxyLmd6aXA9ZnVuY3Rpb24oZSx0KXtyZXR1cm4odD10fHx7fSkuZ3ppcD0hMCxuKGUsdCl9fSx7XCIuL3V0aWxzL2NvbW1vblwiOjQxLFwiLi91dGlscy9zdHJpbmdzXCI6NDIsXCIuL3psaWIvZGVmbGF0ZVwiOjQ2LFwiLi96bGliL21lc3NhZ2VzXCI6NTEsXCIuL3psaWIvenN0cmVhbVwiOjUzfV0sNDA6W2Z1bmN0aW9uKGUsdCxyKXtcInVzZSBzdHJpY3RcIjt2YXIgYz1lKFwiLi96bGliL2luZmxhdGVcIiksZD1lKFwiLi91dGlscy9jb21tb25cIikscD1lKFwiLi91dGlscy9zdHJpbmdzXCIpLG09ZShcIi4vemxpYi9jb25zdGFudHNcIiksbj1lKFwiLi96bGliL21lc3NhZ2VzXCIpLGk9ZShcIi4vemxpYi96c3RyZWFtXCIpLHM9ZShcIi4vemxpYi9nemhlYWRlclwiKSxfPU9iamVjdC5wcm90b3R5cGUudG9TdHJpbmc7ZnVuY3Rpb24gYShlKXtpZighKHRoaXMgaW5zdGFuY2VvZiBhKSlyZXR1cm4gbmV3IGEoZSk7dGhpcy5vcHRpb25zPWQuYXNzaWduKHtjaHVua1NpemU6MTYzODQsd2luZG93Qml0czowLHRvOlwiXCJ9LGV8fHt9KTt2YXIgdD10aGlzLm9wdGlvbnM7dC5yYXcmJjA8PXQud2luZG93Qml0cyYmdC53aW5kb3dCaXRzPDE2JiYodC53aW5kb3dCaXRzPS10LndpbmRvd0JpdHMsMD09PXQud2luZG93Qml0cyYmKHQud2luZG93Qml0cz0tMTUpKSwhKDA8PXQud2luZG93Qml0cyYmdC53aW5kb3dCaXRzPDE2KXx8ZSYmZS53aW5kb3dCaXRzfHwodC53aW5kb3dCaXRzKz0zMiksMTU8dC53aW5kb3dCaXRzJiZ0LndpbmRvd0JpdHM8NDgmJjA9PSgxNSZ0LndpbmRvd0JpdHMpJiYodC53aW5kb3dCaXRzfD0xNSksdGhpcy5lcnI9MCx0aGlzLm1zZz1cIlwiLHRoaXMuZW5kZWQ9ITEsdGhpcy5jaHVua3M9W10sdGhpcy5zdHJtPW5ldyBpLHRoaXMuc3RybS5hdmFpbF9vdXQ9MDt2YXIgcj1jLmluZmxhdGVJbml0Mih0aGlzLnN0cm0sdC53aW5kb3dCaXRzKTtpZihyIT09bS5aX09LKXRocm93IG5ldyBFcnJvcihuW3JdKTt0aGlzLmhlYWRlcj1uZXcgcyxjLmluZmxhdGVHZXRIZWFkZXIodGhpcy5zdHJtLHRoaXMuaGVhZGVyKX1mdW5jdGlvbiBvKGUsdCl7dmFyIHI9bmV3IGEodCk7aWYoci5wdXNoKGUsITApLHIuZXJyKXRocm93IHIubXNnfHxuW3IuZXJyXTtyZXR1cm4gci5yZXN1bHR9YS5wcm90b3R5cGUucHVzaD1mdW5jdGlvbihlLHQpe3ZhciByLG4saSxzLGEsbyxoPXRoaXMuc3RybSx1PXRoaXMub3B0aW9ucy5jaHVua1NpemUsbD10aGlzLm9wdGlvbnMuZGljdGlvbmFyeSxmPSExO2lmKHRoaXMuZW5kZWQpcmV0dXJuITE7bj10PT09fn50P3Q6ITA9PT10P20uWl9GSU5JU0g6bS5aX05PX0ZMVVNILFwic3RyaW5nXCI9PXR5cGVvZiBlP2guaW5wdXQ9cC5iaW5zdHJpbmcyYnVmKGUpOlwiW29iamVjdCBBcnJheUJ1ZmZlcl1cIj09PV8uY2FsbChlKT9oLmlucHV0PW5ldyBVaW50OEFycmF5KGUpOmguaW5wdXQ9ZSxoLm5leHRfaW49MCxoLmF2YWlsX2luPWguaW5wdXQubGVuZ3RoO2Rve2lmKDA9PT1oLmF2YWlsX291dCYmKGgub3V0cHV0PW5ldyBkLkJ1ZjgodSksaC5uZXh0X291dD0wLGguYXZhaWxfb3V0PXUpLChyPWMuaW5mbGF0ZShoLG0uWl9OT19GTFVTSCkpPT09bS5aX05FRURfRElDVCYmbCYmKG89XCJzdHJpbmdcIj09dHlwZW9mIGw/cC5zdHJpbmcyYnVmKGwpOlwiW29iamVjdCBBcnJheUJ1ZmZlcl1cIj09PV8uY2FsbChsKT9uZXcgVWludDhBcnJheShsKTpsLHI9Yy5pbmZsYXRlU2V0RGljdGlvbmFyeSh0aGlzLnN0cm0sbykpLHI9PT1tLlpfQlVGX0VSUk9SJiYhMD09PWYmJihyPW0uWl9PSyxmPSExKSxyIT09bS5aX1NUUkVBTV9FTkQmJnIhPT1tLlpfT0spcmV0dXJuIHRoaXMub25FbmQociksISh0aGlzLmVuZGVkPSEwKTtoLm5leHRfb3V0JiYoMCE9PWguYXZhaWxfb3V0JiZyIT09bS5aX1NUUkVBTV9FTkQmJigwIT09aC5hdmFpbF9pbnx8biE9PW0uWl9GSU5JU0gmJm4hPT1tLlpfU1lOQ19GTFVTSCl8fChcInN0cmluZ1wiPT09dGhpcy5vcHRpb25zLnRvPyhpPXAudXRmOGJvcmRlcihoLm91dHB1dCxoLm5leHRfb3V0KSxzPWgubmV4dF9vdXQtaSxhPXAuYnVmMnN0cmluZyhoLm91dHB1dCxpKSxoLm5leHRfb3V0PXMsaC5hdmFpbF9vdXQ9dS1zLHMmJmQuYXJyYXlTZXQoaC5vdXRwdXQsaC5vdXRwdXQsaSxzLDApLHRoaXMub25EYXRhKGEpKTp0aGlzLm9uRGF0YShkLnNocmlua0J1ZihoLm91dHB1dCxoLm5leHRfb3V0KSkpKSwwPT09aC5hdmFpbF9pbiYmMD09PWguYXZhaWxfb3V0JiYoZj0hMCl9d2hpbGUoKDA8aC5hdmFpbF9pbnx8MD09PWguYXZhaWxfb3V0KSYmciE9PW0uWl9TVFJFQU1fRU5EKTtyZXR1cm4gcj09PW0uWl9TVFJFQU1fRU5EJiYobj1tLlpfRklOSVNIKSxuPT09bS5aX0ZJTklTSD8ocj1jLmluZmxhdGVFbmQodGhpcy5zdHJtKSx0aGlzLm9uRW5kKHIpLHRoaXMuZW5kZWQ9ITAscj09PW0uWl9PSyk6biE9PW0uWl9TWU5DX0ZMVVNIfHwodGhpcy5vbkVuZChtLlpfT0spLCEoaC5hdmFpbF9vdXQ9MCkpfSxhLnByb3RvdHlwZS5vbkRhdGE9ZnVuY3Rpb24oZSl7dGhpcy5jaHVua3MucHVzaChlKX0sYS5wcm90b3R5cGUub25FbmQ9ZnVuY3Rpb24oZSl7ZT09PW0uWl9PSyYmKFwic3RyaW5nXCI9PT10aGlzLm9wdGlvbnMudG8/dGhpcy5yZXN1bHQ9dGhpcy5jaHVua3Muam9pbihcIlwiKTp0aGlzLnJlc3VsdD1kLmZsYXR0ZW5DaHVua3ModGhpcy5jaHVua3MpKSx0aGlzLmNodW5rcz1bXSx0aGlzLmVycj1lLHRoaXMubXNnPXRoaXMuc3RybS5tc2d9LHIuSW5mbGF0ZT1hLHIuaW5mbGF0ZT1vLHIuaW5mbGF0ZVJhdz1mdW5jdGlvbihlLHQpe3JldHVybih0PXR8fHt9KS5yYXc9ITAsbyhlLHQpfSxyLnVuZ3ppcD1vfSx7XCIuL3V0aWxzL2NvbW1vblwiOjQxLFwiLi91dGlscy9zdHJpbmdzXCI6NDIsXCIuL3psaWIvY29uc3RhbnRzXCI6NDQsXCIuL3psaWIvZ3poZWFkZXJcIjo0NyxcIi4vemxpYi9pbmZsYXRlXCI6NDksXCIuL3psaWIvbWVzc2FnZXNcIjo1MSxcIi4vemxpYi96c3RyZWFtXCI6NTN9XSw0MTpbZnVuY3Rpb24oZSx0LHIpe1widXNlIHN0cmljdFwiO3ZhciBuPVwidW5kZWZpbmVkXCIhPXR5cGVvZiBVaW50OEFycmF5JiZcInVuZGVmaW5lZFwiIT10eXBlb2YgVWludDE2QXJyYXkmJlwidW5kZWZpbmVkXCIhPXR5cGVvZiBJbnQzMkFycmF5O3IuYXNzaWduPWZ1bmN0aW9uKGUpe2Zvcih2YXIgdD1BcnJheS5wcm90b3R5cGUuc2xpY2UuY2FsbChhcmd1bWVudHMsMSk7dC5sZW5ndGg7KXt2YXIgcj10LnNoaWZ0KCk7aWYocil7aWYoXCJvYmplY3RcIiE9dHlwZW9mIHIpdGhyb3cgbmV3IFR5cGVFcnJvcihyK1wibXVzdCBiZSBub24tb2JqZWN0XCIpO2Zvcih2YXIgbiBpbiByKXIuaGFzT3duUHJvcGVydHkobikmJihlW25dPXJbbl0pfX1yZXR1cm4gZX0sci5zaHJpbmtCdWY9ZnVuY3Rpb24oZSx0KXtyZXR1cm4gZS5sZW5ndGg9PT10P2U6ZS5zdWJhcnJheT9lLnN1YmFycmF5KDAsdCk6KGUubGVuZ3RoPXQsZSl9O3ZhciBpPXthcnJheVNldDpmdW5jdGlvbihlLHQscixuLGkpe2lmKHQuc3ViYXJyYXkmJmUuc3ViYXJyYXkpZS5zZXQodC5zdWJhcnJheShyLHIrbiksaSk7ZWxzZSBmb3IodmFyIHM9MDtzPG47cysrKWVbaStzXT10W3Irc119LGZsYXR0ZW5DaHVua3M6ZnVuY3Rpb24oZSl7dmFyIHQscixuLGkscyxhO2Zvcih0PW49MCxyPWUubGVuZ3RoO3Q8cjt0Kyspbis9ZVt0XS5sZW5ndGg7Zm9yKGE9bmV3IFVpbnQ4QXJyYXkobiksdD1pPTAscj1lLmxlbmd0aDt0PHI7dCsrKXM9ZVt0XSxhLnNldChzLGkpLGkrPXMubGVuZ3RoO3JldHVybiBhfX0scz17YXJyYXlTZXQ6ZnVuY3Rpb24oZSx0LHIsbixpKXtmb3IodmFyIHM9MDtzPG47cysrKWVbaStzXT10W3Irc119LGZsYXR0ZW5DaHVua3M6ZnVuY3Rpb24oZSl7cmV0dXJuW10uY29uY2F0LmFwcGx5KFtdLGUpfX07ci5zZXRUeXBlZD1mdW5jdGlvbihlKXtlPyhyLkJ1Zjg9VWludDhBcnJheSxyLkJ1ZjE2PVVpbnQxNkFycmF5LHIuQnVmMzI9SW50MzJBcnJheSxyLmFzc2lnbihyLGkpKTooci5CdWY4PUFycmF5LHIuQnVmMTY9QXJyYXksci5CdWYzMj1BcnJheSxyLmFzc2lnbihyLHMpKX0sci5zZXRUeXBlZChuKX0se31dLDQyOltmdW5jdGlvbihlLHQscil7XCJ1c2Ugc3RyaWN0XCI7dmFyIGg9ZShcIi4vY29tbW9uXCIpLGk9ITAscz0hMDt0cnl7U3RyaW5nLmZyb21DaGFyQ29kZS5hcHBseShudWxsLFswXSl9Y2F0Y2goZSl7aT0hMX10cnl7U3RyaW5nLmZyb21DaGFyQ29kZS5hcHBseShudWxsLG5ldyBVaW50OEFycmF5KDEpKX1jYXRjaChlKXtzPSExfWZvcih2YXIgdT1uZXcgaC5CdWY4KDI1Niksbj0wO248MjU2O24rKyl1W25dPTI1Mjw9bj82OjI0ODw9bj81OjI0MDw9bj80OjIyNDw9bj8zOjE5Mjw9bj8yOjE7ZnVuY3Rpb24gbChlLHQpe2lmKHQ8NjU1MzcmJihlLnN1YmFycmF5JiZzfHwhZS5zdWJhcnJheSYmaSkpcmV0dXJuIFN0cmluZy5mcm9tQ2hhckNvZGUuYXBwbHkobnVsbCxoLnNocmlua0J1ZihlLHQpKTtmb3IodmFyIHI9XCJcIixuPTA7bjx0O24rKylyKz1TdHJpbmcuZnJvbUNoYXJDb2RlKGVbbl0pO3JldHVybiByfXVbMjU0XT11WzI1NF09MSxyLnN0cmluZzJidWY9ZnVuY3Rpb24oZSl7dmFyIHQscixuLGkscyxhPWUubGVuZ3RoLG89MDtmb3IoaT0wO2k8YTtpKyspNTUyOTY9PSg2NDUxMiYocj1lLmNoYXJDb2RlQXQoaSkpKSYmaSsxPGEmJjU2MzIwPT0oNjQ1MTImKG49ZS5jaGFyQ29kZUF0KGkrMSkpKSYmKHI9NjU1MzYrKHItNTUyOTY8PDEwKSsobi01NjMyMCksaSsrKSxvKz1yPDEyOD8xOnI8MjA0OD8yOnI8NjU1MzY/Mzo0O2Zvcih0PW5ldyBoLkJ1ZjgobyksaT1zPTA7czxvO2krKyk1NTI5Nj09KDY0NTEyJihyPWUuY2hhckNvZGVBdChpKSkpJiZpKzE8YSYmNTYzMjA9PSg2NDUxMiYobj1lLmNoYXJDb2RlQXQoaSsxKSkpJiYocj02NTUzNisoci01NTI5Njw8MTApKyhuLTU2MzIwKSxpKyspLHI8MTI4P3RbcysrXT1yOihyPDIwNDg/dFtzKytdPTE5MnxyPj4+Njoocjw2NTUzNj90W3MrK109MjI0fHI+Pj4xMjoodFtzKytdPTI0MHxyPj4+MTgsdFtzKytdPTEyOHxyPj4+MTImNjMpLHRbcysrXT0xMjh8cj4+PjYmNjMpLHRbcysrXT0xMjh8NjMmcik7cmV0dXJuIHR9LHIuYnVmMmJpbnN0cmluZz1mdW5jdGlvbihlKXtyZXR1cm4gbChlLGUubGVuZ3RoKX0sci5iaW5zdHJpbmcyYnVmPWZ1bmN0aW9uKGUpe2Zvcih2YXIgdD1uZXcgaC5CdWY4KGUubGVuZ3RoKSxyPTAsbj10Lmxlbmd0aDtyPG47cisrKXRbcl09ZS5jaGFyQ29kZUF0KHIpO3JldHVybiB0fSxyLmJ1ZjJzdHJpbmc9ZnVuY3Rpb24oZSx0KXt2YXIgcixuLGkscyxhPXR8fGUubGVuZ3RoLG89bmV3IEFycmF5KDIqYSk7Zm9yKHI9bj0wO3I8YTspaWYoKGk9ZVtyKytdKTwxMjgpb1tuKytdPWk7ZWxzZSBpZig0PChzPXVbaV0pKW9bbisrXT02NTUzMyxyKz1zLTE7ZWxzZXtmb3IoaSY9Mj09PXM/MzE6Mz09PXM/MTU6NzsxPHMmJnI8YTspaT1pPDw2fDYzJmVbcisrXSxzLS07MTxzP29bbisrXT02NTUzMzppPDY1NTM2P29bbisrXT1pOihpLT02NTUzNixvW24rK109NTUyOTZ8aT4+MTAmMTAyMyxvW24rK109NTYzMjB8MTAyMyZpKX1yZXR1cm4gbChvLG4pfSxyLnV0Zjhib3JkZXI9ZnVuY3Rpb24oZSx0KXt2YXIgcjtmb3IoKHQ9dHx8ZS5sZW5ndGgpPmUubGVuZ3RoJiYodD1lLmxlbmd0aCkscj10LTE7MDw9ciYmMTI4PT0oMTkyJmVbcl0pOylyLS07cmV0dXJuIHI8MD90OjA9PT1yP3Q6cit1W2Vbcl1dPnQ/cjp0fX0se1wiLi9jb21tb25cIjo0MX1dLDQzOltmdW5jdGlvbihlLHQscil7XCJ1c2Ugc3RyaWN0XCI7dC5leHBvcnRzPWZ1bmN0aW9uKGUsdCxyLG4pe2Zvcih2YXIgaT02NTUzNSZlfDAscz1lPj4+MTYmNjU1MzV8MCxhPTA7MCE9PXI7KXtmb3Ioci09YT0yZTM8cj8yZTM6cjtzPXMrKGk9aSt0W24rK118MCl8MCwtLWE7KTtpJT02NTUyMSxzJT02NTUyMX1yZXR1cm4gaXxzPDwxNnwwfX0se31dLDQ0OltmdW5jdGlvbihlLHQscil7XCJ1c2Ugc3RyaWN0XCI7dC5leHBvcnRzPXtaX05PX0ZMVVNIOjAsWl9QQVJUSUFMX0ZMVVNIOjEsWl9TWU5DX0ZMVVNIOjIsWl9GVUxMX0ZMVVNIOjMsWl9GSU5JU0g6NCxaX0JMT0NLOjUsWl9UUkVFUzo2LFpfT0s6MCxaX1NUUkVBTV9FTkQ6MSxaX05FRURfRElDVDoyLFpfRVJSTk86LTEsWl9TVFJFQU1fRVJST1I6LTIsWl9EQVRBX0VSUk9SOi0zLFpfQlVGX0VSUk9SOi01LFpfTk9fQ09NUFJFU1NJT046MCxaX0JFU1RfU1BFRUQ6MSxaX0JFU1RfQ09NUFJFU1NJT046OSxaX0RFRkFVTFRfQ09NUFJFU1NJT046LTEsWl9GSUxURVJFRDoxLFpfSFVGRk1BTl9PTkxZOjIsWl9STEU6MyxaX0ZJWEVEOjQsWl9ERUZBVUxUX1NUUkFURUdZOjAsWl9CSU5BUlk6MCxaX1RFWFQ6MSxaX1VOS05PV046MixaX0RFRkxBVEVEOjh9fSx7fV0sNDU6W2Z1bmN0aW9uKGUsdCxyKXtcInVzZSBzdHJpY3RcIjt2YXIgbz1mdW5jdGlvbigpe2Zvcih2YXIgZSx0PVtdLHI9MDtyPDI1NjtyKyspe2U9cjtmb3IodmFyIG49MDtuPDg7bisrKWU9MSZlPzM5ODgyOTIzODReZT4+PjE6ZT4+PjE7dFtyXT1lfXJldHVybiB0fSgpO3QuZXhwb3J0cz1mdW5jdGlvbihlLHQscixuKXt2YXIgaT1vLHM9bityO2VePS0xO2Zvcih2YXIgYT1uO2E8czthKyspZT1lPj4+OF5pWzI1NSYoZV50W2FdKV07cmV0dXJuLTFeZX19LHt9XSw0NjpbZnVuY3Rpb24oZSx0LHIpe1widXNlIHN0cmljdFwiO3ZhciBoLGM9ZShcIi4uL3V0aWxzL2NvbW1vblwiKSx1PWUoXCIuL3RyZWVzXCIpLGQ9ZShcIi4vYWRsZXIzMlwiKSxwPWUoXCIuL2NyYzMyXCIpLG49ZShcIi4vbWVzc2FnZXNcIiksbD0wLGY9NCxtPTAsXz0tMixnPS0xLGI9NCxpPTIsdj04LHk9OSxzPTI4NixhPTMwLG89MTksdz0yKnMrMSxrPTE1LHg9MyxTPTI1OCx6PVMreCsxLEM9NDIsRT0xMTMsQT0xLEk9MixPPTMsQj00O2Z1bmN0aW9uIFIoZSx0KXtyZXR1cm4gZS5tc2c9blt0XSx0fWZ1bmN0aW9uIFQoZSl7cmV0dXJuKGU8PDEpLSg0PGU/OTowKX1mdW5jdGlvbiBEKGUpe2Zvcih2YXIgdD1lLmxlbmd0aDswPD0tLXQ7KWVbdF09MH1mdW5jdGlvbiBGKGUpe3ZhciB0PWUuc3RhdGUscj10LnBlbmRpbmc7cj5lLmF2YWlsX291dCYmKHI9ZS5hdmFpbF9vdXQpLDAhPT1yJiYoYy5hcnJheVNldChlLm91dHB1dCx0LnBlbmRpbmdfYnVmLHQucGVuZGluZ19vdXQscixlLm5leHRfb3V0KSxlLm5leHRfb3V0Kz1yLHQucGVuZGluZ19vdXQrPXIsZS50b3RhbF9vdXQrPXIsZS5hdmFpbF9vdXQtPXIsdC5wZW5kaW5nLT1yLDA9PT10LnBlbmRpbmcmJih0LnBlbmRpbmdfb3V0PTApKX1mdW5jdGlvbiBOKGUsdCl7dS5fdHJfZmx1c2hfYmxvY2soZSwwPD1lLmJsb2NrX3N0YXJ0P2UuYmxvY2tfc3RhcnQ6LTEsZS5zdHJzdGFydC1lLmJsb2NrX3N0YXJ0LHQpLGUuYmxvY2tfc3RhcnQ9ZS5zdHJzdGFydCxGKGUuc3RybSl9ZnVuY3Rpb24gVShlLHQpe2UucGVuZGluZ19idWZbZS5wZW5kaW5nKytdPXR9ZnVuY3Rpb24gUChlLHQpe2UucGVuZGluZ19idWZbZS5wZW5kaW5nKytdPXQ+Pj44JjI1NSxlLnBlbmRpbmdfYnVmW2UucGVuZGluZysrXT0yNTUmdH1mdW5jdGlvbiBMKGUsdCl7dmFyIHIsbixpPWUubWF4X2NoYWluX2xlbmd0aCxzPWUuc3Ryc3RhcnQsYT1lLnByZXZfbGVuZ3RoLG89ZS5uaWNlX21hdGNoLGg9ZS5zdHJzdGFydD5lLndfc2l6ZS16P2Uuc3Ryc3RhcnQtKGUud19zaXplLXopOjAsdT1lLndpbmRvdyxsPWUud19tYXNrLGY9ZS5wcmV2LGM9ZS5zdHJzdGFydCtTLGQ9dVtzK2EtMV0scD11W3MrYV07ZS5wcmV2X2xlbmd0aD49ZS5nb29kX21hdGNoJiYoaT4+PTIpLG8+ZS5sb29rYWhlYWQmJihvPWUubG9va2FoZWFkKTtkb3tpZih1WyhyPXQpK2FdPT09cCYmdVtyK2EtMV09PT1kJiZ1W3JdPT09dVtzXSYmdVsrK3JdPT09dVtzKzFdKXtzKz0yLHIrKztkb3t9d2hpbGUodVsrK3NdPT09dVsrK3JdJiZ1Wysrc109PT11Wysrcl0mJnVbKytzXT09PXVbKytyXSYmdVsrK3NdPT09dVsrK3JdJiZ1Wysrc109PT11Wysrcl0mJnVbKytzXT09PXVbKytyXSYmdVsrK3NdPT09dVsrK3JdJiZ1Wysrc109PT11Wysrcl0mJnM8Yyk7aWYobj1TLShjLXMpLHM9Yy1TLGE8bil7aWYoZS5tYXRjaF9zdGFydD10LG88PShhPW4pKWJyZWFrO2Q9dVtzK2EtMV0scD11W3MrYV19fX13aGlsZSgodD1mW3QmbF0pPmgmJjAhPS0taSk7cmV0dXJuIGE8PWUubG9va2FoZWFkP2E6ZS5sb29rYWhlYWR9ZnVuY3Rpb24gaihlKXt2YXIgdCxyLG4saSxzLGEsbyxoLHUsbCxmPWUud19zaXplO2Rve2lmKGk9ZS53aW5kb3dfc2l6ZS1lLmxvb2thaGVhZC1lLnN0cnN0YXJ0LGUuc3Ryc3RhcnQ+PWYrKGYteikpe2ZvcihjLmFycmF5U2V0KGUud2luZG93LGUud2luZG93LGYsZiwwKSxlLm1hdGNoX3N0YXJ0LT1mLGUuc3Ryc3RhcnQtPWYsZS5ibG9ja19zdGFydC09Zix0PXI9ZS5oYXNoX3NpemU7bj1lLmhlYWRbLS10XSxlLmhlYWRbdF09Zjw9bj9uLWY6MCwtLXI7KTtmb3IodD1yPWY7bj1lLnByZXZbLS10XSxlLnByZXZbdF09Zjw9bj9uLWY6MCwtLXI7KTtpKz1mfWlmKDA9PT1lLnN0cm0uYXZhaWxfaW4pYnJlYWs7aWYoYT1lLnN0cm0sbz1lLndpbmRvdyxoPWUuc3Ryc3RhcnQrZS5sb29rYWhlYWQsdT1pLGw9dm9pZCAwLGw9YS5hdmFpbF9pbix1PGwmJihsPXUpLHI9MD09PWw/MDooYS5hdmFpbF9pbi09bCxjLmFycmF5U2V0KG8sYS5pbnB1dCxhLm5leHRfaW4sbCxoKSwxPT09YS5zdGF0ZS53cmFwP2EuYWRsZXI9ZChhLmFkbGVyLG8sbCxoKToyPT09YS5zdGF0ZS53cmFwJiYoYS5hZGxlcj1wKGEuYWRsZXIsbyxsLGgpKSxhLm5leHRfaW4rPWwsYS50b3RhbF9pbis9bCxsKSxlLmxvb2thaGVhZCs9cixlLmxvb2thaGVhZCtlLmluc2VydD49eClmb3Iocz1lLnN0cnN0YXJ0LWUuaW5zZXJ0LGUuaW5zX2g9ZS53aW5kb3dbc10sZS5pbnNfaD0oZS5pbnNfaDw8ZS5oYXNoX3NoaWZ0XmUud2luZG93W3MrMV0pJmUuaGFzaF9tYXNrO2UuaW5zZXJ0JiYoZS5pbnNfaD0oZS5pbnNfaDw8ZS5oYXNoX3NoaWZ0XmUud2luZG93W3MreC0xXSkmZS5oYXNoX21hc2ssZS5wcmV2W3MmZS53X21hc2tdPWUuaGVhZFtlLmluc19oXSxlLmhlYWRbZS5pbnNfaF09cyxzKyssZS5pbnNlcnQtLSwhKGUubG9va2FoZWFkK2UuaW5zZXJ0PHgpKTspO313aGlsZShlLmxvb2thaGVhZDx6JiYwIT09ZS5zdHJtLmF2YWlsX2luKX1mdW5jdGlvbiBaKGUsdCl7Zm9yKHZhciByLG47Oyl7aWYoZS5sb29rYWhlYWQ8eil7aWYoaihlKSxlLmxvb2thaGVhZDx6JiZ0PT09bClyZXR1cm4gQTtpZigwPT09ZS5sb29rYWhlYWQpYnJlYWt9aWYocj0wLGUubG9va2FoZWFkPj14JiYoZS5pbnNfaD0oZS5pbnNfaDw8ZS5oYXNoX3NoaWZ0XmUud2luZG93W2Uuc3Ryc3RhcnQreC0xXSkmZS5oYXNoX21hc2sscj1lLnByZXZbZS5zdHJzdGFydCZlLndfbWFza109ZS5oZWFkW2UuaW5zX2hdLGUuaGVhZFtlLmluc19oXT1lLnN0cnN0YXJ0KSwwIT09ciYmZS5zdHJzdGFydC1yPD1lLndfc2l6ZS16JiYoZS5tYXRjaF9sZW5ndGg9TChlLHIpKSxlLm1hdGNoX2xlbmd0aD49eClpZihuPXUuX3RyX3RhbGx5KGUsZS5zdHJzdGFydC1lLm1hdGNoX3N0YXJ0LGUubWF0Y2hfbGVuZ3RoLXgpLGUubG9va2FoZWFkLT1lLm1hdGNoX2xlbmd0aCxlLm1hdGNoX2xlbmd0aDw9ZS5tYXhfbGF6eV9tYXRjaCYmZS5sb29rYWhlYWQ+PXgpe2ZvcihlLm1hdGNoX2xlbmd0aC0tO2Uuc3Ryc3RhcnQrKyxlLmluc19oPShlLmluc19oPDxlLmhhc2hfc2hpZnReZS53aW5kb3dbZS5zdHJzdGFydCt4LTFdKSZlLmhhc2hfbWFzayxyPWUucHJldltlLnN0cnN0YXJ0JmUud19tYXNrXT1lLmhlYWRbZS5pbnNfaF0sZS5oZWFkW2UuaW5zX2hdPWUuc3Ryc3RhcnQsMCE9LS1lLm1hdGNoX2xlbmd0aDspO2Uuc3Ryc3RhcnQrK31lbHNlIGUuc3Ryc3RhcnQrPWUubWF0Y2hfbGVuZ3RoLGUubWF0Y2hfbGVuZ3RoPTAsZS5pbnNfaD1lLndpbmRvd1tlLnN0cnN0YXJ0XSxlLmluc19oPShlLmluc19oPDxlLmhhc2hfc2hpZnReZS53aW5kb3dbZS5zdHJzdGFydCsxXSkmZS5oYXNoX21hc2s7ZWxzZSBuPXUuX3RyX3RhbGx5KGUsMCxlLndpbmRvd1tlLnN0cnN0YXJ0XSksZS5sb29rYWhlYWQtLSxlLnN0cnN0YXJ0Kys7aWYobiYmKE4oZSwhMSksMD09PWUuc3RybS5hdmFpbF9vdXQpKXJldHVybiBBfXJldHVybiBlLmluc2VydD1lLnN0cnN0YXJ0PHgtMT9lLnN0cnN0YXJ0OngtMSx0PT09Zj8oTihlLCEwKSwwPT09ZS5zdHJtLmF2YWlsX291dD9POkIpOmUubGFzdF9saXQmJihOKGUsITEpLDA9PT1lLnN0cm0uYXZhaWxfb3V0KT9BOkl9ZnVuY3Rpb24gVyhlLHQpe2Zvcih2YXIgcixuLGk7Oyl7aWYoZS5sb29rYWhlYWQ8eil7aWYoaihlKSxlLmxvb2thaGVhZDx6JiZ0PT09bClyZXR1cm4gQTtpZigwPT09ZS5sb29rYWhlYWQpYnJlYWt9aWYocj0wLGUubG9va2FoZWFkPj14JiYoZS5pbnNfaD0oZS5pbnNfaDw8ZS5oYXNoX3NoaWZ0XmUud2luZG93W2Uuc3Ryc3RhcnQreC0xXSkmZS5oYXNoX21hc2sscj1lLnByZXZbZS5zdHJzdGFydCZlLndfbWFza109ZS5oZWFkW2UuaW5zX2hdLGUuaGVhZFtlLmluc19oXT1lLnN0cnN0YXJ0KSxlLnByZXZfbGVuZ3RoPWUubWF0Y2hfbGVuZ3RoLGUucHJldl9tYXRjaD1lLm1hdGNoX3N0YXJ0LGUubWF0Y2hfbGVuZ3RoPXgtMSwwIT09ciYmZS5wcmV2X2xlbmd0aDxlLm1heF9sYXp5X21hdGNoJiZlLnN0cnN0YXJ0LXI8PWUud19zaXplLXomJihlLm1hdGNoX2xlbmd0aD1MKGUsciksZS5tYXRjaF9sZW5ndGg8PTUmJigxPT09ZS5zdHJhdGVneXx8ZS5tYXRjaF9sZW5ndGg9PT14JiY0MDk2PGUuc3Ryc3RhcnQtZS5tYXRjaF9zdGFydCkmJihlLm1hdGNoX2xlbmd0aD14LTEpKSxlLnByZXZfbGVuZ3RoPj14JiZlLm1hdGNoX2xlbmd0aDw9ZS5wcmV2X2xlbmd0aCl7Zm9yKGk9ZS5zdHJzdGFydCtlLmxvb2thaGVhZC14LG49dS5fdHJfdGFsbHkoZSxlLnN0cnN0YXJ0LTEtZS5wcmV2X21hdGNoLGUucHJldl9sZW5ndGgteCksZS5sb29rYWhlYWQtPWUucHJldl9sZW5ndGgtMSxlLnByZXZfbGVuZ3RoLT0yOysrZS5zdHJzdGFydDw9aSYmKGUuaW5zX2g9KGUuaW5zX2g8PGUuaGFzaF9zaGlmdF5lLndpbmRvd1tlLnN0cnN0YXJ0K3gtMV0pJmUuaGFzaF9tYXNrLHI9ZS5wcmV2W2Uuc3Ryc3RhcnQmZS53X21hc2tdPWUuaGVhZFtlLmluc19oXSxlLmhlYWRbZS5pbnNfaF09ZS5zdHJzdGFydCksMCE9LS1lLnByZXZfbGVuZ3RoOyk7aWYoZS5tYXRjaF9hdmFpbGFibGU9MCxlLm1hdGNoX2xlbmd0aD14LTEsZS5zdHJzdGFydCsrLG4mJihOKGUsITEpLDA9PT1lLnN0cm0uYXZhaWxfb3V0KSlyZXR1cm4gQX1lbHNlIGlmKGUubWF0Y2hfYXZhaWxhYmxlKXtpZigobj11Ll90cl90YWxseShlLDAsZS53aW5kb3dbZS5zdHJzdGFydC0xXSkpJiZOKGUsITEpLGUuc3Ryc3RhcnQrKyxlLmxvb2thaGVhZC0tLDA9PT1lLnN0cm0uYXZhaWxfb3V0KXJldHVybiBBfWVsc2UgZS5tYXRjaF9hdmFpbGFibGU9MSxlLnN0cnN0YXJ0KyssZS5sb29rYWhlYWQtLX1yZXR1cm4gZS5tYXRjaF9hdmFpbGFibGUmJihuPXUuX3RyX3RhbGx5KGUsMCxlLndpbmRvd1tlLnN0cnN0YXJ0LTFdKSxlLm1hdGNoX2F2YWlsYWJsZT0wKSxlLmluc2VydD1lLnN0cnN0YXJ0PHgtMT9lLnN0cnN0YXJ0OngtMSx0PT09Zj8oTihlLCEwKSwwPT09ZS5zdHJtLmF2YWlsX291dD9POkIpOmUubGFzdF9saXQmJihOKGUsITEpLDA9PT1lLnN0cm0uYXZhaWxfb3V0KT9BOkl9ZnVuY3Rpb24gTShlLHQscixuLGkpe3RoaXMuZ29vZF9sZW5ndGg9ZSx0aGlzLm1heF9sYXp5PXQsdGhpcy5uaWNlX2xlbmd0aD1yLHRoaXMubWF4X2NoYWluPW4sdGhpcy5mdW5jPWl9ZnVuY3Rpb24gSCgpe3RoaXMuc3RybT1udWxsLHRoaXMuc3RhdHVzPTAsdGhpcy5wZW5kaW5nX2J1Zj1udWxsLHRoaXMucGVuZGluZ19idWZfc2l6ZT0wLHRoaXMucGVuZGluZ19vdXQ9MCx0aGlzLnBlbmRpbmc9MCx0aGlzLndyYXA9MCx0aGlzLmd6aGVhZD1udWxsLHRoaXMuZ3ppbmRleD0wLHRoaXMubWV0aG9kPXYsdGhpcy5sYXN0X2ZsdXNoPS0xLHRoaXMud19zaXplPTAsdGhpcy53X2JpdHM9MCx0aGlzLndfbWFzaz0wLHRoaXMud2luZG93PW51bGwsdGhpcy53aW5kb3dfc2l6ZT0wLHRoaXMucHJldj1udWxsLHRoaXMuaGVhZD1udWxsLHRoaXMuaW5zX2g9MCx0aGlzLmhhc2hfc2l6ZT0wLHRoaXMuaGFzaF9iaXRzPTAsdGhpcy5oYXNoX21hc2s9MCx0aGlzLmhhc2hfc2hpZnQ9MCx0aGlzLmJsb2NrX3N0YXJ0PTAsdGhpcy5tYXRjaF9sZW5ndGg9MCx0aGlzLnByZXZfbWF0Y2g9MCx0aGlzLm1hdGNoX2F2YWlsYWJsZT0wLHRoaXMuc3Ryc3RhcnQ9MCx0aGlzLm1hdGNoX3N0YXJ0PTAsdGhpcy5sb29rYWhlYWQ9MCx0aGlzLnByZXZfbGVuZ3RoPTAsdGhpcy5tYXhfY2hhaW5fbGVuZ3RoPTAsdGhpcy5tYXhfbGF6eV9tYXRjaD0wLHRoaXMubGV2ZWw9MCx0aGlzLnN0cmF0ZWd5PTAsdGhpcy5nb29kX21hdGNoPTAsdGhpcy5uaWNlX21hdGNoPTAsdGhpcy5keW5fbHRyZWU9bmV3IGMuQnVmMTYoMip3KSx0aGlzLmR5bl9kdHJlZT1uZXcgYy5CdWYxNigyKigyKmErMSkpLHRoaXMuYmxfdHJlZT1uZXcgYy5CdWYxNigyKigyKm8rMSkpLEQodGhpcy5keW5fbHRyZWUpLEQodGhpcy5keW5fZHRyZWUpLEQodGhpcy5ibF90cmVlKSx0aGlzLmxfZGVzYz1udWxsLHRoaXMuZF9kZXNjPW51bGwsdGhpcy5ibF9kZXNjPW51bGwsdGhpcy5ibF9jb3VudD1uZXcgYy5CdWYxNihrKzEpLHRoaXMuaGVhcD1uZXcgYy5CdWYxNigyKnMrMSksRCh0aGlzLmhlYXApLHRoaXMuaGVhcF9sZW49MCx0aGlzLmhlYXBfbWF4PTAsdGhpcy5kZXB0aD1uZXcgYy5CdWYxNigyKnMrMSksRCh0aGlzLmRlcHRoKSx0aGlzLmxfYnVmPTAsdGhpcy5saXRfYnVmc2l6ZT0wLHRoaXMubGFzdF9saXQ9MCx0aGlzLmRfYnVmPTAsdGhpcy5vcHRfbGVuPTAsdGhpcy5zdGF0aWNfbGVuPTAsdGhpcy5tYXRjaGVzPTAsdGhpcy5pbnNlcnQ9MCx0aGlzLmJpX2J1Zj0wLHRoaXMuYmlfdmFsaWQ9MH1mdW5jdGlvbiBHKGUpe3ZhciB0O3JldHVybiBlJiZlLnN0YXRlPyhlLnRvdGFsX2luPWUudG90YWxfb3V0PTAsZS5kYXRhX3R5cGU9aSwodD1lLnN0YXRlKS5wZW5kaW5nPTAsdC5wZW5kaW5nX291dD0wLHQud3JhcDwwJiYodC53cmFwPS10LndyYXApLHQuc3RhdHVzPXQud3JhcD9DOkUsZS5hZGxlcj0yPT09dC53cmFwPzA6MSx0Lmxhc3RfZmx1c2g9bCx1Ll90cl9pbml0KHQpLG0pOlIoZSxfKX1mdW5jdGlvbiBLKGUpe3ZhciB0PUcoZSk7cmV0dXJuIHQ9PT1tJiZmdW5jdGlvbihlKXtlLndpbmRvd19zaXplPTIqZS53X3NpemUsRChlLmhlYWQpLGUubWF4X2xhenlfbWF0Y2g9aFtlLmxldmVsXS5tYXhfbGF6eSxlLmdvb2RfbWF0Y2g9aFtlLmxldmVsXS5nb29kX2xlbmd0aCxlLm5pY2VfbWF0Y2g9aFtlLmxldmVsXS5uaWNlX2xlbmd0aCxlLm1heF9jaGFpbl9sZW5ndGg9aFtlLmxldmVsXS5tYXhfY2hhaW4sZS5zdHJzdGFydD0wLGUuYmxvY2tfc3RhcnQ9MCxlLmxvb2thaGVhZD0wLGUuaW5zZXJ0PTAsZS5tYXRjaF9sZW5ndGg9ZS5wcmV2X2xlbmd0aD14LTEsZS5tYXRjaF9hdmFpbGFibGU9MCxlLmluc19oPTB9KGUuc3RhdGUpLHR9ZnVuY3Rpb24gWShlLHQscixuLGkscyl7aWYoIWUpcmV0dXJuIF87dmFyIGE9MTtpZih0PT09ZyYmKHQ9NiksbjwwPyhhPTAsbj0tbik6MTU8biYmKGE9MixuLT0xNiksaTwxfHx5PGl8fHIhPT12fHxuPDh8fDE1PG58fHQ8MHx8OTx0fHxzPDB8fGI8cylyZXR1cm4gUihlLF8pOzg9PT1uJiYobj05KTt2YXIgbz1uZXcgSDtyZXR1cm4oZS5zdGF0ZT1vKS5zdHJtPWUsby53cmFwPWEsby5nemhlYWQ9bnVsbCxvLndfYml0cz1uLG8ud19zaXplPTE8PG8ud19iaXRzLG8ud19tYXNrPW8ud19zaXplLTEsby5oYXNoX2JpdHM9aSs3LG8uaGFzaF9zaXplPTE8PG8uaGFzaF9iaXRzLG8uaGFzaF9tYXNrPW8uaGFzaF9zaXplLTEsby5oYXNoX3NoaWZ0PX5+KChvLmhhc2hfYml0cyt4LTEpL3gpLG8ud2luZG93PW5ldyBjLkJ1ZjgoMipvLndfc2l6ZSksby5oZWFkPW5ldyBjLkJ1ZjE2KG8uaGFzaF9zaXplKSxvLnByZXY9bmV3IGMuQnVmMTYoby53X3NpemUpLG8ubGl0X2J1ZnNpemU9MTw8aSs2LG8ucGVuZGluZ19idWZfc2l6ZT00Km8ubGl0X2J1ZnNpemUsby5wZW5kaW5nX2J1Zj1uZXcgYy5CdWY4KG8ucGVuZGluZ19idWZfc2l6ZSksby5kX2J1Zj0xKm8ubGl0X2J1ZnNpemUsby5sX2J1Zj0zKm8ubGl0X2J1ZnNpemUsby5sZXZlbD10LG8uc3RyYXRlZ3k9cyxvLm1ldGhvZD1yLEsoZSl9aD1bbmV3IE0oMCwwLDAsMCxmdW5jdGlvbihlLHQpe3ZhciByPTY1NTM1O2ZvcihyPmUucGVuZGluZ19idWZfc2l6ZS01JiYocj1lLnBlbmRpbmdfYnVmX3NpemUtNSk7Oyl7aWYoZS5sb29rYWhlYWQ8PTEpe2lmKGooZSksMD09PWUubG9va2FoZWFkJiZ0PT09bClyZXR1cm4gQTtpZigwPT09ZS5sb29rYWhlYWQpYnJlYWt9ZS5zdHJzdGFydCs9ZS5sb29rYWhlYWQsZS5sb29rYWhlYWQ9MDt2YXIgbj1lLmJsb2NrX3N0YXJ0K3I7aWYoKDA9PT1lLnN0cnN0YXJ0fHxlLnN0cnN0YXJ0Pj1uKSYmKGUubG9va2FoZWFkPWUuc3Ryc3RhcnQtbixlLnN0cnN0YXJ0PW4sTihlLCExKSwwPT09ZS5zdHJtLmF2YWlsX291dCkpcmV0dXJuIEE7aWYoZS5zdHJzdGFydC1lLmJsb2NrX3N0YXJ0Pj1lLndfc2l6ZS16JiYoTihlLCExKSwwPT09ZS5zdHJtLmF2YWlsX291dCkpcmV0dXJuIEF9cmV0dXJuIGUuaW5zZXJ0PTAsdD09PWY/KE4oZSwhMCksMD09PWUuc3RybS5hdmFpbF9vdXQ/TzpCKTooZS5zdHJzdGFydD5lLmJsb2NrX3N0YXJ0JiYoTihlLCExKSxlLnN0cm0uYXZhaWxfb3V0KSxBKX0pLG5ldyBNKDQsNCw4LDQsWiksbmV3IE0oNCw1LDE2LDgsWiksbmV3IE0oNCw2LDMyLDMyLFopLG5ldyBNKDQsNCwxNiwxNixXKSxuZXcgTSg4LDE2LDMyLDMyLFcpLG5ldyBNKDgsMTYsMTI4LDEyOCxXKSxuZXcgTSg4LDMyLDEyOCwyNTYsVyksbmV3IE0oMzIsMTI4LDI1OCwxMDI0LFcpLG5ldyBNKDMyLDI1OCwyNTgsNDA5NixXKV0sci5kZWZsYXRlSW5pdD1mdW5jdGlvbihlLHQpe3JldHVybiBZKGUsdCx2LDE1LDgsMCl9LHIuZGVmbGF0ZUluaXQyPVksci5kZWZsYXRlUmVzZXQ9SyxyLmRlZmxhdGVSZXNldEtlZXA9RyxyLmRlZmxhdGVTZXRIZWFkZXI9ZnVuY3Rpb24oZSx0KXtyZXR1cm4gZSYmZS5zdGF0ZT8yIT09ZS5zdGF0ZS53cmFwP186KGUuc3RhdGUuZ3poZWFkPXQsbSk6X30sci5kZWZsYXRlPWZ1bmN0aW9uKGUsdCl7dmFyIHIsbixpLHM7aWYoIWV8fCFlLnN0YXRlfHw1PHR8fHQ8MClyZXR1cm4gZT9SKGUsXyk6XztpZihuPWUuc3RhdGUsIWUub3V0cHV0fHwhZS5pbnB1dCYmMCE9PWUuYXZhaWxfaW58fDY2Nj09PW4uc3RhdHVzJiZ0IT09ZilyZXR1cm4gUihlLDA9PT1lLmF2YWlsX291dD8tNTpfKTtpZihuLnN0cm09ZSxyPW4ubGFzdF9mbHVzaCxuLmxhc3RfZmx1c2g9dCxuLnN0YXR1cz09PUMpaWYoMj09PW4ud3JhcCllLmFkbGVyPTAsVShuLDMxKSxVKG4sMTM5KSxVKG4sOCksbi5nemhlYWQ/KFUobiwobi5nemhlYWQudGV4dD8xOjApKyhuLmd6aGVhZC5oY3JjPzI6MCkrKG4uZ3poZWFkLmV4dHJhPzQ6MCkrKG4uZ3poZWFkLm5hbWU/ODowKSsobi5nemhlYWQuY29tbWVudD8xNjowKSksVShuLDI1NSZuLmd6aGVhZC50aW1lKSxVKG4sbi5nemhlYWQudGltZT4+OCYyNTUpLFUobixuLmd6aGVhZC50aW1lPj4xNiYyNTUpLFUobixuLmd6aGVhZC50aW1lPj4yNCYyNTUpLFUobiw5PT09bi5sZXZlbD8yOjI8PW4uc3RyYXRlZ3l8fG4ubGV2ZWw8Mj80OjApLFUobiwyNTUmbi5nemhlYWQub3MpLG4uZ3poZWFkLmV4dHJhJiZuLmd6aGVhZC5leHRyYS5sZW5ndGgmJihVKG4sMjU1Jm4uZ3poZWFkLmV4dHJhLmxlbmd0aCksVShuLG4uZ3poZWFkLmV4dHJhLmxlbmd0aD4+OCYyNTUpKSxuLmd6aGVhZC5oY3JjJiYoZS5hZGxlcj1wKGUuYWRsZXIsbi5wZW5kaW5nX2J1ZixuLnBlbmRpbmcsMCkpLG4uZ3ppbmRleD0wLG4uc3RhdHVzPTY5KTooVShuLDApLFUobiwwKSxVKG4sMCksVShuLDApLFUobiwwKSxVKG4sOT09PW4ubGV2ZWw/MjoyPD1uLnN0cmF0ZWd5fHxuLmxldmVsPDI/NDowKSxVKG4sMyksbi5zdGF0dXM9RSk7ZWxzZXt2YXIgYT12KyhuLndfYml0cy04PDw0KTw8ODthfD0oMjw9bi5zdHJhdGVneXx8bi5sZXZlbDwyPzA6bi5sZXZlbDw2PzE6Nj09PW4ubGV2ZWw/MjozKTw8NiwwIT09bi5zdHJzdGFydCYmKGF8PTMyKSxhKz0zMS1hJTMxLG4uc3RhdHVzPUUsUChuLGEpLDAhPT1uLnN0cnN0YXJ0JiYoUChuLGUuYWRsZXI+Pj4xNiksUChuLDY1NTM1JmUuYWRsZXIpKSxlLmFkbGVyPTF9aWYoNjk9PT1uLnN0YXR1cylpZihuLmd6aGVhZC5leHRyYSl7Zm9yKGk9bi5wZW5kaW5nO24uZ3ppbmRleDwoNjU1MzUmbi5nemhlYWQuZXh0cmEubGVuZ3RoKSYmKG4ucGVuZGluZyE9PW4ucGVuZGluZ19idWZfc2l6ZXx8KG4uZ3poZWFkLmhjcmMmJm4ucGVuZGluZz5pJiYoZS5hZGxlcj1wKGUuYWRsZXIsbi5wZW5kaW5nX2J1ZixuLnBlbmRpbmctaSxpKSksRihlKSxpPW4ucGVuZGluZyxuLnBlbmRpbmchPT1uLnBlbmRpbmdfYnVmX3NpemUpKTspVShuLDI1NSZuLmd6aGVhZC5leHRyYVtuLmd6aW5kZXhdKSxuLmd6aW5kZXgrKztuLmd6aGVhZC5oY3JjJiZuLnBlbmRpbmc+aSYmKGUuYWRsZXI9cChlLmFkbGVyLG4ucGVuZGluZ19idWYsbi5wZW5kaW5nLWksaSkpLG4uZ3ppbmRleD09PW4uZ3poZWFkLmV4dHJhLmxlbmd0aCYmKG4uZ3ppbmRleD0wLG4uc3RhdHVzPTczKX1lbHNlIG4uc3RhdHVzPTczO2lmKDczPT09bi5zdGF0dXMpaWYobi5nemhlYWQubmFtZSl7aT1uLnBlbmRpbmc7ZG97aWYobi5wZW5kaW5nPT09bi5wZW5kaW5nX2J1Zl9zaXplJiYobi5nemhlYWQuaGNyYyYmbi5wZW5kaW5nPmkmJihlLmFkbGVyPXAoZS5hZGxlcixuLnBlbmRpbmdfYnVmLG4ucGVuZGluZy1pLGkpKSxGKGUpLGk9bi5wZW5kaW5nLG4ucGVuZGluZz09PW4ucGVuZGluZ19idWZfc2l6ZSkpe3M9MTticmVha31zPW4uZ3ppbmRleDxuLmd6aGVhZC5uYW1lLmxlbmd0aD8yNTUmbi5nemhlYWQubmFtZS5jaGFyQ29kZUF0KG4uZ3ppbmRleCsrKTowLFUobixzKX13aGlsZSgwIT09cyk7bi5nemhlYWQuaGNyYyYmbi5wZW5kaW5nPmkmJihlLmFkbGVyPXAoZS5hZGxlcixuLnBlbmRpbmdfYnVmLG4ucGVuZGluZy1pLGkpKSwwPT09cyYmKG4uZ3ppbmRleD0wLG4uc3RhdHVzPTkxKX1lbHNlIG4uc3RhdHVzPTkxO2lmKDkxPT09bi5zdGF0dXMpaWYobi5nemhlYWQuY29tbWVudCl7aT1uLnBlbmRpbmc7ZG97aWYobi5wZW5kaW5nPT09bi5wZW5kaW5nX2J1Zl9zaXplJiYobi5nemhlYWQuaGNyYyYmbi5wZW5kaW5nPmkmJihlLmFkbGVyPXAoZS5hZGxlcixuLnBlbmRpbmdfYnVmLG4ucGVuZGluZy1pLGkpKSxGKGUpLGk9bi5wZW5kaW5nLG4ucGVuZGluZz09PW4ucGVuZGluZ19idWZfc2l6ZSkpe3M9MTticmVha31zPW4uZ3ppbmRleDxuLmd6aGVhZC5jb21tZW50Lmxlbmd0aD8yNTUmbi5nemhlYWQuY29tbWVudC5jaGFyQ29kZUF0KG4uZ3ppbmRleCsrKTowLFUobixzKX13aGlsZSgwIT09cyk7bi5nemhlYWQuaGNyYyYmbi5wZW5kaW5nPmkmJihlLmFkbGVyPXAoZS5hZGxlcixuLnBlbmRpbmdfYnVmLG4ucGVuZGluZy1pLGkpKSwwPT09cyYmKG4uc3RhdHVzPTEwMyl9ZWxzZSBuLnN0YXR1cz0xMDM7aWYoMTAzPT09bi5zdGF0dXMmJihuLmd6aGVhZC5oY3JjPyhuLnBlbmRpbmcrMj5uLnBlbmRpbmdfYnVmX3NpemUmJkYoZSksbi5wZW5kaW5nKzI8PW4ucGVuZGluZ19idWZfc2l6ZSYmKFUobiwyNTUmZS5hZGxlciksVShuLGUuYWRsZXI+PjgmMjU1KSxlLmFkbGVyPTAsbi5zdGF0dXM9RSkpOm4uc3RhdHVzPUUpLDAhPT1uLnBlbmRpbmcpe2lmKEYoZSksMD09PWUuYXZhaWxfb3V0KXJldHVybiBuLmxhc3RfZmx1c2g9LTEsbX1lbHNlIGlmKDA9PT1lLmF2YWlsX2luJiZUKHQpPD1UKHIpJiZ0IT09ZilyZXR1cm4gUihlLC01KTtpZig2NjY9PT1uLnN0YXR1cyYmMCE9PWUuYXZhaWxfaW4pcmV0dXJuIFIoZSwtNSk7aWYoMCE9PWUuYXZhaWxfaW58fDAhPT1uLmxvb2thaGVhZHx8dCE9PWwmJjY2NiE9PW4uc3RhdHVzKXt2YXIgbz0yPT09bi5zdHJhdGVneT9mdW5jdGlvbihlLHQpe2Zvcih2YXIgcjs7KXtpZigwPT09ZS5sb29rYWhlYWQmJihqKGUpLDA9PT1lLmxvb2thaGVhZCkpe2lmKHQ9PT1sKXJldHVybiBBO2JyZWFrfWlmKGUubWF0Y2hfbGVuZ3RoPTAscj11Ll90cl90YWxseShlLDAsZS53aW5kb3dbZS5zdHJzdGFydF0pLGUubG9va2FoZWFkLS0sZS5zdHJzdGFydCsrLHImJihOKGUsITEpLDA9PT1lLnN0cm0uYXZhaWxfb3V0KSlyZXR1cm4gQX1yZXR1cm4gZS5pbnNlcnQ9MCx0PT09Zj8oTihlLCEwKSwwPT09ZS5zdHJtLmF2YWlsX291dD9POkIpOmUubGFzdF9saXQmJihOKGUsITEpLDA9PT1lLnN0cm0uYXZhaWxfb3V0KT9BOkl9KG4sdCk6Mz09PW4uc3RyYXRlZ3k/ZnVuY3Rpb24oZSx0KXtmb3IodmFyIHIsbixpLHMsYT1lLndpbmRvdzs7KXtpZihlLmxvb2thaGVhZDw9Uyl7aWYoaihlKSxlLmxvb2thaGVhZDw9UyYmdD09PWwpcmV0dXJuIEE7aWYoMD09PWUubG9va2FoZWFkKWJyZWFrfWlmKGUubWF0Y2hfbGVuZ3RoPTAsZS5sb29rYWhlYWQ+PXgmJjA8ZS5zdHJzdGFydCYmKG49YVtpPWUuc3Ryc3RhcnQtMV0pPT09YVsrK2ldJiZuPT09YVsrK2ldJiZuPT09YVsrK2ldKXtzPWUuc3Ryc3RhcnQrUztkb3t9d2hpbGUobj09PWFbKytpXSYmbj09PWFbKytpXSYmbj09PWFbKytpXSYmbj09PWFbKytpXSYmbj09PWFbKytpXSYmbj09PWFbKytpXSYmbj09PWFbKytpXSYmbj09PWFbKytpXSYmaTxzKTtlLm1hdGNoX2xlbmd0aD1TLShzLWkpLGUubWF0Y2hfbGVuZ3RoPmUubG9va2FoZWFkJiYoZS5tYXRjaF9sZW5ndGg9ZS5sb29rYWhlYWQpfWlmKGUubWF0Y2hfbGVuZ3RoPj14PyhyPXUuX3RyX3RhbGx5KGUsMSxlLm1hdGNoX2xlbmd0aC14KSxlLmxvb2thaGVhZC09ZS5tYXRjaF9sZW5ndGgsZS5zdHJzdGFydCs9ZS5tYXRjaF9sZW5ndGgsZS5tYXRjaF9sZW5ndGg9MCk6KHI9dS5fdHJfdGFsbHkoZSwwLGUud2luZG93W2Uuc3Ryc3RhcnRdKSxlLmxvb2thaGVhZC0tLGUuc3Ryc3RhcnQrKyksciYmKE4oZSwhMSksMD09PWUuc3RybS5hdmFpbF9vdXQpKXJldHVybiBBfXJldHVybiBlLmluc2VydD0wLHQ9PT1mPyhOKGUsITApLDA9PT1lLnN0cm0uYXZhaWxfb3V0P086Qik6ZS5sYXN0X2xpdCYmKE4oZSwhMSksMD09PWUuc3RybS5hdmFpbF9vdXQpP0E6SX0obix0KTpoW24ubGV2ZWxdLmZ1bmMobix0KTtpZihvIT09TyYmbyE9PUJ8fChuLnN0YXR1cz02NjYpLG89PT1BfHxvPT09TylyZXR1cm4gMD09PWUuYXZhaWxfb3V0JiYobi5sYXN0X2ZsdXNoPS0xKSxtO2lmKG89PT1JJiYoMT09PXQ/dS5fdHJfYWxpZ24obik6NSE9PXQmJih1Ll90cl9zdG9yZWRfYmxvY2sobiwwLDAsITEpLDM9PT10JiYoRChuLmhlYWQpLDA9PT1uLmxvb2thaGVhZCYmKG4uc3Ryc3RhcnQ9MCxuLmJsb2NrX3N0YXJ0PTAsbi5pbnNlcnQ9MCkpKSxGKGUpLDA9PT1lLmF2YWlsX291dCkpcmV0dXJuIG4ubGFzdF9mbHVzaD0tMSxtfXJldHVybiB0IT09Zj9tOm4ud3JhcDw9MD8xOigyPT09bi53cmFwPyhVKG4sMjU1JmUuYWRsZXIpLFUobixlLmFkbGVyPj44JjI1NSksVShuLGUuYWRsZXI+PjE2JjI1NSksVShuLGUuYWRsZXI+PjI0JjI1NSksVShuLDI1NSZlLnRvdGFsX2luKSxVKG4sZS50b3RhbF9pbj4+OCYyNTUpLFUobixlLnRvdGFsX2luPj4xNiYyNTUpLFUobixlLnRvdGFsX2luPj4yNCYyNTUpKTooUChuLGUuYWRsZXI+Pj4xNiksUChuLDY1NTM1JmUuYWRsZXIpKSxGKGUpLDA8bi53cmFwJiYobi53cmFwPS1uLndyYXApLDAhPT1uLnBlbmRpbmc/bToxKX0sci5kZWZsYXRlRW5kPWZ1bmN0aW9uKGUpe3ZhciB0O3JldHVybiBlJiZlLnN0YXRlPyh0PWUuc3RhdGUuc3RhdHVzKSE9PUMmJjY5IT09dCYmNzMhPT10JiY5MSE9PXQmJjEwMyE9PXQmJnQhPT1FJiY2NjYhPT10P1IoZSxfKTooZS5zdGF0ZT1udWxsLHQ9PT1FP1IoZSwtMyk6bSk6X30sci5kZWZsYXRlU2V0RGljdGlvbmFyeT1mdW5jdGlvbihlLHQpe3ZhciByLG4saSxzLGEsbyxoLHUsbD10Lmxlbmd0aDtpZighZXx8IWUuc3RhdGUpcmV0dXJuIF87aWYoMj09PShzPShyPWUuc3RhdGUpLndyYXApfHwxPT09cyYmci5zdGF0dXMhPT1DfHxyLmxvb2thaGVhZClyZXR1cm4gXztmb3IoMT09PXMmJihlLmFkbGVyPWQoZS5hZGxlcix0LGwsMCkpLHIud3JhcD0wLGw+PXIud19zaXplJiYoMD09PXMmJihEKHIuaGVhZCksci5zdHJzdGFydD0wLHIuYmxvY2tfc3RhcnQ9MCxyLmluc2VydD0wKSx1PW5ldyBjLkJ1Zjgoci53X3NpemUpLGMuYXJyYXlTZXQodSx0LGwtci53X3NpemUsci53X3NpemUsMCksdD11LGw9ci53X3NpemUpLGE9ZS5hdmFpbF9pbixvPWUubmV4dF9pbixoPWUuaW5wdXQsZS5hdmFpbF9pbj1sLGUubmV4dF9pbj0wLGUuaW5wdXQ9dCxqKHIpO3IubG9va2FoZWFkPj14Oyl7Zm9yKG49ci5zdHJzdGFydCxpPXIubG9va2FoZWFkLSh4LTEpO3IuaW5zX2g9KHIuaW5zX2g8PHIuaGFzaF9zaGlmdF5yLndpbmRvd1tuK3gtMV0pJnIuaGFzaF9tYXNrLHIucHJldltuJnIud19tYXNrXT1yLmhlYWRbci5pbnNfaF0sci5oZWFkW3IuaW5zX2hdPW4sbisrLC0taTspO3Iuc3Ryc3RhcnQ9bixyLmxvb2thaGVhZD14LTEsaihyKX1yZXR1cm4gci5zdHJzdGFydCs9ci5sb29rYWhlYWQsci5ibG9ja19zdGFydD1yLnN0cnN0YXJ0LHIuaW5zZXJ0PXIubG9va2FoZWFkLHIubG9va2FoZWFkPTAsci5tYXRjaF9sZW5ndGg9ci5wcmV2X2xlbmd0aD14LTEsci5tYXRjaF9hdmFpbGFibGU9MCxlLm5leHRfaW49byxlLmlucHV0PWgsZS5hdmFpbF9pbj1hLHIud3JhcD1zLG19LHIuZGVmbGF0ZUluZm89XCJwYWtvIGRlZmxhdGUgKGZyb20gTm9kZWNhIHByb2plY3QpXCJ9LHtcIi4uL3V0aWxzL2NvbW1vblwiOjQxLFwiLi9hZGxlcjMyXCI6NDMsXCIuL2NyYzMyXCI6NDUsXCIuL21lc3NhZ2VzXCI6NTEsXCIuL3RyZWVzXCI6NTJ9XSw0NzpbZnVuY3Rpb24oZSx0LHIpe1widXNlIHN0cmljdFwiO3QuZXhwb3J0cz1mdW5jdGlvbigpe3RoaXMudGV4dD0wLHRoaXMudGltZT0wLHRoaXMueGZsYWdzPTAsdGhpcy5vcz0wLHRoaXMuZXh0cmE9bnVsbCx0aGlzLmV4dHJhX2xlbj0wLHRoaXMubmFtZT1cIlwiLHRoaXMuY29tbWVudD1cIlwiLHRoaXMuaGNyYz0wLHRoaXMuZG9uZT0hMX19LHt9XSw0ODpbZnVuY3Rpb24oZSx0LHIpe1widXNlIHN0cmljdFwiO3QuZXhwb3J0cz1mdW5jdGlvbihlLHQpe3ZhciByLG4saSxzLGEsbyxoLHUsbCxmLGMsZCxwLG0sXyxnLGIsdix5LHcsayx4LFMseixDO3I9ZS5zdGF0ZSxuPWUubmV4dF9pbix6PWUuaW5wdXQsaT1uKyhlLmF2YWlsX2luLTUpLHM9ZS5uZXh0X291dCxDPWUub3V0cHV0LGE9cy0odC1lLmF2YWlsX291dCksbz1zKyhlLmF2YWlsX291dC0yNTcpLGg9ci5kbWF4LHU9ci53c2l6ZSxsPXIud2hhdmUsZj1yLnduZXh0LGM9ci53aW5kb3csZD1yLmhvbGQscD1yLmJpdHMsbT1yLmxlbmNvZGUsXz1yLmRpc3Rjb2RlLGc9KDE8PHIubGVuYml0cyktMSxiPSgxPDxyLmRpc3RiaXRzKS0xO2U6ZG97cDwxNSYmKGQrPXpbbisrXTw8cCxwKz04LGQrPXpbbisrXTw8cCxwKz04KSx2PW1bZCZnXTt0OmZvcig7Oyl7aWYoZD4+Pj15PXY+Pj4yNCxwLT15LDA9PT0oeT12Pj4+MTYmMjU1KSlDW3MrK109NjU1MzUmdjtlbHNle2lmKCEoMTYmeSkpe2lmKDA9PSg2NCZ5KSl7dj1tWyg2NTUzNSZ2KSsoZCYoMTw8eSktMSldO2NvbnRpbnVlIHR9aWYoMzImeSl7ci5tb2RlPTEyO2JyZWFrIGV9ZS5tc2c9XCJpbnZhbGlkIGxpdGVyYWwvbGVuZ3RoIGNvZGVcIixyLm1vZGU9MzA7YnJlYWsgZX13PTY1NTM1JnYsKHkmPTE1KSYmKHA8eSYmKGQrPXpbbisrXTw8cCxwKz04KSx3Kz1kJigxPDx5KS0xLGQ+Pj49eSxwLT15KSxwPDE1JiYoZCs9eltuKytdPDxwLHArPTgsZCs9eltuKytdPDxwLHArPTgpLHY9X1tkJmJdO3I6Zm9yKDs7KXtpZihkPj4+PXk9dj4+PjI0LHAtPXksISgxNiYoeT12Pj4+MTYmMjU1KSkpe2lmKDA9PSg2NCZ5KSl7dj1fWyg2NTUzNSZ2KSsoZCYoMTw8eSktMSldO2NvbnRpbnVlIHJ9ZS5tc2c9XCJpbnZhbGlkIGRpc3RhbmNlIGNvZGVcIixyLm1vZGU9MzA7YnJlYWsgZX1pZihrPTY1NTM1JnYscDwoeSY9MTUpJiYoZCs9eltuKytdPDxwLChwKz04KTx5JiYoZCs9eltuKytdPDxwLHArPTgpKSxoPChrKz1kJigxPDx5KS0xKSl7ZS5tc2c9XCJpbnZhbGlkIGRpc3RhbmNlIHRvbyBmYXIgYmFja1wiLHIubW9kZT0zMDticmVhayBlfWlmKGQ+Pj49eSxwLT15LCh5PXMtYSk8ayl7aWYobDwoeT1rLXkpJiZyLnNhbmUpe2UubXNnPVwiaW52YWxpZCBkaXN0YW5jZSB0b28gZmFyIGJhY2tcIixyLm1vZGU9MzA7YnJlYWsgZX1pZihTPWMsKHg9MCk9PT1mKXtpZih4Kz11LXkseTx3KXtmb3Iody09eTtDW3MrK109Y1t4KytdLC0teTspO3g9cy1rLFM9Q319ZWxzZSBpZihmPHkpe2lmKHgrPXUrZi15LCh5LT1mKTx3KXtmb3Iody09eTtDW3MrK109Y1t4KytdLC0teTspO2lmKHg9MCxmPHcpe2Zvcih3LT15PWY7Q1tzKytdPWNbeCsrXSwtLXk7KTt4PXMtayxTPUN9fX1lbHNlIGlmKHgrPWYteSx5PHcpe2Zvcih3LT15O0NbcysrXT1jW3grK10sLS15Oyk7eD1zLWssUz1DfWZvcig7Mjx3OylDW3MrK109U1t4KytdLENbcysrXT1TW3grK10sQ1tzKytdPVNbeCsrXSx3LT0zO3cmJihDW3MrK109U1t4KytdLDE8dyYmKENbcysrXT1TW3grK10pKX1lbHNle2Zvcih4PXMtaztDW3MrK109Q1t4KytdLENbcysrXT1DW3grK10sQ1tzKytdPUNbeCsrXSwyPCh3LT0zKTspO3cmJihDW3MrK109Q1t4KytdLDE8dyYmKENbcysrXT1DW3grK10pKX1icmVha319YnJlYWt9fXdoaWxlKG48aSYmczxvKTtuLT13PXA+PjMsZCY9KDE8PChwLT13PDwzKSktMSxlLm5leHRfaW49bixlLm5leHRfb3V0PXMsZS5hdmFpbF9pbj1uPGk/aS1uKzU6NS0obi1pKSxlLmF2YWlsX291dD1zPG8/by1zKzI1NzoyNTctKHMtbyksci5ob2xkPWQsci5iaXRzPXB9fSx7fV0sNDk6W2Z1bmN0aW9uKGUsdCxyKXtcInVzZSBzdHJpY3RcIjt2YXIgST1lKFwiLi4vdXRpbHMvY29tbW9uXCIpLE89ZShcIi4vYWRsZXIzMlwiKSxCPWUoXCIuL2NyYzMyXCIpLFI9ZShcIi4vaW5mZmFzdFwiKSxUPWUoXCIuL2luZnRyZWVzXCIpLEQ9MSxGPTIsTj0wLFU9LTIsUD0xLG49ODUyLGk9NTkyO2Z1bmN0aW9uIEwoZSl7cmV0dXJuKGU+Pj4yNCYyNTUpKyhlPj4+OCY2NTI4MCkrKCg2NTI4MCZlKTw8OCkrKCgyNTUmZSk8PDI0KX1mdW5jdGlvbiBzKCl7dGhpcy5tb2RlPTAsdGhpcy5sYXN0PSExLHRoaXMud3JhcD0wLHRoaXMuaGF2ZWRpY3Q9ITEsdGhpcy5mbGFncz0wLHRoaXMuZG1heD0wLHRoaXMuY2hlY2s9MCx0aGlzLnRvdGFsPTAsdGhpcy5oZWFkPW51bGwsdGhpcy53Yml0cz0wLHRoaXMud3NpemU9MCx0aGlzLndoYXZlPTAsdGhpcy53bmV4dD0wLHRoaXMud2luZG93PW51bGwsdGhpcy5ob2xkPTAsdGhpcy5iaXRzPTAsdGhpcy5sZW5ndGg9MCx0aGlzLm9mZnNldD0wLHRoaXMuZXh0cmE9MCx0aGlzLmxlbmNvZGU9bnVsbCx0aGlzLmRpc3Rjb2RlPW51bGwsdGhpcy5sZW5iaXRzPTAsdGhpcy5kaXN0Yml0cz0wLHRoaXMubmNvZGU9MCx0aGlzLm5sZW49MCx0aGlzLm5kaXN0PTAsdGhpcy5oYXZlPTAsdGhpcy5uZXh0PW51bGwsdGhpcy5sZW5zPW5ldyBJLkJ1ZjE2KDMyMCksdGhpcy53b3JrPW5ldyBJLkJ1ZjE2KDI4OCksdGhpcy5sZW5keW49bnVsbCx0aGlzLmRpc3RkeW49bnVsbCx0aGlzLnNhbmU9MCx0aGlzLmJhY2s9MCx0aGlzLndhcz0wfWZ1bmN0aW9uIGEoZSl7dmFyIHQ7cmV0dXJuIGUmJmUuc3RhdGU/KHQ9ZS5zdGF0ZSxlLnRvdGFsX2luPWUudG90YWxfb3V0PXQudG90YWw9MCxlLm1zZz1cIlwiLHQud3JhcCYmKGUuYWRsZXI9MSZ0LndyYXApLHQubW9kZT1QLHQubGFzdD0wLHQuaGF2ZWRpY3Q9MCx0LmRtYXg9MzI3NjgsdC5oZWFkPW51bGwsdC5ob2xkPTAsdC5iaXRzPTAsdC5sZW5jb2RlPXQubGVuZHluPW5ldyBJLkJ1ZjMyKG4pLHQuZGlzdGNvZGU9dC5kaXN0ZHluPW5ldyBJLkJ1ZjMyKGkpLHQuc2FuZT0xLHQuYmFjaz0tMSxOKTpVfWZ1bmN0aW9uIG8oZSl7dmFyIHQ7cmV0dXJuIGUmJmUuc3RhdGU/KCh0PWUuc3RhdGUpLndzaXplPTAsdC53aGF2ZT0wLHQud25leHQ9MCxhKGUpKTpVfWZ1bmN0aW9uIGgoZSx0KXt2YXIgcixuO3JldHVybiBlJiZlLnN0YXRlPyhuPWUuc3RhdGUsdDwwPyhyPTAsdD0tdCk6KHI9MSsodD4+NCksdDw0OCYmKHQmPTE1KSksdCYmKHQ8OHx8MTU8dCk/VToobnVsbCE9PW4ud2luZG93JiZuLndiaXRzIT09dCYmKG4ud2luZG93PW51bGwpLG4ud3JhcD1yLG4ud2JpdHM9dCxvKGUpKSk6VX1mdW5jdGlvbiB1KGUsdCl7dmFyIHIsbjtyZXR1cm4gZT8obj1uZXcgcywoZS5zdGF0ZT1uKS53aW5kb3c9bnVsbCwocj1oKGUsdCkpIT09TiYmKGUuc3RhdGU9bnVsbCkscik6VX12YXIgbCxmLGM9ITA7ZnVuY3Rpb24gaihlKXtpZihjKXt2YXIgdDtmb3IobD1uZXcgSS5CdWYzMig1MTIpLGY9bmV3IEkuQnVmMzIoMzIpLHQ9MDt0PDE0NDspZS5sZW5zW3QrK109ODtmb3IoO3Q8MjU2OyllLmxlbnNbdCsrXT05O2Zvcig7dDwyODA7KWUubGVuc1t0KytdPTc7Zm9yKDt0PDI4ODspZS5sZW5zW3QrK109ODtmb3IoVChELGUubGVucywwLDI4OCxsLDAsZS53b3JrLHtiaXRzOjl9KSx0PTA7dDwzMjspZS5sZW5zW3QrK109NTtUKEYsZS5sZW5zLDAsMzIsZiwwLGUud29yayx7Yml0czo1fSksYz0hMX1lLmxlbmNvZGU9bCxlLmxlbmJpdHM9OSxlLmRpc3Rjb2RlPWYsZS5kaXN0Yml0cz01fWZ1bmN0aW9uIFooZSx0LHIsbil7dmFyIGkscz1lLnN0YXRlO3JldHVybiBudWxsPT09cy53aW5kb3cmJihzLndzaXplPTE8PHMud2JpdHMscy53bmV4dD0wLHMud2hhdmU9MCxzLndpbmRvdz1uZXcgSS5CdWY4KHMud3NpemUpKSxuPj1zLndzaXplPyhJLmFycmF5U2V0KHMud2luZG93LHQsci1zLndzaXplLHMud3NpemUsMCkscy53bmV4dD0wLHMud2hhdmU9cy53c2l6ZSk6KG48KGk9cy53c2l6ZS1zLnduZXh0KSYmKGk9biksSS5hcnJheVNldChzLndpbmRvdyx0LHItbixpLHMud25leHQpLChuLT1pKT8oSS5hcnJheVNldChzLndpbmRvdyx0LHItbixuLDApLHMud25leHQ9bixzLndoYXZlPXMud3NpemUpOihzLnduZXh0Kz1pLHMud25leHQ9PT1zLndzaXplJiYocy53bmV4dD0wKSxzLndoYXZlPHMud3NpemUmJihzLndoYXZlKz1pKSkpLDB9ci5pbmZsYXRlUmVzZXQ9byxyLmluZmxhdGVSZXNldDI9aCxyLmluZmxhdGVSZXNldEtlZXA9YSxyLmluZmxhdGVJbml0PWZ1bmN0aW9uKGUpe3JldHVybiB1KGUsMTUpfSxyLmluZmxhdGVJbml0Mj11LHIuaW5mbGF0ZT1mdW5jdGlvbihlLHQpe3ZhciByLG4saSxzLGEsbyxoLHUsbCxmLGMsZCxwLG0sXyxnLGIsdix5LHcsayx4LFMseixDPTAsRT1uZXcgSS5CdWY4KDQpLEE9WzE2LDE3LDE4LDAsOCw3LDksNiwxMCw1LDExLDQsMTIsMywxMywyLDE0LDEsMTVdO2lmKCFlfHwhZS5zdGF0ZXx8IWUub3V0cHV0fHwhZS5pbnB1dCYmMCE9PWUuYXZhaWxfaW4pcmV0dXJuIFU7MTI9PT0ocj1lLnN0YXRlKS5tb2RlJiYoci5tb2RlPTEzKSxhPWUubmV4dF9vdXQsaT1lLm91dHB1dCxoPWUuYXZhaWxfb3V0LHM9ZS5uZXh0X2luLG49ZS5pbnB1dCxvPWUuYXZhaWxfaW4sdT1yLmhvbGQsbD1yLmJpdHMsZj1vLGM9aCx4PU47ZTpmb3IoOzspc3dpdGNoKHIubW9kZSl7Y2FzZSBQOmlmKDA9PT1yLndyYXApe3IubW9kZT0xMzticmVha31mb3IoO2w8MTY7KXtpZigwPT09bylicmVhayBlO28tLSx1Kz1uW3MrK108PGwsbCs9OH1pZigyJnIud3JhcCYmMzU2MTU9PT11KXtFW3IuY2hlY2s9MF09MjU1JnUsRVsxXT11Pj4+OCYyNTUsci5jaGVjaz1CKHIuY2hlY2ssRSwyLDApLGw9dT0wLHIubW9kZT0yO2JyZWFrfWlmKHIuZmxhZ3M9MCxyLmhlYWQmJihyLmhlYWQuZG9uZT0hMSksISgxJnIud3JhcCl8fCgoKDI1NSZ1KTw8OCkrKHU+PjgpKSUzMSl7ZS5tc2c9XCJpbmNvcnJlY3QgaGVhZGVyIGNoZWNrXCIsci5tb2RlPTMwO2JyZWFrfWlmKDghPSgxNSZ1KSl7ZS5tc2c9XCJ1bmtub3duIGNvbXByZXNzaW9uIG1ldGhvZFwiLHIubW9kZT0zMDticmVha31pZihsLT00LGs9OCsoMTUmKHU+Pj49NCkpLDA9PT1yLndiaXRzKXIud2JpdHM9aztlbHNlIGlmKGs+ci53Yml0cyl7ZS5tc2c9XCJpbnZhbGlkIHdpbmRvdyBzaXplXCIsci5tb2RlPTMwO2JyZWFrfXIuZG1heD0xPDxrLGUuYWRsZXI9ci5jaGVjaz0xLHIubW9kZT01MTImdT8xMDoxMixsPXU9MDticmVhaztjYXNlIDI6Zm9yKDtsPDE2Oyl7aWYoMD09PW8pYnJlYWsgZTtvLS0sdSs9bltzKytdPDxsLGwrPTh9aWYoci5mbGFncz11LDghPSgyNTUmci5mbGFncykpe2UubXNnPVwidW5rbm93biBjb21wcmVzc2lvbiBtZXRob2RcIixyLm1vZGU9MzA7YnJlYWt9aWYoNTczNDQmci5mbGFncyl7ZS5tc2c9XCJ1bmtub3duIGhlYWRlciBmbGFncyBzZXRcIixyLm1vZGU9MzA7YnJlYWt9ci5oZWFkJiYoci5oZWFkLnRleHQ9dT4+OCYxKSw1MTImci5mbGFncyYmKEVbMF09MjU1JnUsRVsxXT11Pj4+OCYyNTUsci5jaGVjaz1CKHIuY2hlY2ssRSwyLDApKSxsPXU9MCxyLm1vZGU9MztjYXNlIDM6Zm9yKDtsPDMyOyl7aWYoMD09PW8pYnJlYWsgZTtvLS0sdSs9bltzKytdPDxsLGwrPTh9ci5oZWFkJiYoci5oZWFkLnRpbWU9dSksNTEyJnIuZmxhZ3MmJihFWzBdPTI1NSZ1LEVbMV09dT4+PjgmMjU1LEVbMl09dT4+PjE2JjI1NSxFWzNdPXU+Pj4yNCYyNTUsci5jaGVjaz1CKHIuY2hlY2ssRSw0LDApKSxsPXU9MCxyLm1vZGU9NDtjYXNlIDQ6Zm9yKDtsPDE2Oyl7aWYoMD09PW8pYnJlYWsgZTtvLS0sdSs9bltzKytdPDxsLGwrPTh9ci5oZWFkJiYoci5oZWFkLnhmbGFncz0yNTUmdSxyLmhlYWQub3M9dT4+OCksNTEyJnIuZmxhZ3MmJihFWzBdPTI1NSZ1LEVbMV09dT4+PjgmMjU1LHIuY2hlY2s9QihyLmNoZWNrLEUsMiwwKSksbD11PTAsci5tb2RlPTU7Y2FzZSA1OmlmKDEwMjQmci5mbGFncyl7Zm9yKDtsPDE2Oyl7aWYoMD09PW8pYnJlYWsgZTtvLS0sdSs9bltzKytdPDxsLGwrPTh9ci5sZW5ndGg9dSxyLmhlYWQmJihyLmhlYWQuZXh0cmFfbGVuPXUpLDUxMiZyLmZsYWdzJiYoRVswXT0yNTUmdSxFWzFdPXU+Pj44JjI1NSxyLmNoZWNrPUIoci5jaGVjayxFLDIsMCkpLGw9dT0wfWVsc2Ugci5oZWFkJiYoci5oZWFkLmV4dHJhPW51bGwpO3IubW9kZT02O2Nhc2UgNjppZigxMDI0JnIuZmxhZ3MmJihvPChkPXIubGVuZ3RoKSYmKGQ9byksZCYmKHIuaGVhZCYmKGs9ci5oZWFkLmV4dHJhX2xlbi1yLmxlbmd0aCxyLmhlYWQuZXh0cmF8fChyLmhlYWQuZXh0cmE9bmV3IEFycmF5KHIuaGVhZC5leHRyYV9sZW4pKSxJLmFycmF5U2V0KHIuaGVhZC5leHRyYSxuLHMsZCxrKSksNTEyJnIuZmxhZ3MmJihyLmNoZWNrPUIoci5jaGVjayxuLGQscykpLG8tPWQscys9ZCxyLmxlbmd0aC09ZCksci5sZW5ndGgpKWJyZWFrIGU7ci5sZW5ndGg9MCxyLm1vZGU9NztjYXNlIDc6aWYoMjA0OCZyLmZsYWdzKXtpZigwPT09bylicmVhayBlO2ZvcihkPTA7az1uW3MrZCsrXSxyLmhlYWQmJmsmJnIubGVuZ3RoPDY1NTM2JiYoci5oZWFkLm5hbWUrPVN0cmluZy5mcm9tQ2hhckNvZGUoaykpLGsmJmQ8bzspO2lmKDUxMiZyLmZsYWdzJiYoci5jaGVjaz1CKHIuY2hlY2ssbixkLHMpKSxvLT1kLHMrPWQsaylicmVhayBlfWVsc2Ugci5oZWFkJiYoci5oZWFkLm5hbWU9bnVsbCk7ci5sZW5ndGg9MCxyLm1vZGU9ODtjYXNlIDg6aWYoNDA5NiZyLmZsYWdzKXtpZigwPT09bylicmVhayBlO2ZvcihkPTA7az1uW3MrZCsrXSxyLmhlYWQmJmsmJnIubGVuZ3RoPDY1NTM2JiYoci5oZWFkLmNvbW1lbnQrPVN0cmluZy5mcm9tQ2hhckNvZGUoaykpLGsmJmQ8bzspO2lmKDUxMiZyLmZsYWdzJiYoci5jaGVjaz1CKHIuY2hlY2ssbixkLHMpKSxvLT1kLHMrPWQsaylicmVhayBlfWVsc2Ugci5oZWFkJiYoci5oZWFkLmNvbW1lbnQ9bnVsbCk7ci5tb2RlPTk7Y2FzZSA5OmlmKDUxMiZyLmZsYWdzKXtmb3IoO2w8MTY7KXtpZigwPT09bylicmVhayBlO28tLSx1Kz1uW3MrK108PGwsbCs9OH1pZih1IT09KDY1NTM1JnIuY2hlY2spKXtlLm1zZz1cImhlYWRlciBjcmMgbWlzbWF0Y2hcIixyLm1vZGU9MzA7YnJlYWt9bD11PTB9ci5oZWFkJiYoci5oZWFkLmhjcmM9ci5mbGFncz4+OSYxLHIuaGVhZC5kb25lPSEwKSxlLmFkbGVyPXIuY2hlY2s9MCxyLm1vZGU9MTI7YnJlYWs7Y2FzZSAxMDpmb3IoO2w8MzI7KXtpZigwPT09bylicmVhayBlO28tLSx1Kz1uW3MrK108PGwsbCs9OH1lLmFkbGVyPXIuY2hlY2s9TCh1KSxsPXU9MCxyLm1vZGU9MTE7Y2FzZSAxMTppZigwPT09ci5oYXZlZGljdClyZXR1cm4gZS5uZXh0X291dD1hLGUuYXZhaWxfb3V0PWgsZS5uZXh0X2luPXMsZS5hdmFpbF9pbj1vLHIuaG9sZD11LHIuYml0cz1sLDI7ZS5hZGxlcj1yLmNoZWNrPTEsci5tb2RlPTEyO2Nhc2UgMTI6aWYoNT09PXR8fDY9PT10KWJyZWFrIGU7Y2FzZSAxMzppZihyLmxhc3Qpe3U+Pj49NyZsLGwtPTcmbCxyLm1vZGU9Mjc7YnJlYWt9Zm9yKDtsPDM7KXtpZigwPT09bylicmVhayBlO28tLSx1Kz1uW3MrK108PGwsbCs9OH1zd2l0Y2goci5sYXN0PTEmdSxsLT0xLDMmKHU+Pj49MSkpe2Nhc2UgMDpyLm1vZGU9MTQ7YnJlYWs7Y2FzZSAxOmlmKGoociksci5tb2RlPTIwLDYhPT10KWJyZWFrO3U+Pj49MixsLT0yO2JyZWFrIGU7Y2FzZSAyOnIubW9kZT0xNzticmVhaztjYXNlIDM6ZS5tc2c9XCJpbnZhbGlkIGJsb2NrIHR5cGVcIixyLm1vZGU9MzB9dT4+Pj0yLGwtPTI7YnJlYWs7Y2FzZSAxNDpmb3IodT4+Pj03JmwsbC09NyZsO2w8MzI7KXtpZigwPT09bylicmVhayBlO28tLSx1Kz1uW3MrK108PGwsbCs9OH1pZigoNjU1MzUmdSkhPSh1Pj4+MTZeNjU1MzUpKXtlLm1zZz1cImludmFsaWQgc3RvcmVkIGJsb2NrIGxlbmd0aHNcIixyLm1vZGU9MzA7YnJlYWt9aWYoci5sZW5ndGg9NjU1MzUmdSxsPXU9MCxyLm1vZGU9MTUsNj09PXQpYnJlYWsgZTtjYXNlIDE1OnIubW9kZT0xNjtjYXNlIDE2OmlmKGQ9ci5sZW5ndGgpe2lmKG88ZCYmKGQ9byksaDxkJiYoZD1oKSwwPT09ZClicmVhayBlO0kuYXJyYXlTZXQoaSxuLHMsZCxhKSxvLT1kLHMrPWQsaC09ZCxhKz1kLHIubGVuZ3RoLT1kO2JyZWFrfXIubW9kZT0xMjticmVhaztjYXNlIDE3OmZvcig7bDwxNDspe2lmKDA9PT1vKWJyZWFrIGU7by0tLHUrPW5bcysrXTw8bCxsKz04fWlmKHIubmxlbj0yNTcrKDMxJnUpLHU+Pj49NSxsLT01LHIubmRpc3Q9MSsoMzEmdSksdT4+Pj01LGwtPTUsci5uY29kZT00KygxNSZ1KSx1Pj4+PTQsbC09NCwyODY8ci5ubGVufHwzMDxyLm5kaXN0KXtlLm1zZz1cInRvbyBtYW55IGxlbmd0aCBvciBkaXN0YW5jZSBzeW1ib2xzXCIsci5tb2RlPTMwO2JyZWFrfXIuaGF2ZT0wLHIubW9kZT0xODtjYXNlIDE4OmZvcig7ci5oYXZlPHIubmNvZGU7KXtmb3IoO2w8Mzspe2lmKDA9PT1vKWJyZWFrIGU7by0tLHUrPW5bcysrXTw8bCxsKz04fXIubGVuc1tBW3IuaGF2ZSsrXV09NyZ1LHU+Pj49MyxsLT0zfWZvcig7ci5oYXZlPDE5OylyLmxlbnNbQVtyLmhhdmUrK11dPTA7aWYoci5sZW5jb2RlPXIubGVuZHluLHIubGVuYml0cz03LFM9e2JpdHM6ci5sZW5iaXRzfSx4PVQoMCxyLmxlbnMsMCwxOSxyLmxlbmNvZGUsMCxyLndvcmssUyksci5sZW5iaXRzPVMuYml0cyx4KXtlLm1zZz1cImludmFsaWQgY29kZSBsZW5ndGhzIHNldFwiLHIubW9kZT0zMDticmVha31yLmhhdmU9MCxyLm1vZGU9MTk7Y2FzZSAxOTpmb3IoO3IuaGF2ZTxyLm5sZW4rci5uZGlzdDspe2Zvcig7Zz0oQz1yLmxlbmNvZGVbdSYoMTw8ci5sZW5iaXRzKS0xXSk+Pj4xNiYyNTUsYj02NTUzNSZDLCEoKF89Qz4+PjI0KTw9bCk7KXtpZigwPT09bylicmVhayBlO28tLSx1Kz1uW3MrK108PGwsbCs9OH1pZihiPDE2KXU+Pj49XyxsLT1fLHIubGVuc1tyLmhhdmUrK109YjtlbHNle2lmKDE2PT09Yil7Zm9yKHo9XysyO2w8ejspe2lmKDA9PT1vKWJyZWFrIGU7by0tLHUrPW5bcysrXTw8bCxsKz04fWlmKHU+Pj49XyxsLT1fLDA9PT1yLmhhdmUpe2UubXNnPVwiaW52YWxpZCBiaXQgbGVuZ3RoIHJlcGVhdFwiLHIubW9kZT0zMDticmVha31rPXIubGVuc1tyLmhhdmUtMV0sZD0zKygzJnUpLHU+Pj49MixsLT0yfWVsc2UgaWYoMTc9PT1iKXtmb3Ioej1fKzM7bDx6Oyl7aWYoMD09PW8pYnJlYWsgZTtvLS0sdSs9bltzKytdPDxsLGwrPTh9bC09XyxrPTAsZD0zKyg3Jih1Pj4+PV8pKSx1Pj4+PTMsbC09M31lbHNle2Zvcih6PV8rNztsPHo7KXtpZigwPT09bylicmVhayBlO28tLSx1Kz1uW3MrK108PGwsbCs9OH1sLT1fLGs9MCxkPTExKygxMjcmKHU+Pj49XykpLHU+Pj49NyxsLT03fWlmKHIuaGF2ZStkPnIubmxlbityLm5kaXN0KXtlLm1zZz1cImludmFsaWQgYml0IGxlbmd0aCByZXBlYXRcIixyLm1vZGU9MzA7YnJlYWt9Zm9yKDtkLS07KXIubGVuc1tyLmhhdmUrK109a319aWYoMzA9PT1yLm1vZGUpYnJlYWs7aWYoMD09PXIubGVuc1syNTZdKXtlLm1zZz1cImludmFsaWQgY29kZSAtLSBtaXNzaW5nIGVuZC1vZi1ibG9ja1wiLHIubW9kZT0zMDticmVha31pZihyLmxlbmJpdHM9OSxTPXtiaXRzOnIubGVuYml0c30seD1UKEQsci5sZW5zLDAsci5ubGVuLHIubGVuY29kZSwwLHIud29yayxTKSxyLmxlbmJpdHM9Uy5iaXRzLHgpe2UubXNnPVwiaW52YWxpZCBsaXRlcmFsL2xlbmd0aHMgc2V0XCIsci5tb2RlPTMwO2JyZWFrfWlmKHIuZGlzdGJpdHM9NixyLmRpc3Rjb2RlPXIuZGlzdGR5bixTPXtiaXRzOnIuZGlzdGJpdHN9LHg9VChGLHIubGVucyxyLm5sZW4sci5uZGlzdCxyLmRpc3Rjb2RlLDAsci53b3JrLFMpLHIuZGlzdGJpdHM9Uy5iaXRzLHgpe2UubXNnPVwiaW52YWxpZCBkaXN0YW5jZXMgc2V0XCIsci5tb2RlPTMwO2JyZWFrfWlmKHIubW9kZT0yMCw2PT09dClicmVhayBlO2Nhc2UgMjA6ci5tb2RlPTIxO2Nhc2UgMjE6aWYoNjw9byYmMjU4PD1oKXtlLm5leHRfb3V0PWEsZS5hdmFpbF9vdXQ9aCxlLm5leHRfaW49cyxlLmF2YWlsX2luPW8sci5ob2xkPXUsci5iaXRzPWwsUihlLGMpLGE9ZS5uZXh0X291dCxpPWUub3V0cHV0LGg9ZS5hdmFpbF9vdXQscz1lLm5leHRfaW4sbj1lLmlucHV0LG89ZS5hdmFpbF9pbix1PXIuaG9sZCxsPXIuYml0cywxMj09PXIubW9kZSYmKHIuYmFjaz0tMSk7YnJlYWt9Zm9yKHIuYmFjaz0wO2c9KEM9ci5sZW5jb2RlW3UmKDE8PHIubGVuYml0cyktMV0pPj4+MTYmMjU1LGI9NjU1MzUmQywhKChfPUM+Pj4yNCk8PWwpOyl7aWYoMD09PW8pYnJlYWsgZTtvLS0sdSs9bltzKytdPDxsLGwrPTh9aWYoZyYmMD09KDI0MCZnKSl7Zm9yKHY9Xyx5PWcsdz1iO2c9KEM9ci5sZW5jb2RlW3crKCh1JigxPDx2K3kpLTEpPj52KV0pPj4+MTYmMjU1LGI9NjU1MzUmQywhKHYrKF89Qz4+PjI0KTw9bCk7KXtpZigwPT09bylicmVhayBlO28tLSx1Kz1uW3MrK108PGwsbCs9OH11Pj4+PXYsbC09dixyLmJhY2srPXZ9aWYodT4+Pj1fLGwtPV8sci5iYWNrKz1fLHIubGVuZ3RoPWIsMD09PWcpe3IubW9kZT0yNjticmVha31pZigzMiZnKXtyLmJhY2s9LTEsci5tb2RlPTEyO2JyZWFrfWlmKDY0Jmcpe2UubXNnPVwiaW52YWxpZCBsaXRlcmFsL2xlbmd0aCBjb2RlXCIsci5tb2RlPTMwO2JyZWFrfXIuZXh0cmE9MTUmZyxyLm1vZGU9MjI7Y2FzZSAyMjppZihyLmV4dHJhKXtmb3Ioej1yLmV4dHJhO2w8ejspe2lmKDA9PT1vKWJyZWFrIGU7by0tLHUrPW5bcysrXTw8bCxsKz04fXIubGVuZ3RoKz11JigxPDxyLmV4dHJhKS0xLHU+Pj49ci5leHRyYSxsLT1yLmV4dHJhLHIuYmFjays9ci5leHRyYX1yLndhcz1yLmxlbmd0aCxyLm1vZGU9MjM7Y2FzZSAyMzpmb3IoO2c9KEM9ci5kaXN0Y29kZVt1JigxPDxyLmRpc3RiaXRzKS0xXSk+Pj4xNiYyNTUsYj02NTUzNSZDLCEoKF89Qz4+PjI0KTw9bCk7KXtpZigwPT09bylicmVhayBlO28tLSx1Kz1uW3MrK108PGwsbCs9OH1pZigwPT0oMjQwJmcpKXtmb3Iodj1fLHk9Zyx3PWI7Zz0oQz1yLmRpc3Rjb2RlW3crKCh1JigxPDx2K3kpLTEpPj52KV0pPj4+MTYmMjU1LGI9NjU1MzUmQywhKHYrKF89Qz4+PjI0KTw9bCk7KXtpZigwPT09bylicmVhayBlO28tLSx1Kz1uW3MrK108PGwsbCs9OH11Pj4+PXYsbC09dixyLmJhY2srPXZ9aWYodT4+Pj1fLGwtPV8sci5iYWNrKz1fLDY0Jmcpe2UubXNnPVwiaW52YWxpZCBkaXN0YW5jZSBjb2RlXCIsci5tb2RlPTMwO2JyZWFrfXIub2Zmc2V0PWIsci5leHRyYT0xNSZnLHIubW9kZT0yNDtjYXNlIDI0OmlmKHIuZXh0cmEpe2Zvcih6PXIuZXh0cmE7bDx6Oyl7aWYoMD09PW8pYnJlYWsgZTtvLS0sdSs9bltzKytdPDxsLGwrPTh9ci5vZmZzZXQrPXUmKDE8PHIuZXh0cmEpLTEsdT4+Pj1yLmV4dHJhLGwtPXIuZXh0cmEsci5iYWNrKz1yLmV4dHJhfWlmKHIub2Zmc2V0PnIuZG1heCl7ZS5tc2c9XCJpbnZhbGlkIGRpc3RhbmNlIHRvbyBmYXIgYmFja1wiLHIubW9kZT0zMDticmVha31yLm1vZGU9MjU7Y2FzZSAyNTppZigwPT09aClicmVhayBlO2lmKGQ9Yy1oLHIub2Zmc2V0PmQpe2lmKChkPXIub2Zmc2V0LWQpPnIud2hhdmUmJnIuc2FuZSl7ZS5tc2c9XCJpbnZhbGlkIGRpc3RhbmNlIHRvbyBmYXIgYmFja1wiLHIubW9kZT0zMDticmVha31wPWQ+ci53bmV4dD8oZC09ci53bmV4dCxyLndzaXplLWQpOnIud25leHQtZCxkPnIubGVuZ3RoJiYoZD1yLmxlbmd0aCksbT1yLndpbmRvd31lbHNlIG09aSxwPWEtci5vZmZzZXQsZD1yLmxlbmd0aDtmb3IoaDxkJiYoZD1oKSxoLT1kLHIubGVuZ3RoLT1kO2lbYSsrXT1tW3ArK10sLS1kOyk7MD09PXIubGVuZ3RoJiYoci5tb2RlPTIxKTticmVhaztjYXNlIDI2OmlmKDA9PT1oKWJyZWFrIGU7aVthKytdPXIubGVuZ3RoLGgtLSxyLm1vZGU9MjE7YnJlYWs7Y2FzZSAyNzppZihyLndyYXApe2Zvcig7bDwzMjspe2lmKDA9PT1vKWJyZWFrIGU7by0tLHV8PW5bcysrXTw8bCxsKz04fWlmKGMtPWgsZS50b3RhbF9vdXQrPWMsci50b3RhbCs9YyxjJiYoZS5hZGxlcj1yLmNoZWNrPXIuZmxhZ3M/QihyLmNoZWNrLGksYyxhLWMpOk8oci5jaGVjayxpLGMsYS1jKSksYz1oLChyLmZsYWdzP3U6TCh1KSkhPT1yLmNoZWNrKXtlLm1zZz1cImluY29ycmVjdCBkYXRhIGNoZWNrXCIsci5tb2RlPTMwO2JyZWFrfWw9dT0wfXIubW9kZT0yODtjYXNlIDI4OmlmKHIud3JhcCYmci5mbGFncyl7Zm9yKDtsPDMyOyl7aWYoMD09PW8pYnJlYWsgZTtvLS0sdSs9bltzKytdPDxsLGwrPTh9aWYodSE9PSg0Mjk0OTY3Mjk1JnIudG90YWwpKXtlLm1zZz1cImluY29ycmVjdCBsZW5ndGggY2hlY2tcIixyLm1vZGU9MzA7YnJlYWt9bD11PTB9ci5tb2RlPTI5O2Nhc2UgMjk6eD0xO2JyZWFrIGU7Y2FzZSAzMDp4PS0zO2JyZWFrIGU7Y2FzZSAzMTpyZXR1cm4tNDtjYXNlIDMyOmRlZmF1bHQ6cmV0dXJuIFV9cmV0dXJuIGUubmV4dF9vdXQ9YSxlLmF2YWlsX291dD1oLGUubmV4dF9pbj1zLGUuYXZhaWxfaW49byxyLmhvbGQ9dSxyLmJpdHM9bCwoci53c2l6ZXx8YyE9PWUuYXZhaWxfb3V0JiZyLm1vZGU8MzAmJihyLm1vZGU8Mjd8fDQhPT10KSkmJlooZSxlLm91dHB1dCxlLm5leHRfb3V0LGMtZS5hdmFpbF9vdXQpPyhyLm1vZGU9MzEsLTQpOihmLT1lLmF2YWlsX2luLGMtPWUuYXZhaWxfb3V0LGUudG90YWxfaW4rPWYsZS50b3RhbF9vdXQrPWMsci50b3RhbCs9YyxyLndyYXAmJmMmJihlLmFkbGVyPXIuY2hlY2s9ci5mbGFncz9CKHIuY2hlY2ssaSxjLGUubmV4dF9vdXQtYyk6TyhyLmNoZWNrLGksYyxlLm5leHRfb3V0LWMpKSxlLmRhdGFfdHlwZT1yLmJpdHMrKHIubGFzdD82NDowKSsoMTI9PT1yLm1vZGU/MTI4OjApKygyMD09PXIubW9kZXx8MTU9PT1yLm1vZGU/MjU2OjApLCgwPT1mJiYwPT09Y3x8ND09PXQpJiZ4PT09TiYmKHg9LTUpLHgpfSxyLmluZmxhdGVFbmQ9ZnVuY3Rpb24oZSl7aWYoIWV8fCFlLnN0YXRlKXJldHVybiBVO3ZhciB0PWUuc3RhdGU7cmV0dXJuIHQud2luZG93JiYodC53aW5kb3c9bnVsbCksZS5zdGF0ZT1udWxsLE59LHIuaW5mbGF0ZUdldEhlYWRlcj1mdW5jdGlvbihlLHQpe3ZhciByO3JldHVybiBlJiZlLnN0YXRlPzA9PSgyJihyPWUuc3RhdGUpLndyYXApP1U6KChyLmhlYWQ9dCkuZG9uZT0hMSxOKTpVfSxyLmluZmxhdGVTZXREaWN0aW9uYXJ5PWZ1bmN0aW9uKGUsdCl7dmFyIHIsbj10Lmxlbmd0aDtyZXR1cm4gZSYmZS5zdGF0ZT8wIT09KHI9ZS5zdGF0ZSkud3JhcCYmMTEhPT1yLm1vZGU/VToxMT09PXIubW9kZSYmTygxLHQsbiwwKSE9PXIuY2hlY2s/LTM6WihlLHQsbixuKT8oci5tb2RlPTMxLC00KTooci5oYXZlZGljdD0xLE4pOlV9LHIuaW5mbGF0ZUluZm89XCJwYWtvIGluZmxhdGUgKGZyb20gTm9kZWNhIHByb2plY3QpXCJ9LHtcIi4uL3V0aWxzL2NvbW1vblwiOjQxLFwiLi9hZGxlcjMyXCI6NDMsXCIuL2NyYzMyXCI6NDUsXCIuL2luZmZhc3RcIjo0OCxcIi4vaW5mdHJlZXNcIjo1MH1dLDUwOltmdW5jdGlvbihlLHQscil7XCJ1c2Ugc3RyaWN0XCI7dmFyIEQ9ZShcIi4uL3V0aWxzL2NvbW1vblwiKSxGPVszLDQsNSw2LDcsOCw5LDEwLDExLDEzLDE1LDE3LDE5LDIzLDI3LDMxLDM1LDQzLDUxLDU5LDY3LDgzLDk5LDExNSwxMzEsMTYzLDE5NSwyMjcsMjU4LDAsMF0sTj1bMTYsMTYsMTYsMTYsMTYsMTYsMTYsMTYsMTcsMTcsMTcsMTcsMTgsMTgsMTgsMTgsMTksMTksMTksMTksMjAsMjAsMjAsMjAsMjEsMjEsMjEsMjEsMTYsNzIsNzhdLFU9WzEsMiwzLDQsNSw3LDksMTMsMTcsMjUsMzMsNDksNjUsOTcsMTI5LDE5MywyNTcsMzg1LDUxMyw3NjksMTAyNSwxNTM3LDIwNDksMzA3Myw0MDk3LDYxNDUsODE5MywxMjI4OSwxNjM4NSwyNDU3NywwLDBdLFA9WzE2LDE2LDE2LDE2LDE3LDE3LDE4LDE4LDE5LDE5LDIwLDIwLDIxLDIxLDIyLDIyLDIzLDIzLDI0LDI0LDI1LDI1LDI2LDI2LDI3LDI3LDI4LDI4LDI5LDI5LDY0LDY0XTt0LmV4cG9ydHM9ZnVuY3Rpb24oZSx0LHIsbixpLHMsYSxvKXt2YXIgaCx1LGwsZixjLGQscCxtLF8sZz1vLmJpdHMsYj0wLHY9MCx5PTAsdz0wLGs9MCx4PTAsUz0wLHo9MCxDPTAsRT0wLEE9bnVsbCxJPTAsTz1uZXcgRC5CdWYxNigxNiksQj1uZXcgRC5CdWYxNigxNiksUj1udWxsLFQ9MDtmb3IoYj0wO2I8PTE1O2IrKylPW2JdPTA7Zm9yKHY9MDt2PG47disrKU9bdFtyK3ZdXSsrO2ZvcihrPWcsdz0xNTsxPD13JiYwPT09T1t3XTt3LS0pO2lmKHc8ayYmKGs9dyksMD09PXcpcmV0dXJuIGlbcysrXT0yMDk3MTUyMCxpW3MrK109MjA5NzE1MjAsby5iaXRzPTEsMDtmb3IoeT0xO3k8dyYmMD09PU9beV07eSsrKTtmb3Ioazx5JiYoaz15KSxiPXo9MTtiPD0xNTtiKyspaWYoejw8PTEsKHotPU9bYl0pPDApcmV0dXJuLTE7aWYoMDx6JiYoMD09PWV8fDEhPT13KSlyZXR1cm4tMTtmb3IoQlsxXT0wLGI9MTtiPDE1O2IrKylCW2IrMV09QltiXStPW2JdO2Zvcih2PTA7djxuO3YrKykwIT09dFtyK3ZdJiYoYVtCW3Rbcit2XV0rK109dik7aWYoZD0wPT09ZT8oQT1SPWEsMTkpOjE9PT1lPyhBPUYsSS09MjU3LFI9TixULT0yNTcsMjU2KTooQT1VLFI9UCwtMSksYj15LGM9cyxTPXY9RT0wLGw9LTEsZj0oQz0xPDwoeD1rKSktMSwxPT09ZSYmODUyPEN8fDI9PT1lJiY1OTI8QylyZXR1cm4gMTtmb3IoOzspe2ZvcihwPWItUyxfPWFbdl08ZD8obT0wLGFbdl0pOmFbdl0+ZD8obT1SW1QrYVt2XV0sQVtJK2Fbdl1dKToobT05NiwwKSxoPTE8PGItUyx5PXU9MTw8eDtpW2MrKEU+PlMpKyh1LT1oKV09cDw8MjR8bTw8MTZ8X3wwLDAhPT11Oyk7Zm9yKGg9MTw8Yi0xO0UmaDspaD4+PTE7aWYoMCE9PWg/KEUmPWgtMSxFKz1oKTpFPTAsdisrLDA9PS0tT1tiXSl7aWYoYj09PXcpYnJlYWs7Yj10W3IrYVt2XV19aWYoazxiJiYoRSZmKSE9PWwpe2ZvcigwPT09UyYmKFM9ayksYys9eSx6PTE8PCh4PWItUyk7eCtTPHcmJiEoKHotPU9beCtTXSk8PTApOyl4Kyssejw8PTE7aWYoQys9MTw8eCwxPT09ZSYmODUyPEN8fDI9PT1lJiY1OTI8QylyZXR1cm4gMTtpW2w9RSZmXT1rPDwyNHx4PDwxNnxjLXN8MH19cmV0dXJuIDAhPT1FJiYoaVtjK0VdPWItUzw8MjR8NjQ8PDE2fDApLG8uYml0cz1rLDB9fSx7XCIuLi91dGlscy9jb21tb25cIjo0MX1dLDUxOltmdW5jdGlvbihlLHQscil7XCJ1c2Ugc3RyaWN0XCI7dC5leHBvcnRzPXsyOlwibmVlZCBkaWN0aW9uYXJ5XCIsMTpcInN0cmVhbSBlbmRcIiwwOlwiXCIsXCItMVwiOlwiZmlsZSBlcnJvclwiLFwiLTJcIjpcInN0cmVhbSBlcnJvclwiLFwiLTNcIjpcImRhdGEgZXJyb3JcIixcIi00XCI6XCJpbnN1ZmZpY2llbnQgbWVtb3J5XCIsXCItNVwiOlwiYnVmZmVyIGVycm9yXCIsXCItNlwiOlwiaW5jb21wYXRpYmxlIHZlcnNpb25cIn19LHt9XSw1MjpbZnVuY3Rpb24oZSx0LHIpe1widXNlIHN0cmljdFwiO3ZhciBpPWUoXCIuLi91dGlscy9jb21tb25cIiksbz0wLGg9MTtmdW5jdGlvbiBuKGUpe2Zvcih2YXIgdD1lLmxlbmd0aDswPD0tLXQ7KWVbdF09MH12YXIgcz0wLGE9MjksdT0yNTYsbD11KzErYSxmPTMwLGM9MTksXz0yKmwrMSxnPTE1LGQ9MTYscD03LG09MjU2LGI9MTYsdj0xNyx5PTE4LHc9WzAsMCwwLDAsMCwwLDAsMCwxLDEsMSwxLDIsMiwyLDIsMywzLDMsMyw0LDQsNCw0LDUsNSw1LDUsMF0saz1bMCwwLDAsMCwxLDEsMiwyLDMsMyw0LDQsNSw1LDYsNiw3LDcsOCw4LDksOSwxMCwxMCwxMSwxMSwxMiwxMiwxMywxM10seD1bMCwwLDAsMCwwLDAsMCwwLDAsMCwwLDAsMCwwLDAsMCwyLDMsN10sUz1bMTYsMTcsMTgsMCw4LDcsOSw2LDEwLDUsMTEsNCwxMiwzLDEzLDIsMTQsMSwxNV0sej1uZXcgQXJyYXkoMioobCsyKSk7bih6KTt2YXIgQz1uZXcgQXJyYXkoMipmKTtuKEMpO3ZhciBFPW5ldyBBcnJheSg1MTIpO24oRSk7dmFyIEE9bmV3IEFycmF5KDI1Nik7bihBKTt2YXIgST1uZXcgQXJyYXkoYSk7bihJKTt2YXIgTyxCLFIsVD1uZXcgQXJyYXkoZik7ZnVuY3Rpb24gRChlLHQscixuLGkpe3RoaXMuc3RhdGljX3RyZWU9ZSx0aGlzLmV4dHJhX2JpdHM9dCx0aGlzLmV4dHJhX2Jhc2U9cix0aGlzLmVsZW1zPW4sdGhpcy5tYXhfbGVuZ3RoPWksdGhpcy5oYXNfc3RyZWU9ZSYmZS5sZW5ndGh9ZnVuY3Rpb24gRihlLHQpe3RoaXMuZHluX3RyZWU9ZSx0aGlzLm1heF9jb2RlPTAsdGhpcy5zdGF0X2Rlc2M9dH1mdW5jdGlvbiBOKGUpe3JldHVybiBlPDI1Nj9FW2VdOkVbMjU2KyhlPj4+NyldfWZ1bmN0aW9uIFUoZSx0KXtlLnBlbmRpbmdfYnVmW2UucGVuZGluZysrXT0yNTUmdCxlLnBlbmRpbmdfYnVmW2UucGVuZGluZysrXT10Pj4+OCYyNTV9ZnVuY3Rpb24gUChlLHQscil7ZS5iaV92YWxpZD5kLXI/KGUuYmlfYnVmfD10PDxlLmJpX3ZhbGlkJjY1NTM1LFUoZSxlLmJpX2J1ZiksZS5iaV9idWY9dD4+ZC1lLmJpX3ZhbGlkLGUuYmlfdmFsaWQrPXItZCk6KGUuYmlfYnVmfD10PDxlLmJpX3ZhbGlkJjY1NTM1LGUuYmlfdmFsaWQrPXIpfWZ1bmN0aW9uIEwoZSx0LHIpe1AoZSxyWzIqdF0sclsyKnQrMV0pfWZ1bmN0aW9uIGooZSx0KXtmb3IodmFyIHI9MDtyfD0xJmUsZT4+Pj0xLHI8PD0xLDA8LS10Oyk7cmV0dXJuIHI+Pj4xfWZ1bmN0aW9uIFooZSx0LHIpe3ZhciBuLGkscz1uZXcgQXJyYXkoZysxKSxhPTA7Zm9yKG49MTtuPD1nO24rKylzW25dPWE9YStyW24tMV08PDE7Zm9yKGk9MDtpPD10O2krKyl7dmFyIG89ZVsyKmkrMV07MCE9PW8mJihlWzIqaV09aihzW29dKyssbykpfX1mdW5jdGlvbiBXKGUpe3ZhciB0O2Zvcih0PTA7dDxsO3QrKyllLmR5bl9sdHJlZVsyKnRdPTA7Zm9yKHQ9MDt0PGY7dCsrKWUuZHluX2R0cmVlWzIqdF09MDtmb3IodD0wO3Q8Yzt0KyspZS5ibF90cmVlWzIqdF09MDtlLmR5bl9sdHJlZVsyKm1dPTEsZS5vcHRfbGVuPWUuc3RhdGljX2xlbj0wLGUubGFzdF9saXQ9ZS5tYXRjaGVzPTB9ZnVuY3Rpb24gTShlKXs4PGUuYmlfdmFsaWQ/VShlLGUuYmlfYnVmKTowPGUuYmlfdmFsaWQmJihlLnBlbmRpbmdfYnVmW2UucGVuZGluZysrXT1lLmJpX2J1ZiksZS5iaV9idWY9MCxlLmJpX3ZhbGlkPTB9ZnVuY3Rpb24gSChlLHQscixuKXt2YXIgaT0yKnQscz0yKnI7cmV0dXJuIGVbaV08ZVtzXXx8ZVtpXT09PWVbc10mJm5bdF08PW5bcl19ZnVuY3Rpb24gRyhlLHQscil7Zm9yKHZhciBuPWUuaGVhcFtyXSxpPXI8PDE7aTw9ZS5oZWFwX2xlbiYmKGk8ZS5oZWFwX2xlbiYmSCh0LGUuaGVhcFtpKzFdLGUuaGVhcFtpXSxlLmRlcHRoKSYmaSsrLCFIKHQsbixlLmhlYXBbaV0sZS5kZXB0aCkpOyllLmhlYXBbcl09ZS5oZWFwW2ldLHI9aSxpPDw9MTtlLmhlYXBbcl09bn1mdW5jdGlvbiBLKGUsdCxyKXt2YXIgbixpLHMsYSxvPTA7aWYoMCE9PWUubGFzdF9saXQpZm9yKDtuPWUucGVuZGluZ19idWZbZS5kX2J1ZisyKm9dPDw4fGUucGVuZGluZ19idWZbZS5kX2J1ZisyKm8rMV0saT1lLnBlbmRpbmdfYnVmW2UubF9idWYrb10sbysrLDA9PT1uP0woZSxpLHQpOihMKGUsKHM9QVtpXSkrdSsxLHQpLDAhPT0oYT13W3NdKSYmUChlLGktPUlbc10sYSksTChlLHM9TigtLW4pLHIpLDAhPT0oYT1rW3NdKSYmUChlLG4tPVRbc10sYSkpLG88ZS5sYXN0X2xpdDspO0woZSxtLHQpfWZ1bmN0aW9uIFkoZSx0KXt2YXIgcixuLGkscz10LmR5bl90cmVlLGE9dC5zdGF0X2Rlc2Muc3RhdGljX3RyZWUsbz10LnN0YXRfZGVzYy5oYXNfc3RyZWUsaD10LnN0YXRfZGVzYy5lbGVtcyx1PS0xO2ZvcihlLmhlYXBfbGVuPTAsZS5oZWFwX21heD1fLHI9MDtyPGg7cisrKTAhPT1zWzIqcl0/KGUuaGVhcFsrK2UuaGVhcF9sZW5dPXU9cixlLmRlcHRoW3JdPTApOnNbMipyKzFdPTA7Zm9yKDtlLmhlYXBfbGVuPDI7KXNbMiooaT1lLmhlYXBbKytlLmhlYXBfbGVuXT11PDI/Kyt1OjApXT0xLGUuZGVwdGhbaV09MCxlLm9wdF9sZW4tLSxvJiYoZS5zdGF0aWNfbGVuLT1hWzIqaSsxXSk7Zm9yKHQubWF4X2NvZGU9dSxyPWUuaGVhcF9sZW4+PjE7MTw9cjtyLS0pRyhlLHMscik7Zm9yKGk9aDtyPWUuaGVhcFsxXSxlLmhlYXBbMV09ZS5oZWFwW2UuaGVhcF9sZW4tLV0sRyhlLHMsMSksbj1lLmhlYXBbMV0sZS5oZWFwWy0tZS5oZWFwX21heF09cixlLmhlYXBbLS1lLmhlYXBfbWF4XT1uLHNbMippXT1zWzIqcl0rc1syKm5dLGUuZGVwdGhbaV09KGUuZGVwdGhbcl0+PWUuZGVwdGhbbl0/ZS5kZXB0aFtyXTplLmRlcHRoW25dKSsxLHNbMipyKzFdPXNbMipuKzFdPWksZS5oZWFwWzFdPWkrKyxHKGUscywxKSwyPD1lLmhlYXBfbGVuOyk7ZS5oZWFwWy0tZS5oZWFwX21heF09ZS5oZWFwWzFdLGZ1bmN0aW9uKGUsdCl7dmFyIHIsbixpLHMsYSxvLGg9dC5keW5fdHJlZSx1PXQubWF4X2NvZGUsbD10LnN0YXRfZGVzYy5zdGF0aWNfdHJlZSxmPXQuc3RhdF9kZXNjLmhhc19zdHJlZSxjPXQuc3RhdF9kZXNjLmV4dHJhX2JpdHMsZD10LnN0YXRfZGVzYy5leHRyYV9iYXNlLHA9dC5zdGF0X2Rlc2MubWF4X2xlbmd0aCxtPTA7Zm9yKHM9MDtzPD1nO3MrKyllLmJsX2NvdW50W3NdPTA7Zm9yKGhbMiplLmhlYXBbZS5oZWFwX21heF0rMV09MCxyPWUuaGVhcF9tYXgrMTtyPF87cisrKXA8KHM9aFsyKmhbMioobj1lLmhlYXBbcl0pKzFdKzFdKzEpJiYocz1wLG0rKyksaFsyKm4rMV09cyx1PG58fChlLmJsX2NvdW50W3NdKyssYT0wLGQ8PW4mJihhPWNbbi1kXSksbz1oWzIqbl0sZS5vcHRfbGVuKz1vKihzK2EpLGYmJihlLnN0YXRpY19sZW4rPW8qKGxbMipuKzFdK2EpKSk7aWYoMCE9PW0pe2Rve2ZvcihzPXAtMTswPT09ZS5ibF9jb3VudFtzXTspcy0tO2UuYmxfY291bnRbc10tLSxlLmJsX2NvdW50W3MrMV0rPTIsZS5ibF9jb3VudFtwXS0tLG0tPTJ9d2hpbGUoMDxtKTtmb3Iocz1wOzAhPT1zO3MtLSlmb3Iobj1lLmJsX2NvdW50W3NdOzAhPT1uOyl1PChpPWUuaGVhcFstLXJdKXx8KGhbMippKzFdIT09cyYmKGUub3B0X2xlbis9KHMtaFsyKmkrMV0pKmhbMippXSxoWzIqaSsxXT1zKSxuLS0pfX0oZSx0KSxaKHMsdSxlLmJsX2NvdW50KX1mdW5jdGlvbiBYKGUsdCxyKXt2YXIgbixpLHM9LTEsYT10WzFdLG89MCxoPTcsdT00O2ZvcigwPT09YSYmKGg9MTM4LHU9MyksdFsyKihyKzEpKzFdPTY1NTM1LG49MDtuPD1yO24rKylpPWEsYT10WzIqKG4rMSkrMV0sKytvPGgmJmk9PT1hfHwobzx1P2UuYmxfdHJlZVsyKmldKz1vOjAhPT1pPyhpIT09cyYmZS5ibF90cmVlWzIqaV0rKyxlLmJsX3RyZWVbMipiXSsrKTpvPD0xMD9lLmJsX3RyZWVbMip2XSsrOmUuYmxfdHJlZVsyKnldKysscz1pLHU9KG89MCk9PT1hPyhoPTEzOCwzKTppPT09YT8oaD02LDMpOihoPTcsNCkpfWZ1bmN0aW9uIFYoZSx0LHIpe3ZhciBuLGkscz0tMSxhPXRbMV0sbz0wLGg9Nyx1PTQ7Zm9yKDA9PT1hJiYoaD0xMzgsdT0zKSxuPTA7bjw9cjtuKyspaWYoaT1hLGE9dFsyKihuKzEpKzFdLCEoKytvPGgmJmk9PT1hKSl7aWYobzx1KWZvcig7TChlLGksZS5ibF90cmVlKSwwIT0tLW87KTtlbHNlIDAhPT1pPyhpIT09cyYmKEwoZSxpLGUuYmxfdHJlZSksby0tKSxMKGUsYixlLmJsX3RyZWUpLFAoZSxvLTMsMikpOm88PTEwPyhMKGUsdixlLmJsX3RyZWUpLFAoZSxvLTMsMykpOihMKGUseSxlLmJsX3RyZWUpLFAoZSxvLTExLDcpKTtzPWksdT0obz0wKT09PWE/KGg9MTM4LDMpOmk9PT1hPyhoPTYsMyk6KGg9Nyw0KX19bihUKTt2YXIgcT0hMTtmdW5jdGlvbiBKKGUsdCxyLG4pe1AoZSwoczw8MSkrKG4/MTowKSwzKSxmdW5jdGlvbihlLHQscixuKXtNKGUpLG4mJihVKGUsciksVShlLH5yKSksaS5hcnJheVNldChlLnBlbmRpbmdfYnVmLGUud2luZG93LHQscixlLnBlbmRpbmcpLGUucGVuZGluZys9cn0oZSx0LHIsITApfXIuX3RyX2luaXQ9ZnVuY3Rpb24oZSl7cXx8KGZ1bmN0aW9uKCl7dmFyIGUsdCxyLG4saSxzPW5ldyBBcnJheShnKzEpO2ZvcihuPXI9MDtuPGEtMTtuKyspZm9yKElbbl09cixlPTA7ZTwxPDx3W25dO2UrKylBW3IrK109bjtmb3IoQVtyLTFdPW4sbj1pPTA7bjwxNjtuKyspZm9yKFRbbl09aSxlPTA7ZTwxPDxrW25dO2UrKylFW2krK109bjtmb3IoaT4+PTc7bjxmO24rKylmb3IoVFtuXT1pPDw3LGU9MDtlPDE8PGtbbl0tNztlKyspRVsyNTYraSsrXT1uO2Zvcih0PTA7dDw9Zzt0Kyspc1t0XT0wO2ZvcihlPTA7ZTw9MTQzOyl6WzIqZSsxXT04LGUrKyxzWzhdKys7Zm9yKDtlPD0yNTU7KXpbMiplKzFdPTksZSsrLHNbOV0rKztmb3IoO2U8PTI3OTspelsyKmUrMV09NyxlKyssc1s3XSsrO2Zvcig7ZTw9Mjg3Oyl6WzIqZSsxXT04LGUrKyxzWzhdKys7Zm9yKFooeixsKzEscyksZT0wO2U8ZjtlKyspQ1syKmUrMV09NSxDWzIqZV09aihlLDUpO089bmV3IEQoeix3LHUrMSxsLGcpLEI9bmV3IEQoQyxrLDAsZixnKSxSPW5ldyBEKG5ldyBBcnJheSgwKSx4LDAsYyxwKX0oKSxxPSEwKSxlLmxfZGVzYz1uZXcgRihlLmR5bl9sdHJlZSxPKSxlLmRfZGVzYz1uZXcgRihlLmR5bl9kdHJlZSxCKSxlLmJsX2Rlc2M9bmV3IEYoZS5ibF90cmVlLFIpLGUuYmlfYnVmPTAsZS5iaV92YWxpZD0wLFcoZSl9LHIuX3RyX3N0b3JlZF9ibG9jaz1KLHIuX3RyX2ZsdXNoX2Jsb2NrPWZ1bmN0aW9uKGUsdCxyLG4pe3ZhciBpLHMsYT0wOzA8ZS5sZXZlbD8oMj09PWUuc3RybS5kYXRhX3R5cGUmJihlLnN0cm0uZGF0YV90eXBlPWZ1bmN0aW9uKGUpe3ZhciB0LHI9NDA5MzYyNDQ0Nztmb3IodD0wO3Q8PTMxO3QrKyxyPj4+PTEpaWYoMSZyJiYwIT09ZS5keW5fbHRyZWVbMip0XSlyZXR1cm4gbztpZigwIT09ZS5keW5fbHRyZWVbMThdfHwwIT09ZS5keW5fbHRyZWVbMjBdfHwwIT09ZS5keW5fbHRyZWVbMjZdKXJldHVybiBoO2Zvcih0PTMyO3Q8dTt0KyspaWYoMCE9PWUuZHluX2x0cmVlWzIqdF0pcmV0dXJuIGg7cmV0dXJuIG99KGUpKSxZKGUsZS5sX2Rlc2MpLFkoZSxlLmRfZGVzYyksYT1mdW5jdGlvbihlKXt2YXIgdDtmb3IoWChlLGUuZHluX2x0cmVlLGUubF9kZXNjLm1heF9jb2RlKSxYKGUsZS5keW5fZHRyZWUsZS5kX2Rlc2MubWF4X2NvZGUpLFkoZSxlLmJsX2Rlc2MpLHQ9Yy0xOzM8PXQmJjA9PT1lLmJsX3RyZWVbMipTW3RdKzFdO3QtLSk7cmV0dXJuIGUub3B0X2xlbis9MyoodCsxKSs1KzUrNCx0fShlKSxpPWUub3B0X2xlbiszKzc+Pj4zLChzPWUuc3RhdGljX2xlbiszKzc+Pj4zKTw9aSYmKGk9cykpOmk9cz1yKzUscis0PD1pJiYtMSE9PXQ/SihlLHQscixuKTo0PT09ZS5zdHJhdGVneXx8cz09PWk/KFAoZSwyKyhuPzE6MCksMyksSyhlLHosQykpOihQKGUsNCsobj8xOjApLDMpLGZ1bmN0aW9uKGUsdCxyLG4pe3ZhciBpO2ZvcihQKGUsdC0yNTcsNSksUChlLHItMSw1KSxQKGUsbi00LDQpLGk9MDtpPG47aSsrKVAoZSxlLmJsX3RyZWVbMipTW2ldKzFdLDMpO1YoZSxlLmR5bl9sdHJlZSx0LTEpLFYoZSxlLmR5bl9kdHJlZSxyLTEpfShlLGUubF9kZXNjLm1heF9jb2RlKzEsZS5kX2Rlc2MubWF4X2NvZGUrMSxhKzEpLEsoZSxlLmR5bl9sdHJlZSxlLmR5bl9kdHJlZSkpLFcoZSksbiYmTShlKX0sci5fdHJfdGFsbHk9ZnVuY3Rpb24oZSx0LHIpe3JldHVybiBlLnBlbmRpbmdfYnVmW2UuZF9idWYrMiplLmxhc3RfbGl0XT10Pj4+OCYyNTUsZS5wZW5kaW5nX2J1ZltlLmRfYnVmKzIqZS5sYXN0X2xpdCsxXT0yNTUmdCxlLnBlbmRpbmdfYnVmW2UubF9idWYrZS5sYXN0X2xpdF09MjU1JnIsZS5sYXN0X2xpdCsrLDA9PT10P2UuZHluX2x0cmVlWzIqcl0rKzooZS5tYXRjaGVzKyssdC0tLGUuZHluX2x0cmVlWzIqKEFbcl0rdSsxKV0rKyxlLmR5bl9kdHJlZVsyKk4odCldKyspLGUubGFzdF9saXQ9PT1lLmxpdF9idWZzaXplLTF9LHIuX3RyX2FsaWduPWZ1bmN0aW9uKGUpe1AoZSwyLDMpLEwoZSxtLHopLGZ1bmN0aW9uKGUpezE2PT09ZS5iaV92YWxpZD8oVShlLGUuYmlfYnVmKSxlLmJpX2J1Zj0wLGUuYmlfdmFsaWQ9MCk6ODw9ZS5iaV92YWxpZCYmKGUucGVuZGluZ19idWZbZS5wZW5kaW5nKytdPTI1NSZlLmJpX2J1ZixlLmJpX2J1Zj4+PTgsZS5iaV92YWxpZC09OCl9KGUpfX0se1wiLi4vdXRpbHMvY29tbW9uXCI6NDF9XSw1MzpbZnVuY3Rpb24oZSx0LHIpe1widXNlIHN0cmljdFwiO3QuZXhwb3J0cz1mdW5jdGlvbigpe3RoaXMuaW5wdXQ9bnVsbCx0aGlzLm5leHRfaW49MCx0aGlzLmF2YWlsX2luPTAsdGhpcy50b3RhbF9pbj0wLHRoaXMub3V0cHV0PW51bGwsdGhpcy5uZXh0X291dD0wLHRoaXMuYXZhaWxfb3V0PTAsdGhpcy50b3RhbF9vdXQ9MCx0aGlzLm1zZz1cIlwiLHRoaXMuc3RhdGU9bnVsbCx0aGlzLmRhdGFfdHlwZT0yLHRoaXMuYWRsZXI9MH19LHt9XSw1NDpbZnVuY3Rpb24oZSx0LHIpeyhmdW5jdGlvbihlKXshZnVuY3Rpb24ocixuKXtcInVzZSBzdHJpY3RcIjtpZighci5zZXRJbW1lZGlhdGUpe3ZhciBpLHMsdCxhLG89MSxoPXt9LHU9ITEsbD1yLmRvY3VtZW50LGU9T2JqZWN0LmdldFByb3RvdHlwZU9mJiZPYmplY3QuZ2V0UHJvdG90eXBlT2Yocik7ZT1lJiZlLnNldFRpbWVvdXQ/ZTpyLGk9XCJbb2JqZWN0IHByb2Nlc3NdXCI9PT17fS50b1N0cmluZy5jYWxsKHIucHJvY2Vzcyk/ZnVuY3Rpb24oZSl7cHJvY2Vzcy5uZXh0VGljayhmdW5jdGlvbigpe2MoZSl9KX06ZnVuY3Rpb24oKXtpZihyLnBvc3RNZXNzYWdlJiYhci5pbXBvcnRTY3JpcHRzKXt2YXIgZT0hMCx0PXIub25tZXNzYWdlO3JldHVybiByLm9ubWVzc2FnZT1mdW5jdGlvbigpe2U9ITF9LHIucG9zdE1lc3NhZ2UoXCJcIixcIipcIiksci5vbm1lc3NhZ2U9dCxlfX0oKT8oYT1cInNldEltbWVkaWF0ZSRcIitNYXRoLnJhbmRvbSgpK1wiJFwiLHIuYWRkRXZlbnRMaXN0ZW5lcj9yLmFkZEV2ZW50TGlzdGVuZXIoXCJtZXNzYWdlXCIsZCwhMSk6ci5hdHRhY2hFdmVudChcIm9ubWVzc2FnZVwiLGQpLGZ1bmN0aW9uKGUpe3IucG9zdE1lc3NhZ2UoYStlLFwiKlwiKX0pOnIuTWVzc2FnZUNoYW5uZWw/KCh0PW5ldyBNZXNzYWdlQ2hhbm5lbCkucG9ydDEub25tZXNzYWdlPWZ1bmN0aW9uKGUpe2MoZS5kYXRhKX0sZnVuY3Rpb24oZSl7dC5wb3J0Mi5wb3N0TWVzc2FnZShlKX0pOmwmJlwib25yZWFkeXN0YXRlY2hhbmdlXCJpbiBsLmNyZWF0ZUVsZW1lbnQoXCJzY3JpcHRcIik/KHM9bC5kb2N1bWVudEVsZW1lbnQsZnVuY3Rpb24oZSl7dmFyIHQ9bC5jcmVhdGVFbGVtZW50KFwic2NyaXB0XCIpO3Qub25yZWFkeXN0YXRlY2hhbmdlPWZ1bmN0aW9uKCl7YyhlKSx0Lm9ucmVhZHlzdGF0ZWNoYW5nZT1udWxsLHMucmVtb3ZlQ2hpbGQodCksdD1udWxsfSxzLmFwcGVuZENoaWxkKHQpfSk6ZnVuY3Rpb24oZSl7c2V0VGltZW91dChjLDAsZSl9LGUuc2V0SW1tZWRpYXRlPWZ1bmN0aW9uKGUpe1wiZnVuY3Rpb25cIiE9dHlwZW9mIGUmJihlPW5ldyBGdW5jdGlvbihcIlwiK2UpKTtmb3IodmFyIHQ9bmV3IEFycmF5KGFyZ3VtZW50cy5sZW5ndGgtMSkscj0wO3I8dC5sZW5ndGg7cisrKXRbcl09YXJndW1lbnRzW3IrMV07dmFyIG49e2NhbGxiYWNrOmUsYXJnczp0fTtyZXR1cm4gaFtvXT1uLGkobyksbysrfSxlLmNsZWFySW1tZWRpYXRlPWZ9ZnVuY3Rpb24gZihlKXtkZWxldGUgaFtlXX1mdW5jdGlvbiBjKGUpe2lmKHUpc2V0VGltZW91dChjLDAsZSk7ZWxzZXt2YXIgdD1oW2VdO2lmKHQpe3U9ITA7dHJ5eyFmdW5jdGlvbihlKXt2YXIgdD1lLmNhbGxiYWNrLHI9ZS5hcmdzO3N3aXRjaChyLmxlbmd0aCl7Y2FzZSAwOnQoKTticmVhaztjYXNlIDE6dChyWzBdKTticmVhaztjYXNlIDI6dChyWzBdLHJbMV0pO2JyZWFrO2Nhc2UgMzp0KHJbMF0sclsxXSxyWzJdKTticmVhaztkZWZhdWx0OnQuYXBwbHkobixyKX19KHQpfWZpbmFsbHl7ZihlKSx1PSExfX19fWZ1bmN0aW9uIGQoZSl7ZS5zb3VyY2U9PT1yJiZcInN0cmluZ1wiPT10eXBlb2YgZS5kYXRhJiYwPT09ZS5kYXRhLmluZGV4T2YoYSkmJmMoK2UuZGF0YS5zbGljZShhLmxlbmd0aCkpfX0oXCJ1bmRlZmluZWRcIj09dHlwZW9mIHNlbGY/dm9pZCAwPT09ZT90aGlzOmU6c2VsZil9KS5jYWxsKHRoaXMsXCJ1bmRlZmluZWRcIiE9dHlwZW9mIGdsb2JhbD9nbG9iYWw6XCJ1bmRlZmluZWRcIiE9dHlwZW9mIHNlbGY/c2VsZjpcInVuZGVmaW5lZFwiIT10eXBlb2Ygd2luZG93P3dpbmRvdzp7fSl9LHt9XX0se30sWzEwXSkoMTApfSk7IiwiLyoqXG4gKiBAbGljZW5zZVxuICogTG9kYXNoIDxodHRwczovL2xvZGFzaC5jb20vPlxuICogQ29weXJpZ2h0IE9wZW5KUyBGb3VuZGF0aW9uIGFuZCBvdGhlciBjb250cmlidXRvcnMgPGh0dHBzOi8vb3BlbmpzZi5vcmcvPlxuICogUmVsZWFzZWQgdW5kZXIgTUlUIGxpY2Vuc2UgPGh0dHBzOi8vbG9kYXNoLmNvbS9saWNlbnNlPlxuICogQmFzZWQgb24gVW5kZXJzY29yZS5qcyAxLjguMyA8aHR0cDovL3VuZGVyc2NvcmVqcy5vcmcvTElDRU5TRT5cbiAqIENvcHlyaWdodCBKZXJlbXkgQXNoa2VuYXMsIERvY3VtZW50Q2xvdWQgYW5kIEludmVzdGlnYXRpdmUgUmVwb3J0ZXJzICYgRWRpdG9yc1xuICovXG47KGZ1bmN0aW9uKCkge1xuXG4gIC8qKiBVc2VkIGFzIGEgc2FmZSByZWZlcmVuY2UgZm9yIGB1bmRlZmluZWRgIGluIHByZS1FUzUgZW52aXJvbm1lbnRzLiAqL1xuICB2YXIgdW5kZWZpbmVkO1xuXG4gIC8qKiBVc2VkIGFzIHRoZSBzZW1hbnRpYyB2ZXJzaW9uIG51bWJlci4gKi9cbiAgdmFyIFZFUlNJT04gPSAnNC4xNy4yMSc7XG5cbiAgLyoqIFVzZWQgYXMgdGhlIHNpemUgdG8gZW5hYmxlIGxhcmdlIGFycmF5IG9wdGltaXphdGlvbnMuICovXG4gIHZhciBMQVJHRV9BUlJBWV9TSVpFID0gMjAwO1xuXG4gIC8qKiBFcnJvciBtZXNzYWdlIGNvbnN0YW50cy4gKi9cbiAgdmFyIENPUkVfRVJST1JfVEVYVCA9ICdVbnN1cHBvcnRlZCBjb3JlLWpzIHVzZS4gVHJ5IGh0dHBzOi8vbnBtcy5pby9zZWFyY2g/cT1wb255ZmlsbC4nLFxuICAgICAgRlVOQ19FUlJPUl9URVhUID0gJ0V4cGVjdGVkIGEgZnVuY3Rpb24nLFxuICAgICAgSU5WQUxJRF9URU1QTF9WQVJfRVJST1JfVEVYVCA9ICdJbnZhbGlkIGB2YXJpYWJsZWAgb3B0aW9uIHBhc3NlZCBpbnRvIGBfLnRlbXBsYXRlYCc7XG5cbiAgLyoqIFVzZWQgdG8gc3RhbmQtaW4gZm9yIGB1bmRlZmluZWRgIGhhc2ggdmFsdWVzLiAqL1xuICB2YXIgSEFTSF9VTkRFRklORUQgPSAnX19sb2Rhc2hfaGFzaF91bmRlZmluZWRfXyc7XG5cbiAgLyoqIFVzZWQgYXMgdGhlIG1heGltdW0gbWVtb2l6ZSBjYWNoZSBzaXplLiAqL1xuICB2YXIgTUFYX01FTU9JWkVfU0laRSA9IDUwMDtcblxuICAvKiogVXNlZCBhcyB0aGUgaW50ZXJuYWwgYXJndW1lbnQgcGxhY2Vob2xkZXIuICovXG4gIHZhciBQTEFDRUhPTERFUiA9ICdfX2xvZGFzaF9wbGFjZWhvbGRlcl9fJztcblxuICAvKiogVXNlZCB0byBjb21wb3NlIGJpdG1hc2tzIGZvciBjbG9uaW5nLiAqL1xuICB2YXIgQ0xPTkVfREVFUF9GTEFHID0gMSxcbiAgICAgIENMT05FX0ZMQVRfRkxBRyA9IDIsXG4gICAgICBDTE9ORV9TWU1CT0xTX0ZMQUcgPSA0O1xuXG4gIC8qKiBVc2VkIHRvIGNvbXBvc2UgYml0bWFza3MgZm9yIHZhbHVlIGNvbXBhcmlzb25zLiAqL1xuICB2YXIgQ09NUEFSRV9QQVJUSUFMX0ZMQUcgPSAxLFxuICAgICAgQ09NUEFSRV9VTk9SREVSRURfRkxBRyA9IDI7XG5cbiAgLyoqIFVzZWQgdG8gY29tcG9zZSBiaXRtYXNrcyBmb3IgZnVuY3Rpb24gbWV0YWRhdGEuICovXG4gIHZhciBXUkFQX0JJTkRfRkxBRyA9IDEsXG4gICAgICBXUkFQX0JJTkRfS0VZX0ZMQUcgPSAyLFxuICAgICAgV1JBUF9DVVJSWV9CT1VORF9GTEFHID0gNCxcbiAgICAgIFdSQVBfQ1VSUllfRkxBRyA9IDgsXG4gICAgICBXUkFQX0NVUlJZX1JJR0hUX0ZMQUcgPSAxNixcbiAgICAgIFdSQVBfUEFSVElBTF9GTEFHID0gMzIsXG4gICAgICBXUkFQX1BBUlRJQUxfUklHSFRfRkxBRyA9IDY0LFxuICAgICAgV1JBUF9BUllfRkxBRyA9IDEyOCxcbiAgICAgIFdSQVBfUkVBUkdfRkxBRyA9IDI1NixcbiAgICAgIFdSQVBfRkxJUF9GTEFHID0gNTEyO1xuXG4gIC8qKiBVc2VkIGFzIGRlZmF1bHQgb3B0aW9ucyBmb3IgYF8udHJ1bmNhdGVgLiAqL1xuICB2YXIgREVGQVVMVF9UUlVOQ19MRU5HVEggPSAzMCxcbiAgICAgIERFRkFVTFRfVFJVTkNfT01JU1NJT04gPSAnLi4uJztcblxuICAvKiogVXNlZCB0byBkZXRlY3QgaG90IGZ1bmN0aW9ucyBieSBudW1iZXIgb2YgY2FsbHMgd2l0aGluIGEgc3BhbiBvZiBtaWxsaXNlY29uZHMuICovXG4gIHZhciBIT1RfQ09VTlQgPSA4MDAsXG4gICAgICBIT1RfU1BBTiA9IDE2O1xuXG4gIC8qKiBVc2VkIHRvIGluZGljYXRlIHRoZSB0eXBlIG9mIGxhenkgaXRlcmF0ZWVzLiAqL1xuICB2YXIgTEFaWV9GSUxURVJfRkxBRyA9IDEsXG4gICAgICBMQVpZX01BUF9GTEFHID0gMixcbiAgICAgIExBWllfV0hJTEVfRkxBRyA9IDM7XG5cbiAgLyoqIFVzZWQgYXMgcmVmZXJlbmNlcyBmb3IgdmFyaW91cyBgTnVtYmVyYCBjb25zdGFudHMuICovXG4gIHZhciBJTkZJTklUWSA9IDEgLyAwLFxuICAgICAgTUFYX1NBRkVfSU5URUdFUiA9IDkwMDcxOTkyNTQ3NDA5OTEsXG4gICAgICBNQVhfSU5URUdFUiA9IDEuNzk3NjkzMTM0ODYyMzE1N2UrMzA4LFxuICAgICAgTkFOID0gMCAvIDA7XG5cbiAgLyoqIFVzZWQgYXMgcmVmZXJlbmNlcyBmb3IgdGhlIG1heGltdW0gbGVuZ3RoIGFuZCBpbmRleCBvZiBhbiBhcnJheS4gKi9cbiAgdmFyIE1BWF9BUlJBWV9MRU5HVEggPSA0Mjk0OTY3Mjk1LFxuICAgICAgTUFYX0FSUkFZX0lOREVYID0gTUFYX0FSUkFZX0xFTkdUSCAtIDEsXG4gICAgICBIQUxGX01BWF9BUlJBWV9MRU5HVEggPSBNQVhfQVJSQVlfTEVOR1RIID4+PiAxO1xuXG4gIC8qKiBVc2VkIHRvIGFzc29jaWF0ZSB3cmFwIG1ldGhvZHMgd2l0aCB0aGVpciBiaXQgZmxhZ3MuICovXG4gIHZhciB3cmFwRmxhZ3MgPSBbXG4gICAgWydhcnknLCBXUkFQX0FSWV9GTEFHXSxcbiAgICBbJ2JpbmQnLCBXUkFQX0JJTkRfRkxBR10sXG4gICAgWydiaW5kS2V5JywgV1JBUF9CSU5EX0tFWV9GTEFHXSxcbiAgICBbJ2N1cnJ5JywgV1JBUF9DVVJSWV9GTEFHXSxcbiAgICBbJ2N1cnJ5UmlnaHQnLCBXUkFQX0NVUlJZX1JJR0hUX0ZMQUddLFxuICAgIFsnZmxpcCcsIFdSQVBfRkxJUF9GTEFHXSxcbiAgICBbJ3BhcnRpYWwnLCBXUkFQX1BBUlRJQUxfRkxBR10sXG4gICAgWydwYXJ0aWFsUmlnaHQnLCBXUkFQX1BBUlRJQUxfUklHSFRfRkxBR10sXG4gICAgWydyZWFyZycsIFdSQVBfUkVBUkdfRkxBR11cbiAgXTtcblxuICAvKiogYE9iamVjdCN0b1N0cmluZ2AgcmVzdWx0IHJlZmVyZW5jZXMuICovXG4gIHZhciBhcmdzVGFnID0gJ1tvYmplY3QgQXJndW1lbnRzXScsXG4gICAgICBhcnJheVRhZyA9ICdbb2JqZWN0IEFycmF5XScsXG4gICAgICBhc3luY1RhZyA9ICdbb2JqZWN0IEFzeW5jRnVuY3Rpb25dJyxcbiAgICAgIGJvb2xUYWcgPSAnW29iamVjdCBCb29sZWFuXScsXG4gICAgICBkYXRlVGFnID0gJ1tvYmplY3QgRGF0ZV0nLFxuICAgICAgZG9tRXhjVGFnID0gJ1tvYmplY3QgRE9NRXhjZXB0aW9uXScsXG4gICAgICBlcnJvclRhZyA9ICdbb2JqZWN0IEVycm9yXScsXG4gICAgICBmdW5jVGFnID0gJ1tvYmplY3QgRnVuY3Rpb25dJyxcbiAgICAgIGdlblRhZyA9ICdbb2JqZWN0IEdlbmVyYXRvckZ1bmN0aW9uXScsXG4gICAgICBtYXBUYWcgPSAnW29iamVjdCBNYXBdJyxcbiAgICAgIG51bWJlclRhZyA9ICdbb2JqZWN0IE51bWJlcl0nLFxuICAgICAgbnVsbFRhZyA9ICdbb2JqZWN0IE51bGxdJyxcbiAgICAgIG9iamVjdFRhZyA9ICdbb2JqZWN0IE9iamVjdF0nLFxuICAgICAgcHJvbWlzZVRhZyA9ICdbb2JqZWN0IFByb21pc2VdJyxcbiAgICAgIHByb3h5VGFnID0gJ1tvYmplY3QgUHJveHldJyxcbiAgICAgIHJlZ2V4cFRhZyA9ICdbb2JqZWN0IFJlZ0V4cF0nLFxuICAgICAgc2V0VGFnID0gJ1tvYmplY3QgU2V0XScsXG4gICAgICBzdHJpbmdUYWcgPSAnW29iamVjdCBTdHJpbmddJyxcbiAgICAgIHN5bWJvbFRhZyA9ICdbb2JqZWN0IFN5bWJvbF0nLFxuICAgICAgdW5kZWZpbmVkVGFnID0gJ1tvYmplY3QgVW5kZWZpbmVkXScsXG4gICAgICB3ZWFrTWFwVGFnID0gJ1tvYmplY3QgV2Vha01hcF0nLFxuICAgICAgd2Vha1NldFRhZyA9ICdbb2JqZWN0IFdlYWtTZXRdJztcblxuICB2YXIgYXJyYXlCdWZmZXJUYWcgPSAnW29iamVjdCBBcnJheUJ1ZmZlcl0nLFxuICAgICAgZGF0YVZpZXdUYWcgPSAnW29iamVjdCBEYXRhVmlld10nLFxuICAgICAgZmxvYXQzMlRhZyA9ICdbb2JqZWN0IEZsb2F0MzJBcnJheV0nLFxuICAgICAgZmxvYXQ2NFRhZyA9ICdbb2JqZWN0IEZsb2F0NjRBcnJheV0nLFxuICAgICAgaW50OFRhZyA9ICdbb2JqZWN0IEludDhBcnJheV0nLFxuICAgICAgaW50MTZUYWcgPSAnW29iamVjdCBJbnQxNkFycmF5XScsXG4gICAgICBpbnQzMlRhZyA9ICdbb2JqZWN0IEludDMyQXJyYXldJyxcbiAgICAgIHVpbnQ4VGFnID0gJ1tvYmplY3QgVWludDhBcnJheV0nLFxuICAgICAgdWludDhDbGFtcGVkVGFnID0gJ1tvYmplY3QgVWludDhDbGFtcGVkQXJyYXldJyxcbiAgICAgIHVpbnQxNlRhZyA9ICdbb2JqZWN0IFVpbnQxNkFycmF5XScsXG4gICAgICB1aW50MzJUYWcgPSAnW29iamVjdCBVaW50MzJBcnJheV0nO1xuXG4gIC8qKiBVc2VkIHRvIG1hdGNoIGVtcHR5IHN0cmluZyBsaXRlcmFscyBpbiBjb21waWxlZCB0ZW1wbGF0ZSBzb3VyY2UuICovXG4gIHZhciByZUVtcHR5U3RyaW5nTGVhZGluZyA9IC9cXGJfX3AgXFwrPSAnJzsvZyxcbiAgICAgIHJlRW1wdHlTdHJpbmdNaWRkbGUgPSAvXFxiKF9fcCBcXCs9KSAnJyBcXCsvZyxcbiAgICAgIHJlRW1wdHlTdHJpbmdUcmFpbGluZyA9IC8oX19lXFwoLio/XFwpfFxcYl9fdFxcKSkgXFwrXFxuJyc7L2c7XG5cbiAgLyoqIFVzZWQgdG8gbWF0Y2ggSFRNTCBlbnRpdGllcyBhbmQgSFRNTCBjaGFyYWN0ZXJzLiAqL1xuICB2YXIgcmVFc2NhcGVkSHRtbCA9IC8mKD86YW1wfGx0fGd0fHF1b3R8IzM5KTsvZyxcbiAgICAgIHJlVW5lc2NhcGVkSHRtbCA9IC9bJjw+XCInXS9nLFxuICAgICAgcmVIYXNFc2NhcGVkSHRtbCA9IFJlZ0V4cChyZUVzY2FwZWRIdG1sLnNvdXJjZSksXG4gICAgICByZUhhc1VuZXNjYXBlZEh0bWwgPSBSZWdFeHAocmVVbmVzY2FwZWRIdG1sLnNvdXJjZSk7XG5cbiAgLyoqIFVzZWQgdG8gbWF0Y2ggdGVtcGxhdGUgZGVsaW1pdGVycy4gKi9cbiAgdmFyIHJlRXNjYXBlID0gLzwlLShbXFxzXFxTXSs/KSU+L2csXG4gICAgICByZUV2YWx1YXRlID0gLzwlKFtcXHNcXFNdKz8pJT4vZyxcbiAgICAgIHJlSW50ZXJwb2xhdGUgPSAvPCU9KFtcXHNcXFNdKz8pJT4vZztcblxuICAvKiogVXNlZCB0byBtYXRjaCBwcm9wZXJ0eSBuYW1lcyB3aXRoaW4gcHJvcGVydHkgcGF0aHMuICovXG4gIHZhciByZUlzRGVlcFByb3AgPSAvXFwufFxcWyg/OlteW1xcXV0qfChbXCInXSkoPzooPyFcXDEpW15cXFxcXXxcXFxcLikqP1xcMSlcXF0vLFxuICAgICAgcmVJc1BsYWluUHJvcCA9IC9eXFx3KiQvLFxuICAgICAgcmVQcm9wTmFtZSA9IC9bXi5bXFxdXSt8XFxbKD86KC0/XFxkKyg/OlxcLlxcZCspPyl8KFtcIiddKSgoPzooPyFcXDIpW15cXFxcXXxcXFxcLikqPylcXDIpXFxdfCg/PSg/OlxcLnxcXFtcXF0pKD86XFwufFxcW1xcXXwkKSkvZztcblxuICAvKipcbiAgICogVXNlZCB0byBtYXRjaCBgUmVnRXhwYFxuICAgKiBbc3ludGF4IGNoYXJhY3RlcnNdKGh0dHA6Ly9lY21hLWludGVybmF0aW9uYWwub3JnL2VjbWEtMjYyLzcuMC8jc2VjLXBhdHRlcm5zKS5cbiAgICovXG4gIHZhciByZVJlZ0V4cENoYXIgPSAvW1xcXFxeJC4qKz8oKVtcXF17fXxdL2csXG4gICAgICByZUhhc1JlZ0V4cENoYXIgPSBSZWdFeHAocmVSZWdFeHBDaGFyLnNvdXJjZSk7XG5cbiAgLyoqIFVzZWQgdG8gbWF0Y2ggbGVhZGluZyB3aGl0ZXNwYWNlLiAqL1xuICB2YXIgcmVUcmltU3RhcnQgPSAvXlxccysvO1xuXG4gIC8qKiBVc2VkIHRvIG1hdGNoIGEgc2luZ2xlIHdoaXRlc3BhY2UgY2hhcmFjdGVyLiAqL1xuICB2YXIgcmVXaGl0ZXNwYWNlID0gL1xccy87XG5cbiAgLyoqIFVzZWQgdG8gbWF0Y2ggd3JhcCBkZXRhaWwgY29tbWVudHMuICovXG4gIHZhciByZVdyYXBDb21tZW50ID0gL1xceyg/OlxcblxcL1xcKiBcXFt3cmFwcGVkIHdpdGggLitcXF0gXFwqXFwvKT9cXG4/LyxcbiAgICAgIHJlV3JhcERldGFpbHMgPSAvXFx7XFxuXFwvXFwqIFxcW3dyYXBwZWQgd2l0aCAoLispXFxdIFxcKi8sXG4gICAgICByZVNwbGl0RGV0YWlscyA9IC8sPyAmIC87XG5cbiAgLyoqIFVzZWQgdG8gbWF0Y2ggd29yZHMgY29tcG9zZWQgb2YgYWxwaGFudW1lcmljIGNoYXJhY3RlcnMuICovXG4gIHZhciByZUFzY2lpV29yZCA9IC9bXlxceDAwLVxceDJmXFx4M2EtXFx4NDBcXHg1Yi1cXHg2MFxceDdiLVxceDdmXSsvZztcblxuICAvKipcbiAgICogVXNlZCB0byB2YWxpZGF0ZSB0aGUgYHZhbGlkYXRlYCBvcHRpb24gaW4gYF8udGVtcGxhdGVgIHZhcmlhYmxlLlxuICAgKlxuICAgKiBGb3JiaWRzIGNoYXJhY3RlcnMgd2hpY2ggY291bGQgcG90ZW50aWFsbHkgY2hhbmdlIHRoZSBtZWFuaW5nIG9mIHRoZSBmdW5jdGlvbiBhcmd1bWVudCBkZWZpbml0aW9uOlxuICAgKiAtIFwiKCksXCIgKG1vZGlmaWNhdGlvbiBvZiBmdW5jdGlvbiBwYXJhbWV0ZXJzKVxuICAgKiAtIFwiPVwiIChkZWZhdWx0IHZhbHVlKVxuICAgKiAtIFwiW117fVwiIChkZXN0cnVjdHVyaW5nIG9mIGZ1bmN0aW9uIHBhcmFtZXRlcnMpXG4gICAqIC0gXCIvXCIgKGJlZ2lubmluZyBvZiBhIGNvbW1lbnQpXG4gICAqIC0gd2hpdGVzcGFjZVxuICAgKi9cbiAgdmFyIHJlRm9yYmlkZGVuSWRlbnRpZmllckNoYXJzID0gL1soKT0se31cXFtcXF1cXC9cXHNdLztcblxuICAvKiogVXNlZCB0byBtYXRjaCBiYWNrc2xhc2hlcyBpbiBwcm9wZXJ0eSBwYXRocy4gKi9cbiAgdmFyIHJlRXNjYXBlQ2hhciA9IC9cXFxcKFxcXFwpPy9nO1xuXG4gIC8qKlxuICAgKiBVc2VkIHRvIG1hdGNoXG4gICAqIFtFUyB0ZW1wbGF0ZSBkZWxpbWl0ZXJzXShodHRwOi8vZWNtYS1pbnRlcm5hdGlvbmFsLm9yZy9lY21hLTI2Mi83LjAvI3NlYy10ZW1wbGF0ZS1saXRlcmFsLWxleGljYWwtY29tcG9uZW50cykuXG4gICAqL1xuICB2YXIgcmVFc1RlbXBsYXRlID0gL1xcJFxceyhbXlxcXFx9XSooPzpcXFxcLlteXFxcXH1dKikqKVxcfS9nO1xuXG4gIC8qKiBVc2VkIHRvIG1hdGNoIGBSZWdFeHBgIGZsYWdzIGZyb20gdGhlaXIgY29lcmNlZCBzdHJpbmcgdmFsdWVzLiAqL1xuICB2YXIgcmVGbGFncyA9IC9cXHcqJC87XG5cbiAgLyoqIFVzZWQgdG8gZGV0ZWN0IGJhZCBzaWduZWQgaGV4YWRlY2ltYWwgc3RyaW5nIHZhbHVlcy4gKi9cbiAgdmFyIHJlSXNCYWRIZXggPSAvXlstK10weFswLTlhLWZdKyQvaTtcblxuICAvKiogVXNlZCB0byBkZXRlY3QgYmluYXJ5IHN0cmluZyB2YWx1ZXMuICovXG4gIHZhciByZUlzQmluYXJ5ID0gL14wYlswMV0rJC9pO1xuXG4gIC8qKiBVc2VkIHRvIGRldGVjdCBob3N0IGNvbnN0cnVjdG9ycyAoU2FmYXJpKS4gKi9cbiAgdmFyIHJlSXNIb3N0Q3RvciA9IC9eXFxbb2JqZWN0IC4rP0NvbnN0cnVjdG9yXFxdJC87XG5cbiAgLyoqIFVzZWQgdG8gZGV0ZWN0IG9jdGFsIHN0cmluZyB2YWx1ZXMuICovXG4gIHZhciByZUlzT2N0YWwgPSAvXjBvWzAtN10rJC9pO1xuXG4gIC8qKiBVc2VkIHRvIGRldGVjdCB1bnNpZ25lZCBpbnRlZ2VyIHZhbHVlcy4gKi9cbiAgdmFyIHJlSXNVaW50ID0gL14oPzowfFsxLTldXFxkKikkLztcblxuICAvKiogVXNlZCB0byBtYXRjaCBMYXRpbiBVbmljb2RlIGxldHRlcnMgKGV4Y2x1ZGluZyBtYXRoZW1hdGljYWwgb3BlcmF0b3JzKS4gKi9cbiAgdmFyIHJlTGF0aW4gPSAvW1xceGMwLVxceGQ2XFx4ZDgtXFx4ZjZcXHhmOC1cXHhmZlxcdTAxMDAtXFx1MDE3Zl0vZztcblxuICAvKiogVXNlZCB0byBlbnN1cmUgY2FwdHVyaW5nIG9yZGVyIG9mIHRlbXBsYXRlIGRlbGltaXRlcnMuICovXG4gIHZhciByZU5vTWF0Y2ggPSAvKCReKS87XG5cbiAgLyoqIFVzZWQgdG8gbWF0Y2ggdW5lc2NhcGVkIGNoYXJhY3RlcnMgaW4gY29tcGlsZWQgc3RyaW5nIGxpdGVyYWxzLiAqL1xuICB2YXIgcmVVbmVzY2FwZWRTdHJpbmcgPSAvWydcXG5cXHJcXHUyMDI4XFx1MjAyOVxcXFxdL2c7XG5cbiAgLyoqIFVzZWQgdG8gY29tcG9zZSB1bmljb2RlIGNoYXJhY3RlciBjbGFzc2VzLiAqL1xuICB2YXIgcnNBc3RyYWxSYW5nZSA9ICdcXFxcdWQ4MDAtXFxcXHVkZmZmJyxcbiAgICAgIHJzQ29tYm9NYXJrc1JhbmdlID0gJ1xcXFx1MDMwMC1cXFxcdTAzNmYnLFxuICAgICAgcmVDb21ib0hhbGZNYXJrc1JhbmdlID0gJ1xcXFx1ZmUyMC1cXFxcdWZlMmYnLFxuICAgICAgcnNDb21ib1N5bWJvbHNSYW5nZSA9ICdcXFxcdTIwZDAtXFxcXHUyMGZmJyxcbiAgICAgIHJzQ29tYm9SYW5nZSA9IHJzQ29tYm9NYXJrc1JhbmdlICsgcmVDb21ib0hhbGZNYXJrc1JhbmdlICsgcnNDb21ib1N5bWJvbHNSYW5nZSxcbiAgICAgIHJzRGluZ2JhdFJhbmdlID0gJ1xcXFx1MjcwMC1cXFxcdTI3YmYnLFxuICAgICAgcnNMb3dlclJhbmdlID0gJ2EtelxcXFx4ZGYtXFxcXHhmNlxcXFx4ZjgtXFxcXHhmZicsXG4gICAgICByc01hdGhPcFJhbmdlID0gJ1xcXFx4YWNcXFxceGIxXFxcXHhkN1xcXFx4ZjcnLFxuICAgICAgcnNOb25DaGFyUmFuZ2UgPSAnXFxcXHgwMC1cXFxceDJmXFxcXHgzYS1cXFxceDQwXFxcXHg1Yi1cXFxceDYwXFxcXHg3Yi1cXFxceGJmJyxcbiAgICAgIHJzUHVuY3R1YXRpb25SYW5nZSA9ICdcXFxcdTIwMDAtXFxcXHUyMDZmJyxcbiAgICAgIHJzU3BhY2VSYW5nZSA9ICcgXFxcXHRcXFxceDBiXFxcXGZcXFxceGEwXFxcXHVmZWZmXFxcXG5cXFxcclxcXFx1MjAyOFxcXFx1MjAyOVxcXFx1MTY4MFxcXFx1MTgwZVxcXFx1MjAwMFxcXFx1MjAwMVxcXFx1MjAwMlxcXFx1MjAwM1xcXFx1MjAwNFxcXFx1MjAwNVxcXFx1MjAwNlxcXFx1MjAwN1xcXFx1MjAwOFxcXFx1MjAwOVxcXFx1MjAwYVxcXFx1MjAyZlxcXFx1MjA1ZlxcXFx1MzAwMCcsXG4gICAgICByc1VwcGVyUmFuZ2UgPSAnQS1aXFxcXHhjMC1cXFxceGQ2XFxcXHhkOC1cXFxceGRlJyxcbiAgICAgIHJzVmFyUmFuZ2UgPSAnXFxcXHVmZTBlXFxcXHVmZTBmJyxcbiAgICAgIHJzQnJlYWtSYW5nZSA9IHJzTWF0aE9wUmFuZ2UgKyByc05vbkNoYXJSYW5nZSArIHJzUHVuY3R1YXRpb25SYW5nZSArIHJzU3BhY2VSYW5nZTtcblxuICAvKiogVXNlZCB0byBjb21wb3NlIHVuaWNvZGUgY2FwdHVyZSBncm91cHMuICovXG4gIHZhciByc0Fwb3MgPSBcIlsnXFx1MjAxOV1cIixcbiAgICAgIHJzQXN0cmFsID0gJ1snICsgcnNBc3RyYWxSYW5nZSArICddJyxcbiAgICAgIHJzQnJlYWsgPSAnWycgKyByc0JyZWFrUmFuZ2UgKyAnXScsXG4gICAgICByc0NvbWJvID0gJ1snICsgcnNDb21ib1JhbmdlICsgJ10nLFxuICAgICAgcnNEaWdpdHMgPSAnXFxcXGQrJyxcbiAgICAgIHJzRGluZ2JhdCA9ICdbJyArIHJzRGluZ2JhdFJhbmdlICsgJ10nLFxuICAgICAgcnNMb3dlciA9ICdbJyArIHJzTG93ZXJSYW5nZSArICddJyxcbiAgICAgIHJzTWlzYyA9ICdbXicgKyByc0FzdHJhbFJhbmdlICsgcnNCcmVha1JhbmdlICsgcnNEaWdpdHMgKyByc0RpbmdiYXRSYW5nZSArIHJzTG93ZXJSYW5nZSArIHJzVXBwZXJSYW5nZSArICddJyxcbiAgICAgIHJzRml0eiA9ICdcXFxcdWQ4M2NbXFxcXHVkZmZiLVxcXFx1ZGZmZl0nLFxuICAgICAgcnNNb2RpZmllciA9ICcoPzonICsgcnNDb21ibyArICd8JyArIHJzRml0eiArICcpJyxcbiAgICAgIHJzTm9uQXN0cmFsID0gJ1teJyArIHJzQXN0cmFsUmFuZ2UgKyAnXScsXG4gICAgICByc1JlZ2lvbmFsID0gJyg/OlxcXFx1ZDgzY1tcXFxcdWRkZTYtXFxcXHVkZGZmXSl7Mn0nLFxuICAgICAgcnNTdXJyUGFpciA9ICdbXFxcXHVkODAwLVxcXFx1ZGJmZl1bXFxcXHVkYzAwLVxcXFx1ZGZmZl0nLFxuICAgICAgcnNVcHBlciA9ICdbJyArIHJzVXBwZXJSYW5nZSArICddJyxcbiAgICAgIHJzWldKID0gJ1xcXFx1MjAwZCc7XG5cbiAgLyoqIFVzZWQgdG8gY29tcG9zZSB1bmljb2RlIHJlZ2V4ZXMuICovXG4gIHZhciByc01pc2NMb3dlciA9ICcoPzonICsgcnNMb3dlciArICd8JyArIHJzTWlzYyArICcpJyxcbiAgICAgIHJzTWlzY1VwcGVyID0gJyg/OicgKyByc1VwcGVyICsgJ3wnICsgcnNNaXNjICsgJyknLFxuICAgICAgcnNPcHRDb250ckxvd2VyID0gJyg/OicgKyByc0Fwb3MgKyAnKD86ZHxsbHxtfHJlfHN8dHx2ZSkpPycsXG4gICAgICByc09wdENvbnRyVXBwZXIgPSAnKD86JyArIHJzQXBvcyArICcoPzpEfExMfE18UkV8U3xUfFZFKSk/JyxcbiAgICAgIHJlT3B0TW9kID0gcnNNb2RpZmllciArICc/JyxcbiAgICAgIHJzT3B0VmFyID0gJ1snICsgcnNWYXJSYW5nZSArICddPycsXG4gICAgICByc09wdEpvaW4gPSAnKD86JyArIHJzWldKICsgJyg/OicgKyBbcnNOb25Bc3RyYWwsIHJzUmVnaW9uYWwsIHJzU3VyclBhaXJdLmpvaW4oJ3wnKSArICcpJyArIHJzT3B0VmFyICsgcmVPcHRNb2QgKyAnKSonLFxuICAgICAgcnNPcmRMb3dlciA9ICdcXFxcZCooPzoxc3R8Mm5kfDNyZHwoPyFbMTIzXSlcXFxcZHRoKSg/PVxcXFxifFtBLVpfXSknLFxuICAgICAgcnNPcmRVcHBlciA9ICdcXFxcZCooPzoxU1R8Mk5EfDNSRHwoPyFbMTIzXSlcXFxcZFRIKSg/PVxcXFxifFthLXpfXSknLFxuICAgICAgcnNTZXEgPSByc09wdFZhciArIHJlT3B0TW9kICsgcnNPcHRKb2luLFxuICAgICAgcnNFbW9qaSA9ICcoPzonICsgW3JzRGluZ2JhdCwgcnNSZWdpb25hbCwgcnNTdXJyUGFpcl0uam9pbignfCcpICsgJyknICsgcnNTZXEsXG4gICAgICByc1N5bWJvbCA9ICcoPzonICsgW3JzTm9uQXN0cmFsICsgcnNDb21ibyArICc/JywgcnNDb21ibywgcnNSZWdpb25hbCwgcnNTdXJyUGFpciwgcnNBc3RyYWxdLmpvaW4oJ3wnKSArICcpJztcblxuICAvKiogVXNlZCB0byBtYXRjaCBhcG9zdHJvcGhlcy4gKi9cbiAgdmFyIHJlQXBvcyA9IFJlZ0V4cChyc0Fwb3MsICdnJyk7XG5cbiAgLyoqXG4gICAqIFVzZWQgdG8gbWF0Y2ggW2NvbWJpbmluZyBkaWFjcml0aWNhbCBtYXJrc10oaHR0cHM6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvQ29tYmluaW5nX0RpYWNyaXRpY2FsX01hcmtzKSBhbmRcbiAgICogW2NvbWJpbmluZyBkaWFjcml0aWNhbCBtYXJrcyBmb3Igc3ltYm9sc10oaHR0cHM6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvQ29tYmluaW5nX0RpYWNyaXRpY2FsX01hcmtzX2Zvcl9TeW1ib2xzKS5cbiAgICovXG4gIHZhciByZUNvbWJvTWFyayA9IFJlZ0V4cChyc0NvbWJvLCAnZycpO1xuXG4gIC8qKiBVc2VkIHRvIG1hdGNoIFtzdHJpbmcgc3ltYm9sc10oaHR0cHM6Ly9tYXRoaWFzYnluZW5zLmJlL25vdGVzL2phdmFzY3JpcHQtdW5pY29kZSkuICovXG4gIHZhciByZVVuaWNvZGUgPSBSZWdFeHAocnNGaXR6ICsgJyg/PScgKyByc0ZpdHogKyAnKXwnICsgcnNTeW1ib2wgKyByc1NlcSwgJ2cnKTtcblxuICAvKiogVXNlZCB0byBtYXRjaCBjb21wbGV4IG9yIGNvbXBvdW5kIHdvcmRzLiAqL1xuICB2YXIgcmVVbmljb2RlV29yZCA9IFJlZ0V4cChbXG4gICAgcnNVcHBlciArICc/JyArIHJzTG93ZXIgKyAnKycgKyByc09wdENvbnRyTG93ZXIgKyAnKD89JyArIFtyc0JyZWFrLCByc1VwcGVyLCAnJCddLmpvaW4oJ3wnKSArICcpJyxcbiAgICByc01pc2NVcHBlciArICcrJyArIHJzT3B0Q29udHJVcHBlciArICcoPz0nICsgW3JzQnJlYWssIHJzVXBwZXIgKyByc01pc2NMb3dlciwgJyQnXS5qb2luKCd8JykgKyAnKScsXG4gICAgcnNVcHBlciArICc/JyArIHJzTWlzY0xvd2VyICsgJysnICsgcnNPcHRDb250ckxvd2VyLFxuICAgIHJzVXBwZXIgKyAnKycgKyByc09wdENvbnRyVXBwZXIsXG4gICAgcnNPcmRVcHBlcixcbiAgICByc09yZExvd2VyLFxuICAgIHJzRGlnaXRzLFxuICAgIHJzRW1vamlcbiAgXS5qb2luKCd8JyksICdnJyk7XG5cbiAgLyoqIFVzZWQgdG8gZGV0ZWN0IHN0cmluZ3Mgd2l0aCBbemVyby13aWR0aCBqb2luZXJzIG9yIGNvZGUgcG9pbnRzIGZyb20gdGhlIGFzdHJhbCBwbGFuZXNdKGh0dHA6Ly9lZXYuZWUvYmxvZy8yMDE1LzA5LzEyL2RhcmstY29ybmVycy1vZi11bmljb2RlLykuICovXG4gIHZhciByZUhhc1VuaWNvZGUgPSBSZWdFeHAoJ1snICsgcnNaV0ogKyByc0FzdHJhbFJhbmdlICArIHJzQ29tYm9SYW5nZSArIHJzVmFyUmFuZ2UgKyAnXScpO1xuXG4gIC8qKiBVc2VkIHRvIGRldGVjdCBzdHJpbmdzIHRoYXQgbmVlZCBhIG1vcmUgcm9idXN0IHJlZ2V4cCB0byBtYXRjaCB3b3Jkcy4gKi9cbiAgdmFyIHJlSGFzVW5pY29kZVdvcmQgPSAvW2Etel1bQS1aXXxbQS1aXXsyfVthLXpdfFswLTldW2EtekEtWl18W2EtekEtWl1bMC05XXxbXmEtekEtWjAtOSBdLztcblxuICAvKiogVXNlZCB0byBhc3NpZ24gZGVmYXVsdCBgY29udGV4dGAgb2JqZWN0IHByb3BlcnRpZXMuICovXG4gIHZhciBjb250ZXh0UHJvcHMgPSBbXG4gICAgJ0FycmF5JywgJ0J1ZmZlcicsICdEYXRhVmlldycsICdEYXRlJywgJ0Vycm9yJywgJ0Zsb2F0MzJBcnJheScsICdGbG9hdDY0QXJyYXknLFxuICAgICdGdW5jdGlvbicsICdJbnQ4QXJyYXknLCAnSW50MTZBcnJheScsICdJbnQzMkFycmF5JywgJ01hcCcsICdNYXRoJywgJ09iamVjdCcsXG4gICAgJ1Byb21pc2UnLCAnUmVnRXhwJywgJ1NldCcsICdTdHJpbmcnLCAnU3ltYm9sJywgJ1R5cGVFcnJvcicsICdVaW50OEFycmF5JyxcbiAgICAnVWludDhDbGFtcGVkQXJyYXknLCAnVWludDE2QXJyYXknLCAnVWludDMyQXJyYXknLCAnV2Vha01hcCcsXG4gICAgJ18nLCAnY2xlYXJUaW1lb3V0JywgJ2lzRmluaXRlJywgJ3BhcnNlSW50JywgJ3NldFRpbWVvdXQnXG4gIF07XG5cbiAgLyoqIFVzZWQgdG8gbWFrZSB0ZW1wbGF0ZSBzb3VyY2VVUkxzIGVhc2llciB0byBpZGVudGlmeS4gKi9cbiAgdmFyIHRlbXBsYXRlQ291bnRlciA9IC0xO1xuXG4gIC8qKiBVc2VkIHRvIGlkZW50aWZ5IGB0b1N0cmluZ1RhZ2AgdmFsdWVzIG9mIHR5cGVkIGFycmF5cy4gKi9cbiAgdmFyIHR5cGVkQXJyYXlUYWdzID0ge307XG4gIHR5cGVkQXJyYXlUYWdzW2Zsb2F0MzJUYWddID0gdHlwZWRBcnJheVRhZ3NbZmxvYXQ2NFRhZ10gPVxuICB0eXBlZEFycmF5VGFnc1tpbnQ4VGFnXSA9IHR5cGVkQXJyYXlUYWdzW2ludDE2VGFnXSA9XG4gIHR5cGVkQXJyYXlUYWdzW2ludDMyVGFnXSA9IHR5cGVkQXJyYXlUYWdzW3VpbnQ4VGFnXSA9XG4gIHR5cGVkQXJyYXlUYWdzW3VpbnQ4Q2xhbXBlZFRhZ10gPSB0eXBlZEFycmF5VGFnc1t1aW50MTZUYWddID1cbiAgdHlwZWRBcnJheVRhZ3NbdWludDMyVGFnXSA9IHRydWU7XG4gIHR5cGVkQXJyYXlUYWdzW2FyZ3NUYWddID0gdHlwZWRBcnJheVRhZ3NbYXJyYXlUYWddID1cbiAgdHlwZWRBcnJheVRhZ3NbYXJyYXlCdWZmZXJUYWddID0gdHlwZWRBcnJheVRhZ3NbYm9vbFRhZ10gPVxuICB0eXBlZEFycmF5VGFnc1tkYXRhVmlld1RhZ10gPSB0eXBlZEFycmF5VGFnc1tkYXRlVGFnXSA9XG4gIHR5cGVkQXJyYXlUYWdzW2Vycm9yVGFnXSA9IHR5cGVkQXJyYXlUYWdzW2Z1bmNUYWddID1cbiAgdHlwZWRBcnJheVRhZ3NbbWFwVGFnXSA9IHR5cGVkQXJyYXlUYWdzW251bWJlclRhZ10gPVxuICB0eXBlZEFycmF5VGFnc1tvYmplY3RUYWddID0gdHlwZWRBcnJheVRhZ3NbcmVnZXhwVGFnXSA9XG4gIHR5cGVkQXJyYXlUYWdzW3NldFRhZ10gPSB0eXBlZEFycmF5VGFnc1tzdHJpbmdUYWddID1cbiAgdHlwZWRBcnJheVRhZ3Nbd2Vha01hcFRhZ10gPSBmYWxzZTtcblxuICAvKiogVXNlZCB0byBpZGVudGlmeSBgdG9TdHJpbmdUYWdgIHZhbHVlcyBzdXBwb3J0ZWQgYnkgYF8uY2xvbmVgLiAqL1xuICB2YXIgY2xvbmVhYmxlVGFncyA9IHt9O1xuICBjbG9uZWFibGVUYWdzW2FyZ3NUYWddID0gY2xvbmVhYmxlVGFnc1thcnJheVRhZ10gPVxuICBjbG9uZWFibGVUYWdzW2FycmF5QnVmZmVyVGFnXSA9IGNsb25lYWJsZVRhZ3NbZGF0YVZpZXdUYWddID1cbiAgY2xvbmVhYmxlVGFnc1tib29sVGFnXSA9IGNsb25lYWJsZVRhZ3NbZGF0ZVRhZ10gPVxuICBjbG9uZWFibGVUYWdzW2Zsb2F0MzJUYWddID0gY2xvbmVhYmxlVGFnc1tmbG9hdDY0VGFnXSA9XG4gIGNsb25lYWJsZVRhZ3NbaW50OFRhZ10gPSBjbG9uZWFibGVUYWdzW2ludDE2VGFnXSA9XG4gIGNsb25lYWJsZVRhZ3NbaW50MzJUYWddID0gY2xvbmVhYmxlVGFnc1ttYXBUYWddID1cbiAgY2xvbmVhYmxlVGFnc1tudW1iZXJUYWddID0gY2xvbmVhYmxlVGFnc1tvYmplY3RUYWddID1cbiAgY2xvbmVhYmxlVGFnc1tyZWdleHBUYWddID0gY2xvbmVhYmxlVGFnc1tzZXRUYWddID1cbiAgY2xvbmVhYmxlVGFnc1tzdHJpbmdUYWddID0gY2xvbmVhYmxlVGFnc1tzeW1ib2xUYWddID1cbiAgY2xvbmVhYmxlVGFnc1t1aW50OFRhZ10gPSBjbG9uZWFibGVUYWdzW3VpbnQ4Q2xhbXBlZFRhZ10gPVxuICBjbG9uZWFibGVUYWdzW3VpbnQxNlRhZ10gPSBjbG9uZWFibGVUYWdzW3VpbnQzMlRhZ10gPSB0cnVlO1xuICBjbG9uZWFibGVUYWdzW2Vycm9yVGFnXSA9IGNsb25lYWJsZVRhZ3NbZnVuY1RhZ10gPVxuICBjbG9uZWFibGVUYWdzW3dlYWtNYXBUYWddID0gZmFsc2U7XG5cbiAgLyoqIFVzZWQgdG8gbWFwIExhdGluIFVuaWNvZGUgbGV0dGVycyB0byBiYXNpYyBMYXRpbiBsZXR0ZXJzLiAqL1xuICB2YXIgZGVidXJyZWRMZXR0ZXJzID0ge1xuICAgIC8vIExhdGluLTEgU3VwcGxlbWVudCBibG9jay5cbiAgICAnXFx4YzAnOiAnQScsICAnXFx4YzEnOiAnQScsICdcXHhjMic6ICdBJywgJ1xceGMzJzogJ0EnLCAnXFx4YzQnOiAnQScsICdcXHhjNSc6ICdBJyxcbiAgICAnXFx4ZTAnOiAnYScsICAnXFx4ZTEnOiAnYScsICdcXHhlMic6ICdhJywgJ1xceGUzJzogJ2EnLCAnXFx4ZTQnOiAnYScsICdcXHhlNSc6ICdhJyxcbiAgICAnXFx4YzcnOiAnQycsICAnXFx4ZTcnOiAnYycsXG4gICAgJ1xceGQwJzogJ0QnLCAgJ1xceGYwJzogJ2QnLFxuICAgICdcXHhjOCc6ICdFJywgICdcXHhjOSc6ICdFJywgJ1xceGNhJzogJ0UnLCAnXFx4Y2InOiAnRScsXG4gICAgJ1xceGU4JzogJ2UnLCAgJ1xceGU5JzogJ2UnLCAnXFx4ZWEnOiAnZScsICdcXHhlYic6ICdlJyxcbiAgICAnXFx4Y2MnOiAnSScsICAnXFx4Y2QnOiAnSScsICdcXHhjZSc6ICdJJywgJ1xceGNmJzogJ0knLFxuICAgICdcXHhlYyc6ICdpJywgICdcXHhlZCc6ICdpJywgJ1xceGVlJzogJ2knLCAnXFx4ZWYnOiAnaScsXG4gICAgJ1xceGQxJzogJ04nLCAgJ1xceGYxJzogJ24nLFxuICAgICdcXHhkMic6ICdPJywgICdcXHhkMyc6ICdPJywgJ1xceGQ0JzogJ08nLCAnXFx4ZDUnOiAnTycsICdcXHhkNic6ICdPJywgJ1xceGQ4JzogJ08nLFxuICAgICdcXHhmMic6ICdvJywgICdcXHhmMyc6ICdvJywgJ1xceGY0JzogJ28nLCAnXFx4ZjUnOiAnbycsICdcXHhmNic6ICdvJywgJ1xceGY4JzogJ28nLFxuICAgICdcXHhkOSc6ICdVJywgICdcXHhkYSc6ICdVJywgJ1xceGRiJzogJ1UnLCAnXFx4ZGMnOiAnVScsXG4gICAgJ1xceGY5JzogJ3UnLCAgJ1xceGZhJzogJ3UnLCAnXFx4ZmInOiAndScsICdcXHhmYyc6ICd1JyxcbiAgICAnXFx4ZGQnOiAnWScsICAnXFx4ZmQnOiAneScsICdcXHhmZic6ICd5JyxcbiAgICAnXFx4YzYnOiAnQWUnLCAnXFx4ZTYnOiAnYWUnLFxuICAgICdcXHhkZSc6ICdUaCcsICdcXHhmZSc6ICd0aCcsXG4gICAgJ1xceGRmJzogJ3NzJyxcbiAgICAvLyBMYXRpbiBFeHRlbmRlZC1BIGJsb2NrLlxuICAgICdcXHUwMTAwJzogJ0EnLCAgJ1xcdTAxMDInOiAnQScsICdcXHUwMTA0JzogJ0EnLFxuICAgICdcXHUwMTAxJzogJ2EnLCAgJ1xcdTAxMDMnOiAnYScsICdcXHUwMTA1JzogJ2EnLFxuICAgICdcXHUwMTA2JzogJ0MnLCAgJ1xcdTAxMDgnOiAnQycsICdcXHUwMTBhJzogJ0MnLCAnXFx1MDEwYyc6ICdDJyxcbiAgICAnXFx1MDEwNyc6ICdjJywgICdcXHUwMTA5JzogJ2MnLCAnXFx1MDEwYic6ICdjJywgJ1xcdTAxMGQnOiAnYycsXG4gICAgJ1xcdTAxMGUnOiAnRCcsICAnXFx1MDExMCc6ICdEJywgJ1xcdTAxMGYnOiAnZCcsICdcXHUwMTExJzogJ2QnLFxuICAgICdcXHUwMTEyJzogJ0UnLCAgJ1xcdTAxMTQnOiAnRScsICdcXHUwMTE2JzogJ0UnLCAnXFx1MDExOCc6ICdFJywgJ1xcdTAxMWEnOiAnRScsXG4gICAgJ1xcdTAxMTMnOiAnZScsICAnXFx1MDExNSc6ICdlJywgJ1xcdTAxMTcnOiAnZScsICdcXHUwMTE5JzogJ2UnLCAnXFx1MDExYic6ICdlJyxcbiAgICAnXFx1MDExYyc6ICdHJywgICdcXHUwMTFlJzogJ0cnLCAnXFx1MDEyMCc6ICdHJywgJ1xcdTAxMjInOiAnRycsXG4gICAgJ1xcdTAxMWQnOiAnZycsICAnXFx1MDExZic6ICdnJywgJ1xcdTAxMjEnOiAnZycsICdcXHUwMTIzJzogJ2cnLFxuICAgICdcXHUwMTI0JzogJ0gnLCAgJ1xcdTAxMjYnOiAnSCcsICdcXHUwMTI1JzogJ2gnLCAnXFx1MDEyNyc6ICdoJyxcbiAgICAnXFx1MDEyOCc6ICdJJywgICdcXHUwMTJhJzogJ0knLCAnXFx1MDEyYyc6ICdJJywgJ1xcdTAxMmUnOiAnSScsICdcXHUwMTMwJzogJ0knLFxuICAgICdcXHUwMTI5JzogJ2knLCAgJ1xcdTAxMmInOiAnaScsICdcXHUwMTJkJzogJ2knLCAnXFx1MDEyZic6ICdpJywgJ1xcdTAxMzEnOiAnaScsXG4gICAgJ1xcdTAxMzQnOiAnSicsICAnXFx1MDEzNSc6ICdqJyxcbiAgICAnXFx1MDEzNic6ICdLJywgICdcXHUwMTM3JzogJ2snLCAnXFx1MDEzOCc6ICdrJyxcbiAgICAnXFx1MDEzOSc6ICdMJywgICdcXHUwMTNiJzogJ0wnLCAnXFx1MDEzZCc6ICdMJywgJ1xcdTAxM2YnOiAnTCcsICdcXHUwMTQxJzogJ0wnLFxuICAgICdcXHUwMTNhJzogJ2wnLCAgJ1xcdTAxM2MnOiAnbCcsICdcXHUwMTNlJzogJ2wnLCAnXFx1MDE0MCc6ICdsJywgJ1xcdTAxNDInOiAnbCcsXG4gICAgJ1xcdTAxNDMnOiAnTicsICAnXFx1MDE0NSc6ICdOJywgJ1xcdTAxNDcnOiAnTicsICdcXHUwMTRhJzogJ04nLFxuICAgICdcXHUwMTQ0JzogJ24nLCAgJ1xcdTAxNDYnOiAnbicsICdcXHUwMTQ4JzogJ24nLCAnXFx1MDE0Yic6ICduJyxcbiAgICAnXFx1MDE0Yyc6ICdPJywgICdcXHUwMTRlJzogJ08nLCAnXFx1MDE1MCc6ICdPJyxcbiAgICAnXFx1MDE0ZCc6ICdvJywgICdcXHUwMTRmJzogJ28nLCAnXFx1MDE1MSc6ICdvJyxcbiAgICAnXFx1MDE1NCc6ICdSJywgICdcXHUwMTU2JzogJ1InLCAnXFx1MDE1OCc6ICdSJyxcbiAgICAnXFx1MDE1NSc6ICdyJywgICdcXHUwMTU3JzogJ3InLCAnXFx1MDE1OSc6ICdyJyxcbiAgICAnXFx1MDE1YSc6ICdTJywgICdcXHUwMTVjJzogJ1MnLCAnXFx1MDE1ZSc6ICdTJywgJ1xcdTAxNjAnOiAnUycsXG4gICAgJ1xcdTAxNWInOiAncycsICAnXFx1MDE1ZCc6ICdzJywgJ1xcdTAxNWYnOiAncycsICdcXHUwMTYxJzogJ3MnLFxuICAgICdcXHUwMTYyJzogJ1QnLCAgJ1xcdTAxNjQnOiAnVCcsICdcXHUwMTY2JzogJ1QnLFxuICAgICdcXHUwMTYzJzogJ3QnLCAgJ1xcdTAxNjUnOiAndCcsICdcXHUwMTY3JzogJ3QnLFxuICAgICdcXHUwMTY4JzogJ1UnLCAgJ1xcdTAxNmEnOiAnVScsICdcXHUwMTZjJzogJ1UnLCAnXFx1MDE2ZSc6ICdVJywgJ1xcdTAxNzAnOiAnVScsICdcXHUwMTcyJzogJ1UnLFxuICAgICdcXHUwMTY5JzogJ3UnLCAgJ1xcdTAxNmInOiAndScsICdcXHUwMTZkJzogJ3UnLCAnXFx1MDE2Zic6ICd1JywgJ1xcdTAxNzEnOiAndScsICdcXHUwMTczJzogJ3UnLFxuICAgICdcXHUwMTc0JzogJ1cnLCAgJ1xcdTAxNzUnOiAndycsXG4gICAgJ1xcdTAxNzYnOiAnWScsICAnXFx1MDE3Nyc6ICd5JywgJ1xcdTAxNzgnOiAnWScsXG4gICAgJ1xcdTAxNzknOiAnWicsICAnXFx1MDE3Yic6ICdaJywgJ1xcdTAxN2QnOiAnWicsXG4gICAgJ1xcdTAxN2EnOiAneicsICAnXFx1MDE3Yyc6ICd6JywgJ1xcdTAxN2UnOiAneicsXG4gICAgJ1xcdTAxMzInOiAnSUonLCAnXFx1MDEzMyc6ICdpaicsXG4gICAgJ1xcdTAxNTInOiAnT2UnLCAnXFx1MDE1Myc6ICdvZScsXG4gICAgJ1xcdTAxNDknOiBcIiduXCIsICdcXHUwMTdmJzogJ3MnXG4gIH07XG5cbiAgLyoqIFVzZWQgdG8gbWFwIGNoYXJhY3RlcnMgdG8gSFRNTCBlbnRpdGllcy4gKi9cbiAgdmFyIGh0bWxFc2NhcGVzID0ge1xuICAgICcmJzogJyZhbXA7JyxcbiAgICAnPCc6ICcmbHQ7JyxcbiAgICAnPic6ICcmZ3Q7JyxcbiAgICAnXCInOiAnJnF1b3Q7JyxcbiAgICBcIidcIjogJyYjMzk7J1xuICB9O1xuXG4gIC8qKiBVc2VkIHRvIG1hcCBIVE1MIGVudGl0aWVzIHRvIGNoYXJhY3RlcnMuICovXG4gIHZhciBodG1sVW5lc2NhcGVzID0ge1xuICAgICcmYW1wOyc6ICcmJyxcbiAgICAnJmx0Oyc6ICc8JyxcbiAgICAnJmd0Oyc6ICc+JyxcbiAgICAnJnF1b3Q7JzogJ1wiJyxcbiAgICAnJiMzOTsnOiBcIidcIlxuICB9O1xuXG4gIC8qKiBVc2VkIHRvIGVzY2FwZSBjaGFyYWN0ZXJzIGZvciBpbmNsdXNpb24gaW4gY29tcGlsZWQgc3RyaW5nIGxpdGVyYWxzLiAqL1xuICB2YXIgc3RyaW5nRXNjYXBlcyA9IHtcbiAgICAnXFxcXCc6ICdcXFxcJyxcbiAgICBcIidcIjogXCInXCIsXG4gICAgJ1xcbic6ICduJyxcbiAgICAnXFxyJzogJ3InLFxuICAgICdcXHUyMDI4JzogJ3UyMDI4JyxcbiAgICAnXFx1MjAyOSc6ICd1MjAyOSdcbiAgfTtcblxuICAvKiogQnVpbHQtaW4gbWV0aG9kIHJlZmVyZW5jZXMgd2l0aG91dCBhIGRlcGVuZGVuY3kgb24gYHJvb3RgLiAqL1xuICB2YXIgZnJlZVBhcnNlRmxvYXQgPSBwYXJzZUZsb2F0LFxuICAgICAgZnJlZVBhcnNlSW50ID0gcGFyc2VJbnQ7XG5cbiAgLyoqIERldGVjdCBmcmVlIHZhcmlhYmxlIGBnbG9iYWxgIGZyb20gTm9kZS5qcy4gKi9cbiAgdmFyIGZyZWVHbG9iYWwgPSB0eXBlb2YgZ2xvYmFsID09ICdvYmplY3QnICYmIGdsb2JhbCAmJiBnbG9iYWwuT2JqZWN0ID09PSBPYmplY3QgJiYgZ2xvYmFsO1xuXG4gIC8qKiBEZXRlY3QgZnJlZSB2YXJpYWJsZSBgc2VsZmAuICovXG4gIHZhciBmcmVlU2VsZiA9IHR5cGVvZiBzZWxmID09ICdvYmplY3QnICYmIHNlbGYgJiYgc2VsZi5PYmplY3QgPT09IE9iamVjdCAmJiBzZWxmO1xuXG4gIC8qKiBVc2VkIGFzIGEgcmVmZXJlbmNlIHRvIHRoZSBnbG9iYWwgb2JqZWN0LiAqL1xuICB2YXIgcm9vdCA9IGZyZWVHbG9iYWwgfHwgZnJlZVNlbGYgfHwgRnVuY3Rpb24oJ3JldHVybiB0aGlzJykoKTtcblxuICAvKiogRGV0ZWN0IGZyZWUgdmFyaWFibGUgYGV4cG9ydHNgLiAqL1xuICB2YXIgZnJlZUV4cG9ydHMgPSB0eXBlb2YgZXhwb3J0cyA9PSAnb2JqZWN0JyAmJiBleHBvcnRzICYmICFleHBvcnRzLm5vZGVUeXBlICYmIGV4cG9ydHM7XG5cbiAgLyoqIERldGVjdCBmcmVlIHZhcmlhYmxlIGBtb2R1bGVgLiAqL1xuICB2YXIgZnJlZU1vZHVsZSA9IGZyZWVFeHBvcnRzICYmIHR5cGVvZiBtb2R1bGUgPT0gJ29iamVjdCcgJiYgbW9kdWxlICYmICFtb2R1bGUubm9kZVR5cGUgJiYgbW9kdWxlO1xuXG4gIC8qKiBEZXRlY3QgdGhlIHBvcHVsYXIgQ29tbW9uSlMgZXh0ZW5zaW9uIGBtb2R1bGUuZXhwb3J0c2AuICovXG4gIHZhciBtb2R1bGVFeHBvcnRzID0gZnJlZU1vZHVsZSAmJiBmcmVlTW9kdWxlLmV4cG9ydHMgPT09IGZyZWVFeHBvcnRzO1xuXG4gIC8qKiBEZXRlY3QgZnJlZSB2YXJpYWJsZSBgcHJvY2Vzc2AgZnJvbSBOb2RlLmpzLiAqL1xuICB2YXIgZnJlZVByb2Nlc3MgPSBtb2R1bGVFeHBvcnRzICYmIGZyZWVHbG9iYWwucHJvY2VzcztcblxuICAvKiogVXNlZCB0byBhY2Nlc3MgZmFzdGVyIE5vZGUuanMgaGVscGVycy4gKi9cbiAgdmFyIG5vZGVVdGlsID0gKGZ1bmN0aW9uKCkge1xuICAgIHRyeSB7XG4gICAgICAvLyBVc2UgYHV0aWwudHlwZXNgIGZvciBOb2RlLmpzIDEwKy5cbiAgICAgIHZhciB0eXBlcyA9IGZyZWVNb2R1bGUgJiYgZnJlZU1vZHVsZS5yZXF1aXJlICYmIGZyZWVNb2R1bGUucmVxdWlyZSgndXRpbCcpLnR5cGVzO1xuXG4gICAgICBpZiAodHlwZXMpIHtcbiAgICAgICAgcmV0dXJuIHR5cGVzO1xuICAgICAgfVxuXG4gICAgICAvLyBMZWdhY3kgYHByb2Nlc3MuYmluZGluZygndXRpbCcpYCBmb3IgTm9kZS5qcyA8IDEwLlxuICAgICAgcmV0dXJuIGZyZWVQcm9jZXNzICYmIGZyZWVQcm9jZXNzLmJpbmRpbmcgJiYgZnJlZVByb2Nlc3MuYmluZGluZygndXRpbCcpO1xuICAgIH0gY2F0Y2ggKGUpIHt9XG4gIH0oKSk7XG5cbiAgLyogTm9kZS5qcyBoZWxwZXIgcmVmZXJlbmNlcy4gKi9cbiAgdmFyIG5vZGVJc0FycmF5QnVmZmVyID0gbm9kZVV0aWwgJiYgbm9kZVV0aWwuaXNBcnJheUJ1ZmZlcixcbiAgICAgIG5vZGVJc0RhdGUgPSBub2RlVXRpbCAmJiBub2RlVXRpbC5pc0RhdGUsXG4gICAgICBub2RlSXNNYXAgPSBub2RlVXRpbCAmJiBub2RlVXRpbC5pc01hcCxcbiAgICAgIG5vZGVJc1JlZ0V4cCA9IG5vZGVVdGlsICYmIG5vZGVVdGlsLmlzUmVnRXhwLFxuICAgICAgbm9kZUlzU2V0ID0gbm9kZVV0aWwgJiYgbm9kZVV0aWwuaXNTZXQsXG4gICAgICBub2RlSXNUeXBlZEFycmF5ID0gbm9kZVV0aWwgJiYgbm9kZVV0aWwuaXNUeXBlZEFycmF5O1xuXG4gIC8qLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0qL1xuXG4gIC8qKlxuICAgKiBBIGZhc3RlciBhbHRlcm5hdGl2ZSB0byBgRnVuY3Rpb24jYXBwbHlgLCB0aGlzIGZ1bmN0aW9uIGludm9rZXMgYGZ1bmNgXG4gICAqIHdpdGggdGhlIGB0aGlzYCBiaW5kaW5nIG9mIGB0aGlzQXJnYCBhbmQgdGhlIGFyZ3VtZW50cyBvZiBgYXJnc2AuXG4gICAqXG4gICAqIEBwcml2YXRlXG4gICAqIEBwYXJhbSB7RnVuY3Rpb259IGZ1bmMgVGhlIGZ1bmN0aW9uIHRvIGludm9rZS5cbiAgICogQHBhcmFtIHsqfSB0aGlzQXJnIFRoZSBgdGhpc2AgYmluZGluZyBvZiBgZnVuY2AuXG4gICAqIEBwYXJhbSB7QXJyYXl9IGFyZ3MgVGhlIGFyZ3VtZW50cyB0byBpbnZva2UgYGZ1bmNgIHdpdGguXG4gICAqIEByZXR1cm5zIHsqfSBSZXR1cm5zIHRoZSByZXN1bHQgb2YgYGZ1bmNgLlxuICAgKi9cbiAgZnVuY3Rpb24gYXBwbHkoZnVuYywgdGhpc0FyZywgYXJncykge1xuICAgIHN3aXRjaCAoYXJncy5sZW5ndGgpIHtcbiAgICAgIGNhc2UgMDogcmV0dXJuIGZ1bmMuY2FsbCh0aGlzQXJnKTtcbiAgICAgIGNhc2UgMTogcmV0dXJuIGZ1bmMuY2FsbCh0aGlzQXJnLCBhcmdzWzBdKTtcbiAgICAgIGNhc2UgMjogcmV0dXJuIGZ1bmMuY2FsbCh0aGlzQXJnLCBhcmdzWzBdLCBhcmdzWzFdKTtcbiAgICAgIGNhc2UgMzogcmV0dXJuIGZ1bmMuY2FsbCh0aGlzQXJnLCBhcmdzWzBdLCBhcmdzWzFdLCBhcmdzWzJdKTtcbiAgICB9XG4gICAgcmV0dXJuIGZ1bmMuYXBwbHkodGhpc0FyZywgYXJncyk7XG4gIH1cblxuICAvKipcbiAgICogQSBzcGVjaWFsaXplZCB2ZXJzaW9uIG9mIGBiYXNlQWdncmVnYXRvcmAgZm9yIGFycmF5cy5cbiAgICpcbiAgICogQHByaXZhdGVcbiAgICogQHBhcmFtIHtBcnJheX0gW2FycmF5XSBUaGUgYXJyYXkgdG8gaXRlcmF0ZSBvdmVyLlxuICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBzZXR0ZXIgVGhlIGZ1bmN0aW9uIHRvIHNldCBgYWNjdW11bGF0b3JgIHZhbHVlcy5cbiAgICogQHBhcmFtIHtGdW5jdGlvbn0gaXRlcmF0ZWUgVGhlIGl0ZXJhdGVlIHRvIHRyYW5zZm9ybSBrZXlzLlxuICAgKiBAcGFyYW0ge09iamVjdH0gYWNjdW11bGF0b3IgVGhlIGluaXRpYWwgYWdncmVnYXRlZCBvYmplY3QuXG4gICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyBgYWNjdW11bGF0b3JgLlxuICAgKi9cbiAgZnVuY3Rpb24gYXJyYXlBZ2dyZWdhdG9yKGFycmF5LCBzZXR0ZXIsIGl0ZXJhdGVlLCBhY2N1bXVsYXRvcikge1xuICAgIHZhciBpbmRleCA9IC0xLFxuICAgICAgICBsZW5ndGggPSBhcnJheSA9PSBudWxsID8gMCA6IGFycmF5Lmxlbmd0aDtcblxuICAgIHdoaWxlICgrK2luZGV4IDwgbGVuZ3RoKSB7XG4gICAgICB2YXIgdmFsdWUgPSBhcnJheVtpbmRleF07XG4gICAgICBzZXR0ZXIoYWNjdW11bGF0b3IsIHZhbHVlLCBpdGVyYXRlZSh2YWx1ZSksIGFycmF5KTtcbiAgICB9XG4gICAgcmV0dXJuIGFjY3VtdWxhdG9yO1xuICB9XG5cbiAgLyoqXG4gICAqIEEgc3BlY2lhbGl6ZWQgdmVyc2lvbiBvZiBgXy5mb3JFYWNoYCBmb3IgYXJyYXlzIHdpdGhvdXQgc3VwcG9ydCBmb3JcbiAgICogaXRlcmF0ZWUgc2hvcnRoYW5kcy5cbiAgICpcbiAgICogQHByaXZhdGVcbiAgICogQHBhcmFtIHtBcnJheX0gW2FycmF5XSBUaGUgYXJyYXkgdG8gaXRlcmF0ZSBvdmVyLlxuICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBpdGVyYXRlZSBUaGUgZnVuY3Rpb24gaW52b2tlZCBwZXIgaXRlcmF0aW9uLlxuICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgYGFycmF5YC5cbiAgICovXG4gIGZ1bmN0aW9uIGFycmF5RWFjaChhcnJheSwgaXRlcmF0ZWUpIHtcbiAgICB2YXIgaW5kZXggPSAtMSxcbiAgICAgICAgbGVuZ3RoID0gYXJyYXkgPT0gbnVsbCA/IDAgOiBhcnJheS5sZW5ndGg7XG5cbiAgICB3aGlsZSAoKytpbmRleCA8IGxlbmd0aCkge1xuICAgICAgaWYgKGl0ZXJhdGVlKGFycmF5W2luZGV4XSwgaW5kZXgsIGFycmF5KSA9PT0gZmFsc2UpIHtcbiAgICAgICAgYnJlYWs7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiBhcnJheTtcbiAgfVxuXG4gIC8qKlxuICAgKiBBIHNwZWNpYWxpemVkIHZlcnNpb24gb2YgYF8uZm9yRWFjaFJpZ2h0YCBmb3IgYXJyYXlzIHdpdGhvdXQgc3VwcG9ydCBmb3JcbiAgICogaXRlcmF0ZWUgc2hvcnRoYW5kcy5cbiAgICpcbiAgICogQHByaXZhdGVcbiAgICogQHBhcmFtIHtBcnJheX0gW2FycmF5XSBUaGUgYXJyYXkgdG8gaXRlcmF0ZSBvdmVyLlxuICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBpdGVyYXRlZSBUaGUgZnVuY3Rpb24gaW52b2tlZCBwZXIgaXRlcmF0aW9uLlxuICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgYGFycmF5YC5cbiAgICovXG4gIGZ1bmN0aW9uIGFycmF5RWFjaFJpZ2h0KGFycmF5LCBpdGVyYXRlZSkge1xuICAgIHZhciBsZW5ndGggPSBhcnJheSA9PSBudWxsID8gMCA6IGFycmF5Lmxlbmd0aDtcblxuICAgIHdoaWxlIChsZW5ndGgtLSkge1xuICAgICAgaWYgKGl0ZXJhdGVlKGFycmF5W2xlbmd0aF0sIGxlbmd0aCwgYXJyYXkpID09PSBmYWxzZSkge1xuICAgICAgICBicmVhaztcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIGFycmF5O1xuICB9XG5cbiAgLyoqXG4gICAqIEEgc3BlY2lhbGl6ZWQgdmVyc2lvbiBvZiBgXy5ldmVyeWAgZm9yIGFycmF5cyB3aXRob3V0IHN1cHBvcnQgZm9yXG4gICAqIGl0ZXJhdGVlIHNob3J0aGFuZHMuXG4gICAqXG4gICAqIEBwcml2YXRlXG4gICAqIEBwYXJhbSB7QXJyYXl9IFthcnJheV0gVGhlIGFycmF5IHRvIGl0ZXJhdGUgb3Zlci5cbiAgICogQHBhcmFtIHtGdW5jdGlvbn0gcHJlZGljYXRlIFRoZSBmdW5jdGlvbiBpbnZva2VkIHBlciBpdGVyYXRpb24uXG4gICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBhbGwgZWxlbWVudHMgcGFzcyB0aGUgcHJlZGljYXRlIGNoZWNrLFxuICAgKiAgZWxzZSBgZmFsc2VgLlxuICAgKi9cbiAgZnVuY3Rpb24gYXJyYXlFdmVyeShhcnJheSwgcHJlZGljYXRlKSB7XG4gICAgdmFyIGluZGV4ID0gLTEsXG4gICAgICAgIGxlbmd0aCA9IGFycmF5ID09IG51bGwgPyAwIDogYXJyYXkubGVuZ3RoO1xuXG4gICAgd2hpbGUgKCsraW5kZXggPCBsZW5ndGgpIHtcbiAgICAgIGlmICghcHJlZGljYXRlKGFycmF5W2luZGV4XSwgaW5kZXgsIGFycmF5KSkge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiB0cnVlO1xuICB9XG5cbiAgLyoqXG4gICAqIEEgc3BlY2lhbGl6ZWQgdmVyc2lvbiBvZiBgXy5maWx0ZXJgIGZvciBhcnJheXMgd2l0aG91dCBzdXBwb3J0IGZvclxuICAgKiBpdGVyYXRlZSBzaG9ydGhhbmRzLlxuICAgKlxuICAgKiBAcHJpdmF0ZVxuICAgKiBAcGFyYW0ge0FycmF5fSBbYXJyYXldIFRoZSBhcnJheSB0byBpdGVyYXRlIG92ZXIuXG4gICAqIEBwYXJhbSB7RnVuY3Rpb259IHByZWRpY2F0ZSBUaGUgZnVuY3Rpb24gaW52b2tlZCBwZXIgaXRlcmF0aW9uLlxuICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIG5ldyBmaWx0ZXJlZCBhcnJheS5cbiAgICovXG4gIGZ1bmN0aW9uIGFycmF5RmlsdGVyKGFycmF5LCBwcmVkaWNhdGUpIHtcbiAgICB2YXIgaW5kZXggPSAtMSxcbiAgICAgICAgbGVuZ3RoID0gYXJyYXkgPT0gbnVsbCA/IDAgOiBhcnJheS5sZW5ndGgsXG4gICAgICAgIHJlc0luZGV4ID0gMCxcbiAgICAgICAgcmVzdWx0ID0gW107XG5cbiAgICB3aGlsZSAoKytpbmRleCA8IGxlbmd0aCkge1xuICAgICAgdmFyIHZhbHVlID0gYXJyYXlbaW5kZXhdO1xuICAgICAgaWYgKHByZWRpY2F0ZSh2YWx1ZSwgaW5kZXgsIGFycmF5KSkge1xuICAgICAgICByZXN1bHRbcmVzSW5kZXgrK10gPSB2YWx1ZTtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfVxuXG4gIC8qKlxuICAgKiBBIHNwZWNpYWxpemVkIHZlcnNpb24gb2YgYF8uaW5jbHVkZXNgIGZvciBhcnJheXMgd2l0aG91dCBzdXBwb3J0IGZvclxuICAgKiBzcGVjaWZ5aW5nIGFuIGluZGV4IHRvIHNlYXJjaCBmcm9tLlxuICAgKlxuICAgKiBAcHJpdmF0ZVxuICAgKiBAcGFyYW0ge0FycmF5fSBbYXJyYXldIFRoZSBhcnJheSB0byBpbnNwZWN0LlxuICAgKiBAcGFyYW0geyp9IHRhcmdldCBUaGUgdmFsdWUgdG8gc2VhcmNoIGZvci5cbiAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB0YXJnZXRgIGlzIGZvdW5kLCBlbHNlIGBmYWxzZWAuXG4gICAqL1xuICBmdW5jdGlvbiBhcnJheUluY2x1ZGVzKGFycmF5LCB2YWx1ZSkge1xuICAgIHZhciBsZW5ndGggPSBhcnJheSA9PSBudWxsID8gMCA6IGFycmF5Lmxlbmd0aDtcbiAgICByZXR1cm4gISFsZW5ndGggJiYgYmFzZUluZGV4T2YoYXJyYXksIHZhbHVlLCAwKSA+IC0xO1xuICB9XG5cbiAgLyoqXG4gICAqIFRoaXMgZnVuY3Rpb24gaXMgbGlrZSBgYXJyYXlJbmNsdWRlc2AgZXhjZXB0IHRoYXQgaXQgYWNjZXB0cyBhIGNvbXBhcmF0b3IuXG4gICAqXG4gICAqIEBwcml2YXRlXG4gICAqIEBwYXJhbSB7QXJyYXl9IFthcnJheV0gVGhlIGFycmF5IHRvIGluc3BlY3QuXG4gICAqIEBwYXJhbSB7Kn0gdGFyZ2V0IFRoZSB2YWx1ZSB0byBzZWFyY2ggZm9yLlxuICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBjb21wYXJhdG9yIFRoZSBjb21wYXJhdG9yIGludm9rZWQgcGVyIGVsZW1lbnQuXG4gICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdGFyZ2V0YCBpcyBmb3VuZCwgZWxzZSBgZmFsc2VgLlxuICAgKi9cbiAgZnVuY3Rpb24gYXJyYXlJbmNsdWRlc1dpdGgoYXJyYXksIHZhbHVlLCBjb21wYXJhdG9yKSB7XG4gICAgdmFyIGluZGV4ID0gLTEsXG4gICAgICAgIGxlbmd0aCA9IGFycmF5ID09IG51bGwgPyAwIDogYXJyYXkubGVuZ3RoO1xuXG4gICAgd2hpbGUgKCsraW5kZXggPCBsZW5ndGgpIHtcbiAgICAgIGlmIChjb21wYXJhdG9yKHZhbHVlLCBhcnJheVtpbmRleF0pKSB7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cblxuICAvKipcbiAgICogQSBzcGVjaWFsaXplZCB2ZXJzaW9uIG9mIGBfLm1hcGAgZm9yIGFycmF5cyB3aXRob3V0IHN1cHBvcnQgZm9yIGl0ZXJhdGVlXG4gICAqIHNob3J0aGFuZHMuXG4gICAqXG4gICAqIEBwcml2YXRlXG4gICAqIEBwYXJhbSB7QXJyYXl9IFthcnJheV0gVGhlIGFycmF5IHRvIGl0ZXJhdGUgb3Zlci5cbiAgICogQHBhcmFtIHtGdW5jdGlvbn0gaXRlcmF0ZWUgVGhlIGZ1bmN0aW9uIGludm9rZWQgcGVyIGl0ZXJhdGlvbi5cbiAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBuZXcgbWFwcGVkIGFycmF5LlxuICAgKi9cbiAgZnVuY3Rpb24gYXJyYXlNYXAoYXJyYXksIGl0ZXJhdGVlKSB7XG4gICAgdmFyIGluZGV4ID0gLTEsXG4gICAgICAgIGxlbmd0aCA9IGFycmF5ID09IG51bGwgPyAwIDogYXJyYXkubGVuZ3RoLFxuICAgICAgICByZXN1bHQgPSBBcnJheShsZW5ndGgpO1xuXG4gICAgd2hpbGUgKCsraW5kZXggPCBsZW5ndGgpIHtcbiAgICAgIHJlc3VsdFtpbmRleF0gPSBpdGVyYXRlZShhcnJheVtpbmRleF0sIGluZGV4LCBhcnJheSk7XG4gICAgfVxuICAgIHJldHVybiByZXN1bHQ7XG4gIH1cblxuICAvKipcbiAgICogQXBwZW5kcyB0aGUgZWxlbWVudHMgb2YgYHZhbHVlc2AgdG8gYGFycmF5YC5cbiAgICpcbiAgICogQHByaXZhdGVcbiAgICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIG1vZGlmeS5cbiAgICogQHBhcmFtIHtBcnJheX0gdmFsdWVzIFRoZSB2YWx1ZXMgdG8gYXBwZW5kLlxuICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgYGFycmF5YC5cbiAgICovXG4gIGZ1bmN0aW9uIGFycmF5UHVzaChhcnJheSwgdmFsdWVzKSB7XG4gICAgdmFyIGluZGV4ID0gLTEsXG4gICAgICAgIGxlbmd0aCA9IHZhbHVlcy5sZW5ndGgsXG4gICAgICAgIG9mZnNldCA9IGFycmF5Lmxlbmd0aDtcblxuICAgIHdoaWxlICgrK2luZGV4IDwgbGVuZ3RoKSB7XG4gICAgICBhcnJheVtvZmZzZXQgKyBpbmRleF0gPSB2YWx1ZXNbaW5kZXhdO1xuICAgIH1cbiAgICByZXR1cm4gYXJyYXk7XG4gIH1cblxuICAvKipcbiAgICogQSBzcGVjaWFsaXplZCB2ZXJzaW9uIG9mIGBfLnJlZHVjZWAgZm9yIGFycmF5cyB3aXRob3V0IHN1cHBvcnQgZm9yXG4gICAqIGl0ZXJhdGVlIHNob3J0aGFuZHMuXG4gICAqXG4gICAqIEBwcml2YXRlXG4gICAqIEBwYXJhbSB7QXJyYXl9IFthcnJheV0gVGhlIGFycmF5IHRvIGl0ZXJhdGUgb3Zlci5cbiAgICogQHBhcmFtIHtGdW5jdGlvbn0gaXRlcmF0ZWUgVGhlIGZ1bmN0aW9uIGludm9rZWQgcGVyIGl0ZXJhdGlvbi5cbiAgICogQHBhcmFtIHsqfSBbYWNjdW11bGF0b3JdIFRoZSBpbml0aWFsIHZhbHVlLlxuICAgKiBAcGFyYW0ge2Jvb2xlYW59IFtpbml0QWNjdW1dIFNwZWNpZnkgdXNpbmcgdGhlIGZpcnN0IGVsZW1lbnQgb2YgYGFycmF5YCBhc1xuICAgKiAgdGhlIGluaXRpYWwgdmFsdWUuXG4gICAqIEByZXR1cm5zIHsqfSBSZXR1cm5zIHRoZSBhY2N1bXVsYXRlZCB2YWx1ZS5cbiAgICovXG4gIGZ1bmN0aW9uIGFycmF5UmVkdWNlKGFycmF5LCBpdGVyYXRlZSwgYWNjdW11bGF0b3IsIGluaXRBY2N1bSkge1xuICAgIHZhciBpbmRleCA9IC0xLFxuICAgICAgICBsZW5ndGggPSBhcnJheSA9PSBudWxsID8gMCA6IGFycmF5Lmxlbmd0aDtcblxuICAgIGlmIChpbml0QWNjdW0gJiYgbGVuZ3RoKSB7XG4gICAgICBhY2N1bXVsYXRvciA9IGFycmF5WysraW5kZXhdO1xuICAgIH1cbiAgICB3aGlsZSAoKytpbmRleCA8IGxlbmd0aCkge1xuICAgICAgYWNjdW11bGF0b3IgPSBpdGVyYXRlZShhY2N1bXVsYXRvciwgYXJyYXlbaW5kZXhdLCBpbmRleCwgYXJyYXkpO1xuICAgIH1cbiAgICByZXR1cm4gYWNjdW11bGF0b3I7XG4gIH1cblxuICAvKipcbiAgICogQSBzcGVjaWFsaXplZCB2ZXJzaW9uIG9mIGBfLnJlZHVjZVJpZ2h0YCBmb3IgYXJyYXlzIHdpdGhvdXQgc3VwcG9ydCBmb3JcbiAgICogaXRlcmF0ZWUgc2hvcnRoYW5kcy5cbiAgICpcbiAgICogQHByaXZhdGVcbiAgICogQHBhcmFtIHtBcnJheX0gW2FycmF5XSBUaGUgYXJyYXkgdG8gaXRlcmF0ZSBvdmVyLlxuICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBpdGVyYXRlZSBUaGUgZnVuY3Rpb24gaW52b2tlZCBwZXIgaXRlcmF0aW9uLlxuICAgKiBAcGFyYW0geyp9IFthY2N1bXVsYXRvcl0gVGhlIGluaXRpYWwgdmFsdWUuXG4gICAqIEBwYXJhbSB7Ym9vbGVhbn0gW2luaXRBY2N1bV0gU3BlY2lmeSB1c2luZyB0aGUgbGFzdCBlbGVtZW50IG9mIGBhcnJheWAgYXNcbiAgICogIHRoZSBpbml0aWFsIHZhbHVlLlxuICAgKiBAcmV0dXJucyB7Kn0gUmV0dXJucyB0aGUgYWNjdW11bGF0ZWQgdmFsdWUuXG4gICAqL1xuICBmdW5jdGlvbiBhcnJheVJlZHVjZVJpZ2h0KGFycmF5LCBpdGVyYXRlZSwgYWNjdW11bGF0b3IsIGluaXRBY2N1bSkge1xuICAgIHZhciBsZW5ndGggPSBhcnJheSA9PSBudWxsID8gMCA6IGFycmF5Lmxlbmd0aDtcbiAgICBpZiAoaW5pdEFjY3VtICYmIGxlbmd0aCkge1xuICAgICAgYWNjdW11bGF0b3IgPSBhcnJheVstLWxlbmd0aF07XG4gICAgfVxuICAgIHdoaWxlIChsZW5ndGgtLSkge1xuICAgICAgYWNjdW11bGF0b3IgPSBpdGVyYXRlZShhY2N1bXVsYXRvciwgYXJyYXlbbGVuZ3RoXSwgbGVuZ3RoLCBhcnJheSk7XG4gICAgfVxuICAgIHJldHVybiBhY2N1bXVsYXRvcjtcbiAgfVxuXG4gIC8qKlxuICAgKiBBIHNwZWNpYWxpemVkIHZlcnNpb24gb2YgYF8uc29tZWAgZm9yIGFycmF5cyB3aXRob3V0IHN1cHBvcnQgZm9yIGl0ZXJhdGVlXG4gICAqIHNob3J0aGFuZHMuXG4gICAqXG4gICAqIEBwcml2YXRlXG4gICAqIEBwYXJhbSB7QXJyYXl9IFthcnJheV0gVGhlIGFycmF5IHRvIGl0ZXJhdGUgb3Zlci5cbiAgICogQHBhcmFtIHtGdW5jdGlvbn0gcHJlZGljYXRlIFRoZSBmdW5jdGlvbiBpbnZva2VkIHBlciBpdGVyYXRpb24uXG4gICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBhbnkgZWxlbWVudCBwYXNzZXMgdGhlIHByZWRpY2F0ZSBjaGVjayxcbiAgICogIGVsc2UgYGZhbHNlYC5cbiAgICovXG4gIGZ1bmN0aW9uIGFycmF5U29tZShhcnJheSwgcHJlZGljYXRlKSB7XG4gICAgdmFyIGluZGV4ID0gLTEsXG4gICAgICAgIGxlbmd0aCA9IGFycmF5ID09IG51bGwgPyAwIDogYXJyYXkubGVuZ3RoO1xuXG4gICAgd2hpbGUgKCsraW5kZXggPCBsZW5ndGgpIHtcbiAgICAgIGlmIChwcmVkaWNhdGUoYXJyYXlbaW5kZXhdLCBpbmRleCwgYXJyYXkpKSB7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cblxuICAvKipcbiAgICogR2V0cyB0aGUgc2l6ZSBvZiBhbiBBU0NJSSBgc3RyaW5nYC5cbiAgICpcbiAgICogQHByaXZhdGVcbiAgICogQHBhcmFtIHtzdHJpbmd9IHN0cmluZyBUaGUgc3RyaW5nIGluc3BlY3QuXG4gICAqIEByZXR1cm5zIHtudW1iZXJ9IFJldHVybnMgdGhlIHN0cmluZyBzaXplLlxuICAgKi9cbiAgdmFyIGFzY2lpU2l6ZSA9IGJhc2VQcm9wZXJ0eSgnbGVuZ3RoJyk7XG5cbiAgLyoqXG4gICAqIENvbnZlcnRzIGFuIEFTQ0lJIGBzdHJpbmdgIHRvIGFuIGFycmF5LlxuICAgKlxuICAgKiBAcHJpdmF0ZVxuICAgKiBAcGFyYW0ge3N0cmluZ30gc3RyaW5nIFRoZSBzdHJpbmcgdG8gY29udmVydC5cbiAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBjb252ZXJ0ZWQgYXJyYXkuXG4gICAqL1xuICBmdW5jdGlvbiBhc2NpaVRvQXJyYXkoc3RyaW5nKSB7XG4gICAgcmV0dXJuIHN0cmluZy5zcGxpdCgnJyk7XG4gIH1cblxuICAvKipcbiAgICogU3BsaXRzIGFuIEFTQ0lJIGBzdHJpbmdgIGludG8gYW4gYXJyYXkgb2YgaXRzIHdvcmRzLlxuICAgKlxuICAgKiBAcHJpdmF0ZVxuICAgKiBAcGFyYW0ge3N0cmluZ30gVGhlIHN0cmluZyB0byBpbnNwZWN0LlxuICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIHdvcmRzIG9mIGBzdHJpbmdgLlxuICAgKi9cbiAgZnVuY3Rpb24gYXNjaWlXb3JkcyhzdHJpbmcpIHtcbiAgICByZXR1cm4gc3RyaW5nLm1hdGNoKHJlQXNjaWlXb3JkKSB8fCBbXTtcbiAgfVxuXG4gIC8qKlxuICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBtZXRob2RzIGxpa2UgYF8uZmluZEtleWAgYW5kIGBfLmZpbmRMYXN0S2V5YCxcbiAgICogd2l0aG91dCBzdXBwb3J0IGZvciBpdGVyYXRlZSBzaG9ydGhhbmRzLCB3aGljaCBpdGVyYXRlcyBvdmVyIGBjb2xsZWN0aW9uYFxuICAgKiB1c2luZyBgZWFjaEZ1bmNgLlxuICAgKlxuICAgKiBAcHJpdmF0ZVxuICAgKiBAcGFyYW0ge0FycmF5fE9iamVjdH0gY29sbGVjdGlvbiBUaGUgY29sbGVjdGlvbiB0byBpbnNwZWN0LlxuICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBwcmVkaWNhdGUgVGhlIGZ1bmN0aW9uIGludm9rZWQgcGVyIGl0ZXJhdGlvbi5cbiAgICogQHBhcmFtIHtGdW5jdGlvbn0gZWFjaEZ1bmMgVGhlIGZ1bmN0aW9uIHRvIGl0ZXJhdGUgb3ZlciBgY29sbGVjdGlvbmAuXG4gICAqIEByZXR1cm5zIHsqfSBSZXR1cm5zIHRoZSBmb3VuZCBlbGVtZW50IG9yIGl0cyBrZXksIGVsc2UgYHVuZGVmaW5lZGAuXG4gICAqL1xuICBmdW5jdGlvbiBiYXNlRmluZEtleShjb2xsZWN0aW9uLCBwcmVkaWNhdGUsIGVhY2hGdW5jKSB7XG4gICAgdmFyIHJlc3VsdDtcbiAgICBlYWNoRnVuYyhjb2xsZWN0aW9uLCBmdW5jdGlvbih2YWx1ZSwga2V5LCBjb2xsZWN0aW9uKSB7XG4gICAgICBpZiAocHJlZGljYXRlKHZhbHVlLCBrZXksIGNvbGxlY3Rpb24pKSB7XG4gICAgICAgIHJlc3VsdCA9IGtleTtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgfVxuICAgIH0pO1xuICAgIHJldHVybiByZXN1bHQ7XG4gIH1cblxuICAvKipcbiAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8uZmluZEluZGV4YCBhbmQgYF8uZmluZExhc3RJbmRleGAgd2l0aG91dFxuICAgKiBzdXBwb3J0IGZvciBpdGVyYXRlZSBzaG9ydGhhbmRzLlxuICAgKlxuICAgKiBAcHJpdmF0ZVxuICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gaW5zcGVjdC5cbiAgICogQHBhcmFtIHtGdW5jdGlvbn0gcHJlZGljYXRlIFRoZSBmdW5jdGlvbiBpbnZva2VkIHBlciBpdGVyYXRpb24uXG4gICAqIEBwYXJhbSB7bnVtYmVyfSBmcm9tSW5kZXggVGhlIGluZGV4IHRvIHNlYXJjaCBmcm9tLlxuICAgKiBAcGFyYW0ge2Jvb2xlYW59IFtmcm9tUmlnaHRdIFNwZWNpZnkgaXRlcmF0aW5nIGZyb20gcmlnaHQgdG8gbGVmdC5cbiAgICogQHJldHVybnMge251bWJlcn0gUmV0dXJucyB0aGUgaW5kZXggb2YgdGhlIG1hdGNoZWQgdmFsdWUsIGVsc2UgYC0xYC5cbiAgICovXG4gIGZ1bmN0aW9uIGJhc2VGaW5kSW5kZXgoYXJyYXksIHByZWRpY2F0ZSwgZnJvbUluZGV4LCBmcm9tUmlnaHQpIHtcbiAgICB2YXIgbGVuZ3RoID0gYXJyYXkubGVuZ3RoLFxuICAgICAgICBpbmRleCA9IGZyb21JbmRleCArIChmcm9tUmlnaHQgPyAxIDogLTEpO1xuXG4gICAgd2hpbGUgKChmcm9tUmlnaHQgPyBpbmRleC0tIDogKytpbmRleCA8IGxlbmd0aCkpIHtcbiAgICAgIGlmIChwcmVkaWNhdGUoYXJyYXlbaW5kZXhdLCBpbmRleCwgYXJyYXkpKSB7XG4gICAgICAgIHJldHVybiBpbmRleDtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIC0xO1xuICB9XG5cbiAgLyoqXG4gICAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLmluZGV4T2ZgIHdpdGhvdXQgYGZyb21JbmRleGAgYm91bmRzIGNoZWNrcy5cbiAgICpcbiAgICogQHByaXZhdGVcbiAgICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIGluc3BlY3QuXG4gICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIHNlYXJjaCBmb3IuXG4gICAqIEBwYXJhbSB7bnVtYmVyfSBmcm9tSW5kZXggVGhlIGluZGV4IHRvIHNlYXJjaCBmcm9tLlxuICAgKiBAcmV0dXJucyB7bnVtYmVyfSBSZXR1cm5zIHRoZSBpbmRleCBvZiB0aGUgbWF0Y2hlZCB2YWx1ZSwgZWxzZSBgLTFgLlxuICAgKi9cbiAgZnVuY3Rpb24gYmFzZUluZGV4T2YoYXJyYXksIHZhbHVlLCBmcm9tSW5kZXgpIHtcbiAgICByZXR1cm4gdmFsdWUgPT09IHZhbHVlXG4gICAgICA/IHN0cmljdEluZGV4T2YoYXJyYXksIHZhbHVlLCBmcm9tSW5kZXgpXG4gICAgICA6IGJhc2VGaW5kSW5kZXgoYXJyYXksIGJhc2VJc05hTiwgZnJvbUluZGV4KTtcbiAgfVxuXG4gIC8qKlxuICAgKiBUaGlzIGZ1bmN0aW9uIGlzIGxpa2UgYGJhc2VJbmRleE9mYCBleGNlcHQgdGhhdCBpdCBhY2NlcHRzIGEgY29tcGFyYXRvci5cbiAgICpcbiAgICogQHByaXZhdGVcbiAgICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIGluc3BlY3QuXG4gICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIHNlYXJjaCBmb3IuXG4gICAqIEBwYXJhbSB7bnVtYmVyfSBmcm9tSW5kZXggVGhlIGluZGV4IHRvIHNlYXJjaCBmcm9tLlxuICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBjb21wYXJhdG9yIFRoZSBjb21wYXJhdG9yIGludm9rZWQgcGVyIGVsZW1lbnQuXG4gICAqIEByZXR1cm5zIHtudW1iZXJ9IFJldHVybnMgdGhlIGluZGV4IG9mIHRoZSBtYXRjaGVkIHZhbHVlLCBlbHNlIGAtMWAuXG4gICAqL1xuICBmdW5jdGlvbiBiYXNlSW5kZXhPZldpdGgoYXJyYXksIHZhbHVlLCBmcm9tSW5kZXgsIGNvbXBhcmF0b3IpIHtcbiAgICB2YXIgaW5kZXggPSBmcm9tSW5kZXggLSAxLFxuICAgICAgICBsZW5ndGggPSBhcnJheS5sZW5ndGg7XG5cbiAgICB3aGlsZSAoKytpbmRleCA8IGxlbmd0aCkge1xuICAgICAgaWYgKGNvbXBhcmF0b3IoYXJyYXlbaW5kZXhdLCB2YWx1ZSkpIHtcbiAgICAgICAgcmV0dXJuIGluZGV4O1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gLTE7XG4gIH1cblxuICAvKipcbiAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8uaXNOYU5gIHdpdGhvdXQgc3VwcG9ydCBmb3IgbnVtYmVyIG9iamVjdHMuXG4gICAqXG4gICAqIEBwcml2YXRlXG4gICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBgTmFOYCwgZWxzZSBgZmFsc2VgLlxuICAgKi9cbiAgZnVuY3Rpb24gYmFzZUlzTmFOKHZhbHVlKSB7XG4gICAgcmV0dXJuIHZhbHVlICE9PSB2YWx1ZTtcbiAgfVxuXG4gIC8qKlxuICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5tZWFuYCBhbmQgYF8ubWVhbkJ5YCB3aXRob3V0IHN1cHBvcnQgZm9yXG4gICAqIGl0ZXJhdGVlIHNob3J0aGFuZHMuXG4gICAqXG4gICAqIEBwcml2YXRlXG4gICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBpdGVyYXRlIG92ZXIuXG4gICAqIEBwYXJhbSB7RnVuY3Rpb259IGl0ZXJhdGVlIFRoZSBmdW5jdGlvbiBpbnZva2VkIHBlciBpdGVyYXRpb24uXG4gICAqIEByZXR1cm5zIHtudW1iZXJ9IFJldHVybnMgdGhlIG1lYW4uXG4gICAqL1xuICBmdW5jdGlvbiBiYXNlTWVhbihhcnJheSwgaXRlcmF0ZWUpIHtcbiAgICB2YXIgbGVuZ3RoID0gYXJyYXkgPT0gbnVsbCA/IDAgOiBhcnJheS5sZW5ndGg7XG4gICAgcmV0dXJuIGxlbmd0aCA/IChiYXNlU3VtKGFycmF5LCBpdGVyYXRlZSkgLyBsZW5ndGgpIDogTkFOO1xuICB9XG5cbiAgLyoqXG4gICAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLnByb3BlcnR5YCB3aXRob3V0IHN1cHBvcnQgZm9yIGRlZXAgcGF0aHMuXG4gICAqXG4gICAqIEBwcml2YXRlXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgVGhlIGtleSBvZiB0aGUgcHJvcGVydHkgdG8gZ2V0LlxuICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyBhY2Nlc3NvciBmdW5jdGlvbi5cbiAgICovXG4gIGZ1bmN0aW9uIGJhc2VQcm9wZXJ0eShrZXkpIHtcbiAgICByZXR1cm4gZnVuY3Rpb24ob2JqZWN0KSB7XG4gICAgICByZXR1cm4gb2JqZWN0ID09IG51bGwgPyB1bmRlZmluZWQgOiBvYmplY3Rba2V5XTtcbiAgICB9O1xuICB9XG5cbiAgLyoqXG4gICAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLnByb3BlcnR5T2ZgIHdpdGhvdXQgc3VwcG9ydCBmb3IgZGVlcCBwYXRocy5cbiAgICpcbiAgICogQHByaXZhdGVcbiAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIHF1ZXJ5LlxuICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyBhY2Nlc3NvciBmdW5jdGlvbi5cbiAgICovXG4gIGZ1bmN0aW9uIGJhc2VQcm9wZXJ0eU9mKG9iamVjdCkge1xuICAgIHJldHVybiBmdW5jdGlvbihrZXkpIHtcbiAgICAgIHJldHVybiBvYmplY3QgPT0gbnVsbCA/IHVuZGVmaW5lZCA6IG9iamVjdFtrZXldO1xuICAgIH07XG4gIH1cblxuICAvKipcbiAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8ucmVkdWNlYCBhbmQgYF8ucmVkdWNlUmlnaHRgLCB3aXRob3V0IHN1cHBvcnRcbiAgICogZm9yIGl0ZXJhdGVlIHNob3J0aGFuZHMsIHdoaWNoIGl0ZXJhdGVzIG92ZXIgYGNvbGxlY3Rpb25gIHVzaW5nIGBlYWNoRnVuY2AuXG4gICAqXG4gICAqIEBwcml2YXRlXG4gICAqIEBwYXJhbSB7QXJyYXl8T2JqZWN0fSBjb2xsZWN0aW9uIFRoZSBjb2xsZWN0aW9uIHRvIGl0ZXJhdGUgb3Zlci5cbiAgICogQHBhcmFtIHtGdW5jdGlvbn0gaXRlcmF0ZWUgVGhlIGZ1bmN0aW9uIGludm9rZWQgcGVyIGl0ZXJhdGlvbi5cbiAgICogQHBhcmFtIHsqfSBhY2N1bXVsYXRvciBUaGUgaW5pdGlhbCB2YWx1ZS5cbiAgICogQHBhcmFtIHtib29sZWFufSBpbml0QWNjdW0gU3BlY2lmeSB1c2luZyB0aGUgZmlyc3Qgb3IgbGFzdCBlbGVtZW50IG9mXG4gICAqICBgY29sbGVjdGlvbmAgYXMgdGhlIGluaXRpYWwgdmFsdWUuXG4gICAqIEBwYXJhbSB7RnVuY3Rpb259IGVhY2hGdW5jIFRoZSBmdW5jdGlvbiB0byBpdGVyYXRlIG92ZXIgYGNvbGxlY3Rpb25gLlxuICAgKiBAcmV0dXJucyB7Kn0gUmV0dXJucyB0aGUgYWNjdW11bGF0ZWQgdmFsdWUuXG4gICAqL1xuICBmdW5jdGlvbiBiYXNlUmVkdWNlKGNvbGxlY3Rpb24sIGl0ZXJhdGVlLCBhY2N1bXVsYXRvciwgaW5pdEFjY3VtLCBlYWNoRnVuYykge1xuICAgIGVhY2hGdW5jKGNvbGxlY3Rpb24sIGZ1bmN0aW9uKHZhbHVlLCBpbmRleCwgY29sbGVjdGlvbikge1xuICAgICAgYWNjdW11bGF0b3IgPSBpbml0QWNjdW1cbiAgICAgICAgPyAoaW5pdEFjY3VtID0gZmFsc2UsIHZhbHVlKVxuICAgICAgICA6IGl0ZXJhdGVlKGFjY3VtdWxhdG9yLCB2YWx1ZSwgaW5kZXgsIGNvbGxlY3Rpb24pO1xuICAgIH0pO1xuICAgIHJldHVybiBhY2N1bXVsYXRvcjtcbiAgfVxuXG4gIC8qKlxuICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5zb3J0QnlgIHdoaWNoIHVzZXMgYGNvbXBhcmVyYCB0byBkZWZpbmUgdGhlXG4gICAqIHNvcnQgb3JkZXIgb2YgYGFycmF5YCBhbmQgcmVwbGFjZXMgY3JpdGVyaWEgb2JqZWN0cyB3aXRoIHRoZWlyIGNvcnJlc3BvbmRpbmdcbiAgICogdmFsdWVzLlxuICAgKlxuICAgKiBAcHJpdmF0ZVxuICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gc29ydC5cbiAgICogQHBhcmFtIHtGdW5jdGlvbn0gY29tcGFyZXIgVGhlIGZ1bmN0aW9uIHRvIGRlZmluZSBzb3J0IG9yZGVyLlxuICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgYGFycmF5YC5cbiAgICovXG4gIGZ1bmN0aW9uIGJhc2VTb3J0QnkoYXJyYXksIGNvbXBhcmVyKSB7XG4gICAgdmFyIGxlbmd0aCA9IGFycmF5Lmxlbmd0aDtcblxuICAgIGFycmF5LnNvcnQoY29tcGFyZXIpO1xuICAgIHdoaWxlIChsZW5ndGgtLSkge1xuICAgICAgYXJyYXlbbGVuZ3RoXSA9IGFycmF5W2xlbmd0aF0udmFsdWU7XG4gICAgfVxuICAgIHJldHVybiBhcnJheTtcbiAgfVxuXG4gIC8qKlxuICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5zdW1gIGFuZCBgXy5zdW1CeWAgd2l0aG91dCBzdXBwb3J0IGZvclxuICAgKiBpdGVyYXRlZSBzaG9ydGhhbmRzLlxuICAgKlxuICAgKiBAcHJpdmF0ZVxuICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gaXRlcmF0ZSBvdmVyLlxuICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBpdGVyYXRlZSBUaGUgZnVuY3Rpb24gaW52b2tlZCBwZXIgaXRlcmF0aW9uLlxuICAgKiBAcmV0dXJucyB7bnVtYmVyfSBSZXR1cm5zIHRoZSBzdW0uXG4gICAqL1xuICBmdW5jdGlvbiBiYXNlU3VtKGFycmF5LCBpdGVyYXRlZSkge1xuICAgIHZhciByZXN1bHQsXG4gICAgICAgIGluZGV4ID0gLTEsXG4gICAgICAgIGxlbmd0aCA9IGFycmF5Lmxlbmd0aDtcblxuICAgIHdoaWxlICgrK2luZGV4IDwgbGVuZ3RoKSB7XG4gICAgICB2YXIgY3VycmVudCA9IGl0ZXJhdGVlKGFycmF5W2luZGV4XSk7XG4gICAgICBpZiAoY3VycmVudCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIHJlc3VsdCA9IHJlc3VsdCA9PT0gdW5kZWZpbmVkID8gY3VycmVudCA6IChyZXN1bHQgKyBjdXJyZW50KTtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfVxuXG4gIC8qKlxuICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy50aW1lc2Agd2l0aG91dCBzdXBwb3J0IGZvciBpdGVyYXRlZSBzaG9ydGhhbmRzXG4gICAqIG9yIG1heCBhcnJheSBsZW5ndGggY2hlY2tzLlxuICAgKlxuICAgKiBAcHJpdmF0ZVxuICAgKiBAcGFyYW0ge251bWJlcn0gbiBUaGUgbnVtYmVyIG9mIHRpbWVzIHRvIGludm9rZSBgaXRlcmF0ZWVgLlxuICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBpdGVyYXRlZSBUaGUgZnVuY3Rpb24gaW52b2tlZCBwZXIgaXRlcmF0aW9uLlxuICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIGFycmF5IG9mIHJlc3VsdHMuXG4gICAqL1xuICBmdW5jdGlvbiBiYXNlVGltZXMobiwgaXRlcmF0ZWUpIHtcbiAgICB2YXIgaW5kZXggPSAtMSxcbiAgICAgICAgcmVzdWx0ID0gQXJyYXkobik7XG5cbiAgICB3aGlsZSAoKytpbmRleCA8IG4pIHtcbiAgICAgIHJlc3VsdFtpbmRleF0gPSBpdGVyYXRlZShpbmRleCk7XG4gICAgfVxuICAgIHJldHVybiByZXN1bHQ7XG4gIH1cblxuICAvKipcbiAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8udG9QYWlyc2AgYW5kIGBfLnRvUGFpcnNJbmAgd2hpY2ggY3JlYXRlcyBhbiBhcnJheVxuICAgKiBvZiBrZXktdmFsdWUgcGFpcnMgZm9yIGBvYmplY3RgIGNvcnJlc3BvbmRpbmcgdG8gdGhlIHByb3BlcnR5IG5hbWVzIG9mIGBwcm9wc2AuXG4gICAqXG4gICAqIEBwcml2YXRlXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBxdWVyeS5cbiAgICogQHBhcmFtIHtBcnJheX0gcHJvcHMgVGhlIHByb3BlcnR5IG5hbWVzIHRvIGdldCB2YWx1ZXMgZm9yLlxuICAgKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIHRoZSBrZXktdmFsdWUgcGFpcnMuXG4gICAqL1xuICBmdW5jdGlvbiBiYXNlVG9QYWlycyhvYmplY3QsIHByb3BzKSB7XG4gICAgcmV0dXJuIGFycmF5TWFwKHByb3BzLCBmdW5jdGlvbihrZXkpIHtcbiAgICAgIHJldHVybiBba2V5LCBvYmplY3Rba2V5XV07XG4gICAgfSk7XG4gIH1cblxuICAvKipcbiAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8udHJpbWAuXG4gICAqXG4gICAqIEBwcml2YXRlXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBzdHJpbmcgVGhlIHN0cmluZyB0byB0cmltLlxuICAgKiBAcmV0dXJucyB7c3RyaW5nfSBSZXR1cm5zIHRoZSB0cmltbWVkIHN0cmluZy5cbiAgICovXG4gIGZ1bmN0aW9uIGJhc2VUcmltKHN0cmluZykge1xuICAgIHJldHVybiBzdHJpbmdcbiAgICAgID8gc3RyaW5nLnNsaWNlKDAsIHRyaW1tZWRFbmRJbmRleChzdHJpbmcpICsgMSkucmVwbGFjZShyZVRyaW1TdGFydCwgJycpXG4gICAgICA6IHN0cmluZztcbiAgfVxuXG4gIC8qKlxuICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy51bmFyeWAgd2l0aG91dCBzdXBwb3J0IGZvciBzdG9yaW5nIG1ldGFkYXRhLlxuICAgKlxuICAgKiBAcHJpdmF0ZVxuICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBmdW5jIFRoZSBmdW5jdGlvbiB0byBjYXAgYXJndW1lbnRzIGZvci5cbiAgICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgY2FwcGVkIGZ1bmN0aW9uLlxuICAgKi9cbiAgZnVuY3Rpb24gYmFzZVVuYXJ5KGZ1bmMpIHtcbiAgICByZXR1cm4gZnVuY3Rpb24odmFsdWUpIHtcbiAgICAgIHJldHVybiBmdW5jKHZhbHVlKTtcbiAgICB9O1xuICB9XG5cbiAgLyoqXG4gICAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLnZhbHVlc2AgYW5kIGBfLnZhbHVlc0luYCB3aGljaCBjcmVhdGVzIGFuXG4gICAqIGFycmF5IG9mIGBvYmplY3RgIHByb3BlcnR5IHZhbHVlcyBjb3JyZXNwb25kaW5nIHRvIHRoZSBwcm9wZXJ0eSBuYW1lc1xuICAgKiBvZiBgcHJvcHNgLlxuICAgKlxuICAgKiBAcHJpdmF0ZVxuICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gcXVlcnkuXG4gICAqIEBwYXJhbSB7QXJyYXl9IHByb3BzIFRoZSBwcm9wZXJ0eSBuYW1lcyB0byBnZXQgdmFsdWVzIGZvci5cbiAgICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyB0aGUgYXJyYXkgb2YgcHJvcGVydHkgdmFsdWVzLlxuICAgKi9cbiAgZnVuY3Rpb24gYmFzZVZhbHVlcyhvYmplY3QsIHByb3BzKSB7XG4gICAgcmV0dXJuIGFycmF5TWFwKHByb3BzLCBmdW5jdGlvbihrZXkpIHtcbiAgICAgIHJldHVybiBvYmplY3Rba2V5XTtcbiAgICB9KTtcbiAgfVxuXG4gIC8qKlxuICAgKiBDaGVja3MgaWYgYSBgY2FjaGVgIHZhbHVlIGZvciBga2V5YCBleGlzdHMuXG4gICAqXG4gICAqIEBwcml2YXRlXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBjYWNoZSBUaGUgY2FjaGUgdG8gcXVlcnkuXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgVGhlIGtleSBvZiB0aGUgZW50cnkgdG8gY2hlY2suXG4gICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBhbiBlbnRyeSBmb3IgYGtleWAgZXhpc3RzLCBlbHNlIGBmYWxzZWAuXG4gICAqL1xuICBmdW5jdGlvbiBjYWNoZUhhcyhjYWNoZSwga2V5KSB7XG4gICAgcmV0dXJuIGNhY2hlLmhhcyhrZXkpO1xuICB9XG5cbiAgLyoqXG4gICAqIFVzZWQgYnkgYF8udHJpbWAgYW5kIGBfLnRyaW1TdGFydGAgdG8gZ2V0IHRoZSBpbmRleCBvZiB0aGUgZmlyc3Qgc3RyaW5nIHN5bWJvbFxuICAgKiB0aGF0IGlzIG5vdCBmb3VuZCBpbiB0aGUgY2hhcmFjdGVyIHN5bWJvbHMuXG4gICAqXG4gICAqIEBwcml2YXRlXG4gICAqIEBwYXJhbSB7QXJyYXl9IHN0clN5bWJvbHMgVGhlIHN0cmluZyBzeW1ib2xzIHRvIGluc3BlY3QuXG4gICAqIEBwYXJhbSB7QXJyYXl9IGNoclN5bWJvbHMgVGhlIGNoYXJhY3RlciBzeW1ib2xzIHRvIGZpbmQuXG4gICAqIEByZXR1cm5zIHtudW1iZXJ9IFJldHVybnMgdGhlIGluZGV4IG9mIHRoZSBmaXJzdCB1bm1hdGNoZWQgc3RyaW5nIHN5bWJvbC5cbiAgICovXG4gIGZ1bmN0aW9uIGNoYXJzU3RhcnRJbmRleChzdHJTeW1ib2xzLCBjaHJTeW1ib2xzKSB7XG4gICAgdmFyIGluZGV4ID0gLTEsXG4gICAgICAgIGxlbmd0aCA9IHN0clN5bWJvbHMubGVuZ3RoO1xuXG4gICAgd2hpbGUgKCsraW5kZXggPCBsZW5ndGggJiYgYmFzZUluZGV4T2YoY2hyU3ltYm9scywgc3RyU3ltYm9sc1tpbmRleF0sIDApID4gLTEpIHt9XG4gICAgcmV0dXJuIGluZGV4O1xuICB9XG5cbiAgLyoqXG4gICAqIFVzZWQgYnkgYF8udHJpbWAgYW5kIGBfLnRyaW1FbmRgIHRvIGdldCB0aGUgaW5kZXggb2YgdGhlIGxhc3Qgc3RyaW5nIHN5bWJvbFxuICAgKiB0aGF0IGlzIG5vdCBmb3VuZCBpbiB0aGUgY2hhcmFjdGVyIHN5bWJvbHMuXG4gICAqXG4gICAqIEBwcml2YXRlXG4gICAqIEBwYXJhbSB7QXJyYXl9IHN0clN5bWJvbHMgVGhlIHN0cmluZyBzeW1ib2xzIHRvIGluc3BlY3QuXG4gICAqIEBwYXJhbSB7QXJyYXl9IGNoclN5bWJvbHMgVGhlIGNoYXJhY3RlciBzeW1ib2xzIHRvIGZpbmQuXG4gICAqIEByZXR1cm5zIHtudW1iZXJ9IFJldHVybnMgdGhlIGluZGV4IG9mIHRoZSBsYXN0IHVubWF0Y2hlZCBzdHJpbmcgc3ltYm9sLlxuICAgKi9cbiAgZnVuY3Rpb24gY2hhcnNFbmRJbmRleChzdHJTeW1ib2xzLCBjaHJTeW1ib2xzKSB7XG4gICAgdmFyIGluZGV4ID0gc3RyU3ltYm9scy5sZW5ndGg7XG5cbiAgICB3aGlsZSAoaW5kZXgtLSAmJiBiYXNlSW5kZXhPZihjaHJTeW1ib2xzLCBzdHJTeW1ib2xzW2luZGV4XSwgMCkgPiAtMSkge31cbiAgICByZXR1cm4gaW5kZXg7XG4gIH1cblxuICAvKipcbiAgICogR2V0cyB0aGUgbnVtYmVyIG9mIGBwbGFjZWhvbGRlcmAgb2NjdXJyZW5jZXMgaW4gYGFycmF5YC5cbiAgICpcbiAgICogQHByaXZhdGVcbiAgICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIGluc3BlY3QuXG4gICAqIEBwYXJhbSB7Kn0gcGxhY2Vob2xkZXIgVGhlIHBsYWNlaG9sZGVyIHRvIHNlYXJjaCBmb3IuXG4gICAqIEByZXR1cm5zIHtudW1iZXJ9IFJldHVybnMgdGhlIHBsYWNlaG9sZGVyIGNvdW50LlxuICAgKi9cbiAgZnVuY3Rpb24gY291bnRIb2xkZXJzKGFycmF5LCBwbGFjZWhvbGRlcikge1xuICAgIHZhciBsZW5ndGggPSBhcnJheS5sZW5ndGgsXG4gICAgICAgIHJlc3VsdCA9IDA7XG5cbiAgICB3aGlsZSAobGVuZ3RoLS0pIHtcbiAgICAgIGlmIChhcnJheVtsZW5ndGhdID09PSBwbGFjZWhvbGRlcikge1xuICAgICAgICArK3Jlc3VsdDtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfVxuXG4gIC8qKlxuICAgKiBVc2VkIGJ5IGBfLmRlYnVycmAgdG8gY29udmVydCBMYXRpbi0xIFN1cHBsZW1lbnQgYW5kIExhdGluIEV4dGVuZGVkLUFcbiAgICogbGV0dGVycyB0byBiYXNpYyBMYXRpbiBsZXR0ZXJzLlxuICAgKlxuICAgKiBAcHJpdmF0ZVxuICAgKiBAcGFyYW0ge3N0cmluZ30gbGV0dGVyIFRoZSBtYXRjaGVkIGxldHRlciB0byBkZWJ1cnIuXG4gICAqIEByZXR1cm5zIHtzdHJpbmd9IFJldHVybnMgdGhlIGRlYnVycmVkIGxldHRlci5cbiAgICovXG4gIHZhciBkZWJ1cnJMZXR0ZXIgPSBiYXNlUHJvcGVydHlPZihkZWJ1cnJlZExldHRlcnMpO1xuXG4gIC8qKlxuICAgKiBVc2VkIGJ5IGBfLmVzY2FwZWAgdG8gY29udmVydCBjaGFyYWN0ZXJzIHRvIEhUTUwgZW50aXRpZXMuXG4gICAqXG4gICAqIEBwcml2YXRlXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBjaHIgVGhlIG1hdGNoZWQgY2hhcmFjdGVyIHRvIGVzY2FwZS5cbiAgICogQHJldHVybnMge3N0cmluZ30gUmV0dXJucyB0aGUgZXNjYXBlZCBjaGFyYWN0ZXIuXG4gICAqL1xuICB2YXIgZXNjYXBlSHRtbENoYXIgPSBiYXNlUHJvcGVydHlPZihodG1sRXNjYXBlcyk7XG5cbiAgLyoqXG4gICAqIFVzZWQgYnkgYF8udGVtcGxhdGVgIHRvIGVzY2FwZSBjaGFyYWN0ZXJzIGZvciBpbmNsdXNpb24gaW4gY29tcGlsZWQgc3RyaW5nIGxpdGVyYWxzLlxuICAgKlxuICAgKiBAcHJpdmF0ZVxuICAgKiBAcGFyYW0ge3N0cmluZ30gY2hyIFRoZSBtYXRjaGVkIGNoYXJhY3RlciB0byBlc2NhcGUuXG4gICAqIEByZXR1cm5zIHtzdHJpbmd9IFJldHVybnMgdGhlIGVzY2FwZWQgY2hhcmFjdGVyLlxuICAgKi9cbiAgZnVuY3Rpb24gZXNjYXBlU3RyaW5nQ2hhcihjaHIpIHtcbiAgICByZXR1cm4gJ1xcXFwnICsgc3RyaW5nRXNjYXBlc1tjaHJdO1xuICB9XG5cbiAgLyoqXG4gICAqIEdldHMgdGhlIHZhbHVlIGF0IGBrZXlgIG9mIGBvYmplY3RgLlxuICAgKlxuICAgKiBAcHJpdmF0ZVxuICAgKiBAcGFyYW0ge09iamVjdH0gW29iamVjdF0gVGhlIG9iamVjdCB0byBxdWVyeS5cbiAgICogQHBhcmFtIHtzdHJpbmd9IGtleSBUaGUga2V5IG9mIHRoZSBwcm9wZXJ0eSB0byBnZXQuXG4gICAqIEByZXR1cm5zIHsqfSBSZXR1cm5zIHRoZSBwcm9wZXJ0eSB2YWx1ZS5cbiAgICovXG4gIGZ1bmN0aW9uIGdldFZhbHVlKG9iamVjdCwga2V5KSB7XG4gICAgcmV0dXJuIG9iamVjdCA9PSBudWxsID8gdW5kZWZpbmVkIDogb2JqZWN0W2tleV07XG4gIH1cblxuICAvKipcbiAgICogQ2hlY2tzIGlmIGBzdHJpbmdgIGNvbnRhaW5zIFVuaWNvZGUgc3ltYm9scy5cbiAgICpcbiAgICogQHByaXZhdGVcbiAgICogQHBhcmFtIHtzdHJpbmd9IHN0cmluZyBUaGUgc3RyaW5nIHRvIGluc3BlY3QuXG4gICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBhIHN5bWJvbCBpcyBmb3VuZCwgZWxzZSBgZmFsc2VgLlxuICAgKi9cbiAgZnVuY3Rpb24gaGFzVW5pY29kZShzdHJpbmcpIHtcbiAgICByZXR1cm4gcmVIYXNVbmljb2RlLnRlc3Qoc3RyaW5nKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBDaGVja3MgaWYgYHN0cmluZ2AgY29udGFpbnMgYSB3b3JkIGNvbXBvc2VkIG9mIFVuaWNvZGUgc3ltYm9scy5cbiAgICpcbiAgICogQHByaXZhdGVcbiAgICogQHBhcmFtIHtzdHJpbmd9IHN0cmluZyBUaGUgc3RyaW5nIHRvIGluc3BlY3QuXG4gICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBhIHdvcmQgaXMgZm91bmQsIGVsc2UgYGZhbHNlYC5cbiAgICovXG4gIGZ1bmN0aW9uIGhhc1VuaWNvZGVXb3JkKHN0cmluZykge1xuICAgIHJldHVybiByZUhhc1VuaWNvZGVXb3JkLnRlc3Qoc3RyaW5nKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBDb252ZXJ0cyBgaXRlcmF0b3JgIHRvIGFuIGFycmF5LlxuICAgKlxuICAgKiBAcHJpdmF0ZVxuICAgKiBAcGFyYW0ge09iamVjdH0gaXRlcmF0b3IgVGhlIGl0ZXJhdG9yIHRvIGNvbnZlcnQuXG4gICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgY29udmVydGVkIGFycmF5LlxuICAgKi9cbiAgZnVuY3Rpb24gaXRlcmF0b3JUb0FycmF5KGl0ZXJhdG9yKSB7XG4gICAgdmFyIGRhdGEsXG4gICAgICAgIHJlc3VsdCA9IFtdO1xuXG4gICAgd2hpbGUgKCEoZGF0YSA9IGl0ZXJhdG9yLm5leHQoKSkuZG9uZSkge1xuICAgICAgcmVzdWx0LnB1c2goZGF0YS52YWx1ZSk7XG4gICAgfVxuICAgIHJldHVybiByZXN1bHQ7XG4gIH1cblxuICAvKipcbiAgICogQ29udmVydHMgYG1hcGAgdG8gaXRzIGtleS12YWx1ZSBwYWlycy5cbiAgICpcbiAgICogQHByaXZhdGVcbiAgICogQHBhcmFtIHtPYmplY3R9IG1hcCBUaGUgbWFwIHRvIGNvbnZlcnQuXG4gICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUga2V5LXZhbHVlIHBhaXJzLlxuICAgKi9cbiAgZnVuY3Rpb24gbWFwVG9BcnJheShtYXApIHtcbiAgICB2YXIgaW5kZXggPSAtMSxcbiAgICAgICAgcmVzdWx0ID0gQXJyYXkobWFwLnNpemUpO1xuXG4gICAgbWFwLmZvckVhY2goZnVuY3Rpb24odmFsdWUsIGtleSkge1xuICAgICAgcmVzdWx0WysraW5kZXhdID0gW2tleSwgdmFsdWVdO1xuICAgIH0pO1xuICAgIHJldHVybiByZXN1bHQ7XG4gIH1cblxuICAvKipcbiAgICogQ3JlYXRlcyBhIHVuYXJ5IGZ1bmN0aW9uIHRoYXQgaW52b2tlcyBgZnVuY2Agd2l0aCBpdHMgYXJndW1lbnQgdHJhbnNmb3JtZWQuXG4gICAqXG4gICAqIEBwcml2YXRlXG4gICAqIEBwYXJhbSB7RnVuY3Rpb259IGZ1bmMgVGhlIGZ1bmN0aW9uIHRvIHdyYXAuXG4gICAqIEBwYXJhbSB7RnVuY3Rpb259IHRyYW5zZm9ybSBUaGUgYXJndW1lbnQgdHJhbnNmb3JtLlxuICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyBmdW5jdGlvbi5cbiAgICovXG4gIGZ1bmN0aW9uIG92ZXJBcmcoZnVuYywgdHJhbnNmb3JtKSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uKGFyZykge1xuICAgICAgcmV0dXJuIGZ1bmModHJhbnNmb3JtKGFyZykpO1xuICAgIH07XG4gIH1cblxuICAvKipcbiAgICogUmVwbGFjZXMgYWxsIGBwbGFjZWhvbGRlcmAgZWxlbWVudHMgaW4gYGFycmF5YCB3aXRoIGFuIGludGVybmFsIHBsYWNlaG9sZGVyXG4gICAqIGFuZCByZXR1cm5zIGFuIGFycmF5IG9mIHRoZWlyIGluZGV4ZXMuXG4gICAqXG4gICAqIEBwcml2YXRlXG4gICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBtb2RpZnkuXG4gICAqIEBwYXJhbSB7Kn0gcGxhY2Vob2xkZXIgVGhlIHBsYWNlaG9sZGVyIHRvIHJlcGxhY2UuXG4gICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgbmV3IGFycmF5IG9mIHBsYWNlaG9sZGVyIGluZGV4ZXMuXG4gICAqL1xuICBmdW5jdGlvbiByZXBsYWNlSG9sZGVycyhhcnJheSwgcGxhY2Vob2xkZXIpIHtcbiAgICB2YXIgaW5kZXggPSAtMSxcbiAgICAgICAgbGVuZ3RoID0gYXJyYXkubGVuZ3RoLFxuICAgICAgICByZXNJbmRleCA9IDAsXG4gICAgICAgIHJlc3VsdCA9IFtdO1xuXG4gICAgd2hpbGUgKCsraW5kZXggPCBsZW5ndGgpIHtcbiAgICAgIHZhciB2YWx1ZSA9IGFycmF5W2luZGV4XTtcbiAgICAgIGlmICh2YWx1ZSA9PT0gcGxhY2Vob2xkZXIgfHwgdmFsdWUgPT09IFBMQUNFSE9MREVSKSB7XG4gICAgICAgIGFycmF5W2luZGV4XSA9IFBMQUNFSE9MREVSO1xuICAgICAgICByZXN1bHRbcmVzSW5kZXgrK10gPSBpbmRleDtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfVxuXG4gIC8qKlxuICAgKiBDb252ZXJ0cyBgc2V0YCB0byBhbiBhcnJheSBvZiBpdHMgdmFsdWVzLlxuICAgKlxuICAgKiBAcHJpdmF0ZVxuICAgKiBAcGFyYW0ge09iamVjdH0gc2V0IFRoZSBzZXQgdG8gY29udmVydC5cbiAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSB2YWx1ZXMuXG4gICAqL1xuICBmdW5jdGlvbiBzZXRUb0FycmF5KHNldCkge1xuICAgIHZhciBpbmRleCA9IC0xLFxuICAgICAgICByZXN1bHQgPSBBcnJheShzZXQuc2l6ZSk7XG5cbiAgICBzZXQuZm9yRWFjaChmdW5jdGlvbih2YWx1ZSkge1xuICAgICAgcmVzdWx0WysraW5kZXhdID0gdmFsdWU7XG4gICAgfSk7XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfVxuXG4gIC8qKlxuICAgKiBDb252ZXJ0cyBgc2V0YCB0byBpdHMgdmFsdWUtdmFsdWUgcGFpcnMuXG4gICAqXG4gICAqIEBwcml2YXRlXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBzZXQgVGhlIHNldCB0byBjb252ZXJ0LlxuICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIHZhbHVlLXZhbHVlIHBhaXJzLlxuICAgKi9cbiAgZnVuY3Rpb24gc2V0VG9QYWlycyhzZXQpIHtcbiAgICB2YXIgaW5kZXggPSAtMSxcbiAgICAgICAgcmVzdWx0ID0gQXJyYXkoc2V0LnNpemUpO1xuXG4gICAgc2V0LmZvckVhY2goZnVuY3Rpb24odmFsdWUpIHtcbiAgICAgIHJlc3VsdFsrK2luZGV4XSA9IFt2YWx1ZSwgdmFsdWVdO1xuICAgIH0pO1xuICAgIHJldHVybiByZXN1bHQ7XG4gIH1cblxuICAvKipcbiAgICogQSBzcGVjaWFsaXplZCB2ZXJzaW9uIG9mIGBfLmluZGV4T2ZgIHdoaWNoIHBlcmZvcm1zIHN0cmljdCBlcXVhbGl0eVxuICAgKiBjb21wYXJpc29ucyBvZiB2YWx1ZXMsIGkuZS4gYD09PWAuXG4gICAqXG4gICAqIEBwcml2YXRlXG4gICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBpbnNwZWN0LlxuICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBzZWFyY2ggZm9yLlxuICAgKiBAcGFyYW0ge251bWJlcn0gZnJvbUluZGV4IFRoZSBpbmRleCB0byBzZWFyY2ggZnJvbS5cbiAgICogQHJldHVybnMge251bWJlcn0gUmV0dXJucyB0aGUgaW5kZXggb2YgdGhlIG1hdGNoZWQgdmFsdWUsIGVsc2UgYC0xYC5cbiAgICovXG4gIGZ1bmN0aW9uIHN0cmljdEluZGV4T2YoYXJyYXksIHZhbHVlLCBmcm9tSW5kZXgpIHtcbiAgICB2YXIgaW5kZXggPSBmcm9tSW5kZXggLSAxLFxuICAgICAgICBsZW5ndGggPSBhcnJheS5sZW5ndGg7XG5cbiAgICB3aGlsZSAoKytpbmRleCA8IGxlbmd0aCkge1xuICAgICAgaWYgKGFycmF5W2luZGV4XSA9PT0gdmFsdWUpIHtcbiAgICAgICAgcmV0dXJuIGluZGV4O1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gLTE7XG4gIH1cblxuICAvKipcbiAgICogQSBzcGVjaWFsaXplZCB2ZXJzaW9uIG9mIGBfLmxhc3RJbmRleE9mYCB3aGljaCBwZXJmb3JtcyBzdHJpY3QgZXF1YWxpdHlcbiAgICogY29tcGFyaXNvbnMgb2YgdmFsdWVzLCBpLmUuIGA9PT1gLlxuICAgKlxuICAgKiBAcHJpdmF0ZVxuICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gaW5zcGVjdC5cbiAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gc2VhcmNoIGZvci5cbiAgICogQHBhcmFtIHtudW1iZXJ9IGZyb21JbmRleCBUaGUgaW5kZXggdG8gc2VhcmNoIGZyb20uXG4gICAqIEByZXR1cm5zIHtudW1iZXJ9IFJldHVybnMgdGhlIGluZGV4IG9mIHRoZSBtYXRjaGVkIHZhbHVlLCBlbHNlIGAtMWAuXG4gICAqL1xuICBmdW5jdGlvbiBzdHJpY3RMYXN0SW5kZXhPZihhcnJheSwgdmFsdWUsIGZyb21JbmRleCkge1xuICAgIHZhciBpbmRleCA9IGZyb21JbmRleCArIDE7XG4gICAgd2hpbGUgKGluZGV4LS0pIHtcbiAgICAgIGlmIChhcnJheVtpbmRleF0gPT09IHZhbHVlKSB7XG4gICAgICAgIHJldHVybiBpbmRleDtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIGluZGV4O1xuICB9XG5cbiAgLyoqXG4gICAqIEdldHMgdGhlIG51bWJlciBvZiBzeW1ib2xzIGluIGBzdHJpbmdgLlxuICAgKlxuICAgKiBAcHJpdmF0ZVxuICAgKiBAcGFyYW0ge3N0cmluZ30gc3RyaW5nIFRoZSBzdHJpbmcgdG8gaW5zcGVjdC5cbiAgICogQHJldHVybnMge251bWJlcn0gUmV0dXJucyB0aGUgc3RyaW5nIHNpemUuXG4gICAqL1xuICBmdW5jdGlvbiBzdHJpbmdTaXplKHN0cmluZykge1xuICAgIHJldHVybiBoYXNVbmljb2RlKHN0cmluZylcbiAgICAgID8gdW5pY29kZVNpemUoc3RyaW5nKVxuICAgICAgOiBhc2NpaVNpemUoc3RyaW5nKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBDb252ZXJ0cyBgc3RyaW5nYCB0byBhbiBhcnJheS5cbiAgICpcbiAgICogQHByaXZhdGVcbiAgICogQHBhcmFtIHtzdHJpbmd9IHN0cmluZyBUaGUgc3RyaW5nIHRvIGNvbnZlcnQuXG4gICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgY29udmVydGVkIGFycmF5LlxuICAgKi9cbiAgZnVuY3Rpb24gc3RyaW5nVG9BcnJheShzdHJpbmcpIHtcbiAgICByZXR1cm4gaGFzVW5pY29kZShzdHJpbmcpXG4gICAgICA/IHVuaWNvZGVUb0FycmF5KHN0cmluZylcbiAgICAgIDogYXNjaWlUb0FycmF5KHN0cmluZyk7XG4gIH1cblxuICAvKipcbiAgICogVXNlZCBieSBgXy50cmltYCBhbmQgYF8udHJpbUVuZGAgdG8gZ2V0IHRoZSBpbmRleCBvZiB0aGUgbGFzdCBub24td2hpdGVzcGFjZVxuICAgKiBjaGFyYWN0ZXIgb2YgYHN0cmluZ2AuXG4gICAqXG4gICAqIEBwcml2YXRlXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBzdHJpbmcgVGhlIHN0cmluZyB0byBpbnNwZWN0LlxuICAgKiBAcmV0dXJucyB7bnVtYmVyfSBSZXR1cm5zIHRoZSBpbmRleCBvZiB0aGUgbGFzdCBub24td2hpdGVzcGFjZSBjaGFyYWN0ZXIuXG4gICAqL1xuICBmdW5jdGlvbiB0cmltbWVkRW5kSW5kZXgoc3RyaW5nKSB7XG4gICAgdmFyIGluZGV4ID0gc3RyaW5nLmxlbmd0aDtcblxuICAgIHdoaWxlIChpbmRleC0tICYmIHJlV2hpdGVzcGFjZS50ZXN0KHN0cmluZy5jaGFyQXQoaW5kZXgpKSkge31cbiAgICByZXR1cm4gaW5kZXg7XG4gIH1cblxuICAvKipcbiAgICogVXNlZCBieSBgXy51bmVzY2FwZWAgdG8gY29udmVydCBIVE1MIGVudGl0aWVzIHRvIGNoYXJhY3RlcnMuXG4gICAqXG4gICAqIEBwcml2YXRlXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBjaHIgVGhlIG1hdGNoZWQgY2hhcmFjdGVyIHRvIHVuZXNjYXBlLlxuICAgKiBAcmV0dXJucyB7c3RyaW5nfSBSZXR1cm5zIHRoZSB1bmVzY2FwZWQgY2hhcmFjdGVyLlxuICAgKi9cbiAgdmFyIHVuZXNjYXBlSHRtbENoYXIgPSBiYXNlUHJvcGVydHlPZihodG1sVW5lc2NhcGVzKTtcblxuICAvKipcbiAgICogR2V0cyB0aGUgc2l6ZSBvZiBhIFVuaWNvZGUgYHN0cmluZ2AuXG4gICAqXG4gICAqIEBwcml2YXRlXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBzdHJpbmcgVGhlIHN0cmluZyBpbnNwZWN0LlxuICAgKiBAcmV0dXJucyB7bnVtYmVyfSBSZXR1cm5zIHRoZSBzdHJpbmcgc2l6ZS5cbiAgICovXG4gIGZ1bmN0aW9uIHVuaWNvZGVTaXplKHN0cmluZykge1xuICAgIHZhciByZXN1bHQgPSByZVVuaWNvZGUubGFzdEluZGV4ID0gMDtcbiAgICB3aGlsZSAocmVVbmljb2RlLnRlc3Qoc3RyaW5nKSkge1xuICAgICAgKytyZXN1bHQ7XG4gICAgfVxuICAgIHJldHVybiByZXN1bHQ7XG4gIH1cblxuICAvKipcbiAgICogQ29udmVydHMgYSBVbmljb2RlIGBzdHJpbmdgIHRvIGFuIGFycmF5LlxuICAgKlxuICAgKiBAcHJpdmF0ZVxuICAgKiBAcGFyYW0ge3N0cmluZ30gc3RyaW5nIFRoZSBzdHJpbmcgdG8gY29udmVydC5cbiAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBjb252ZXJ0ZWQgYXJyYXkuXG4gICAqL1xuICBmdW5jdGlvbiB1bmljb2RlVG9BcnJheShzdHJpbmcpIHtcbiAgICByZXR1cm4gc3RyaW5nLm1hdGNoKHJlVW5pY29kZSkgfHwgW107XG4gIH1cblxuICAvKipcbiAgICogU3BsaXRzIGEgVW5pY29kZSBgc3RyaW5nYCBpbnRvIGFuIGFycmF5IG9mIGl0cyB3b3Jkcy5cbiAgICpcbiAgICogQHByaXZhdGVcbiAgICogQHBhcmFtIHtzdHJpbmd9IFRoZSBzdHJpbmcgdG8gaW5zcGVjdC5cbiAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSB3b3JkcyBvZiBgc3RyaW5nYC5cbiAgICovXG4gIGZ1bmN0aW9uIHVuaWNvZGVXb3JkcyhzdHJpbmcpIHtcbiAgICByZXR1cm4gc3RyaW5nLm1hdGNoKHJlVW5pY29kZVdvcmQpIHx8IFtdO1xuICB9XG5cbiAgLyotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSovXG5cbiAgLyoqXG4gICAqIENyZWF0ZSBhIG5ldyBwcmlzdGluZSBgbG9kYXNoYCBmdW5jdGlvbiB1c2luZyB0aGUgYGNvbnRleHRgIG9iamVjdC5cbiAgICpcbiAgICogQHN0YXRpY1xuICAgKiBAbWVtYmVyT2YgX1xuICAgKiBAc2luY2UgMS4xLjBcbiAgICogQGNhdGVnb3J5IFV0aWxcbiAgICogQHBhcmFtIHtPYmplY3R9IFtjb250ZXh0PXJvb3RdIFRoZSBjb250ZXh0IG9iamVjdC5cbiAgICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIGEgbmV3IGBsb2Rhc2hgIGZ1bmN0aW9uLlxuICAgKiBAZXhhbXBsZVxuICAgKlxuICAgKiBfLm1peGluKHsgJ2Zvbyc6IF8uY29uc3RhbnQoJ2ZvbycpIH0pO1xuICAgKlxuICAgKiB2YXIgbG9kYXNoID0gXy5ydW5JbkNvbnRleHQoKTtcbiAgICogbG9kYXNoLm1peGluKHsgJ2Jhcic6IGxvZGFzaC5jb25zdGFudCgnYmFyJykgfSk7XG4gICAqXG4gICAqIF8uaXNGdW5jdGlvbihfLmZvbyk7XG4gICAqIC8vID0+IHRydWVcbiAgICogXy5pc0Z1bmN0aW9uKF8uYmFyKTtcbiAgICogLy8gPT4gZmFsc2VcbiAgICpcbiAgICogbG9kYXNoLmlzRnVuY3Rpb24obG9kYXNoLmZvbyk7XG4gICAqIC8vID0+IGZhbHNlXG4gICAqIGxvZGFzaC5pc0Z1bmN0aW9uKGxvZGFzaC5iYXIpO1xuICAgKiAvLyA9PiB0cnVlXG4gICAqXG4gICAqIC8vIENyZWF0ZSBhIHN1cGVkLXVwIGBkZWZlcmAgaW4gTm9kZS5qcy5cbiAgICogdmFyIGRlZmVyID0gXy5ydW5JbkNvbnRleHQoeyAnc2V0VGltZW91dCc6IHNldEltbWVkaWF0ZSB9KS5kZWZlcjtcbiAgICovXG4gIHZhciBydW5JbkNvbnRleHQgPSAoZnVuY3Rpb24gcnVuSW5Db250ZXh0KGNvbnRleHQpIHtcbiAgICBjb250ZXh0ID0gY29udGV4dCA9PSBudWxsID8gcm9vdCA6IF8uZGVmYXVsdHMocm9vdC5PYmplY3QoKSwgY29udGV4dCwgXy5waWNrKHJvb3QsIGNvbnRleHRQcm9wcykpO1xuXG4gICAgLyoqIEJ1aWx0LWluIGNvbnN0cnVjdG9yIHJlZmVyZW5jZXMuICovXG4gICAgdmFyIEFycmF5ID0gY29udGV4dC5BcnJheSxcbiAgICAgICAgRGF0ZSA9IGNvbnRleHQuRGF0ZSxcbiAgICAgICAgRXJyb3IgPSBjb250ZXh0LkVycm9yLFxuICAgICAgICBGdW5jdGlvbiA9IGNvbnRleHQuRnVuY3Rpb24sXG4gICAgICAgIE1hdGggPSBjb250ZXh0Lk1hdGgsXG4gICAgICAgIE9iamVjdCA9IGNvbnRleHQuT2JqZWN0LFxuICAgICAgICBSZWdFeHAgPSBjb250ZXh0LlJlZ0V4cCxcbiAgICAgICAgU3RyaW5nID0gY29udGV4dC5TdHJpbmcsXG4gICAgICAgIFR5cGVFcnJvciA9IGNvbnRleHQuVHlwZUVycm9yO1xuXG4gICAgLyoqIFVzZWQgZm9yIGJ1aWx0LWluIG1ldGhvZCByZWZlcmVuY2VzLiAqL1xuICAgIHZhciBhcnJheVByb3RvID0gQXJyYXkucHJvdG90eXBlLFxuICAgICAgICBmdW5jUHJvdG8gPSBGdW5jdGlvbi5wcm90b3R5cGUsXG4gICAgICAgIG9iamVjdFByb3RvID0gT2JqZWN0LnByb3RvdHlwZTtcblxuICAgIC8qKiBVc2VkIHRvIGRldGVjdCBvdmVycmVhY2hpbmcgY29yZS1qcyBzaGltcy4gKi9cbiAgICB2YXIgY29yZUpzRGF0YSA9IGNvbnRleHRbJ19fY29yZS1qc19zaGFyZWRfXyddO1xuXG4gICAgLyoqIFVzZWQgdG8gcmVzb2x2ZSB0aGUgZGVjb21waWxlZCBzb3VyY2Ugb2YgZnVuY3Rpb25zLiAqL1xuICAgIHZhciBmdW5jVG9TdHJpbmcgPSBmdW5jUHJvdG8udG9TdHJpbmc7XG5cbiAgICAvKiogVXNlZCB0byBjaGVjayBvYmplY3RzIGZvciBvd24gcHJvcGVydGllcy4gKi9cbiAgICB2YXIgaGFzT3duUHJvcGVydHkgPSBvYmplY3RQcm90by5oYXNPd25Qcm9wZXJ0eTtcblxuICAgIC8qKiBVc2VkIHRvIGdlbmVyYXRlIHVuaXF1ZSBJRHMuICovXG4gICAgdmFyIGlkQ291bnRlciA9IDA7XG5cbiAgICAvKiogVXNlZCB0byBkZXRlY3QgbWV0aG9kcyBtYXNxdWVyYWRpbmcgYXMgbmF0aXZlLiAqL1xuICAgIHZhciBtYXNrU3JjS2V5ID0gKGZ1bmN0aW9uKCkge1xuICAgICAgdmFyIHVpZCA9IC9bXi5dKyQvLmV4ZWMoY29yZUpzRGF0YSAmJiBjb3JlSnNEYXRhLmtleXMgJiYgY29yZUpzRGF0YS5rZXlzLklFX1BST1RPIHx8ICcnKTtcbiAgICAgIHJldHVybiB1aWQgPyAoJ1N5bWJvbChzcmMpXzEuJyArIHVpZCkgOiAnJztcbiAgICB9KCkpO1xuXG4gICAgLyoqXG4gICAgICogVXNlZCB0byByZXNvbHZlIHRoZVxuICAgICAqIFtgdG9TdHJpbmdUYWdgXShodHRwOi8vZWNtYS1pbnRlcm5hdGlvbmFsLm9yZy9lY21hLTI2Mi83LjAvI3NlYy1vYmplY3QucHJvdG90eXBlLnRvc3RyaW5nKVxuICAgICAqIG9mIHZhbHVlcy5cbiAgICAgKi9cbiAgICB2YXIgbmF0aXZlT2JqZWN0VG9TdHJpbmcgPSBvYmplY3RQcm90by50b1N0cmluZztcblxuICAgIC8qKiBVc2VkIHRvIGluZmVyIHRoZSBgT2JqZWN0YCBjb25zdHJ1Y3Rvci4gKi9cbiAgICB2YXIgb2JqZWN0Q3RvclN0cmluZyA9IGZ1bmNUb1N0cmluZy5jYWxsKE9iamVjdCk7XG5cbiAgICAvKiogVXNlZCB0byByZXN0b3JlIHRoZSBvcmlnaW5hbCBgX2AgcmVmZXJlbmNlIGluIGBfLm5vQ29uZmxpY3RgLiAqL1xuICAgIHZhciBvbGREYXNoID0gcm9vdC5fO1xuXG4gICAgLyoqIFVzZWQgdG8gZGV0ZWN0IGlmIGEgbWV0aG9kIGlzIG5hdGl2ZS4gKi9cbiAgICB2YXIgcmVJc05hdGl2ZSA9IFJlZ0V4cCgnXicgK1xuICAgICAgZnVuY1RvU3RyaW5nLmNhbGwoaGFzT3duUHJvcGVydHkpLnJlcGxhY2UocmVSZWdFeHBDaGFyLCAnXFxcXCQmJylcbiAgICAgIC5yZXBsYWNlKC9oYXNPd25Qcm9wZXJ0eXwoZnVuY3Rpb24pLio/KD89XFxcXFxcKCl8IGZvciAuKz8oPz1cXFxcXFxdKS9nLCAnJDEuKj8nKSArICckJ1xuICAgICk7XG5cbiAgICAvKiogQnVpbHQtaW4gdmFsdWUgcmVmZXJlbmNlcy4gKi9cbiAgICB2YXIgQnVmZmVyID0gbW9kdWxlRXhwb3J0cyA/IGNvbnRleHQuQnVmZmVyIDogdW5kZWZpbmVkLFxuICAgICAgICBTeW1ib2wgPSBjb250ZXh0LlN5bWJvbCxcbiAgICAgICAgVWludDhBcnJheSA9IGNvbnRleHQuVWludDhBcnJheSxcbiAgICAgICAgYWxsb2NVbnNhZmUgPSBCdWZmZXIgPyBCdWZmZXIuYWxsb2NVbnNhZmUgOiB1bmRlZmluZWQsXG4gICAgICAgIGdldFByb3RvdHlwZSA9IG92ZXJBcmcoT2JqZWN0LmdldFByb3RvdHlwZU9mLCBPYmplY3QpLFxuICAgICAgICBvYmplY3RDcmVhdGUgPSBPYmplY3QuY3JlYXRlLFxuICAgICAgICBwcm9wZXJ0eUlzRW51bWVyYWJsZSA9IG9iamVjdFByb3RvLnByb3BlcnR5SXNFbnVtZXJhYmxlLFxuICAgICAgICBzcGxpY2UgPSBhcnJheVByb3RvLnNwbGljZSxcbiAgICAgICAgc3ByZWFkYWJsZVN5bWJvbCA9IFN5bWJvbCA/IFN5bWJvbC5pc0NvbmNhdFNwcmVhZGFibGUgOiB1bmRlZmluZWQsXG4gICAgICAgIHN5bUl0ZXJhdG9yID0gU3ltYm9sID8gU3ltYm9sLml0ZXJhdG9yIDogdW5kZWZpbmVkLFxuICAgICAgICBzeW1Ub1N0cmluZ1RhZyA9IFN5bWJvbCA/IFN5bWJvbC50b1N0cmluZ1RhZyA6IHVuZGVmaW5lZDtcblxuICAgIHZhciBkZWZpbmVQcm9wZXJ0eSA9IChmdW5jdGlvbigpIHtcbiAgICAgIHRyeSB7XG4gICAgICAgIHZhciBmdW5jID0gZ2V0TmF0aXZlKE9iamVjdCwgJ2RlZmluZVByb3BlcnR5Jyk7XG4gICAgICAgIGZ1bmMoe30sICcnLCB7fSk7XG4gICAgICAgIHJldHVybiBmdW5jO1xuICAgICAgfSBjYXRjaCAoZSkge31cbiAgICB9KCkpO1xuXG4gICAgLyoqIE1vY2tlZCBidWlsdC1pbnMuICovXG4gICAgdmFyIGN0eENsZWFyVGltZW91dCA9IGNvbnRleHQuY2xlYXJUaW1lb3V0ICE9PSByb290LmNsZWFyVGltZW91dCAmJiBjb250ZXh0LmNsZWFyVGltZW91dCxcbiAgICAgICAgY3R4Tm93ID0gRGF0ZSAmJiBEYXRlLm5vdyAhPT0gcm9vdC5EYXRlLm5vdyAmJiBEYXRlLm5vdyxcbiAgICAgICAgY3R4U2V0VGltZW91dCA9IGNvbnRleHQuc2V0VGltZW91dCAhPT0gcm9vdC5zZXRUaW1lb3V0ICYmIGNvbnRleHQuc2V0VGltZW91dDtcblxuICAgIC8qIEJ1aWx0LWluIG1ldGhvZCByZWZlcmVuY2VzIGZvciB0aG9zZSB3aXRoIHRoZSBzYW1lIG5hbWUgYXMgb3RoZXIgYGxvZGFzaGAgbWV0aG9kcy4gKi9cbiAgICB2YXIgbmF0aXZlQ2VpbCA9IE1hdGguY2VpbCxcbiAgICAgICAgbmF0aXZlRmxvb3IgPSBNYXRoLmZsb29yLFxuICAgICAgICBuYXRpdmVHZXRTeW1ib2xzID0gT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scyxcbiAgICAgICAgbmF0aXZlSXNCdWZmZXIgPSBCdWZmZXIgPyBCdWZmZXIuaXNCdWZmZXIgOiB1bmRlZmluZWQsXG4gICAgICAgIG5hdGl2ZUlzRmluaXRlID0gY29udGV4dC5pc0Zpbml0ZSxcbiAgICAgICAgbmF0aXZlSm9pbiA9IGFycmF5UHJvdG8uam9pbixcbiAgICAgICAgbmF0aXZlS2V5cyA9IG92ZXJBcmcoT2JqZWN0LmtleXMsIE9iamVjdCksXG4gICAgICAgIG5hdGl2ZU1heCA9IE1hdGgubWF4LFxuICAgICAgICBuYXRpdmVNaW4gPSBNYXRoLm1pbixcbiAgICAgICAgbmF0aXZlTm93ID0gRGF0ZS5ub3csXG4gICAgICAgIG5hdGl2ZVBhcnNlSW50ID0gY29udGV4dC5wYXJzZUludCxcbiAgICAgICAgbmF0aXZlUmFuZG9tID0gTWF0aC5yYW5kb20sXG4gICAgICAgIG5hdGl2ZVJldmVyc2UgPSBhcnJheVByb3RvLnJldmVyc2U7XG5cbiAgICAvKiBCdWlsdC1pbiBtZXRob2QgcmVmZXJlbmNlcyB0aGF0IGFyZSB2ZXJpZmllZCB0byBiZSBuYXRpdmUuICovXG4gICAgdmFyIERhdGFWaWV3ID0gZ2V0TmF0aXZlKGNvbnRleHQsICdEYXRhVmlldycpLFxuICAgICAgICBNYXAgPSBnZXROYXRpdmUoY29udGV4dCwgJ01hcCcpLFxuICAgICAgICBQcm9taXNlID0gZ2V0TmF0aXZlKGNvbnRleHQsICdQcm9taXNlJyksXG4gICAgICAgIFNldCA9IGdldE5hdGl2ZShjb250ZXh0LCAnU2V0JyksXG4gICAgICAgIFdlYWtNYXAgPSBnZXROYXRpdmUoY29udGV4dCwgJ1dlYWtNYXAnKSxcbiAgICAgICAgbmF0aXZlQ3JlYXRlID0gZ2V0TmF0aXZlKE9iamVjdCwgJ2NyZWF0ZScpO1xuXG4gICAgLyoqIFVzZWQgdG8gc3RvcmUgZnVuY3Rpb24gbWV0YWRhdGEuICovXG4gICAgdmFyIG1ldGFNYXAgPSBXZWFrTWFwICYmIG5ldyBXZWFrTWFwO1xuXG4gICAgLyoqIFVzZWQgdG8gbG9va3VwIHVubWluaWZpZWQgZnVuY3Rpb24gbmFtZXMuICovXG4gICAgdmFyIHJlYWxOYW1lcyA9IHt9O1xuXG4gICAgLyoqIFVzZWQgdG8gZGV0ZWN0IG1hcHMsIHNldHMsIGFuZCB3ZWFrbWFwcy4gKi9cbiAgICB2YXIgZGF0YVZpZXdDdG9yU3RyaW5nID0gdG9Tb3VyY2UoRGF0YVZpZXcpLFxuICAgICAgICBtYXBDdG9yU3RyaW5nID0gdG9Tb3VyY2UoTWFwKSxcbiAgICAgICAgcHJvbWlzZUN0b3JTdHJpbmcgPSB0b1NvdXJjZShQcm9taXNlKSxcbiAgICAgICAgc2V0Q3RvclN0cmluZyA9IHRvU291cmNlKFNldCksXG4gICAgICAgIHdlYWtNYXBDdG9yU3RyaW5nID0gdG9Tb3VyY2UoV2Vha01hcCk7XG5cbiAgICAvKiogVXNlZCB0byBjb252ZXJ0IHN5bWJvbHMgdG8gcHJpbWl0aXZlcyBhbmQgc3RyaW5ncy4gKi9cbiAgICB2YXIgc3ltYm9sUHJvdG8gPSBTeW1ib2wgPyBTeW1ib2wucHJvdG90eXBlIDogdW5kZWZpbmVkLFxuICAgICAgICBzeW1ib2xWYWx1ZU9mID0gc3ltYm9sUHJvdG8gPyBzeW1ib2xQcm90by52YWx1ZU9mIDogdW5kZWZpbmVkLFxuICAgICAgICBzeW1ib2xUb1N0cmluZyA9IHN5bWJvbFByb3RvID8gc3ltYm9sUHJvdG8udG9TdHJpbmcgOiB1bmRlZmluZWQ7XG5cbiAgICAvKi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSovXG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgYGxvZGFzaGAgb2JqZWN0IHdoaWNoIHdyYXBzIGB2YWx1ZWAgdG8gZW5hYmxlIGltcGxpY2l0IG1ldGhvZFxuICAgICAqIGNoYWluIHNlcXVlbmNlcy4gTWV0aG9kcyB0aGF0IG9wZXJhdGUgb24gYW5kIHJldHVybiBhcnJheXMsIGNvbGxlY3Rpb25zLFxuICAgICAqIGFuZCBmdW5jdGlvbnMgY2FuIGJlIGNoYWluZWQgdG9nZXRoZXIuIE1ldGhvZHMgdGhhdCByZXRyaWV2ZSBhIHNpbmdsZSB2YWx1ZVxuICAgICAqIG9yIG1heSByZXR1cm4gYSBwcmltaXRpdmUgdmFsdWUgd2lsbCBhdXRvbWF0aWNhbGx5IGVuZCB0aGUgY2hhaW4gc2VxdWVuY2VcbiAgICAgKiBhbmQgcmV0dXJuIHRoZSB1bndyYXBwZWQgdmFsdWUuIE90aGVyd2lzZSwgdGhlIHZhbHVlIG11c3QgYmUgdW53cmFwcGVkXG4gICAgICogd2l0aCBgXyN2YWx1ZWAuXG4gICAgICpcbiAgICAgKiBFeHBsaWNpdCBjaGFpbiBzZXF1ZW5jZXMsIHdoaWNoIG11c3QgYmUgdW53cmFwcGVkIHdpdGggYF8jdmFsdWVgLCBtYXkgYmVcbiAgICAgKiBlbmFibGVkIHVzaW5nIGBfLmNoYWluYC5cbiAgICAgKlxuICAgICAqIFRoZSBleGVjdXRpb24gb2YgY2hhaW5lZCBtZXRob2RzIGlzIGxhenksIHRoYXQgaXMsIGl0J3MgZGVmZXJyZWQgdW50aWxcbiAgICAgKiBgXyN2YWx1ZWAgaXMgaW1wbGljaXRseSBvciBleHBsaWNpdGx5IGNhbGxlZC5cbiAgICAgKlxuICAgICAqIExhenkgZXZhbHVhdGlvbiBhbGxvd3Mgc2V2ZXJhbCBtZXRob2RzIHRvIHN1cHBvcnQgc2hvcnRjdXQgZnVzaW9uLlxuICAgICAqIFNob3J0Y3V0IGZ1c2lvbiBpcyBhbiBvcHRpbWl6YXRpb24gdG8gbWVyZ2UgaXRlcmF0ZWUgY2FsbHM7IHRoaXMgYXZvaWRzXG4gICAgICogdGhlIGNyZWF0aW9uIG9mIGludGVybWVkaWF0ZSBhcnJheXMgYW5kIGNhbiBncmVhdGx5IHJlZHVjZSB0aGUgbnVtYmVyIG9mXG4gICAgICogaXRlcmF0ZWUgZXhlY3V0aW9ucy4gU2VjdGlvbnMgb2YgYSBjaGFpbiBzZXF1ZW5jZSBxdWFsaWZ5IGZvciBzaG9ydGN1dFxuICAgICAqIGZ1c2lvbiBpZiB0aGUgc2VjdGlvbiBpcyBhcHBsaWVkIHRvIGFuIGFycmF5IGFuZCBpdGVyYXRlZXMgYWNjZXB0IG9ubHlcbiAgICAgKiBvbmUgYXJndW1lbnQuIFRoZSBoZXVyaXN0aWMgZm9yIHdoZXRoZXIgYSBzZWN0aW9uIHF1YWxpZmllcyBmb3Igc2hvcnRjdXRcbiAgICAgKiBmdXNpb24gaXMgc3ViamVjdCB0byBjaGFuZ2UuXG4gICAgICpcbiAgICAgKiBDaGFpbmluZyBpcyBzdXBwb3J0ZWQgaW4gY3VzdG9tIGJ1aWxkcyBhcyBsb25nIGFzIHRoZSBgXyN2YWx1ZWAgbWV0aG9kIGlzXG4gICAgICogZGlyZWN0bHkgb3IgaW5kaXJlY3RseSBpbmNsdWRlZCBpbiB0aGUgYnVpbGQuXG4gICAgICpcbiAgICAgKiBJbiBhZGRpdGlvbiB0byBsb2Rhc2ggbWV0aG9kcywgd3JhcHBlcnMgaGF2ZSBgQXJyYXlgIGFuZCBgU3RyaW5nYCBtZXRob2RzLlxuICAgICAqXG4gICAgICogVGhlIHdyYXBwZXIgYEFycmF5YCBtZXRob2RzIGFyZTpcbiAgICAgKiBgY29uY2F0YCwgYGpvaW5gLCBgcG9wYCwgYHB1c2hgLCBgc2hpZnRgLCBgc29ydGAsIGBzcGxpY2VgLCBhbmQgYHVuc2hpZnRgXG4gICAgICpcbiAgICAgKiBUaGUgd3JhcHBlciBgU3RyaW5nYCBtZXRob2RzIGFyZTpcbiAgICAgKiBgcmVwbGFjZWAgYW5kIGBzcGxpdGBcbiAgICAgKlxuICAgICAqIFRoZSB3cmFwcGVyIG1ldGhvZHMgdGhhdCBzdXBwb3J0IHNob3J0Y3V0IGZ1c2lvbiBhcmU6XG4gICAgICogYGF0YCwgYGNvbXBhY3RgLCBgZHJvcGAsIGBkcm9wUmlnaHRgLCBgZHJvcFdoaWxlYCwgYGZpbHRlcmAsIGBmaW5kYCxcbiAgICAgKiBgZmluZExhc3RgLCBgaGVhZGAsIGBpbml0aWFsYCwgYGxhc3RgLCBgbWFwYCwgYHJlamVjdGAsIGByZXZlcnNlYCwgYHNsaWNlYCxcbiAgICAgKiBgdGFpbGAsIGB0YWtlYCwgYHRha2VSaWdodGAsIGB0YWtlUmlnaHRXaGlsZWAsIGB0YWtlV2hpbGVgLCBhbmQgYHRvQXJyYXlgXG4gICAgICpcbiAgICAgKiBUaGUgY2hhaW5hYmxlIHdyYXBwZXIgbWV0aG9kcyBhcmU6XG4gICAgICogYGFmdGVyYCwgYGFyeWAsIGBhc3NpZ25gLCBgYXNzaWduSW5gLCBgYXNzaWduSW5XaXRoYCwgYGFzc2lnbldpdGhgLCBgYXRgLFxuICAgICAqIGBiZWZvcmVgLCBgYmluZGAsIGBiaW5kQWxsYCwgYGJpbmRLZXlgLCBgY2FzdEFycmF5YCwgYGNoYWluYCwgYGNodW5rYCxcbiAgICAgKiBgY29tbWl0YCwgYGNvbXBhY3RgLCBgY29uY2F0YCwgYGNvbmZvcm1zYCwgYGNvbnN0YW50YCwgYGNvdW50QnlgLCBgY3JlYXRlYCxcbiAgICAgKiBgY3VycnlgLCBgZGVib3VuY2VgLCBgZGVmYXVsdHNgLCBgZGVmYXVsdHNEZWVwYCwgYGRlZmVyYCwgYGRlbGF5YCxcbiAgICAgKiBgZGlmZmVyZW5jZWAsIGBkaWZmZXJlbmNlQnlgLCBgZGlmZmVyZW5jZVdpdGhgLCBgZHJvcGAsIGBkcm9wUmlnaHRgLFxuICAgICAqIGBkcm9wUmlnaHRXaGlsZWAsIGBkcm9wV2hpbGVgLCBgZXh0ZW5kYCwgYGV4dGVuZFdpdGhgLCBgZmlsbGAsIGBmaWx0ZXJgLFxuICAgICAqIGBmbGF0TWFwYCwgYGZsYXRNYXBEZWVwYCwgYGZsYXRNYXBEZXB0aGAsIGBmbGF0dGVuYCwgYGZsYXR0ZW5EZWVwYCxcbiAgICAgKiBgZmxhdHRlbkRlcHRoYCwgYGZsaXBgLCBgZmxvd2AsIGBmbG93UmlnaHRgLCBgZnJvbVBhaXJzYCwgYGZ1bmN0aW9uc2AsXG4gICAgICogYGZ1bmN0aW9uc0luYCwgYGdyb3VwQnlgLCBgaW5pdGlhbGAsIGBpbnRlcnNlY3Rpb25gLCBgaW50ZXJzZWN0aW9uQnlgLFxuICAgICAqIGBpbnRlcnNlY3Rpb25XaXRoYCwgYGludmVydGAsIGBpbnZlcnRCeWAsIGBpbnZva2VNYXBgLCBgaXRlcmF0ZWVgLCBga2V5QnlgLFxuICAgICAqIGBrZXlzYCwgYGtleXNJbmAsIGBtYXBgLCBgbWFwS2V5c2AsIGBtYXBWYWx1ZXNgLCBgbWF0Y2hlc2AsIGBtYXRjaGVzUHJvcGVydHlgLFxuICAgICAqIGBtZW1vaXplYCwgYG1lcmdlYCwgYG1lcmdlV2l0aGAsIGBtZXRob2RgLCBgbWV0aG9kT2ZgLCBgbWl4aW5gLCBgbmVnYXRlYCxcbiAgICAgKiBgbnRoQXJnYCwgYG9taXRgLCBgb21pdEJ5YCwgYG9uY2VgLCBgb3JkZXJCeWAsIGBvdmVyYCwgYG92ZXJBcmdzYCxcbiAgICAgKiBgb3ZlckV2ZXJ5YCwgYG92ZXJTb21lYCwgYHBhcnRpYWxgLCBgcGFydGlhbFJpZ2h0YCwgYHBhcnRpdGlvbmAsIGBwaWNrYCxcbiAgICAgKiBgcGlja0J5YCwgYHBsYW50YCwgYHByb3BlcnR5YCwgYHByb3BlcnR5T2ZgLCBgcHVsbGAsIGBwdWxsQWxsYCwgYHB1bGxBbGxCeWAsXG4gICAgICogYHB1bGxBbGxXaXRoYCwgYHB1bGxBdGAsIGBwdXNoYCwgYHJhbmdlYCwgYHJhbmdlUmlnaHRgLCBgcmVhcmdgLCBgcmVqZWN0YCxcbiAgICAgKiBgcmVtb3ZlYCwgYHJlc3RgLCBgcmV2ZXJzZWAsIGBzYW1wbGVTaXplYCwgYHNldGAsIGBzZXRXaXRoYCwgYHNodWZmbGVgLFxuICAgICAqIGBzbGljZWAsIGBzb3J0YCwgYHNvcnRCeWAsIGBzcGxpY2VgLCBgc3ByZWFkYCwgYHRhaWxgLCBgdGFrZWAsIGB0YWtlUmlnaHRgLFxuICAgICAqIGB0YWtlUmlnaHRXaGlsZWAsIGB0YWtlV2hpbGVgLCBgdGFwYCwgYHRocm90dGxlYCwgYHRocnVgLCBgdG9BcnJheWAsXG4gICAgICogYHRvUGFpcnNgLCBgdG9QYWlyc0luYCwgYHRvUGF0aGAsIGB0b1BsYWluT2JqZWN0YCwgYHRyYW5zZm9ybWAsIGB1bmFyeWAsXG4gICAgICogYHVuaW9uYCwgYHVuaW9uQnlgLCBgdW5pb25XaXRoYCwgYHVuaXFgLCBgdW5pcUJ5YCwgYHVuaXFXaXRoYCwgYHVuc2V0YCxcbiAgICAgKiBgdW5zaGlmdGAsIGB1bnppcGAsIGB1bnppcFdpdGhgLCBgdXBkYXRlYCwgYHVwZGF0ZVdpdGhgLCBgdmFsdWVzYCxcbiAgICAgKiBgdmFsdWVzSW5gLCBgd2l0aG91dGAsIGB3cmFwYCwgYHhvcmAsIGB4b3JCeWAsIGB4b3JXaXRoYCwgYHppcGAsXG4gICAgICogYHppcE9iamVjdGAsIGB6aXBPYmplY3REZWVwYCwgYW5kIGB6aXBXaXRoYFxuICAgICAqXG4gICAgICogVGhlIHdyYXBwZXIgbWV0aG9kcyB0aGF0IGFyZSAqKm5vdCoqIGNoYWluYWJsZSBieSBkZWZhdWx0IGFyZTpcbiAgICAgKiBgYWRkYCwgYGF0dGVtcHRgLCBgY2FtZWxDYXNlYCwgYGNhcGl0YWxpemVgLCBgY2VpbGAsIGBjbGFtcGAsIGBjbG9uZWAsXG4gICAgICogYGNsb25lRGVlcGAsIGBjbG9uZURlZXBXaXRoYCwgYGNsb25lV2l0aGAsIGBjb25mb3Jtc1RvYCwgYGRlYnVycmAsXG4gICAgICogYGRlZmF1bHRUb2AsIGBkaXZpZGVgLCBgZWFjaGAsIGBlYWNoUmlnaHRgLCBgZW5kc1dpdGhgLCBgZXFgLCBgZXNjYXBlYCxcbiAgICAgKiBgZXNjYXBlUmVnRXhwYCwgYGV2ZXJ5YCwgYGZpbmRgLCBgZmluZEluZGV4YCwgYGZpbmRLZXlgLCBgZmluZExhc3RgLFxuICAgICAqIGBmaW5kTGFzdEluZGV4YCwgYGZpbmRMYXN0S2V5YCwgYGZpcnN0YCwgYGZsb29yYCwgYGZvckVhY2hgLCBgZm9yRWFjaFJpZ2h0YCxcbiAgICAgKiBgZm9ySW5gLCBgZm9ySW5SaWdodGAsIGBmb3JPd25gLCBgZm9yT3duUmlnaHRgLCBgZ2V0YCwgYGd0YCwgYGd0ZWAsIGBoYXNgLFxuICAgICAqIGBoYXNJbmAsIGBoZWFkYCwgYGlkZW50aXR5YCwgYGluY2x1ZGVzYCwgYGluZGV4T2ZgLCBgaW5SYW5nZWAsIGBpbnZva2VgLFxuICAgICAqIGBpc0FyZ3VtZW50c2AsIGBpc0FycmF5YCwgYGlzQXJyYXlCdWZmZXJgLCBgaXNBcnJheUxpa2VgLCBgaXNBcnJheUxpa2VPYmplY3RgLFxuICAgICAqIGBpc0Jvb2xlYW5gLCBgaXNCdWZmZXJgLCBgaXNEYXRlYCwgYGlzRWxlbWVudGAsIGBpc0VtcHR5YCwgYGlzRXF1YWxgLFxuICAgICAqIGBpc0VxdWFsV2l0aGAsIGBpc0Vycm9yYCwgYGlzRmluaXRlYCwgYGlzRnVuY3Rpb25gLCBgaXNJbnRlZ2VyYCwgYGlzTGVuZ3RoYCxcbiAgICAgKiBgaXNNYXBgLCBgaXNNYXRjaGAsIGBpc01hdGNoV2l0aGAsIGBpc05hTmAsIGBpc05hdGl2ZWAsIGBpc05pbGAsIGBpc051bGxgLFxuICAgICAqIGBpc051bWJlcmAsIGBpc09iamVjdGAsIGBpc09iamVjdExpa2VgLCBgaXNQbGFpbk9iamVjdGAsIGBpc1JlZ0V4cGAsXG4gICAgICogYGlzU2FmZUludGVnZXJgLCBgaXNTZXRgLCBgaXNTdHJpbmdgLCBgaXNVbmRlZmluZWRgLCBgaXNUeXBlZEFycmF5YCxcbiAgICAgKiBgaXNXZWFrTWFwYCwgYGlzV2Vha1NldGAsIGBqb2luYCwgYGtlYmFiQ2FzZWAsIGBsYXN0YCwgYGxhc3RJbmRleE9mYCxcbiAgICAgKiBgbG93ZXJDYXNlYCwgYGxvd2VyRmlyc3RgLCBgbHRgLCBgbHRlYCwgYG1heGAsIGBtYXhCeWAsIGBtZWFuYCwgYG1lYW5CeWAsXG4gICAgICogYG1pbmAsIGBtaW5CeWAsIGBtdWx0aXBseWAsIGBub0NvbmZsaWN0YCwgYG5vb3BgLCBgbm93YCwgYG50aGAsIGBwYWRgLFxuICAgICAqIGBwYWRFbmRgLCBgcGFkU3RhcnRgLCBgcGFyc2VJbnRgLCBgcG9wYCwgYHJhbmRvbWAsIGByZWR1Y2VgLCBgcmVkdWNlUmlnaHRgLFxuICAgICAqIGByZXBlYXRgLCBgcmVzdWx0YCwgYHJvdW5kYCwgYHJ1bkluQ29udGV4dGAsIGBzYW1wbGVgLCBgc2hpZnRgLCBgc2l6ZWAsXG4gICAgICogYHNuYWtlQ2FzZWAsIGBzb21lYCwgYHNvcnRlZEluZGV4YCwgYHNvcnRlZEluZGV4QnlgLCBgc29ydGVkTGFzdEluZGV4YCxcbiAgICAgKiBgc29ydGVkTGFzdEluZGV4QnlgLCBgc3RhcnRDYXNlYCwgYHN0YXJ0c1dpdGhgLCBgc3R1YkFycmF5YCwgYHN0dWJGYWxzZWAsXG4gICAgICogYHN0dWJPYmplY3RgLCBgc3R1YlN0cmluZ2AsIGBzdHViVHJ1ZWAsIGBzdWJ0cmFjdGAsIGBzdW1gLCBgc3VtQnlgLFxuICAgICAqIGB0ZW1wbGF0ZWAsIGB0aW1lc2AsIGB0b0Zpbml0ZWAsIGB0b0ludGVnZXJgLCBgdG9KU09OYCwgYHRvTGVuZ3RoYCxcbiAgICAgKiBgdG9Mb3dlcmAsIGB0b051bWJlcmAsIGB0b1NhZmVJbnRlZ2VyYCwgYHRvU3RyaW5nYCwgYHRvVXBwZXJgLCBgdHJpbWAsXG4gICAgICogYHRyaW1FbmRgLCBgdHJpbVN0YXJ0YCwgYHRydW5jYXRlYCwgYHVuZXNjYXBlYCwgYHVuaXF1ZUlkYCwgYHVwcGVyQ2FzZWAsXG4gICAgICogYHVwcGVyRmlyc3RgLCBgdmFsdWVgLCBhbmQgYHdvcmRzYFxuICAgICAqXG4gICAgICogQG5hbWUgX1xuICAgICAqIEBjb25zdHJ1Y3RvclxuICAgICAqIEBjYXRlZ29yeSBTZXFcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byB3cmFwIGluIGEgYGxvZGFzaGAgaW5zdGFuY2UuXG4gICAgICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyB0aGUgbmV3IGBsb2Rhc2hgIHdyYXBwZXIgaW5zdGFuY2UuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIGZ1bmN0aW9uIHNxdWFyZShuKSB7XG4gICAgICogICByZXR1cm4gbiAqIG47XG4gICAgICogfVxuICAgICAqXG4gICAgICogdmFyIHdyYXBwZWQgPSBfKFsxLCAyLCAzXSk7XG4gICAgICpcbiAgICAgKiAvLyBSZXR1cm5zIGFuIHVud3JhcHBlZCB2YWx1ZS5cbiAgICAgKiB3cmFwcGVkLnJlZHVjZShfLmFkZCk7XG4gICAgICogLy8gPT4gNlxuICAgICAqXG4gICAgICogLy8gUmV0dXJucyBhIHdyYXBwZWQgdmFsdWUuXG4gICAgICogdmFyIHNxdWFyZXMgPSB3cmFwcGVkLm1hcChzcXVhcmUpO1xuICAgICAqXG4gICAgICogXy5pc0FycmF5KHNxdWFyZXMpO1xuICAgICAqIC8vID0+IGZhbHNlXG4gICAgICpcbiAgICAgKiBfLmlzQXJyYXkoc3F1YXJlcy52YWx1ZSgpKTtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICovXG4gICAgZnVuY3Rpb24gbG9kYXNoKHZhbHVlKSB7XG4gICAgICBpZiAoaXNPYmplY3RMaWtlKHZhbHVlKSAmJiAhaXNBcnJheSh2YWx1ZSkgJiYgISh2YWx1ZSBpbnN0YW5jZW9mIExhenlXcmFwcGVyKSkge1xuICAgICAgICBpZiAodmFsdWUgaW5zdGFuY2VvZiBMb2Rhc2hXcmFwcGVyKSB7XG4gICAgICAgICAgcmV0dXJuIHZhbHVlO1xuICAgICAgICB9XG4gICAgICAgIGlmIChoYXNPd25Qcm9wZXJ0eS5jYWxsKHZhbHVlLCAnX193cmFwcGVkX18nKSkge1xuICAgICAgICAgIHJldHVybiB3cmFwcGVyQ2xvbmUodmFsdWUpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICByZXR1cm4gbmV3IExvZGFzaFdyYXBwZXIodmFsdWUpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLmNyZWF0ZWAgd2l0aG91dCBzdXBwb3J0IGZvciBhc3NpZ25pbmdcbiAgICAgKiBwcm9wZXJ0aWVzIHRvIHRoZSBjcmVhdGVkIG9iamVjdC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtPYmplY3R9IHByb3RvIFRoZSBvYmplY3QgdG8gaW5oZXJpdCBmcm9tLlxuICAgICAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgdGhlIG5ldyBvYmplY3QuXG4gICAgICovXG4gICAgdmFyIGJhc2VDcmVhdGUgPSAoZnVuY3Rpb24oKSB7XG4gICAgICBmdW5jdGlvbiBvYmplY3QoKSB7fVxuICAgICAgcmV0dXJuIGZ1bmN0aW9uKHByb3RvKSB7XG4gICAgICAgIGlmICghaXNPYmplY3QocHJvdG8pKSB7XG4gICAgICAgICAgcmV0dXJuIHt9O1xuICAgICAgICB9XG4gICAgICAgIGlmIChvYmplY3RDcmVhdGUpIHtcbiAgICAgICAgICByZXR1cm4gb2JqZWN0Q3JlYXRlKHByb3RvKTtcbiAgICAgICAgfVxuICAgICAgICBvYmplY3QucHJvdG90eXBlID0gcHJvdG87XG4gICAgICAgIHZhciByZXN1bHQgPSBuZXcgb2JqZWN0O1xuICAgICAgICBvYmplY3QucHJvdG90eXBlID0gdW5kZWZpbmVkO1xuICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgICAgfTtcbiAgICB9KCkpO1xuXG4gICAgLyoqXG4gICAgICogVGhlIGZ1bmN0aW9uIHdob3NlIHByb3RvdHlwZSBjaGFpbiBzZXF1ZW5jZSB3cmFwcGVycyBpbmhlcml0IGZyb20uXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGJhc2VMb2Rhc2goKSB7XG4gICAgICAvLyBObyBvcGVyYXRpb24gcGVyZm9ybWVkLlxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoZSBiYXNlIGNvbnN0cnVjdG9yIGZvciBjcmVhdGluZyBgbG9kYXNoYCB3cmFwcGVyIG9iamVjdHMuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIHdyYXAuXG4gICAgICogQHBhcmFtIHtib29sZWFufSBbY2hhaW5BbGxdIEVuYWJsZSBleHBsaWNpdCBtZXRob2QgY2hhaW4gc2VxdWVuY2VzLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIExvZGFzaFdyYXBwZXIodmFsdWUsIGNoYWluQWxsKSB7XG4gICAgICB0aGlzLl9fd3JhcHBlZF9fID0gdmFsdWU7XG4gICAgICB0aGlzLl9fYWN0aW9uc19fID0gW107XG4gICAgICB0aGlzLl9fY2hhaW5fXyA9ICEhY2hhaW5BbGw7XG4gICAgICB0aGlzLl9faW5kZXhfXyA9IDA7XG4gICAgICB0aGlzLl9fdmFsdWVzX18gPSB1bmRlZmluZWQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQnkgZGVmYXVsdCwgdGhlIHRlbXBsYXRlIGRlbGltaXRlcnMgdXNlZCBieSBsb2Rhc2ggYXJlIGxpa2UgdGhvc2UgaW5cbiAgICAgKiBlbWJlZGRlZCBSdWJ5IChFUkIpIGFzIHdlbGwgYXMgRVMyMDE1IHRlbXBsYXRlIHN0cmluZ3MuIENoYW5nZSB0aGVcbiAgICAgKiBmb2xsb3dpbmcgdGVtcGxhdGUgc2V0dGluZ3MgdG8gdXNlIGFsdGVybmF0aXZlIGRlbGltaXRlcnMuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAdHlwZSB7T2JqZWN0fVxuICAgICAqL1xuICAgIGxvZGFzaC50ZW1wbGF0ZVNldHRpbmdzID0ge1xuXG4gICAgICAvKipcbiAgICAgICAqIFVzZWQgdG8gZGV0ZWN0IGBkYXRhYCBwcm9wZXJ0eSB2YWx1ZXMgdG8gYmUgSFRNTC1lc2NhcGVkLlxuICAgICAgICpcbiAgICAgICAqIEBtZW1iZXJPZiBfLnRlbXBsYXRlU2V0dGluZ3NcbiAgICAgICAqIEB0eXBlIHtSZWdFeHB9XG4gICAgICAgKi9cbiAgICAgICdlc2NhcGUnOiByZUVzY2FwZSxcblxuICAgICAgLyoqXG4gICAgICAgKiBVc2VkIHRvIGRldGVjdCBjb2RlIHRvIGJlIGV2YWx1YXRlZC5cbiAgICAgICAqXG4gICAgICAgKiBAbWVtYmVyT2YgXy50ZW1wbGF0ZVNldHRpbmdzXG4gICAgICAgKiBAdHlwZSB7UmVnRXhwfVxuICAgICAgICovXG4gICAgICAnZXZhbHVhdGUnOiByZUV2YWx1YXRlLFxuXG4gICAgICAvKipcbiAgICAgICAqIFVzZWQgdG8gZGV0ZWN0IGBkYXRhYCBwcm9wZXJ0eSB2YWx1ZXMgdG8gaW5qZWN0LlxuICAgICAgICpcbiAgICAgICAqIEBtZW1iZXJPZiBfLnRlbXBsYXRlU2V0dGluZ3NcbiAgICAgICAqIEB0eXBlIHtSZWdFeHB9XG4gICAgICAgKi9cbiAgICAgICdpbnRlcnBvbGF0ZSc6IHJlSW50ZXJwb2xhdGUsXG5cbiAgICAgIC8qKlxuICAgICAgICogVXNlZCB0byByZWZlcmVuY2UgdGhlIGRhdGEgb2JqZWN0IGluIHRoZSB0ZW1wbGF0ZSB0ZXh0LlxuICAgICAgICpcbiAgICAgICAqIEBtZW1iZXJPZiBfLnRlbXBsYXRlU2V0dGluZ3NcbiAgICAgICAqIEB0eXBlIHtzdHJpbmd9XG4gICAgICAgKi9cbiAgICAgICd2YXJpYWJsZSc6ICcnLFxuXG4gICAgICAvKipcbiAgICAgICAqIFVzZWQgdG8gaW1wb3J0IHZhcmlhYmxlcyBpbnRvIHRoZSBjb21waWxlZCB0ZW1wbGF0ZS5cbiAgICAgICAqXG4gICAgICAgKiBAbWVtYmVyT2YgXy50ZW1wbGF0ZVNldHRpbmdzXG4gICAgICAgKiBAdHlwZSB7T2JqZWN0fVxuICAgICAgICovXG4gICAgICAnaW1wb3J0cyc6IHtcblxuICAgICAgICAvKipcbiAgICAgICAgICogQSByZWZlcmVuY2UgdG8gdGhlIGBsb2Rhc2hgIGZ1bmN0aW9uLlxuICAgICAgICAgKlxuICAgICAgICAgKiBAbWVtYmVyT2YgXy50ZW1wbGF0ZVNldHRpbmdzLmltcG9ydHNcbiAgICAgICAgICogQHR5cGUge0Z1bmN0aW9ufVxuICAgICAgICAgKi9cbiAgICAgICAgJ18nOiBsb2Rhc2hcbiAgICAgIH1cbiAgICB9O1xuXG4gICAgLy8gRW5zdXJlIHdyYXBwZXJzIGFyZSBpbnN0YW5jZXMgb2YgYGJhc2VMb2Rhc2hgLlxuICAgIGxvZGFzaC5wcm90b3R5cGUgPSBiYXNlTG9kYXNoLnByb3RvdHlwZTtcbiAgICBsb2Rhc2gucHJvdG90eXBlLmNvbnN0cnVjdG9yID0gbG9kYXNoO1xuXG4gICAgTG9kYXNoV3JhcHBlci5wcm90b3R5cGUgPSBiYXNlQ3JlYXRlKGJhc2VMb2Rhc2gucHJvdG90eXBlKTtcbiAgICBMb2Rhc2hXcmFwcGVyLnByb3RvdHlwZS5jb25zdHJ1Y3RvciA9IExvZGFzaFdyYXBwZXI7XG5cbiAgICAvKi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSovXG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgbGF6eSB3cmFwcGVyIG9iamVjdCB3aGljaCB3cmFwcyBgdmFsdWVgIHRvIGVuYWJsZSBsYXp5IGV2YWx1YXRpb24uXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBjb25zdHJ1Y3RvclxuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIHdyYXAuXG4gICAgICovXG4gICAgZnVuY3Rpb24gTGF6eVdyYXBwZXIodmFsdWUpIHtcbiAgICAgIHRoaXMuX193cmFwcGVkX18gPSB2YWx1ZTtcbiAgICAgIHRoaXMuX19hY3Rpb25zX18gPSBbXTtcbiAgICAgIHRoaXMuX19kaXJfXyA9IDE7XG4gICAgICB0aGlzLl9fZmlsdGVyZWRfXyA9IGZhbHNlO1xuICAgICAgdGhpcy5fX2l0ZXJhdGVlc19fID0gW107XG4gICAgICB0aGlzLl9fdGFrZUNvdW50X18gPSBNQVhfQVJSQVlfTEVOR1RIO1xuICAgICAgdGhpcy5fX3ZpZXdzX18gPSBbXTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgY2xvbmUgb2YgdGhlIGxhenkgd3JhcHBlciBvYmplY3QuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBuYW1lIGNsb25lXG4gICAgICogQG1lbWJlck9mIExhenlXcmFwcGVyXG4gICAgICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyB0aGUgY2xvbmVkIGBMYXp5V3JhcHBlcmAgb2JqZWN0LlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGxhenlDbG9uZSgpIHtcbiAgICAgIHZhciByZXN1bHQgPSBuZXcgTGF6eVdyYXBwZXIodGhpcy5fX3dyYXBwZWRfXyk7XG4gICAgICByZXN1bHQuX19hY3Rpb25zX18gPSBjb3B5QXJyYXkodGhpcy5fX2FjdGlvbnNfXyk7XG4gICAgICByZXN1bHQuX19kaXJfXyA9IHRoaXMuX19kaXJfXztcbiAgICAgIHJlc3VsdC5fX2ZpbHRlcmVkX18gPSB0aGlzLl9fZmlsdGVyZWRfXztcbiAgICAgIHJlc3VsdC5fX2l0ZXJhdGVlc19fID0gY29weUFycmF5KHRoaXMuX19pdGVyYXRlZXNfXyk7XG4gICAgICByZXN1bHQuX190YWtlQ291bnRfXyA9IHRoaXMuX190YWtlQ291bnRfXztcbiAgICAgIHJlc3VsdC5fX3ZpZXdzX18gPSBjb3B5QXJyYXkodGhpcy5fX3ZpZXdzX18pO1xuICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBSZXZlcnNlcyB0aGUgZGlyZWN0aW9uIG9mIGxhenkgaXRlcmF0aW9uLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAbmFtZSByZXZlcnNlXG4gICAgICogQG1lbWJlck9mIExhenlXcmFwcGVyXG4gICAgICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyB0aGUgbmV3IHJldmVyc2VkIGBMYXp5V3JhcHBlcmAgb2JqZWN0LlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGxhenlSZXZlcnNlKCkge1xuICAgICAgaWYgKHRoaXMuX19maWx0ZXJlZF9fKSB7XG4gICAgICAgIHZhciByZXN1bHQgPSBuZXcgTGF6eVdyYXBwZXIodGhpcyk7XG4gICAgICAgIHJlc3VsdC5fX2Rpcl9fID0gLTE7XG4gICAgICAgIHJlc3VsdC5fX2ZpbHRlcmVkX18gPSB0cnVlO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmVzdWx0ID0gdGhpcy5jbG9uZSgpO1xuICAgICAgICByZXN1bHQuX19kaXJfXyAqPSAtMTtcbiAgICAgIH1cbiAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogRXh0cmFjdHMgdGhlIHVud3JhcHBlZCB2YWx1ZSBmcm9tIGl0cyBsYXp5IHdyYXBwZXIuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBuYW1lIHZhbHVlXG4gICAgICogQG1lbWJlck9mIExhenlXcmFwcGVyXG4gICAgICogQHJldHVybnMgeyp9IFJldHVybnMgdGhlIHVud3JhcHBlZCB2YWx1ZS5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBsYXp5VmFsdWUoKSB7XG4gICAgICB2YXIgYXJyYXkgPSB0aGlzLl9fd3JhcHBlZF9fLnZhbHVlKCksXG4gICAgICAgICAgZGlyID0gdGhpcy5fX2Rpcl9fLFxuICAgICAgICAgIGlzQXJyID0gaXNBcnJheShhcnJheSksXG4gICAgICAgICAgaXNSaWdodCA9IGRpciA8IDAsXG4gICAgICAgICAgYXJyTGVuZ3RoID0gaXNBcnIgPyBhcnJheS5sZW5ndGggOiAwLFxuICAgICAgICAgIHZpZXcgPSBnZXRWaWV3KDAsIGFyckxlbmd0aCwgdGhpcy5fX3ZpZXdzX18pLFxuICAgICAgICAgIHN0YXJ0ID0gdmlldy5zdGFydCxcbiAgICAgICAgICBlbmQgPSB2aWV3LmVuZCxcbiAgICAgICAgICBsZW5ndGggPSBlbmQgLSBzdGFydCxcbiAgICAgICAgICBpbmRleCA9IGlzUmlnaHQgPyBlbmQgOiAoc3RhcnQgLSAxKSxcbiAgICAgICAgICBpdGVyYXRlZXMgPSB0aGlzLl9faXRlcmF0ZWVzX18sXG4gICAgICAgICAgaXRlckxlbmd0aCA9IGl0ZXJhdGVlcy5sZW5ndGgsXG4gICAgICAgICAgcmVzSW5kZXggPSAwLFxuICAgICAgICAgIHRha2VDb3VudCA9IG5hdGl2ZU1pbihsZW5ndGgsIHRoaXMuX190YWtlQ291bnRfXyk7XG5cbiAgICAgIGlmICghaXNBcnIgfHwgKCFpc1JpZ2h0ICYmIGFyckxlbmd0aCA9PSBsZW5ndGggJiYgdGFrZUNvdW50ID09IGxlbmd0aCkpIHtcbiAgICAgICAgcmV0dXJuIGJhc2VXcmFwcGVyVmFsdWUoYXJyYXksIHRoaXMuX19hY3Rpb25zX18pO1xuICAgICAgfVxuICAgICAgdmFyIHJlc3VsdCA9IFtdO1xuXG4gICAgICBvdXRlcjpcbiAgICAgIHdoaWxlIChsZW5ndGgtLSAmJiByZXNJbmRleCA8IHRha2VDb3VudCkge1xuICAgICAgICBpbmRleCArPSBkaXI7XG5cbiAgICAgICAgdmFyIGl0ZXJJbmRleCA9IC0xLFxuICAgICAgICAgICAgdmFsdWUgPSBhcnJheVtpbmRleF07XG5cbiAgICAgICAgd2hpbGUgKCsraXRlckluZGV4IDwgaXRlckxlbmd0aCkge1xuICAgICAgICAgIHZhciBkYXRhID0gaXRlcmF0ZWVzW2l0ZXJJbmRleF0sXG4gICAgICAgICAgICAgIGl0ZXJhdGVlID0gZGF0YS5pdGVyYXRlZSxcbiAgICAgICAgICAgICAgdHlwZSA9IGRhdGEudHlwZSxcbiAgICAgICAgICAgICAgY29tcHV0ZWQgPSBpdGVyYXRlZSh2YWx1ZSk7XG5cbiAgICAgICAgICBpZiAodHlwZSA9PSBMQVpZX01BUF9GTEFHKSB7XG4gICAgICAgICAgICB2YWx1ZSA9IGNvbXB1dGVkO1xuICAgICAgICAgIH0gZWxzZSBpZiAoIWNvbXB1dGVkKSB7XG4gICAgICAgICAgICBpZiAodHlwZSA9PSBMQVpZX0ZJTFRFUl9GTEFHKSB7XG4gICAgICAgICAgICAgIGNvbnRpbnVlIG91dGVyO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgYnJlYWsgb3V0ZXI7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJlc3VsdFtyZXNJbmRleCsrXSA9IHZhbHVlO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG5cbiAgICAvLyBFbnN1cmUgYExhenlXcmFwcGVyYCBpcyBhbiBpbnN0YW5jZSBvZiBgYmFzZUxvZGFzaGAuXG4gICAgTGF6eVdyYXBwZXIucHJvdG90eXBlID0gYmFzZUNyZWF0ZShiYXNlTG9kYXNoLnByb3RvdHlwZSk7XG4gICAgTGF6eVdyYXBwZXIucHJvdG90eXBlLmNvbnN0cnVjdG9yID0gTGF6eVdyYXBwZXI7XG5cbiAgICAvKi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSovXG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgaGFzaCBvYmplY3QuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBjb25zdHJ1Y3RvclxuICAgICAqIEBwYXJhbSB7QXJyYXl9IFtlbnRyaWVzXSBUaGUga2V5LXZhbHVlIHBhaXJzIHRvIGNhY2hlLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIEhhc2goZW50cmllcykge1xuICAgICAgdmFyIGluZGV4ID0gLTEsXG4gICAgICAgICAgbGVuZ3RoID0gZW50cmllcyA9PSBudWxsID8gMCA6IGVudHJpZXMubGVuZ3RoO1xuXG4gICAgICB0aGlzLmNsZWFyKCk7XG4gICAgICB3aGlsZSAoKytpbmRleCA8IGxlbmd0aCkge1xuICAgICAgICB2YXIgZW50cnkgPSBlbnRyaWVzW2luZGV4XTtcbiAgICAgICAgdGhpcy5zZXQoZW50cnlbMF0sIGVudHJ5WzFdKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBSZW1vdmVzIGFsbCBrZXktdmFsdWUgZW50cmllcyBmcm9tIHRoZSBoYXNoLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAbmFtZSBjbGVhclxuICAgICAqIEBtZW1iZXJPZiBIYXNoXG4gICAgICovXG4gICAgZnVuY3Rpb24gaGFzaENsZWFyKCkge1xuICAgICAgdGhpcy5fX2RhdGFfXyA9IG5hdGl2ZUNyZWF0ZSA/IG5hdGl2ZUNyZWF0ZShudWxsKSA6IHt9O1xuICAgICAgdGhpcy5zaXplID0gMDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBSZW1vdmVzIGBrZXlgIGFuZCBpdHMgdmFsdWUgZnJvbSB0aGUgaGFzaC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQG5hbWUgZGVsZXRlXG4gICAgICogQG1lbWJlck9mIEhhc2hcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gaGFzaCBUaGUgaGFzaCB0byBtb2RpZnkuXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IGtleSBUaGUga2V5IG9mIHRoZSB2YWx1ZSB0byByZW1vdmUuXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIHRoZSBlbnRyeSB3YXMgcmVtb3ZlZCwgZWxzZSBgZmFsc2VgLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGhhc2hEZWxldGUoa2V5KSB7XG4gICAgICB2YXIgcmVzdWx0ID0gdGhpcy5oYXMoa2V5KSAmJiBkZWxldGUgdGhpcy5fX2RhdGFfX1trZXldO1xuICAgICAgdGhpcy5zaXplIC09IHJlc3VsdCA/IDEgOiAwO1xuICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBHZXRzIHRoZSBoYXNoIHZhbHVlIGZvciBga2V5YC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQG5hbWUgZ2V0XG4gICAgICogQG1lbWJlck9mIEhhc2hcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30ga2V5IFRoZSBrZXkgb2YgdGhlIHZhbHVlIHRvIGdldC5cbiAgICAgKiBAcmV0dXJucyB7Kn0gUmV0dXJucyB0aGUgZW50cnkgdmFsdWUuXG4gICAgICovXG4gICAgZnVuY3Rpb24gaGFzaEdldChrZXkpIHtcbiAgICAgIHZhciBkYXRhID0gdGhpcy5fX2RhdGFfXztcbiAgICAgIGlmIChuYXRpdmVDcmVhdGUpIHtcbiAgICAgICAgdmFyIHJlc3VsdCA9IGRhdGFba2V5XTtcbiAgICAgICAgcmV0dXJuIHJlc3VsdCA9PT0gSEFTSF9VTkRFRklORUQgPyB1bmRlZmluZWQgOiByZXN1bHQ7XG4gICAgICB9XG4gICAgICByZXR1cm4gaGFzT3duUHJvcGVydHkuY2FsbChkYXRhLCBrZXkpID8gZGF0YVtrZXldIDogdW5kZWZpbmVkO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENoZWNrcyBpZiBhIGhhc2ggdmFsdWUgZm9yIGBrZXlgIGV4aXN0cy5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQG5hbWUgaGFzXG4gICAgICogQG1lbWJlck9mIEhhc2hcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30ga2V5IFRoZSBrZXkgb2YgdGhlIGVudHJ5IHRvIGNoZWNrLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBhbiBlbnRyeSBmb3IgYGtleWAgZXhpc3RzLCBlbHNlIGBmYWxzZWAuXG4gICAgICovXG4gICAgZnVuY3Rpb24gaGFzaEhhcyhrZXkpIHtcbiAgICAgIHZhciBkYXRhID0gdGhpcy5fX2RhdGFfXztcbiAgICAgIHJldHVybiBuYXRpdmVDcmVhdGUgPyAoZGF0YVtrZXldICE9PSB1bmRlZmluZWQpIDogaGFzT3duUHJvcGVydHkuY2FsbChkYXRhLCBrZXkpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFNldHMgdGhlIGhhc2ggYGtleWAgdG8gYHZhbHVlYC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQG5hbWUgc2V0XG4gICAgICogQG1lbWJlck9mIEhhc2hcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30ga2V5IFRoZSBrZXkgb2YgdGhlIHZhbHVlIHRvIHNldC5cbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBzZXQuXG4gICAgICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyB0aGUgaGFzaCBpbnN0YW5jZS5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBoYXNoU2V0KGtleSwgdmFsdWUpIHtcbiAgICAgIHZhciBkYXRhID0gdGhpcy5fX2RhdGFfXztcbiAgICAgIHRoaXMuc2l6ZSArPSB0aGlzLmhhcyhrZXkpID8gMCA6IDE7XG4gICAgICBkYXRhW2tleV0gPSAobmF0aXZlQ3JlYXRlICYmIHZhbHVlID09PSB1bmRlZmluZWQpID8gSEFTSF9VTkRFRklORUQgOiB2YWx1ZTtcbiAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cblxuICAgIC8vIEFkZCBtZXRob2RzIHRvIGBIYXNoYC5cbiAgICBIYXNoLnByb3RvdHlwZS5jbGVhciA9IGhhc2hDbGVhcjtcbiAgICBIYXNoLnByb3RvdHlwZVsnZGVsZXRlJ10gPSBoYXNoRGVsZXRlO1xuICAgIEhhc2gucHJvdG90eXBlLmdldCA9IGhhc2hHZXQ7XG4gICAgSGFzaC5wcm90b3R5cGUuaGFzID0gaGFzaEhhcztcbiAgICBIYXNoLnByb3RvdHlwZS5zZXQgPSBoYXNoU2V0O1xuXG4gICAgLyotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0qL1xuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhbiBsaXN0IGNhY2hlIG9iamVjdC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQGNvbnN0cnVjdG9yXG4gICAgICogQHBhcmFtIHtBcnJheX0gW2VudHJpZXNdIFRoZSBrZXktdmFsdWUgcGFpcnMgdG8gY2FjaGUuXG4gICAgICovXG4gICAgZnVuY3Rpb24gTGlzdENhY2hlKGVudHJpZXMpIHtcbiAgICAgIHZhciBpbmRleCA9IC0xLFxuICAgICAgICAgIGxlbmd0aCA9IGVudHJpZXMgPT0gbnVsbCA/IDAgOiBlbnRyaWVzLmxlbmd0aDtcblxuICAgICAgdGhpcy5jbGVhcigpO1xuICAgICAgd2hpbGUgKCsraW5kZXggPCBsZW5ndGgpIHtcbiAgICAgICAgdmFyIGVudHJ5ID0gZW50cmllc1tpbmRleF07XG4gICAgICAgIHRoaXMuc2V0KGVudHJ5WzBdLCBlbnRyeVsxXSk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogUmVtb3ZlcyBhbGwga2V5LXZhbHVlIGVudHJpZXMgZnJvbSB0aGUgbGlzdCBjYWNoZS5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQG5hbWUgY2xlYXJcbiAgICAgKiBAbWVtYmVyT2YgTGlzdENhY2hlXG4gICAgICovXG4gICAgZnVuY3Rpb24gbGlzdENhY2hlQ2xlYXIoKSB7XG4gICAgICB0aGlzLl9fZGF0YV9fID0gW107XG4gICAgICB0aGlzLnNpemUgPSAwO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFJlbW92ZXMgYGtleWAgYW5kIGl0cyB2YWx1ZSBmcm9tIHRoZSBsaXN0IGNhY2hlLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAbmFtZSBkZWxldGVcbiAgICAgKiBAbWVtYmVyT2YgTGlzdENhY2hlXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IGtleSBUaGUga2V5IG9mIHRoZSB2YWx1ZSB0byByZW1vdmUuXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIHRoZSBlbnRyeSB3YXMgcmVtb3ZlZCwgZWxzZSBgZmFsc2VgLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGxpc3RDYWNoZURlbGV0ZShrZXkpIHtcbiAgICAgIHZhciBkYXRhID0gdGhpcy5fX2RhdGFfXyxcbiAgICAgICAgICBpbmRleCA9IGFzc29jSW5kZXhPZihkYXRhLCBrZXkpO1xuXG4gICAgICBpZiAoaW5kZXggPCAwKSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgIH1cbiAgICAgIHZhciBsYXN0SW5kZXggPSBkYXRhLmxlbmd0aCAtIDE7XG4gICAgICBpZiAoaW5kZXggPT0gbGFzdEluZGV4KSB7XG4gICAgICAgIGRhdGEucG9wKCk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBzcGxpY2UuY2FsbChkYXRhLCBpbmRleCwgMSk7XG4gICAgICB9XG4gICAgICAtLXRoaXMuc2l6ZTtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEdldHMgdGhlIGxpc3QgY2FjaGUgdmFsdWUgZm9yIGBrZXlgLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAbmFtZSBnZXRcbiAgICAgKiBAbWVtYmVyT2YgTGlzdENhY2hlXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IGtleSBUaGUga2V5IG9mIHRoZSB2YWx1ZSB0byBnZXQuXG4gICAgICogQHJldHVybnMgeyp9IFJldHVybnMgdGhlIGVudHJ5IHZhbHVlLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGxpc3RDYWNoZUdldChrZXkpIHtcbiAgICAgIHZhciBkYXRhID0gdGhpcy5fX2RhdGFfXyxcbiAgICAgICAgICBpbmRleCA9IGFzc29jSW5kZXhPZihkYXRhLCBrZXkpO1xuXG4gICAgICByZXR1cm4gaW5kZXggPCAwID8gdW5kZWZpbmVkIDogZGF0YVtpbmRleF1bMV07XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ2hlY2tzIGlmIGEgbGlzdCBjYWNoZSB2YWx1ZSBmb3IgYGtleWAgZXhpc3RzLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAbmFtZSBoYXNcbiAgICAgKiBAbWVtYmVyT2YgTGlzdENhY2hlXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IGtleSBUaGUga2V5IG9mIHRoZSBlbnRyeSB0byBjaGVjay5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYW4gZW50cnkgZm9yIGBrZXlgIGV4aXN0cywgZWxzZSBgZmFsc2VgLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGxpc3RDYWNoZUhhcyhrZXkpIHtcbiAgICAgIHJldHVybiBhc3NvY0luZGV4T2YodGhpcy5fX2RhdGFfXywga2V5KSA+IC0xO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFNldHMgdGhlIGxpc3QgY2FjaGUgYGtleWAgdG8gYHZhbHVlYC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQG5hbWUgc2V0XG4gICAgICogQG1lbWJlck9mIExpc3RDYWNoZVxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgVGhlIGtleSBvZiB0aGUgdmFsdWUgdG8gc2V0LlxuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIHNldC5cbiAgICAgKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIHRoZSBsaXN0IGNhY2hlIGluc3RhbmNlLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGxpc3RDYWNoZVNldChrZXksIHZhbHVlKSB7XG4gICAgICB2YXIgZGF0YSA9IHRoaXMuX19kYXRhX18sXG4gICAgICAgICAgaW5kZXggPSBhc3NvY0luZGV4T2YoZGF0YSwga2V5KTtcblxuICAgICAgaWYgKGluZGV4IDwgMCkge1xuICAgICAgICArK3RoaXMuc2l6ZTtcbiAgICAgICAgZGF0YS5wdXNoKFtrZXksIHZhbHVlXSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBkYXRhW2luZGV4XVsxXSA9IHZhbHVlO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuXG4gICAgLy8gQWRkIG1ldGhvZHMgdG8gYExpc3RDYWNoZWAuXG4gICAgTGlzdENhY2hlLnByb3RvdHlwZS5jbGVhciA9IGxpc3RDYWNoZUNsZWFyO1xuICAgIExpc3RDYWNoZS5wcm90b3R5cGVbJ2RlbGV0ZSddID0gbGlzdENhY2hlRGVsZXRlO1xuICAgIExpc3RDYWNoZS5wcm90b3R5cGUuZ2V0ID0gbGlzdENhY2hlR2V0O1xuICAgIExpc3RDYWNoZS5wcm90b3R5cGUuaGFzID0gbGlzdENhY2hlSGFzO1xuICAgIExpc3RDYWNoZS5wcm90b3R5cGUuc2V0ID0gbGlzdENhY2hlU2V0O1xuXG4gICAgLyotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0qL1xuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIG1hcCBjYWNoZSBvYmplY3QgdG8gc3RvcmUga2V5LXZhbHVlIHBhaXJzLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAY29uc3RydWN0b3JcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBbZW50cmllc10gVGhlIGtleS12YWx1ZSBwYWlycyB0byBjYWNoZS5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBNYXBDYWNoZShlbnRyaWVzKSB7XG4gICAgICB2YXIgaW5kZXggPSAtMSxcbiAgICAgICAgICBsZW5ndGggPSBlbnRyaWVzID09IG51bGwgPyAwIDogZW50cmllcy5sZW5ndGg7XG5cbiAgICAgIHRoaXMuY2xlYXIoKTtcbiAgICAgIHdoaWxlICgrK2luZGV4IDwgbGVuZ3RoKSB7XG4gICAgICAgIHZhciBlbnRyeSA9IGVudHJpZXNbaW5kZXhdO1xuICAgICAgICB0aGlzLnNldChlbnRyeVswXSwgZW50cnlbMV0pO1xuICAgICAgfVxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFJlbW92ZXMgYWxsIGtleS12YWx1ZSBlbnRyaWVzIGZyb20gdGhlIG1hcC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQG5hbWUgY2xlYXJcbiAgICAgKiBAbWVtYmVyT2YgTWFwQ2FjaGVcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBtYXBDYWNoZUNsZWFyKCkge1xuICAgICAgdGhpcy5zaXplID0gMDtcbiAgICAgIHRoaXMuX19kYXRhX18gPSB7XG4gICAgICAgICdoYXNoJzogbmV3IEhhc2gsXG4gICAgICAgICdtYXAnOiBuZXcgKE1hcCB8fCBMaXN0Q2FjaGUpLFxuICAgICAgICAnc3RyaW5nJzogbmV3IEhhc2hcbiAgICAgIH07XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogUmVtb3ZlcyBga2V5YCBhbmQgaXRzIHZhbHVlIGZyb20gdGhlIG1hcC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQG5hbWUgZGVsZXRlXG4gICAgICogQG1lbWJlck9mIE1hcENhY2hlXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IGtleSBUaGUga2V5IG9mIHRoZSB2YWx1ZSB0byByZW1vdmUuXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIHRoZSBlbnRyeSB3YXMgcmVtb3ZlZCwgZWxzZSBgZmFsc2VgLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIG1hcENhY2hlRGVsZXRlKGtleSkge1xuICAgICAgdmFyIHJlc3VsdCA9IGdldE1hcERhdGEodGhpcywga2V5KVsnZGVsZXRlJ10oa2V5KTtcbiAgICAgIHRoaXMuc2l6ZSAtPSByZXN1bHQgPyAxIDogMDtcbiAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogR2V0cyB0aGUgbWFwIHZhbHVlIGZvciBga2V5YC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQG5hbWUgZ2V0XG4gICAgICogQG1lbWJlck9mIE1hcENhY2hlXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IGtleSBUaGUga2V5IG9mIHRoZSB2YWx1ZSB0byBnZXQuXG4gICAgICogQHJldHVybnMgeyp9IFJldHVybnMgdGhlIGVudHJ5IHZhbHVlLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIG1hcENhY2hlR2V0KGtleSkge1xuICAgICAgcmV0dXJuIGdldE1hcERhdGEodGhpcywga2V5KS5nZXQoa2V5KTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDaGVja3MgaWYgYSBtYXAgdmFsdWUgZm9yIGBrZXlgIGV4aXN0cy5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQG5hbWUgaGFzXG4gICAgICogQG1lbWJlck9mIE1hcENhY2hlXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IGtleSBUaGUga2V5IG9mIHRoZSBlbnRyeSB0byBjaGVjay5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYW4gZW50cnkgZm9yIGBrZXlgIGV4aXN0cywgZWxzZSBgZmFsc2VgLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIG1hcENhY2hlSGFzKGtleSkge1xuICAgICAgcmV0dXJuIGdldE1hcERhdGEodGhpcywga2V5KS5oYXMoa2V5KTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBTZXRzIHRoZSBtYXAgYGtleWAgdG8gYHZhbHVlYC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQG5hbWUgc2V0XG4gICAgICogQG1lbWJlck9mIE1hcENhY2hlXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IGtleSBUaGUga2V5IG9mIHRoZSB2YWx1ZSB0byBzZXQuXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gc2V0LlxuICAgICAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgdGhlIG1hcCBjYWNoZSBpbnN0YW5jZS5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBtYXBDYWNoZVNldChrZXksIHZhbHVlKSB7XG4gICAgICB2YXIgZGF0YSA9IGdldE1hcERhdGEodGhpcywga2V5KSxcbiAgICAgICAgICBzaXplID0gZGF0YS5zaXplO1xuXG4gICAgICBkYXRhLnNldChrZXksIHZhbHVlKTtcbiAgICAgIHRoaXMuc2l6ZSArPSBkYXRhLnNpemUgPT0gc2l6ZSA/IDAgOiAxO1xuICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuXG4gICAgLy8gQWRkIG1ldGhvZHMgdG8gYE1hcENhY2hlYC5cbiAgICBNYXBDYWNoZS5wcm90b3R5cGUuY2xlYXIgPSBtYXBDYWNoZUNsZWFyO1xuICAgIE1hcENhY2hlLnByb3RvdHlwZVsnZGVsZXRlJ10gPSBtYXBDYWNoZURlbGV0ZTtcbiAgICBNYXBDYWNoZS5wcm90b3R5cGUuZ2V0ID0gbWFwQ2FjaGVHZXQ7XG4gICAgTWFwQ2FjaGUucHJvdG90eXBlLmhhcyA9IG1hcENhY2hlSGFzO1xuICAgIE1hcENhY2hlLnByb3RvdHlwZS5zZXQgPSBtYXBDYWNoZVNldDtcblxuICAgIC8qLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tKi9cblxuICAgIC8qKlxuICAgICAqXG4gICAgICogQ3JlYXRlcyBhbiBhcnJheSBjYWNoZSBvYmplY3QgdG8gc3RvcmUgdW5pcXVlIHZhbHVlcy5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQGNvbnN0cnVjdG9yXG4gICAgICogQHBhcmFtIHtBcnJheX0gW3ZhbHVlc10gVGhlIHZhbHVlcyB0byBjYWNoZS5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBTZXRDYWNoZSh2YWx1ZXMpIHtcbiAgICAgIHZhciBpbmRleCA9IC0xLFxuICAgICAgICAgIGxlbmd0aCA9IHZhbHVlcyA9PSBudWxsID8gMCA6IHZhbHVlcy5sZW5ndGg7XG5cbiAgICAgIHRoaXMuX19kYXRhX18gPSBuZXcgTWFwQ2FjaGU7XG4gICAgICB3aGlsZSAoKytpbmRleCA8IGxlbmd0aCkge1xuICAgICAgICB0aGlzLmFkZCh2YWx1ZXNbaW5kZXhdKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBBZGRzIGB2YWx1ZWAgdG8gdGhlIGFycmF5IGNhY2hlLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAbmFtZSBhZGRcbiAgICAgKiBAbWVtYmVyT2YgU2V0Q2FjaGVcbiAgICAgKiBAYWxpYXMgcHVzaFxuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNhY2hlLlxuICAgICAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgdGhlIGNhY2hlIGluc3RhbmNlLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHNldENhY2hlQWRkKHZhbHVlKSB7XG4gICAgICB0aGlzLl9fZGF0YV9fLnNldCh2YWx1ZSwgSEFTSF9VTkRFRklORUQpO1xuICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgaW4gdGhlIGFycmF5IGNhY2hlLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAbmFtZSBoYXNcbiAgICAgKiBAbWVtYmVyT2YgU2V0Q2FjaGVcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBzZWFyY2ggZm9yLlxuICAgICAqIEByZXR1cm5zIHtudW1iZXJ9IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgZm91bmQsIGVsc2UgYGZhbHNlYC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBzZXRDYWNoZUhhcyh2YWx1ZSkge1xuICAgICAgcmV0dXJuIHRoaXMuX19kYXRhX18uaGFzKHZhbHVlKTtcbiAgICB9XG5cbiAgICAvLyBBZGQgbWV0aG9kcyB0byBgU2V0Q2FjaGVgLlxuICAgIFNldENhY2hlLnByb3RvdHlwZS5hZGQgPSBTZXRDYWNoZS5wcm90b3R5cGUucHVzaCA9IHNldENhY2hlQWRkO1xuICAgIFNldENhY2hlLnByb3RvdHlwZS5oYXMgPSBzZXRDYWNoZUhhcztcblxuICAgIC8qLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tKi9cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBzdGFjayBjYWNoZSBvYmplY3QgdG8gc3RvcmUga2V5LXZhbHVlIHBhaXJzLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAY29uc3RydWN0b3JcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBbZW50cmllc10gVGhlIGtleS12YWx1ZSBwYWlycyB0byBjYWNoZS5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBTdGFjayhlbnRyaWVzKSB7XG4gICAgICB2YXIgZGF0YSA9IHRoaXMuX19kYXRhX18gPSBuZXcgTGlzdENhY2hlKGVudHJpZXMpO1xuICAgICAgdGhpcy5zaXplID0gZGF0YS5zaXplO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFJlbW92ZXMgYWxsIGtleS12YWx1ZSBlbnRyaWVzIGZyb20gdGhlIHN0YWNrLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAbmFtZSBjbGVhclxuICAgICAqIEBtZW1iZXJPZiBTdGFja1xuICAgICAqL1xuICAgIGZ1bmN0aW9uIHN0YWNrQ2xlYXIoKSB7XG4gICAgICB0aGlzLl9fZGF0YV9fID0gbmV3IExpc3RDYWNoZTtcbiAgICAgIHRoaXMuc2l6ZSA9IDA7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogUmVtb3ZlcyBga2V5YCBhbmQgaXRzIHZhbHVlIGZyb20gdGhlIHN0YWNrLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAbmFtZSBkZWxldGVcbiAgICAgKiBAbWVtYmVyT2YgU3RhY2tcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30ga2V5IFRoZSBrZXkgb2YgdGhlIHZhbHVlIHRvIHJlbW92ZS5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgdGhlIGVudHJ5IHdhcyByZW1vdmVkLCBlbHNlIGBmYWxzZWAuXG4gICAgICovXG4gICAgZnVuY3Rpb24gc3RhY2tEZWxldGUoa2V5KSB7XG4gICAgICB2YXIgZGF0YSA9IHRoaXMuX19kYXRhX18sXG4gICAgICAgICAgcmVzdWx0ID0gZGF0YVsnZGVsZXRlJ10oa2V5KTtcblxuICAgICAgdGhpcy5zaXplID0gZGF0YS5zaXplO1xuICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBHZXRzIHRoZSBzdGFjayB2YWx1ZSBmb3IgYGtleWAuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBuYW1lIGdldFxuICAgICAqIEBtZW1iZXJPZiBTdGFja1xuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgVGhlIGtleSBvZiB0aGUgdmFsdWUgdG8gZ2V0LlxuICAgICAqIEByZXR1cm5zIHsqfSBSZXR1cm5zIHRoZSBlbnRyeSB2YWx1ZS5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBzdGFja0dldChrZXkpIHtcbiAgICAgIHJldHVybiB0aGlzLl9fZGF0YV9fLmdldChrZXkpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENoZWNrcyBpZiBhIHN0YWNrIHZhbHVlIGZvciBga2V5YCBleGlzdHMuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBuYW1lIGhhc1xuICAgICAqIEBtZW1iZXJPZiBTdGFja1xuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgVGhlIGtleSBvZiB0aGUgZW50cnkgdG8gY2hlY2suXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGFuIGVudHJ5IGZvciBga2V5YCBleGlzdHMsIGVsc2UgYGZhbHNlYC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBzdGFja0hhcyhrZXkpIHtcbiAgICAgIHJldHVybiB0aGlzLl9fZGF0YV9fLmhhcyhrZXkpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFNldHMgdGhlIHN0YWNrIGBrZXlgIHRvIGB2YWx1ZWAuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBuYW1lIHNldFxuICAgICAqIEBtZW1iZXJPZiBTdGFja1xuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgVGhlIGtleSBvZiB0aGUgdmFsdWUgdG8gc2V0LlxuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIHNldC5cbiAgICAgKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIHRoZSBzdGFjayBjYWNoZSBpbnN0YW5jZS5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBzdGFja1NldChrZXksIHZhbHVlKSB7XG4gICAgICB2YXIgZGF0YSA9IHRoaXMuX19kYXRhX187XG4gICAgICBpZiAoZGF0YSBpbnN0YW5jZW9mIExpc3RDYWNoZSkge1xuICAgICAgICB2YXIgcGFpcnMgPSBkYXRhLl9fZGF0YV9fO1xuICAgICAgICBpZiAoIU1hcCB8fCAocGFpcnMubGVuZ3RoIDwgTEFSR0VfQVJSQVlfU0laRSAtIDEpKSB7XG4gICAgICAgICAgcGFpcnMucHVzaChba2V5LCB2YWx1ZV0pO1xuICAgICAgICAgIHRoaXMuc2l6ZSA9ICsrZGF0YS5zaXplO1xuICAgICAgICAgIHJldHVybiB0aGlzO1xuICAgICAgICB9XG4gICAgICAgIGRhdGEgPSB0aGlzLl9fZGF0YV9fID0gbmV3IE1hcENhY2hlKHBhaXJzKTtcbiAgICAgIH1cbiAgICAgIGRhdGEuc2V0KGtleSwgdmFsdWUpO1xuICAgICAgdGhpcy5zaXplID0gZGF0YS5zaXplO1xuICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuXG4gICAgLy8gQWRkIG1ldGhvZHMgdG8gYFN0YWNrYC5cbiAgICBTdGFjay5wcm90b3R5cGUuY2xlYXIgPSBzdGFja0NsZWFyO1xuICAgIFN0YWNrLnByb3RvdHlwZVsnZGVsZXRlJ10gPSBzdGFja0RlbGV0ZTtcbiAgICBTdGFjay5wcm90b3R5cGUuZ2V0ID0gc3RhY2tHZXQ7XG4gICAgU3RhY2sucHJvdG90eXBlLmhhcyA9IHN0YWNrSGFzO1xuICAgIFN0YWNrLnByb3RvdHlwZS5zZXQgPSBzdGFja1NldDtcblxuICAgIC8qLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tKi9cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYW4gYXJyYXkgb2YgdGhlIGVudW1lcmFibGUgcHJvcGVydHkgbmFtZXMgb2YgdGhlIGFycmF5LWxpa2UgYHZhbHVlYC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gcXVlcnkuXG4gICAgICogQHBhcmFtIHtib29sZWFufSBpbmhlcml0ZWQgU3BlY2lmeSByZXR1cm5pbmcgaW5oZXJpdGVkIHByb3BlcnR5IG5hbWVzLlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgYXJyYXkgb2YgcHJvcGVydHkgbmFtZXMuXG4gICAgICovXG4gICAgZnVuY3Rpb24gYXJyYXlMaWtlS2V5cyh2YWx1ZSwgaW5oZXJpdGVkKSB7XG4gICAgICB2YXIgaXNBcnIgPSBpc0FycmF5KHZhbHVlKSxcbiAgICAgICAgICBpc0FyZyA9ICFpc0FyciAmJiBpc0FyZ3VtZW50cyh2YWx1ZSksXG4gICAgICAgICAgaXNCdWZmID0gIWlzQXJyICYmICFpc0FyZyAmJiBpc0J1ZmZlcih2YWx1ZSksXG4gICAgICAgICAgaXNUeXBlID0gIWlzQXJyICYmICFpc0FyZyAmJiAhaXNCdWZmICYmIGlzVHlwZWRBcnJheSh2YWx1ZSksXG4gICAgICAgICAgc2tpcEluZGV4ZXMgPSBpc0FyciB8fCBpc0FyZyB8fCBpc0J1ZmYgfHwgaXNUeXBlLFxuICAgICAgICAgIHJlc3VsdCA9IHNraXBJbmRleGVzID8gYmFzZVRpbWVzKHZhbHVlLmxlbmd0aCwgU3RyaW5nKSA6IFtdLFxuICAgICAgICAgIGxlbmd0aCA9IHJlc3VsdC5sZW5ndGg7XG5cbiAgICAgIGZvciAodmFyIGtleSBpbiB2YWx1ZSkge1xuICAgICAgICBpZiAoKGluaGVyaXRlZCB8fCBoYXNPd25Qcm9wZXJ0eS5jYWxsKHZhbHVlLCBrZXkpKSAmJlxuICAgICAgICAgICAgIShza2lwSW5kZXhlcyAmJiAoXG4gICAgICAgICAgICAgICAvLyBTYWZhcmkgOSBoYXMgZW51bWVyYWJsZSBgYXJndW1lbnRzLmxlbmd0aGAgaW4gc3RyaWN0IG1vZGUuXG4gICAgICAgICAgICAgICBrZXkgPT0gJ2xlbmd0aCcgfHxcbiAgICAgICAgICAgICAgIC8vIE5vZGUuanMgMC4xMCBoYXMgZW51bWVyYWJsZSBub24taW5kZXggcHJvcGVydGllcyBvbiBidWZmZXJzLlxuICAgICAgICAgICAgICAgKGlzQnVmZiAmJiAoa2V5ID09ICdvZmZzZXQnIHx8IGtleSA9PSAncGFyZW50JykpIHx8XG4gICAgICAgICAgICAgICAvLyBQaGFudG9tSlMgMiBoYXMgZW51bWVyYWJsZSBub24taW5kZXggcHJvcGVydGllcyBvbiB0eXBlZCBhcnJheXMuXG4gICAgICAgICAgICAgICAoaXNUeXBlICYmIChrZXkgPT0gJ2J1ZmZlcicgfHwga2V5ID09ICdieXRlTGVuZ3RoJyB8fCBrZXkgPT0gJ2J5dGVPZmZzZXQnKSkgfHxcbiAgICAgICAgICAgICAgIC8vIFNraXAgaW5kZXggcHJvcGVydGllcy5cbiAgICAgICAgICAgICAgIGlzSW5kZXgoa2V5LCBsZW5ndGgpXG4gICAgICAgICAgICApKSkge1xuICAgICAgICAgIHJlc3VsdC5wdXNoKGtleSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQSBzcGVjaWFsaXplZCB2ZXJzaW9uIG9mIGBfLnNhbXBsZWAgZm9yIGFycmF5cy5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIHNhbXBsZS5cbiAgICAgKiBAcmV0dXJucyB7Kn0gUmV0dXJucyB0aGUgcmFuZG9tIGVsZW1lbnQuXG4gICAgICovXG4gICAgZnVuY3Rpb24gYXJyYXlTYW1wbGUoYXJyYXkpIHtcbiAgICAgIHZhciBsZW5ndGggPSBhcnJheS5sZW5ndGg7XG4gICAgICByZXR1cm4gbGVuZ3RoID8gYXJyYXlbYmFzZVJhbmRvbSgwLCBsZW5ndGggLSAxKV0gOiB1bmRlZmluZWQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQSBzcGVjaWFsaXplZCB2ZXJzaW9uIG9mIGBfLnNhbXBsZVNpemVgIGZvciBhcnJheXMuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBzYW1wbGUuXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IG4gVGhlIG51bWJlciBvZiBlbGVtZW50cyB0byBzYW1wbGUuXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSByYW5kb20gZWxlbWVudHMuXG4gICAgICovXG4gICAgZnVuY3Rpb24gYXJyYXlTYW1wbGVTaXplKGFycmF5LCBuKSB7XG4gICAgICByZXR1cm4gc2h1ZmZsZVNlbGYoY29weUFycmF5KGFycmF5KSwgYmFzZUNsYW1wKG4sIDAsIGFycmF5Lmxlbmd0aCkpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEEgc3BlY2lhbGl6ZWQgdmVyc2lvbiBvZiBgXy5zaHVmZmxlYCBmb3IgYXJyYXlzLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gc2h1ZmZsZS5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIG5ldyBzaHVmZmxlZCBhcnJheS5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBhcnJheVNodWZmbGUoYXJyYXkpIHtcbiAgICAgIHJldHVybiBzaHVmZmxlU2VsZihjb3B5QXJyYXkoYXJyYXkpKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGlzIGZ1bmN0aW9uIGlzIGxpa2UgYGFzc2lnblZhbHVlYCBleGNlcHQgdGhhdCBpdCBkb2Vzbid0IGFzc2lnblxuICAgICAqIGB1bmRlZmluZWRgIHZhbHVlcy5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIG1vZGlmeS5cbiAgICAgKiBAcGFyYW0ge3N0cmluZ30ga2V5IFRoZSBrZXkgb2YgdGhlIHByb3BlcnR5IHRvIGFzc2lnbi5cbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBhc3NpZ24uXG4gICAgICovXG4gICAgZnVuY3Rpb24gYXNzaWduTWVyZ2VWYWx1ZShvYmplY3QsIGtleSwgdmFsdWUpIHtcbiAgICAgIGlmICgodmFsdWUgIT09IHVuZGVmaW5lZCAmJiAhZXEob2JqZWN0W2tleV0sIHZhbHVlKSkgfHxcbiAgICAgICAgICAodmFsdWUgPT09IHVuZGVmaW5lZCAmJiAhKGtleSBpbiBvYmplY3QpKSkge1xuICAgICAgICBiYXNlQXNzaWduVmFsdWUob2JqZWN0LCBrZXksIHZhbHVlKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBBc3NpZ25zIGB2YWx1ZWAgdG8gYGtleWAgb2YgYG9iamVjdGAgaWYgdGhlIGV4aXN0aW5nIHZhbHVlIGlzIG5vdCBlcXVpdmFsZW50XG4gICAgICogdXNpbmcgW2BTYW1lVmFsdWVaZXJvYF0oaHR0cDovL2VjbWEtaW50ZXJuYXRpb25hbC5vcmcvZWNtYS0yNjIvNy4wLyNzZWMtc2FtZXZhbHVlemVybylcbiAgICAgKiBmb3IgZXF1YWxpdHkgY29tcGFyaXNvbnMuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBtb2RpZnkuXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IGtleSBUaGUga2V5IG9mIHRoZSBwcm9wZXJ0eSB0byBhc3NpZ24uXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gYXNzaWduLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGFzc2lnblZhbHVlKG9iamVjdCwga2V5LCB2YWx1ZSkge1xuICAgICAgdmFyIG9ialZhbHVlID0gb2JqZWN0W2tleV07XG4gICAgICBpZiAoIShoYXNPd25Qcm9wZXJ0eS5jYWxsKG9iamVjdCwga2V5KSAmJiBlcShvYmpWYWx1ZSwgdmFsdWUpKSB8fFxuICAgICAgICAgICh2YWx1ZSA9PT0gdW5kZWZpbmVkICYmICEoa2V5IGluIG9iamVjdCkpKSB7XG4gICAgICAgIGJhc2VBc3NpZ25WYWx1ZShvYmplY3QsIGtleSwgdmFsdWUpO1xuICAgICAgfVxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEdldHMgdGhlIGluZGV4IGF0IHdoaWNoIHRoZSBga2V5YCBpcyBmb3VuZCBpbiBgYXJyYXlgIG9mIGtleS12YWx1ZSBwYWlycy5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIGluc3BlY3QuXG4gICAgICogQHBhcmFtIHsqfSBrZXkgVGhlIGtleSB0byBzZWFyY2ggZm9yLlxuICAgICAqIEByZXR1cm5zIHtudW1iZXJ9IFJldHVybnMgdGhlIGluZGV4IG9mIHRoZSBtYXRjaGVkIHZhbHVlLCBlbHNlIGAtMWAuXG4gICAgICovXG4gICAgZnVuY3Rpb24gYXNzb2NJbmRleE9mKGFycmF5LCBrZXkpIHtcbiAgICAgIHZhciBsZW5ndGggPSBhcnJheS5sZW5ndGg7XG4gICAgICB3aGlsZSAobGVuZ3RoLS0pIHtcbiAgICAgICAgaWYgKGVxKGFycmF5W2xlbmd0aF1bMF0sIGtleSkpIHtcbiAgICAgICAgICByZXR1cm4gbGVuZ3RoO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICByZXR1cm4gLTE7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQWdncmVnYXRlcyBlbGVtZW50cyBvZiBgY29sbGVjdGlvbmAgb24gYGFjY3VtdWxhdG9yYCB3aXRoIGtleXMgdHJhbnNmb3JtZWRcbiAgICAgKiBieSBgaXRlcmF0ZWVgIGFuZCB2YWx1ZXMgc2V0IGJ5IGBzZXR0ZXJgLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge0FycmF5fE9iamVjdH0gY29sbGVjdGlvbiBUaGUgY29sbGVjdGlvbiB0byBpdGVyYXRlIG92ZXIuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gc2V0dGVyIFRoZSBmdW5jdGlvbiB0byBzZXQgYGFjY3VtdWxhdG9yYCB2YWx1ZXMuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gaXRlcmF0ZWUgVGhlIGl0ZXJhdGVlIHRvIHRyYW5zZm9ybSBrZXlzLlxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBhY2N1bXVsYXRvciBUaGUgaW5pdGlhbCBhZ2dyZWdhdGVkIG9iamVjdC5cbiAgICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgYGFjY3VtdWxhdG9yYC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBiYXNlQWdncmVnYXRvcihjb2xsZWN0aW9uLCBzZXR0ZXIsIGl0ZXJhdGVlLCBhY2N1bXVsYXRvcikge1xuICAgICAgYmFzZUVhY2goY29sbGVjdGlvbiwgZnVuY3Rpb24odmFsdWUsIGtleSwgY29sbGVjdGlvbikge1xuICAgICAgICBzZXR0ZXIoYWNjdW11bGF0b3IsIHZhbHVlLCBpdGVyYXRlZSh2YWx1ZSksIGNvbGxlY3Rpb24pO1xuICAgICAgfSk7XG4gICAgICByZXR1cm4gYWNjdW11bGF0b3I7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8uYXNzaWduYCB3aXRob3V0IHN1cHBvcnQgZm9yIG11bHRpcGxlIHNvdXJjZXNcbiAgICAgKiBvciBgY3VzdG9taXplcmAgZnVuY3Rpb25zLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBkZXN0aW5hdGlvbiBvYmplY3QuXG4gICAgICogQHBhcmFtIHtPYmplY3R9IHNvdXJjZSBUaGUgc291cmNlIG9iamVjdC5cbiAgICAgKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIGBvYmplY3RgLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGJhc2VBc3NpZ24ob2JqZWN0LCBzb3VyY2UpIHtcbiAgICAgIHJldHVybiBvYmplY3QgJiYgY29weU9iamVjdChzb3VyY2UsIGtleXMoc291cmNlKSwgb2JqZWN0KTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5hc3NpZ25JbmAgd2l0aG91dCBzdXBwb3J0IGZvciBtdWx0aXBsZSBzb3VyY2VzXG4gICAgICogb3IgYGN1c3RvbWl6ZXJgIGZ1bmN0aW9ucy5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgZGVzdGluYXRpb24gb2JqZWN0LlxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBzb3VyY2UgVGhlIHNvdXJjZSBvYmplY3QuXG4gICAgICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyBgb2JqZWN0YC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBiYXNlQXNzaWduSW4ob2JqZWN0LCBzb3VyY2UpIHtcbiAgICAgIHJldHVybiBvYmplY3QgJiYgY29weU9iamVjdChzb3VyY2UsIGtleXNJbihzb3VyY2UpLCBvYmplY3QpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBhc3NpZ25WYWx1ZWAgYW5kIGBhc3NpZ25NZXJnZVZhbHVlYCB3aXRob3V0XG4gICAgICogdmFsdWUgY2hlY2tzLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gbW9kaWZ5LlxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgVGhlIGtleSBvZiB0aGUgcHJvcGVydHkgdG8gYXNzaWduLlxuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGFzc2lnbi5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBiYXNlQXNzaWduVmFsdWUob2JqZWN0LCBrZXksIHZhbHVlKSB7XG4gICAgICBpZiAoa2V5ID09ICdfX3Byb3RvX18nICYmIGRlZmluZVByb3BlcnR5KSB7XG4gICAgICAgIGRlZmluZVByb3BlcnR5KG9iamVjdCwga2V5LCB7XG4gICAgICAgICAgJ2NvbmZpZ3VyYWJsZSc6IHRydWUsXG4gICAgICAgICAgJ2VudW1lcmFibGUnOiB0cnVlLFxuICAgICAgICAgICd2YWx1ZSc6IHZhbHVlLFxuICAgICAgICAgICd3cml0YWJsZSc6IHRydWVcbiAgICAgICAgfSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBvYmplY3Rba2V5XSA9IHZhbHVlO1xuICAgICAgfVxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLmF0YCB3aXRob3V0IHN1cHBvcnQgZm9yIGluZGl2aWR1YWwgcGF0aHMuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBpdGVyYXRlIG92ZXIuXG4gICAgICogQHBhcmFtIHtzdHJpbmdbXX0gcGF0aHMgVGhlIHByb3BlcnR5IHBhdGhzIHRvIHBpY2suXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBwaWNrZWQgZWxlbWVudHMuXG4gICAgICovXG4gICAgZnVuY3Rpb24gYmFzZUF0KG9iamVjdCwgcGF0aHMpIHtcbiAgICAgIHZhciBpbmRleCA9IC0xLFxuICAgICAgICAgIGxlbmd0aCA9IHBhdGhzLmxlbmd0aCxcbiAgICAgICAgICByZXN1bHQgPSBBcnJheShsZW5ndGgpLFxuICAgICAgICAgIHNraXAgPSBvYmplY3QgPT0gbnVsbDtcblxuICAgICAgd2hpbGUgKCsraW5kZXggPCBsZW5ndGgpIHtcbiAgICAgICAgcmVzdWx0W2luZGV4XSA9IHNraXAgPyB1bmRlZmluZWQgOiBnZXQob2JqZWN0LCBwYXRoc1tpbmRleF0pO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5jbGFtcGAgd2hpY2ggZG9lc24ndCBjb2VyY2UgYXJndW1lbnRzLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge251bWJlcn0gbnVtYmVyIFRoZSBudW1iZXIgdG8gY2xhbXAuXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IFtsb3dlcl0gVGhlIGxvd2VyIGJvdW5kLlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSB1cHBlciBUaGUgdXBwZXIgYm91bmQuXG4gICAgICogQHJldHVybnMge251bWJlcn0gUmV0dXJucyB0aGUgY2xhbXBlZCBudW1iZXIuXG4gICAgICovXG4gICAgZnVuY3Rpb24gYmFzZUNsYW1wKG51bWJlciwgbG93ZXIsIHVwcGVyKSB7XG4gICAgICBpZiAobnVtYmVyID09PSBudW1iZXIpIHtcbiAgICAgICAgaWYgKHVwcGVyICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICBudW1iZXIgPSBudW1iZXIgPD0gdXBwZXIgPyBudW1iZXIgOiB1cHBlcjtcbiAgICAgICAgfVxuICAgICAgICBpZiAobG93ZXIgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgIG51bWJlciA9IG51bWJlciA+PSBsb3dlciA/IG51bWJlciA6IGxvd2VyO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICByZXR1cm4gbnVtYmVyO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLmNsb25lYCBhbmQgYF8uY2xvbmVEZWVwYCB3aGljaCB0cmFja3NcbiAgICAgKiB0cmF2ZXJzZWQgb2JqZWN0cy5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2xvbmUuXG4gICAgICogQHBhcmFtIHtib29sZWFufSBiaXRtYXNrIFRoZSBiaXRtYXNrIGZsYWdzLlxuICAgICAqICAxIC0gRGVlcCBjbG9uZVxuICAgICAqICAyIC0gRmxhdHRlbiBpbmhlcml0ZWQgcHJvcGVydGllc1xuICAgICAqICA0IC0gQ2xvbmUgc3ltYm9sc1xuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtjdXN0b21pemVyXSBUaGUgZnVuY3Rpb24gdG8gY3VzdG9taXplIGNsb25pbmcuXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IFtrZXldIFRoZSBrZXkgb2YgYHZhbHVlYC5cbiAgICAgKiBAcGFyYW0ge09iamVjdH0gW29iamVjdF0gVGhlIHBhcmVudCBvYmplY3Qgb2YgYHZhbHVlYC5cbiAgICAgKiBAcGFyYW0ge09iamVjdH0gW3N0YWNrXSBUcmFja3MgdHJhdmVyc2VkIG9iamVjdHMgYW5kIHRoZWlyIGNsb25lIGNvdW50ZXJwYXJ0cy5cbiAgICAgKiBAcmV0dXJucyB7Kn0gUmV0dXJucyB0aGUgY2xvbmVkIHZhbHVlLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGJhc2VDbG9uZSh2YWx1ZSwgYml0bWFzaywgY3VzdG9taXplciwga2V5LCBvYmplY3QsIHN0YWNrKSB7XG4gICAgICB2YXIgcmVzdWx0LFxuICAgICAgICAgIGlzRGVlcCA9IGJpdG1hc2sgJiBDTE9ORV9ERUVQX0ZMQUcsXG4gICAgICAgICAgaXNGbGF0ID0gYml0bWFzayAmIENMT05FX0ZMQVRfRkxBRyxcbiAgICAgICAgICBpc0Z1bGwgPSBiaXRtYXNrICYgQ0xPTkVfU1lNQk9MU19GTEFHO1xuXG4gICAgICBpZiAoY3VzdG9taXplcikge1xuICAgICAgICByZXN1bHQgPSBvYmplY3QgPyBjdXN0b21pemVyKHZhbHVlLCBrZXksIG9iamVjdCwgc3RhY2spIDogY3VzdG9taXplcih2YWx1ZSk7XG4gICAgICB9XG4gICAgICBpZiAocmVzdWx0ICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICAgIH1cbiAgICAgIGlmICghaXNPYmplY3QodmFsdWUpKSB7XG4gICAgICAgIHJldHVybiB2YWx1ZTtcbiAgICAgIH1cbiAgICAgIHZhciBpc0FyciA9IGlzQXJyYXkodmFsdWUpO1xuICAgICAgaWYgKGlzQXJyKSB7XG4gICAgICAgIHJlc3VsdCA9IGluaXRDbG9uZUFycmF5KHZhbHVlKTtcbiAgICAgICAgaWYgKCFpc0RlZXApIHtcbiAgICAgICAgICByZXR1cm4gY29weUFycmF5KHZhbHVlLCByZXN1bHQpO1xuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB2YXIgdGFnID0gZ2V0VGFnKHZhbHVlKSxcbiAgICAgICAgICAgIGlzRnVuYyA9IHRhZyA9PSBmdW5jVGFnIHx8IHRhZyA9PSBnZW5UYWc7XG5cbiAgICAgICAgaWYgKGlzQnVmZmVyKHZhbHVlKSkge1xuICAgICAgICAgIHJldHVybiBjbG9uZUJ1ZmZlcih2YWx1ZSwgaXNEZWVwKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAodGFnID09IG9iamVjdFRhZyB8fCB0YWcgPT0gYXJnc1RhZyB8fCAoaXNGdW5jICYmICFvYmplY3QpKSB7XG4gICAgICAgICAgcmVzdWx0ID0gKGlzRmxhdCB8fCBpc0Z1bmMpID8ge30gOiBpbml0Q2xvbmVPYmplY3QodmFsdWUpO1xuICAgICAgICAgIGlmICghaXNEZWVwKSB7XG4gICAgICAgICAgICByZXR1cm4gaXNGbGF0XG4gICAgICAgICAgICAgID8gY29weVN5bWJvbHNJbih2YWx1ZSwgYmFzZUFzc2lnbkluKHJlc3VsdCwgdmFsdWUpKVxuICAgICAgICAgICAgICA6IGNvcHlTeW1ib2xzKHZhbHVlLCBiYXNlQXNzaWduKHJlc3VsdCwgdmFsdWUpKTtcbiAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgaWYgKCFjbG9uZWFibGVUYWdzW3RhZ10pIHtcbiAgICAgICAgICAgIHJldHVybiBvYmplY3QgPyB2YWx1ZSA6IHt9O1xuICAgICAgICAgIH1cbiAgICAgICAgICByZXN1bHQgPSBpbml0Q2xvbmVCeVRhZyh2YWx1ZSwgdGFnLCBpc0RlZXApO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICAvLyBDaGVjayBmb3IgY2lyY3VsYXIgcmVmZXJlbmNlcyBhbmQgcmV0dXJuIGl0cyBjb3JyZXNwb25kaW5nIGNsb25lLlxuICAgICAgc3RhY2sgfHwgKHN0YWNrID0gbmV3IFN0YWNrKTtcbiAgICAgIHZhciBzdGFja2VkID0gc3RhY2suZ2V0KHZhbHVlKTtcbiAgICAgIGlmIChzdGFja2VkKSB7XG4gICAgICAgIHJldHVybiBzdGFja2VkO1xuICAgICAgfVxuICAgICAgc3RhY2suc2V0KHZhbHVlLCByZXN1bHQpO1xuXG4gICAgICBpZiAoaXNTZXQodmFsdWUpKSB7XG4gICAgICAgIHZhbHVlLmZvckVhY2goZnVuY3Rpb24oc3ViVmFsdWUpIHtcbiAgICAgICAgICByZXN1bHQuYWRkKGJhc2VDbG9uZShzdWJWYWx1ZSwgYml0bWFzaywgY3VzdG9taXplciwgc3ViVmFsdWUsIHZhbHVlLCBzdGFjaykpO1xuICAgICAgICB9KTtcbiAgICAgIH0gZWxzZSBpZiAoaXNNYXAodmFsdWUpKSB7XG4gICAgICAgIHZhbHVlLmZvckVhY2goZnVuY3Rpb24oc3ViVmFsdWUsIGtleSkge1xuICAgICAgICAgIHJlc3VsdC5zZXQoa2V5LCBiYXNlQ2xvbmUoc3ViVmFsdWUsIGJpdG1hc2ssIGN1c3RvbWl6ZXIsIGtleSwgdmFsdWUsIHN0YWNrKSk7XG4gICAgICAgIH0pO1xuICAgICAgfVxuXG4gICAgICB2YXIga2V5c0Z1bmMgPSBpc0Z1bGxcbiAgICAgICAgPyAoaXNGbGF0ID8gZ2V0QWxsS2V5c0luIDogZ2V0QWxsS2V5cylcbiAgICAgICAgOiAoaXNGbGF0ID8ga2V5c0luIDoga2V5cyk7XG5cbiAgICAgIHZhciBwcm9wcyA9IGlzQXJyID8gdW5kZWZpbmVkIDoga2V5c0Z1bmModmFsdWUpO1xuICAgICAgYXJyYXlFYWNoKHByb3BzIHx8IHZhbHVlLCBmdW5jdGlvbihzdWJWYWx1ZSwga2V5KSB7XG4gICAgICAgIGlmIChwcm9wcykge1xuICAgICAgICAgIGtleSA9IHN1YlZhbHVlO1xuICAgICAgICAgIHN1YlZhbHVlID0gdmFsdWVba2V5XTtcbiAgICAgICAgfVxuICAgICAgICAvLyBSZWN1cnNpdmVseSBwb3B1bGF0ZSBjbG9uZSAoc3VzY2VwdGlibGUgdG8gY2FsbCBzdGFjayBsaW1pdHMpLlxuICAgICAgICBhc3NpZ25WYWx1ZShyZXN1bHQsIGtleSwgYmFzZUNsb25lKHN1YlZhbHVlLCBiaXRtYXNrLCBjdXN0b21pemVyLCBrZXksIHZhbHVlLCBzdGFjaykpO1xuICAgICAgfSk7XG4gICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLmNvbmZvcm1zYCB3aGljaCBkb2Vzbid0IGNsb25lIGBzb3VyY2VgLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gc291cmNlIFRoZSBvYmplY3Qgb2YgcHJvcGVydHkgcHJlZGljYXRlcyB0byBjb25mb3JtIHRvLlxuICAgICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IHNwZWMgZnVuY3Rpb24uXG4gICAgICovXG4gICAgZnVuY3Rpb24gYmFzZUNvbmZvcm1zKHNvdXJjZSkge1xuICAgICAgdmFyIHByb3BzID0ga2V5cyhzb3VyY2UpO1xuICAgICAgcmV0dXJuIGZ1bmN0aW9uKG9iamVjdCkge1xuICAgICAgICByZXR1cm4gYmFzZUNvbmZvcm1zVG8ob2JqZWN0LCBzb3VyY2UsIHByb3BzKTtcbiAgICAgIH07XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8uY29uZm9ybXNUb2Agd2hpY2ggYWNjZXB0cyBgcHJvcHNgIHRvIGNoZWNrLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gaW5zcGVjdC5cbiAgICAgKiBAcGFyYW0ge09iamVjdH0gc291cmNlIFRoZSBvYmplY3Qgb2YgcHJvcGVydHkgcHJlZGljYXRlcyB0byBjb25mb3JtIHRvLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgb2JqZWN0YCBjb25mb3JtcywgZWxzZSBgZmFsc2VgLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGJhc2VDb25mb3Jtc1RvKG9iamVjdCwgc291cmNlLCBwcm9wcykge1xuICAgICAgdmFyIGxlbmd0aCA9IHByb3BzLmxlbmd0aDtcbiAgICAgIGlmIChvYmplY3QgPT0gbnVsbCkge1xuICAgICAgICByZXR1cm4gIWxlbmd0aDtcbiAgICAgIH1cbiAgICAgIG9iamVjdCA9IE9iamVjdChvYmplY3QpO1xuICAgICAgd2hpbGUgKGxlbmd0aC0tKSB7XG4gICAgICAgIHZhciBrZXkgPSBwcm9wc1tsZW5ndGhdLFxuICAgICAgICAgICAgcHJlZGljYXRlID0gc291cmNlW2tleV0sXG4gICAgICAgICAgICB2YWx1ZSA9IG9iamVjdFtrZXldO1xuXG4gICAgICAgIGlmICgodmFsdWUgPT09IHVuZGVmaW5lZCAmJiAhKGtleSBpbiBvYmplY3QpKSB8fCAhcHJlZGljYXRlKHZhbHVlKSkge1xuICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8uZGVsYXlgIGFuZCBgXy5kZWZlcmAgd2hpY2ggYWNjZXB0cyBgYXJnc2BcbiAgICAgKiB0byBwcm92aWRlIHRvIGBmdW5jYC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gZnVuYyBUaGUgZnVuY3Rpb24gdG8gZGVsYXkuXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IHdhaXQgVGhlIG51bWJlciBvZiBtaWxsaXNlY29uZHMgdG8gZGVsYXkgaW52b2NhdGlvbi5cbiAgICAgKiBAcGFyYW0ge0FycmF5fSBhcmdzIFRoZSBhcmd1bWVudHMgdG8gcHJvdmlkZSB0byBgZnVuY2AuXG4gICAgICogQHJldHVybnMge251bWJlcnxPYmplY3R9IFJldHVybnMgdGhlIHRpbWVyIGlkIG9yIHRpbWVvdXQgb2JqZWN0LlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGJhc2VEZWxheShmdW5jLCB3YWl0LCBhcmdzKSB7XG4gICAgICBpZiAodHlwZW9mIGZ1bmMgIT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKEZVTkNfRVJST1JfVEVYVCk7XG4gICAgICB9XG4gICAgICByZXR1cm4gc2V0VGltZW91dChmdW5jdGlvbigpIHsgZnVuYy5hcHBseSh1bmRlZmluZWQsIGFyZ3MpOyB9LCB3YWl0KTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBtZXRob2RzIGxpa2UgYF8uZGlmZmVyZW5jZWAgd2l0aG91dCBzdXBwb3J0XG4gICAgICogZm9yIGV4Y2x1ZGluZyBtdWx0aXBsZSBhcnJheXMgb3IgaXRlcmF0ZWUgc2hvcnRoYW5kcy5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIGluc3BlY3QuXG4gICAgICogQHBhcmFtIHtBcnJheX0gdmFsdWVzIFRoZSB2YWx1ZXMgdG8gZXhjbHVkZS5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbaXRlcmF0ZWVdIFRoZSBpdGVyYXRlZSBpbnZva2VkIHBlciBlbGVtZW50LlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtjb21wYXJhdG9yXSBUaGUgY29tcGFyYXRvciBpbnZva2VkIHBlciBlbGVtZW50LlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgbmV3IGFycmF5IG9mIGZpbHRlcmVkIHZhbHVlcy5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBiYXNlRGlmZmVyZW5jZShhcnJheSwgdmFsdWVzLCBpdGVyYXRlZSwgY29tcGFyYXRvcikge1xuICAgICAgdmFyIGluZGV4ID0gLTEsXG4gICAgICAgICAgaW5jbHVkZXMgPSBhcnJheUluY2x1ZGVzLFxuICAgICAgICAgIGlzQ29tbW9uID0gdHJ1ZSxcbiAgICAgICAgICBsZW5ndGggPSBhcnJheS5sZW5ndGgsXG4gICAgICAgICAgcmVzdWx0ID0gW10sXG4gICAgICAgICAgdmFsdWVzTGVuZ3RoID0gdmFsdWVzLmxlbmd0aDtcblxuICAgICAgaWYgKCFsZW5ndGgpIHtcbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICAgIH1cbiAgICAgIGlmIChpdGVyYXRlZSkge1xuICAgICAgICB2YWx1ZXMgPSBhcnJheU1hcCh2YWx1ZXMsIGJhc2VVbmFyeShpdGVyYXRlZSkpO1xuICAgICAgfVxuICAgICAgaWYgKGNvbXBhcmF0b3IpIHtcbiAgICAgICAgaW5jbHVkZXMgPSBhcnJheUluY2x1ZGVzV2l0aDtcbiAgICAgICAgaXNDb21tb24gPSBmYWxzZTtcbiAgICAgIH1cbiAgICAgIGVsc2UgaWYgKHZhbHVlcy5sZW5ndGggPj0gTEFSR0VfQVJSQVlfU0laRSkge1xuICAgICAgICBpbmNsdWRlcyA9IGNhY2hlSGFzO1xuICAgICAgICBpc0NvbW1vbiA9IGZhbHNlO1xuICAgICAgICB2YWx1ZXMgPSBuZXcgU2V0Q2FjaGUodmFsdWVzKTtcbiAgICAgIH1cbiAgICAgIG91dGVyOlxuICAgICAgd2hpbGUgKCsraW5kZXggPCBsZW5ndGgpIHtcbiAgICAgICAgdmFyIHZhbHVlID0gYXJyYXlbaW5kZXhdLFxuICAgICAgICAgICAgY29tcHV0ZWQgPSBpdGVyYXRlZSA9PSBudWxsID8gdmFsdWUgOiBpdGVyYXRlZSh2YWx1ZSk7XG5cbiAgICAgICAgdmFsdWUgPSAoY29tcGFyYXRvciB8fCB2YWx1ZSAhPT0gMCkgPyB2YWx1ZSA6IDA7XG4gICAgICAgIGlmIChpc0NvbW1vbiAmJiBjb21wdXRlZCA9PT0gY29tcHV0ZWQpIHtcbiAgICAgICAgICB2YXIgdmFsdWVzSW5kZXggPSB2YWx1ZXNMZW5ndGg7XG4gICAgICAgICAgd2hpbGUgKHZhbHVlc0luZGV4LS0pIHtcbiAgICAgICAgICAgIGlmICh2YWx1ZXNbdmFsdWVzSW5kZXhdID09PSBjb21wdXRlZCkge1xuICAgICAgICAgICAgICBjb250aW51ZSBvdXRlcjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgICAgcmVzdWx0LnB1c2godmFsdWUpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKCFpbmNsdWRlcyh2YWx1ZXMsIGNvbXB1dGVkLCBjb21wYXJhdG9yKSkge1xuICAgICAgICAgIHJlc3VsdC5wdXNoKHZhbHVlKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5mb3JFYWNoYCB3aXRob3V0IHN1cHBvcnQgZm9yIGl0ZXJhdGVlIHNob3J0aGFuZHMuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7QXJyYXl8T2JqZWN0fSBjb2xsZWN0aW9uIFRoZSBjb2xsZWN0aW9uIHRvIGl0ZXJhdGUgb3Zlci5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBpdGVyYXRlZSBUaGUgZnVuY3Rpb24gaW52b2tlZCBwZXIgaXRlcmF0aW9uLlxuICAgICAqIEByZXR1cm5zIHtBcnJheXxPYmplY3R9IFJldHVybnMgYGNvbGxlY3Rpb25gLlxuICAgICAqL1xuICAgIHZhciBiYXNlRWFjaCA9IGNyZWF0ZUJhc2VFYWNoKGJhc2VGb3JPd24pO1xuXG4gICAgLyoqXG4gICAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8uZm9yRWFjaFJpZ2h0YCB3aXRob3V0IHN1cHBvcnQgZm9yIGl0ZXJhdGVlIHNob3J0aGFuZHMuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7QXJyYXl8T2JqZWN0fSBjb2xsZWN0aW9uIFRoZSBjb2xsZWN0aW9uIHRvIGl0ZXJhdGUgb3Zlci5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBpdGVyYXRlZSBUaGUgZnVuY3Rpb24gaW52b2tlZCBwZXIgaXRlcmF0aW9uLlxuICAgICAqIEByZXR1cm5zIHtBcnJheXxPYmplY3R9IFJldHVybnMgYGNvbGxlY3Rpb25gLlxuICAgICAqL1xuICAgIHZhciBiYXNlRWFjaFJpZ2h0ID0gY3JlYXRlQmFzZUVhY2goYmFzZUZvck93blJpZ2h0LCB0cnVlKTtcblxuICAgIC8qKlxuICAgICAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLmV2ZXJ5YCB3aXRob3V0IHN1cHBvcnQgZm9yIGl0ZXJhdGVlIHNob3J0aGFuZHMuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7QXJyYXl8T2JqZWN0fSBjb2xsZWN0aW9uIFRoZSBjb2xsZWN0aW9uIHRvIGl0ZXJhdGUgb3Zlci5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBwcmVkaWNhdGUgVGhlIGZ1bmN0aW9uIGludm9rZWQgcGVyIGl0ZXJhdGlvbi5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYWxsIGVsZW1lbnRzIHBhc3MgdGhlIHByZWRpY2F0ZSBjaGVjayxcbiAgICAgKiAgZWxzZSBgZmFsc2VgXG4gICAgICovXG4gICAgZnVuY3Rpb24gYmFzZUV2ZXJ5KGNvbGxlY3Rpb24sIHByZWRpY2F0ZSkge1xuICAgICAgdmFyIHJlc3VsdCA9IHRydWU7XG4gICAgICBiYXNlRWFjaChjb2xsZWN0aW9uLCBmdW5jdGlvbih2YWx1ZSwgaW5kZXgsIGNvbGxlY3Rpb24pIHtcbiAgICAgICAgcmVzdWx0ID0gISFwcmVkaWNhdGUodmFsdWUsIGluZGV4LCBjb2xsZWN0aW9uKTtcbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICAgIH0pO1xuICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBtZXRob2RzIGxpa2UgYF8ubWF4YCBhbmQgYF8ubWluYCB3aGljaCBhY2NlcHRzIGFcbiAgICAgKiBgY29tcGFyYXRvcmAgdG8gZGV0ZXJtaW5lIHRoZSBleHRyZW11bSB2YWx1ZS5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIGl0ZXJhdGUgb3Zlci5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBpdGVyYXRlZSBUaGUgaXRlcmF0ZWUgaW52b2tlZCBwZXIgaXRlcmF0aW9uLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGNvbXBhcmF0b3IgVGhlIGNvbXBhcmF0b3IgdXNlZCB0byBjb21wYXJlIHZhbHVlcy5cbiAgICAgKiBAcmV0dXJucyB7Kn0gUmV0dXJucyB0aGUgZXh0cmVtdW0gdmFsdWUuXG4gICAgICovXG4gICAgZnVuY3Rpb24gYmFzZUV4dHJlbXVtKGFycmF5LCBpdGVyYXRlZSwgY29tcGFyYXRvcikge1xuICAgICAgdmFyIGluZGV4ID0gLTEsXG4gICAgICAgICAgbGVuZ3RoID0gYXJyYXkubGVuZ3RoO1xuXG4gICAgICB3aGlsZSAoKytpbmRleCA8IGxlbmd0aCkge1xuICAgICAgICB2YXIgdmFsdWUgPSBhcnJheVtpbmRleF0sXG4gICAgICAgICAgICBjdXJyZW50ID0gaXRlcmF0ZWUodmFsdWUpO1xuXG4gICAgICAgIGlmIChjdXJyZW50ICE9IG51bGwgJiYgKGNvbXB1dGVkID09PSB1bmRlZmluZWRcbiAgICAgICAgICAgICAgPyAoY3VycmVudCA9PT0gY3VycmVudCAmJiAhaXNTeW1ib2woY3VycmVudCkpXG4gICAgICAgICAgICAgIDogY29tcGFyYXRvcihjdXJyZW50LCBjb21wdXRlZClcbiAgICAgICAgICAgICkpIHtcbiAgICAgICAgICB2YXIgY29tcHV0ZWQgPSBjdXJyZW50LFxuICAgICAgICAgICAgICByZXN1bHQgPSB2YWx1ZTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5maWxsYCB3aXRob3V0IGFuIGl0ZXJhdGVlIGNhbGwgZ3VhcmQuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBmaWxsLlxuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGZpbGwgYGFycmF5YCB3aXRoLlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBbc3RhcnQ9MF0gVGhlIHN0YXJ0IHBvc2l0aW9uLlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBbZW5kPWFycmF5Lmxlbmd0aF0gVGhlIGVuZCBwb3NpdGlvbi5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgYGFycmF5YC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBiYXNlRmlsbChhcnJheSwgdmFsdWUsIHN0YXJ0LCBlbmQpIHtcbiAgICAgIHZhciBsZW5ndGggPSBhcnJheS5sZW5ndGg7XG5cbiAgICAgIHN0YXJ0ID0gdG9JbnRlZ2VyKHN0YXJ0KTtcbiAgICAgIGlmIChzdGFydCA8IDApIHtcbiAgICAgICAgc3RhcnQgPSAtc3RhcnQgPiBsZW5ndGggPyAwIDogKGxlbmd0aCArIHN0YXJ0KTtcbiAgICAgIH1cbiAgICAgIGVuZCA9IChlbmQgPT09IHVuZGVmaW5lZCB8fCBlbmQgPiBsZW5ndGgpID8gbGVuZ3RoIDogdG9JbnRlZ2VyKGVuZCk7XG4gICAgICBpZiAoZW5kIDwgMCkge1xuICAgICAgICBlbmQgKz0gbGVuZ3RoO1xuICAgICAgfVxuICAgICAgZW5kID0gc3RhcnQgPiBlbmQgPyAwIDogdG9MZW5ndGgoZW5kKTtcbiAgICAgIHdoaWxlIChzdGFydCA8IGVuZCkge1xuICAgICAgICBhcnJheVtzdGFydCsrXSA9IHZhbHVlO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGFycmF5O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLmZpbHRlcmAgd2l0aG91dCBzdXBwb3J0IGZvciBpdGVyYXRlZSBzaG9ydGhhbmRzLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge0FycmF5fE9iamVjdH0gY29sbGVjdGlvbiBUaGUgY29sbGVjdGlvbiB0byBpdGVyYXRlIG92ZXIuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gcHJlZGljYXRlIFRoZSBmdW5jdGlvbiBpbnZva2VkIHBlciBpdGVyYXRpb24uXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBuZXcgZmlsdGVyZWQgYXJyYXkuXG4gICAgICovXG4gICAgZnVuY3Rpb24gYmFzZUZpbHRlcihjb2xsZWN0aW9uLCBwcmVkaWNhdGUpIHtcbiAgICAgIHZhciByZXN1bHQgPSBbXTtcbiAgICAgIGJhc2VFYWNoKGNvbGxlY3Rpb24sIGZ1bmN0aW9uKHZhbHVlLCBpbmRleCwgY29sbGVjdGlvbikge1xuICAgICAgICBpZiAocHJlZGljYXRlKHZhbHVlLCBpbmRleCwgY29sbGVjdGlvbikpIHtcbiAgICAgICAgICByZXN1bHQucHVzaCh2YWx1ZSk7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5mbGF0dGVuYCB3aXRoIHN1cHBvcnQgZm9yIHJlc3RyaWN0aW5nIGZsYXR0ZW5pbmcuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBmbGF0dGVuLlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBkZXB0aCBUaGUgbWF4aW11bSByZWN1cnNpb24gZGVwdGguXG4gICAgICogQHBhcmFtIHtib29sZWFufSBbcHJlZGljYXRlPWlzRmxhdHRlbmFibGVdIFRoZSBmdW5jdGlvbiBpbnZva2VkIHBlciBpdGVyYXRpb24uXG4gICAgICogQHBhcmFtIHtib29sZWFufSBbaXNTdHJpY3RdIFJlc3RyaWN0IHRvIHZhbHVlcyB0aGF0IHBhc3MgYHByZWRpY2F0ZWAgY2hlY2tzLlxuICAgICAqIEBwYXJhbSB7QXJyYXl9IFtyZXN1bHQ9W11dIFRoZSBpbml0aWFsIHJlc3VsdCB2YWx1ZS5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIG5ldyBmbGF0dGVuZWQgYXJyYXkuXG4gICAgICovXG4gICAgZnVuY3Rpb24gYmFzZUZsYXR0ZW4oYXJyYXksIGRlcHRoLCBwcmVkaWNhdGUsIGlzU3RyaWN0LCByZXN1bHQpIHtcbiAgICAgIHZhciBpbmRleCA9IC0xLFxuICAgICAgICAgIGxlbmd0aCA9IGFycmF5Lmxlbmd0aDtcblxuICAgICAgcHJlZGljYXRlIHx8IChwcmVkaWNhdGUgPSBpc0ZsYXR0ZW5hYmxlKTtcbiAgICAgIHJlc3VsdCB8fCAocmVzdWx0ID0gW10pO1xuXG4gICAgICB3aGlsZSAoKytpbmRleCA8IGxlbmd0aCkge1xuICAgICAgICB2YXIgdmFsdWUgPSBhcnJheVtpbmRleF07XG4gICAgICAgIGlmIChkZXB0aCA+IDAgJiYgcHJlZGljYXRlKHZhbHVlKSkge1xuICAgICAgICAgIGlmIChkZXB0aCA+IDEpIHtcbiAgICAgICAgICAgIC8vIFJlY3Vyc2l2ZWx5IGZsYXR0ZW4gYXJyYXlzIChzdXNjZXB0aWJsZSB0byBjYWxsIHN0YWNrIGxpbWl0cykuXG4gICAgICAgICAgICBiYXNlRmxhdHRlbih2YWx1ZSwgZGVwdGggLSAxLCBwcmVkaWNhdGUsIGlzU3RyaWN0LCByZXN1bHQpO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBhcnJheVB1c2gocmVzdWx0LCB2YWx1ZSk7XG4gICAgICAgICAgfVxuICAgICAgICB9IGVsc2UgaWYgKCFpc1N0cmljdCkge1xuICAgICAgICAgIHJlc3VsdFtyZXN1bHQubGVuZ3RoXSA9IHZhbHVlO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBiYXNlRm9yT3duYCB3aGljaCBpdGVyYXRlcyBvdmVyIGBvYmplY3RgXG4gICAgICogcHJvcGVydGllcyByZXR1cm5lZCBieSBga2V5c0Z1bmNgIGFuZCBpbnZva2VzIGBpdGVyYXRlZWAgZm9yIGVhY2ggcHJvcGVydHkuXG4gICAgICogSXRlcmF0ZWUgZnVuY3Rpb25zIG1heSBleGl0IGl0ZXJhdGlvbiBlYXJseSBieSBleHBsaWNpdGx5IHJldHVybmluZyBgZmFsc2VgLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gaXRlcmF0ZSBvdmVyLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGl0ZXJhdGVlIFRoZSBmdW5jdGlvbiBpbnZva2VkIHBlciBpdGVyYXRpb24uXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0ga2V5c0Z1bmMgVGhlIGZ1bmN0aW9uIHRvIGdldCB0aGUga2V5cyBvZiBgb2JqZWN0YC5cbiAgICAgKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIGBvYmplY3RgLlxuICAgICAqL1xuICAgIHZhciBiYXNlRm9yID0gY3JlYXRlQmFzZUZvcigpO1xuXG4gICAgLyoqXG4gICAgICogVGhpcyBmdW5jdGlvbiBpcyBsaWtlIGBiYXNlRm9yYCBleGNlcHQgdGhhdCBpdCBpdGVyYXRlcyBvdmVyIHByb3BlcnRpZXNcbiAgICAgKiBpbiB0aGUgb3Bwb3NpdGUgb3JkZXIuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBpdGVyYXRlIG92ZXIuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gaXRlcmF0ZWUgVGhlIGZ1bmN0aW9uIGludm9rZWQgcGVyIGl0ZXJhdGlvbi5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBrZXlzRnVuYyBUaGUgZnVuY3Rpb24gdG8gZ2V0IHRoZSBrZXlzIG9mIGBvYmplY3RgLlxuICAgICAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgYG9iamVjdGAuXG4gICAgICovXG4gICAgdmFyIGJhc2VGb3JSaWdodCA9IGNyZWF0ZUJhc2VGb3IodHJ1ZSk7XG5cbiAgICAvKipcbiAgICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5mb3JPd25gIHdpdGhvdXQgc3VwcG9ydCBmb3IgaXRlcmF0ZWUgc2hvcnRoYW5kcy5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIGl0ZXJhdGUgb3Zlci5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBpdGVyYXRlZSBUaGUgZnVuY3Rpb24gaW52b2tlZCBwZXIgaXRlcmF0aW9uLlxuICAgICAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgYG9iamVjdGAuXG4gICAgICovXG4gICAgZnVuY3Rpb24gYmFzZUZvck93bihvYmplY3QsIGl0ZXJhdGVlKSB7XG4gICAgICByZXR1cm4gb2JqZWN0ICYmIGJhc2VGb3Iob2JqZWN0LCBpdGVyYXRlZSwga2V5cyk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8uZm9yT3duUmlnaHRgIHdpdGhvdXQgc3VwcG9ydCBmb3IgaXRlcmF0ZWUgc2hvcnRoYW5kcy5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIGl0ZXJhdGUgb3Zlci5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBpdGVyYXRlZSBUaGUgZnVuY3Rpb24gaW52b2tlZCBwZXIgaXRlcmF0aW9uLlxuICAgICAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgYG9iamVjdGAuXG4gICAgICovXG4gICAgZnVuY3Rpb24gYmFzZUZvck93blJpZ2h0KG9iamVjdCwgaXRlcmF0ZWUpIHtcbiAgICAgIHJldHVybiBvYmplY3QgJiYgYmFzZUZvclJpZ2h0KG9iamVjdCwgaXRlcmF0ZWUsIGtleXMpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLmZ1bmN0aW9uc2Agd2hpY2ggY3JlYXRlcyBhbiBhcnJheSBvZlxuICAgICAqIGBvYmplY3RgIGZ1bmN0aW9uIHByb3BlcnR5IG5hbWVzIGZpbHRlcmVkIGZyb20gYHByb3BzYC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIGluc3BlY3QuXG4gICAgICogQHBhcmFtIHtBcnJheX0gcHJvcHMgVGhlIHByb3BlcnR5IG5hbWVzIHRvIGZpbHRlci5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIGZ1bmN0aW9uIG5hbWVzLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGJhc2VGdW5jdGlvbnMob2JqZWN0LCBwcm9wcykge1xuICAgICAgcmV0dXJuIGFycmF5RmlsdGVyKHByb3BzLCBmdW5jdGlvbihrZXkpIHtcbiAgICAgICAgcmV0dXJuIGlzRnVuY3Rpb24ob2JqZWN0W2tleV0pO1xuICAgICAgfSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8uZ2V0YCB3aXRob3V0IHN1cHBvcnQgZm9yIGRlZmF1bHQgdmFsdWVzLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gcXVlcnkuXG4gICAgICogQHBhcmFtIHtBcnJheXxzdHJpbmd9IHBhdGggVGhlIHBhdGggb2YgdGhlIHByb3BlcnR5IHRvIGdldC5cbiAgICAgKiBAcmV0dXJucyB7Kn0gUmV0dXJucyB0aGUgcmVzb2x2ZWQgdmFsdWUuXG4gICAgICovXG4gICAgZnVuY3Rpb24gYmFzZUdldChvYmplY3QsIHBhdGgpIHtcbiAgICAgIHBhdGggPSBjYXN0UGF0aChwYXRoLCBvYmplY3QpO1xuXG4gICAgICB2YXIgaW5kZXggPSAwLFxuICAgICAgICAgIGxlbmd0aCA9IHBhdGgubGVuZ3RoO1xuXG4gICAgICB3aGlsZSAob2JqZWN0ICE9IG51bGwgJiYgaW5kZXggPCBsZW5ndGgpIHtcbiAgICAgICAgb2JqZWN0ID0gb2JqZWN0W3RvS2V5KHBhdGhbaW5kZXgrK10pXTtcbiAgICAgIH1cbiAgICAgIHJldHVybiAoaW5kZXggJiYgaW5kZXggPT0gbGVuZ3RoKSA/IG9iamVjdCA6IHVuZGVmaW5lZDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgZ2V0QWxsS2V5c2AgYW5kIGBnZXRBbGxLZXlzSW5gIHdoaWNoIHVzZXNcbiAgICAgKiBga2V5c0Z1bmNgIGFuZCBgc3ltYm9sc0Z1bmNgIHRvIGdldCB0aGUgZW51bWVyYWJsZSBwcm9wZXJ0eSBuYW1lcyBhbmRcbiAgICAgKiBzeW1ib2xzIG9mIGBvYmplY3RgLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gcXVlcnkuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0ga2V5c0Z1bmMgVGhlIGZ1bmN0aW9uIHRvIGdldCB0aGUga2V5cyBvZiBgb2JqZWN0YC5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBzeW1ib2xzRnVuYyBUaGUgZnVuY3Rpb24gdG8gZ2V0IHRoZSBzeW1ib2xzIG9mIGBvYmplY3RgLlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgYXJyYXkgb2YgcHJvcGVydHkgbmFtZXMgYW5kIHN5bWJvbHMuXG4gICAgICovXG4gICAgZnVuY3Rpb24gYmFzZUdldEFsbEtleXMob2JqZWN0LCBrZXlzRnVuYywgc3ltYm9sc0Z1bmMpIHtcbiAgICAgIHZhciByZXN1bHQgPSBrZXlzRnVuYyhvYmplY3QpO1xuICAgICAgcmV0dXJuIGlzQXJyYXkob2JqZWN0KSA/IHJlc3VsdCA6IGFycmF5UHVzaChyZXN1bHQsIHN5bWJvbHNGdW5jKG9iamVjdCkpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBnZXRUYWdgIHdpdGhvdXQgZmFsbGJhY2tzIGZvciBidWdneSBlbnZpcm9ubWVudHMuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIHF1ZXJ5LlxuICAgICAqIEByZXR1cm5zIHtzdHJpbmd9IFJldHVybnMgdGhlIGB0b1N0cmluZ1RhZ2AuXG4gICAgICovXG4gICAgZnVuY3Rpb24gYmFzZUdldFRhZyh2YWx1ZSkge1xuICAgICAgaWYgKHZhbHVlID09IG51bGwpIHtcbiAgICAgICAgcmV0dXJuIHZhbHVlID09PSB1bmRlZmluZWQgPyB1bmRlZmluZWRUYWcgOiBudWxsVGFnO1xuICAgICAgfVxuICAgICAgcmV0dXJuIChzeW1Ub1N0cmluZ1RhZyAmJiBzeW1Ub1N0cmluZ1RhZyBpbiBPYmplY3QodmFsdWUpKVxuICAgICAgICA/IGdldFJhd1RhZyh2YWx1ZSlcbiAgICAgICAgOiBvYmplY3RUb1N0cmluZyh2YWx1ZSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8uZ3RgIHdoaWNoIGRvZXNuJ3QgY29lcmNlIGFyZ3VtZW50cy5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY29tcGFyZS5cbiAgICAgKiBAcGFyYW0geyp9IG90aGVyIFRoZSBvdGhlciB2YWx1ZSB0byBjb21wYXJlLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGdyZWF0ZXIgdGhhbiBgb3RoZXJgLFxuICAgICAqICBlbHNlIGBmYWxzZWAuXG4gICAgICovXG4gICAgZnVuY3Rpb24gYmFzZUd0KHZhbHVlLCBvdGhlcikge1xuICAgICAgcmV0dXJuIHZhbHVlID4gb3RoZXI7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8uaGFzYCB3aXRob3V0IHN1cHBvcnQgZm9yIGRlZXAgcGF0aHMuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBbb2JqZWN0XSBUaGUgb2JqZWN0IHRvIHF1ZXJ5LlxuICAgICAqIEBwYXJhbSB7QXJyYXl8c3RyaW5nfSBrZXkgVGhlIGtleSB0byBjaGVjay5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYGtleWAgZXhpc3RzLCBlbHNlIGBmYWxzZWAuXG4gICAgICovXG4gICAgZnVuY3Rpb24gYmFzZUhhcyhvYmplY3QsIGtleSkge1xuICAgICAgcmV0dXJuIG9iamVjdCAhPSBudWxsICYmIGhhc093blByb3BlcnR5LmNhbGwob2JqZWN0LCBrZXkpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLmhhc0luYCB3aXRob3V0IHN1cHBvcnQgZm9yIGRlZXAgcGF0aHMuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBbb2JqZWN0XSBUaGUgb2JqZWN0IHRvIHF1ZXJ5LlxuICAgICAqIEBwYXJhbSB7QXJyYXl8c3RyaW5nfSBrZXkgVGhlIGtleSB0byBjaGVjay5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYGtleWAgZXhpc3RzLCBlbHNlIGBmYWxzZWAuXG4gICAgICovXG4gICAgZnVuY3Rpb24gYmFzZUhhc0luKG9iamVjdCwga2V5KSB7XG4gICAgICByZXR1cm4gb2JqZWN0ICE9IG51bGwgJiYga2V5IGluIE9iamVjdChvYmplY3QpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLmluUmFuZ2VgIHdoaWNoIGRvZXNuJ3QgY29lcmNlIGFyZ3VtZW50cy5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IG51bWJlciBUaGUgbnVtYmVyIHRvIGNoZWNrLlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBzdGFydCBUaGUgc3RhcnQgb2YgdGhlIHJhbmdlLlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBlbmQgVGhlIGVuZCBvZiB0aGUgcmFuZ2UuXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGBudW1iZXJgIGlzIGluIHRoZSByYW5nZSwgZWxzZSBgZmFsc2VgLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGJhc2VJblJhbmdlKG51bWJlciwgc3RhcnQsIGVuZCkge1xuICAgICAgcmV0dXJuIG51bWJlciA+PSBuYXRpdmVNaW4oc3RhcnQsIGVuZCkgJiYgbnVtYmVyIDwgbmF0aXZlTWF4KHN0YXJ0LCBlbmQpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIG1ldGhvZHMgbGlrZSBgXy5pbnRlcnNlY3Rpb25gLCB3aXRob3V0IHN1cHBvcnRcbiAgICAgKiBmb3IgaXRlcmF0ZWUgc2hvcnRoYW5kcywgdGhhdCBhY2NlcHRzIGFuIGFycmF5IG9mIGFycmF5cyB0byBpbnNwZWN0LlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheXMgVGhlIGFycmF5cyB0byBpbnNwZWN0LlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtpdGVyYXRlZV0gVGhlIGl0ZXJhdGVlIGludm9rZWQgcGVyIGVsZW1lbnQuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gW2NvbXBhcmF0b3JdIFRoZSBjb21wYXJhdG9yIGludm9rZWQgcGVyIGVsZW1lbnQuXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBuZXcgYXJyYXkgb2Ygc2hhcmVkIHZhbHVlcy5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBiYXNlSW50ZXJzZWN0aW9uKGFycmF5cywgaXRlcmF0ZWUsIGNvbXBhcmF0b3IpIHtcbiAgICAgIHZhciBpbmNsdWRlcyA9IGNvbXBhcmF0b3IgPyBhcnJheUluY2x1ZGVzV2l0aCA6IGFycmF5SW5jbHVkZXMsXG4gICAgICAgICAgbGVuZ3RoID0gYXJyYXlzWzBdLmxlbmd0aCxcbiAgICAgICAgICBvdGhMZW5ndGggPSBhcnJheXMubGVuZ3RoLFxuICAgICAgICAgIG90aEluZGV4ID0gb3RoTGVuZ3RoLFxuICAgICAgICAgIGNhY2hlcyA9IEFycmF5KG90aExlbmd0aCksXG4gICAgICAgICAgbWF4TGVuZ3RoID0gSW5maW5pdHksXG4gICAgICAgICAgcmVzdWx0ID0gW107XG5cbiAgICAgIHdoaWxlIChvdGhJbmRleC0tKSB7XG4gICAgICAgIHZhciBhcnJheSA9IGFycmF5c1tvdGhJbmRleF07XG4gICAgICAgIGlmIChvdGhJbmRleCAmJiBpdGVyYXRlZSkge1xuICAgICAgICAgIGFycmF5ID0gYXJyYXlNYXAoYXJyYXksIGJhc2VVbmFyeShpdGVyYXRlZSkpO1xuICAgICAgICB9XG4gICAgICAgIG1heExlbmd0aCA9IG5hdGl2ZU1pbihhcnJheS5sZW5ndGgsIG1heExlbmd0aCk7XG4gICAgICAgIGNhY2hlc1tvdGhJbmRleF0gPSAhY29tcGFyYXRvciAmJiAoaXRlcmF0ZWUgfHwgKGxlbmd0aCA+PSAxMjAgJiYgYXJyYXkubGVuZ3RoID49IDEyMCkpXG4gICAgICAgICAgPyBuZXcgU2V0Q2FjaGUob3RoSW5kZXggJiYgYXJyYXkpXG4gICAgICAgICAgOiB1bmRlZmluZWQ7XG4gICAgICB9XG4gICAgICBhcnJheSA9IGFycmF5c1swXTtcblxuICAgICAgdmFyIGluZGV4ID0gLTEsXG4gICAgICAgICAgc2VlbiA9IGNhY2hlc1swXTtcblxuICAgICAgb3V0ZXI6XG4gICAgICB3aGlsZSAoKytpbmRleCA8IGxlbmd0aCAmJiByZXN1bHQubGVuZ3RoIDwgbWF4TGVuZ3RoKSB7XG4gICAgICAgIHZhciB2YWx1ZSA9IGFycmF5W2luZGV4XSxcbiAgICAgICAgICAgIGNvbXB1dGVkID0gaXRlcmF0ZWUgPyBpdGVyYXRlZSh2YWx1ZSkgOiB2YWx1ZTtcblxuICAgICAgICB2YWx1ZSA9IChjb21wYXJhdG9yIHx8IHZhbHVlICE9PSAwKSA/IHZhbHVlIDogMDtcbiAgICAgICAgaWYgKCEoc2VlblxuICAgICAgICAgICAgICA/IGNhY2hlSGFzKHNlZW4sIGNvbXB1dGVkKVxuICAgICAgICAgICAgICA6IGluY2x1ZGVzKHJlc3VsdCwgY29tcHV0ZWQsIGNvbXBhcmF0b3IpXG4gICAgICAgICAgICApKSB7XG4gICAgICAgICAgb3RoSW5kZXggPSBvdGhMZW5ndGg7XG4gICAgICAgICAgd2hpbGUgKC0tb3RoSW5kZXgpIHtcbiAgICAgICAgICAgIHZhciBjYWNoZSA9IGNhY2hlc1tvdGhJbmRleF07XG4gICAgICAgICAgICBpZiAoIShjYWNoZVxuICAgICAgICAgICAgICAgICAgPyBjYWNoZUhhcyhjYWNoZSwgY29tcHV0ZWQpXG4gICAgICAgICAgICAgICAgICA6IGluY2x1ZGVzKGFycmF5c1tvdGhJbmRleF0sIGNvbXB1dGVkLCBjb21wYXJhdG9yKSlcbiAgICAgICAgICAgICAgICApIHtcbiAgICAgICAgICAgICAgY29udGludWUgb3V0ZXI7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICAgIGlmIChzZWVuKSB7XG4gICAgICAgICAgICBzZWVuLnB1c2goY29tcHV0ZWQpO1xuICAgICAgICAgIH1cbiAgICAgICAgICByZXN1bHQucHVzaCh2YWx1ZSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8uaW52ZXJ0YCBhbmQgYF8uaW52ZXJ0QnlgIHdoaWNoIGludmVydHNcbiAgICAgKiBgb2JqZWN0YCB3aXRoIHZhbHVlcyB0cmFuc2Zvcm1lZCBieSBgaXRlcmF0ZWVgIGFuZCBzZXQgYnkgYHNldHRlcmAuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBpdGVyYXRlIG92ZXIuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gc2V0dGVyIFRoZSBmdW5jdGlvbiB0byBzZXQgYGFjY3VtdWxhdG9yYCB2YWx1ZXMuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gaXRlcmF0ZWUgVGhlIGl0ZXJhdGVlIHRvIHRyYW5zZm9ybSB2YWx1ZXMuXG4gICAgICogQHBhcmFtIHtPYmplY3R9IGFjY3VtdWxhdG9yIFRoZSBpbml0aWFsIGludmVydGVkIG9iamVjdC5cbiAgICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgYGFjY3VtdWxhdG9yYC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBiYXNlSW52ZXJ0ZXIob2JqZWN0LCBzZXR0ZXIsIGl0ZXJhdGVlLCBhY2N1bXVsYXRvcikge1xuICAgICAgYmFzZUZvck93bihvYmplY3QsIGZ1bmN0aW9uKHZhbHVlLCBrZXksIG9iamVjdCkge1xuICAgICAgICBzZXR0ZXIoYWNjdW11bGF0b3IsIGl0ZXJhdGVlKHZhbHVlKSwga2V5LCBvYmplY3QpO1xuICAgICAgfSk7XG4gICAgICByZXR1cm4gYWNjdW11bGF0b3I7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8uaW52b2tlYCB3aXRob3V0IHN1cHBvcnQgZm9yIGluZGl2aWR1YWxcbiAgICAgKiBtZXRob2QgYXJndW1lbnRzLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gcXVlcnkuXG4gICAgICogQHBhcmFtIHtBcnJheXxzdHJpbmd9IHBhdGggVGhlIHBhdGggb2YgdGhlIG1ldGhvZCB0byBpbnZva2UuXG4gICAgICogQHBhcmFtIHtBcnJheX0gYXJncyBUaGUgYXJndW1lbnRzIHRvIGludm9rZSB0aGUgbWV0aG9kIHdpdGguXG4gICAgICogQHJldHVybnMgeyp9IFJldHVybnMgdGhlIHJlc3VsdCBvZiB0aGUgaW52b2tlZCBtZXRob2QuXG4gICAgICovXG4gICAgZnVuY3Rpb24gYmFzZUludm9rZShvYmplY3QsIHBhdGgsIGFyZ3MpIHtcbiAgICAgIHBhdGggPSBjYXN0UGF0aChwYXRoLCBvYmplY3QpO1xuICAgICAgb2JqZWN0ID0gcGFyZW50KG9iamVjdCwgcGF0aCk7XG4gICAgICB2YXIgZnVuYyA9IG9iamVjdCA9PSBudWxsID8gb2JqZWN0IDogb2JqZWN0W3RvS2V5KGxhc3QocGF0aCkpXTtcbiAgICAgIHJldHVybiBmdW5jID09IG51bGwgPyB1bmRlZmluZWQgOiBhcHBseShmdW5jLCBvYmplY3QsIGFyZ3MpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLmlzQXJndW1lbnRzYC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgYW4gYGFyZ3VtZW50c2Agb2JqZWN0LFxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGJhc2VJc0FyZ3VtZW50cyh2YWx1ZSkge1xuICAgICAgcmV0dXJuIGlzT2JqZWN0TGlrZSh2YWx1ZSkgJiYgYmFzZUdldFRhZyh2YWx1ZSkgPT0gYXJnc1RhZztcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5pc0FycmF5QnVmZmVyYCB3aXRob3V0IE5vZGUuanMgb3B0aW1pemF0aW9ucy5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgYW4gYXJyYXkgYnVmZmVyLCBlbHNlIGBmYWxzZWAuXG4gICAgICovXG4gICAgZnVuY3Rpb24gYmFzZUlzQXJyYXlCdWZmZXIodmFsdWUpIHtcbiAgICAgIHJldHVybiBpc09iamVjdExpa2UodmFsdWUpICYmIGJhc2VHZXRUYWcodmFsdWUpID09IGFycmF5QnVmZmVyVGFnO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLmlzRGF0ZWAgd2l0aG91dCBOb2RlLmpzIG9wdGltaXphdGlvbnMuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGEgZGF0ZSBvYmplY3QsIGVsc2UgYGZhbHNlYC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBiYXNlSXNEYXRlKHZhbHVlKSB7XG4gICAgICByZXR1cm4gaXNPYmplY3RMaWtlKHZhbHVlKSAmJiBiYXNlR2V0VGFnKHZhbHVlKSA9PSBkYXRlVGFnO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLmlzRXF1YWxgIHdoaWNoIHN1cHBvcnRzIHBhcnRpYWwgY29tcGFyaXNvbnNcbiAgICAgKiBhbmQgdHJhY2tzIHRyYXZlcnNlZCBvYmplY3RzLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjb21wYXJlLlxuICAgICAqIEBwYXJhbSB7Kn0gb3RoZXIgVGhlIG90aGVyIHZhbHVlIHRvIGNvbXBhcmUuXG4gICAgICogQHBhcmFtIHtib29sZWFufSBiaXRtYXNrIFRoZSBiaXRtYXNrIGZsYWdzLlxuICAgICAqICAxIC0gVW5vcmRlcmVkIGNvbXBhcmlzb25cbiAgICAgKiAgMiAtIFBhcnRpYWwgY29tcGFyaXNvblxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtjdXN0b21pemVyXSBUaGUgZnVuY3Rpb24gdG8gY3VzdG9taXplIGNvbXBhcmlzb25zLlxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBbc3RhY2tdIFRyYWNrcyB0cmF2ZXJzZWQgYHZhbHVlYCBhbmQgYG90aGVyYCBvYmplY3RzLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiB0aGUgdmFsdWVzIGFyZSBlcXVpdmFsZW50LCBlbHNlIGBmYWxzZWAuXG4gICAgICovXG4gICAgZnVuY3Rpb24gYmFzZUlzRXF1YWwodmFsdWUsIG90aGVyLCBiaXRtYXNrLCBjdXN0b21pemVyLCBzdGFjaykge1xuICAgICAgaWYgKHZhbHVlID09PSBvdGhlcikge1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgIH1cbiAgICAgIGlmICh2YWx1ZSA9PSBudWxsIHx8IG90aGVyID09IG51bGwgfHwgKCFpc09iamVjdExpa2UodmFsdWUpICYmICFpc09iamVjdExpa2Uob3RoZXIpKSkge1xuICAgICAgICByZXR1cm4gdmFsdWUgIT09IHZhbHVlICYmIG90aGVyICE9PSBvdGhlcjtcbiAgICAgIH1cbiAgICAgIHJldHVybiBiYXNlSXNFcXVhbERlZXAodmFsdWUsIG90aGVyLCBiaXRtYXNrLCBjdXN0b21pemVyLCBiYXNlSXNFcXVhbCwgc3RhY2spO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEEgc3BlY2lhbGl6ZWQgdmVyc2lvbiBvZiBgYmFzZUlzRXF1YWxgIGZvciBhcnJheXMgYW5kIG9iamVjdHMgd2hpY2ggcGVyZm9ybXNcbiAgICAgKiBkZWVwIGNvbXBhcmlzb25zIGFuZCB0cmFja3MgdHJhdmVyc2VkIG9iamVjdHMgZW5hYmxpbmcgb2JqZWN0cyB3aXRoIGNpcmN1bGFyXG4gICAgICogcmVmZXJlbmNlcyB0byBiZSBjb21wYXJlZC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIGNvbXBhcmUuXG4gICAgICogQHBhcmFtIHtPYmplY3R9IG90aGVyIFRoZSBvdGhlciBvYmplY3QgdG8gY29tcGFyZS5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gYml0bWFzayBUaGUgYml0bWFzayBmbGFncy4gU2VlIGBiYXNlSXNFcXVhbGAgZm9yIG1vcmUgZGV0YWlscy5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBjdXN0b21pemVyIFRoZSBmdW5jdGlvbiB0byBjdXN0b21pemUgY29tcGFyaXNvbnMuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gZXF1YWxGdW5jIFRoZSBmdW5jdGlvbiB0byBkZXRlcm1pbmUgZXF1aXZhbGVudHMgb2YgdmFsdWVzLlxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBbc3RhY2tdIFRyYWNrcyB0cmF2ZXJzZWQgYG9iamVjdGAgYW5kIGBvdGhlcmAgb2JqZWN0cy5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgdGhlIG9iamVjdHMgYXJlIGVxdWl2YWxlbnQsIGVsc2UgYGZhbHNlYC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBiYXNlSXNFcXVhbERlZXAob2JqZWN0LCBvdGhlciwgYml0bWFzaywgY3VzdG9taXplciwgZXF1YWxGdW5jLCBzdGFjaykge1xuICAgICAgdmFyIG9iaklzQXJyID0gaXNBcnJheShvYmplY3QpLFxuICAgICAgICAgIG90aElzQXJyID0gaXNBcnJheShvdGhlciksXG4gICAgICAgICAgb2JqVGFnID0gb2JqSXNBcnIgPyBhcnJheVRhZyA6IGdldFRhZyhvYmplY3QpLFxuICAgICAgICAgIG90aFRhZyA9IG90aElzQXJyID8gYXJyYXlUYWcgOiBnZXRUYWcob3RoZXIpO1xuXG4gICAgICBvYmpUYWcgPSBvYmpUYWcgPT0gYXJnc1RhZyA/IG9iamVjdFRhZyA6IG9ialRhZztcbiAgICAgIG90aFRhZyA9IG90aFRhZyA9PSBhcmdzVGFnID8gb2JqZWN0VGFnIDogb3RoVGFnO1xuXG4gICAgICB2YXIgb2JqSXNPYmogPSBvYmpUYWcgPT0gb2JqZWN0VGFnLFxuICAgICAgICAgIG90aElzT2JqID0gb3RoVGFnID09IG9iamVjdFRhZyxcbiAgICAgICAgICBpc1NhbWVUYWcgPSBvYmpUYWcgPT0gb3RoVGFnO1xuXG4gICAgICBpZiAoaXNTYW1lVGFnICYmIGlzQnVmZmVyKG9iamVjdCkpIHtcbiAgICAgICAgaWYgKCFpc0J1ZmZlcihvdGhlcikpIHtcbiAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cbiAgICAgICAgb2JqSXNBcnIgPSB0cnVlO1xuICAgICAgICBvYmpJc09iaiA9IGZhbHNlO1xuICAgICAgfVxuICAgICAgaWYgKGlzU2FtZVRhZyAmJiAhb2JqSXNPYmopIHtcbiAgICAgICAgc3RhY2sgfHwgKHN0YWNrID0gbmV3IFN0YWNrKTtcbiAgICAgICAgcmV0dXJuIChvYmpJc0FyciB8fCBpc1R5cGVkQXJyYXkob2JqZWN0KSlcbiAgICAgICAgICA/IGVxdWFsQXJyYXlzKG9iamVjdCwgb3RoZXIsIGJpdG1hc2ssIGN1c3RvbWl6ZXIsIGVxdWFsRnVuYywgc3RhY2spXG4gICAgICAgICAgOiBlcXVhbEJ5VGFnKG9iamVjdCwgb3RoZXIsIG9ialRhZywgYml0bWFzaywgY3VzdG9taXplciwgZXF1YWxGdW5jLCBzdGFjayk7XG4gICAgICB9XG4gICAgICBpZiAoIShiaXRtYXNrICYgQ09NUEFSRV9QQVJUSUFMX0ZMQUcpKSB7XG4gICAgICAgIHZhciBvYmpJc1dyYXBwZWQgPSBvYmpJc09iaiAmJiBoYXNPd25Qcm9wZXJ0eS5jYWxsKG9iamVjdCwgJ19fd3JhcHBlZF9fJyksXG4gICAgICAgICAgICBvdGhJc1dyYXBwZWQgPSBvdGhJc09iaiAmJiBoYXNPd25Qcm9wZXJ0eS5jYWxsKG90aGVyLCAnX193cmFwcGVkX18nKTtcblxuICAgICAgICBpZiAob2JqSXNXcmFwcGVkIHx8IG90aElzV3JhcHBlZCkge1xuICAgICAgICAgIHZhciBvYmpVbndyYXBwZWQgPSBvYmpJc1dyYXBwZWQgPyBvYmplY3QudmFsdWUoKSA6IG9iamVjdCxcbiAgICAgICAgICAgICAgb3RoVW53cmFwcGVkID0gb3RoSXNXcmFwcGVkID8gb3RoZXIudmFsdWUoKSA6IG90aGVyO1xuXG4gICAgICAgICAgc3RhY2sgfHwgKHN0YWNrID0gbmV3IFN0YWNrKTtcbiAgICAgICAgICByZXR1cm4gZXF1YWxGdW5jKG9ialVud3JhcHBlZCwgb3RoVW53cmFwcGVkLCBiaXRtYXNrLCBjdXN0b21pemVyLCBzdGFjayk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGlmICghaXNTYW1lVGFnKSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgIH1cbiAgICAgIHN0YWNrIHx8IChzdGFjayA9IG5ldyBTdGFjayk7XG4gICAgICByZXR1cm4gZXF1YWxPYmplY3RzKG9iamVjdCwgb3RoZXIsIGJpdG1hc2ssIGN1c3RvbWl6ZXIsIGVxdWFsRnVuYywgc3RhY2spO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLmlzTWFwYCB3aXRob3V0IE5vZGUuanMgb3B0aW1pemF0aW9ucy5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgYSBtYXAsIGVsc2UgYGZhbHNlYC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBiYXNlSXNNYXAodmFsdWUpIHtcbiAgICAgIHJldHVybiBpc09iamVjdExpa2UodmFsdWUpICYmIGdldFRhZyh2YWx1ZSkgPT0gbWFwVGFnO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLmlzTWF0Y2hgIHdpdGhvdXQgc3VwcG9ydCBmb3IgaXRlcmF0ZWUgc2hvcnRoYW5kcy5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIGluc3BlY3QuXG4gICAgICogQHBhcmFtIHtPYmplY3R9IHNvdXJjZSBUaGUgb2JqZWN0IG9mIHByb3BlcnR5IHZhbHVlcyB0byBtYXRjaC5cbiAgICAgKiBAcGFyYW0ge0FycmF5fSBtYXRjaERhdGEgVGhlIHByb3BlcnR5IG5hbWVzLCB2YWx1ZXMsIGFuZCBjb21wYXJlIGZsYWdzIHRvIG1hdGNoLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtjdXN0b21pemVyXSBUaGUgZnVuY3Rpb24gdG8gY3VzdG9taXplIGNvbXBhcmlzb25zLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgb2JqZWN0YCBpcyBhIG1hdGNoLCBlbHNlIGBmYWxzZWAuXG4gICAgICovXG4gICAgZnVuY3Rpb24gYmFzZUlzTWF0Y2gob2JqZWN0LCBzb3VyY2UsIG1hdGNoRGF0YSwgY3VzdG9taXplcikge1xuICAgICAgdmFyIGluZGV4ID0gbWF0Y2hEYXRhLmxlbmd0aCxcbiAgICAgICAgICBsZW5ndGggPSBpbmRleCxcbiAgICAgICAgICBub0N1c3RvbWl6ZXIgPSAhY3VzdG9taXplcjtcblxuICAgICAgaWYgKG9iamVjdCA9PSBudWxsKSB7XG4gICAgICAgIHJldHVybiAhbGVuZ3RoO1xuICAgICAgfVxuICAgICAgb2JqZWN0ID0gT2JqZWN0KG9iamVjdCk7XG4gICAgICB3aGlsZSAoaW5kZXgtLSkge1xuICAgICAgICB2YXIgZGF0YSA9IG1hdGNoRGF0YVtpbmRleF07XG4gICAgICAgIGlmICgobm9DdXN0b21pemVyICYmIGRhdGFbMl0pXG4gICAgICAgICAgICAgID8gZGF0YVsxXSAhPT0gb2JqZWN0W2RhdGFbMF1dXG4gICAgICAgICAgICAgIDogIShkYXRhWzBdIGluIG9iamVjdClcbiAgICAgICAgICAgICkge1xuICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgd2hpbGUgKCsraW5kZXggPCBsZW5ndGgpIHtcbiAgICAgICAgZGF0YSA9IG1hdGNoRGF0YVtpbmRleF07XG4gICAgICAgIHZhciBrZXkgPSBkYXRhWzBdLFxuICAgICAgICAgICAgb2JqVmFsdWUgPSBvYmplY3Rba2V5XSxcbiAgICAgICAgICAgIHNyY1ZhbHVlID0gZGF0YVsxXTtcblxuICAgICAgICBpZiAobm9DdXN0b21pemVyICYmIGRhdGFbMl0pIHtcbiAgICAgICAgICBpZiAob2JqVmFsdWUgPT09IHVuZGVmaW5lZCAmJiAhKGtleSBpbiBvYmplY3QpKSB7XG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHZhciBzdGFjayA9IG5ldyBTdGFjaztcbiAgICAgICAgICBpZiAoY3VzdG9taXplcikge1xuICAgICAgICAgICAgdmFyIHJlc3VsdCA9IGN1c3RvbWl6ZXIob2JqVmFsdWUsIHNyY1ZhbHVlLCBrZXksIG9iamVjdCwgc291cmNlLCBzdGFjayk7XG4gICAgICAgICAgfVxuICAgICAgICAgIGlmICghKHJlc3VsdCA9PT0gdW5kZWZpbmVkXG4gICAgICAgICAgICAgICAgPyBiYXNlSXNFcXVhbChzcmNWYWx1ZSwgb2JqVmFsdWUsIENPTVBBUkVfUEFSVElBTF9GTEFHIHwgQ09NUEFSRV9VTk9SREVSRURfRkxBRywgY3VzdG9taXplciwgc3RhY2spXG4gICAgICAgICAgICAgICAgOiByZXN1bHRcbiAgICAgICAgICAgICAgKSkge1xuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8uaXNOYXRpdmVgIHdpdGhvdXQgYmFkIHNoaW0gY2hlY2tzLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBhIG5hdGl2ZSBmdW5jdGlvbixcbiAgICAgKiAgZWxzZSBgZmFsc2VgLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGJhc2VJc05hdGl2ZSh2YWx1ZSkge1xuICAgICAgaWYgKCFpc09iamVjdCh2YWx1ZSkgfHwgaXNNYXNrZWQodmFsdWUpKSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgIH1cbiAgICAgIHZhciBwYXR0ZXJuID0gaXNGdW5jdGlvbih2YWx1ZSkgPyByZUlzTmF0aXZlIDogcmVJc0hvc3RDdG9yO1xuICAgICAgcmV0dXJuIHBhdHRlcm4udGVzdCh0b1NvdXJjZSh2YWx1ZSkpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLmlzUmVnRXhwYCB3aXRob3V0IE5vZGUuanMgb3B0aW1pemF0aW9ucy5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgYSByZWdleHAsIGVsc2UgYGZhbHNlYC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBiYXNlSXNSZWdFeHAodmFsdWUpIHtcbiAgICAgIHJldHVybiBpc09iamVjdExpa2UodmFsdWUpICYmIGJhc2VHZXRUYWcodmFsdWUpID09IHJlZ2V4cFRhZztcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5pc1NldGAgd2l0aG91dCBOb2RlLmpzIG9wdGltaXphdGlvbnMuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGEgc2V0LCBlbHNlIGBmYWxzZWAuXG4gICAgICovXG4gICAgZnVuY3Rpb24gYmFzZUlzU2V0KHZhbHVlKSB7XG4gICAgICByZXR1cm4gaXNPYmplY3RMaWtlKHZhbHVlKSAmJiBnZXRUYWcodmFsdWUpID09IHNldFRhZztcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5pc1R5cGVkQXJyYXlgIHdpdGhvdXQgTm9kZS5qcyBvcHRpbWl6YXRpb25zLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBhIHR5cGVkIGFycmF5LCBlbHNlIGBmYWxzZWAuXG4gICAgICovXG4gICAgZnVuY3Rpb24gYmFzZUlzVHlwZWRBcnJheSh2YWx1ZSkge1xuICAgICAgcmV0dXJuIGlzT2JqZWN0TGlrZSh2YWx1ZSkgJiZcbiAgICAgICAgaXNMZW5ndGgodmFsdWUubGVuZ3RoKSAmJiAhIXR5cGVkQXJyYXlUYWdzW2Jhc2VHZXRUYWcodmFsdWUpXTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5pdGVyYXRlZWAuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7Kn0gW3ZhbHVlPV8uaWRlbnRpdHldIFRoZSB2YWx1ZSB0byBjb252ZXJ0IHRvIGFuIGl0ZXJhdGVlLlxuICAgICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgaXRlcmF0ZWUuXG4gICAgICovXG4gICAgZnVuY3Rpb24gYmFzZUl0ZXJhdGVlKHZhbHVlKSB7XG4gICAgICAvLyBEb24ndCBzdG9yZSB0aGUgYHR5cGVvZmAgcmVzdWx0IGluIGEgdmFyaWFibGUgdG8gYXZvaWQgYSBKSVQgYnVnIGluIFNhZmFyaSA5LlxuICAgICAgLy8gU2VlIGh0dHBzOi8vYnVncy53ZWJraXQub3JnL3Nob3dfYnVnLmNnaT9pZD0xNTYwMzQgZm9yIG1vcmUgZGV0YWlscy5cbiAgICAgIGlmICh0eXBlb2YgdmFsdWUgPT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICByZXR1cm4gdmFsdWU7XG4gICAgICB9XG4gICAgICBpZiAodmFsdWUgPT0gbnVsbCkge1xuICAgICAgICByZXR1cm4gaWRlbnRpdHk7XG4gICAgICB9XG4gICAgICBpZiAodHlwZW9mIHZhbHVlID09ICdvYmplY3QnKSB7XG4gICAgICAgIHJldHVybiBpc0FycmF5KHZhbHVlKVxuICAgICAgICAgID8gYmFzZU1hdGNoZXNQcm9wZXJ0eSh2YWx1ZVswXSwgdmFsdWVbMV0pXG4gICAgICAgICAgOiBiYXNlTWF0Y2hlcyh2YWx1ZSk7XG4gICAgICB9XG4gICAgICByZXR1cm4gcHJvcGVydHkodmFsdWUpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLmtleXNgIHdoaWNoIGRvZXNuJ3QgdHJlYXQgc3BhcnNlIGFycmF5cyBhcyBkZW5zZS5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIHF1ZXJ5LlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgYXJyYXkgb2YgcHJvcGVydHkgbmFtZXMuXG4gICAgICovXG4gICAgZnVuY3Rpb24gYmFzZUtleXMob2JqZWN0KSB7XG4gICAgICBpZiAoIWlzUHJvdG90eXBlKG9iamVjdCkpIHtcbiAgICAgICAgcmV0dXJuIG5hdGl2ZUtleXMob2JqZWN0KTtcbiAgICAgIH1cbiAgICAgIHZhciByZXN1bHQgPSBbXTtcbiAgICAgIGZvciAodmFyIGtleSBpbiBPYmplY3Qob2JqZWN0KSkge1xuICAgICAgICBpZiAoaGFzT3duUHJvcGVydHkuY2FsbChvYmplY3QsIGtleSkgJiYga2V5ICE9ICdjb25zdHJ1Y3RvcicpIHtcbiAgICAgICAgICByZXN1bHQucHVzaChrZXkpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLmtleXNJbmAgd2hpY2ggZG9lc24ndCB0cmVhdCBzcGFyc2UgYXJyYXlzIGFzIGRlbnNlLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gcXVlcnkuXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBhcnJheSBvZiBwcm9wZXJ0eSBuYW1lcy5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBiYXNlS2V5c0luKG9iamVjdCkge1xuICAgICAgaWYgKCFpc09iamVjdChvYmplY3QpKSB7XG4gICAgICAgIHJldHVybiBuYXRpdmVLZXlzSW4ob2JqZWN0KTtcbiAgICAgIH1cbiAgICAgIHZhciBpc1Byb3RvID0gaXNQcm90b3R5cGUob2JqZWN0KSxcbiAgICAgICAgICByZXN1bHQgPSBbXTtcblxuICAgICAgZm9yICh2YXIga2V5IGluIG9iamVjdCkge1xuICAgICAgICBpZiAoIShrZXkgPT0gJ2NvbnN0cnVjdG9yJyAmJiAoaXNQcm90byB8fCAhaGFzT3duUHJvcGVydHkuY2FsbChvYmplY3QsIGtleSkpKSkge1xuICAgICAgICAgIHJlc3VsdC5wdXNoKGtleSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8ubHRgIHdoaWNoIGRvZXNuJ3QgY29lcmNlIGFyZ3VtZW50cy5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY29tcGFyZS5cbiAgICAgKiBAcGFyYW0geyp9IG90aGVyIFRoZSBvdGhlciB2YWx1ZSB0byBjb21wYXJlLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGxlc3MgdGhhbiBgb3RoZXJgLFxuICAgICAqICBlbHNlIGBmYWxzZWAuXG4gICAgICovXG4gICAgZnVuY3Rpb24gYmFzZUx0KHZhbHVlLCBvdGhlcikge1xuICAgICAgcmV0dXJuIHZhbHVlIDwgb3RoZXI7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8ubWFwYCB3aXRob3V0IHN1cHBvcnQgZm9yIGl0ZXJhdGVlIHNob3J0aGFuZHMuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7QXJyYXl8T2JqZWN0fSBjb2xsZWN0aW9uIFRoZSBjb2xsZWN0aW9uIHRvIGl0ZXJhdGUgb3Zlci5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBpdGVyYXRlZSBUaGUgZnVuY3Rpb24gaW52b2tlZCBwZXIgaXRlcmF0aW9uLlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgbmV3IG1hcHBlZCBhcnJheS5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBiYXNlTWFwKGNvbGxlY3Rpb24sIGl0ZXJhdGVlKSB7XG4gICAgICB2YXIgaW5kZXggPSAtMSxcbiAgICAgICAgICByZXN1bHQgPSBpc0FycmF5TGlrZShjb2xsZWN0aW9uKSA/IEFycmF5KGNvbGxlY3Rpb24ubGVuZ3RoKSA6IFtdO1xuXG4gICAgICBiYXNlRWFjaChjb2xsZWN0aW9uLCBmdW5jdGlvbih2YWx1ZSwga2V5LCBjb2xsZWN0aW9uKSB7XG4gICAgICAgIHJlc3VsdFsrK2luZGV4XSA9IGl0ZXJhdGVlKHZhbHVlLCBrZXksIGNvbGxlY3Rpb24pO1xuICAgICAgfSk7XG4gICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLm1hdGNoZXNgIHdoaWNoIGRvZXNuJ3QgY2xvbmUgYHNvdXJjZWAuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBzb3VyY2UgVGhlIG9iamVjdCBvZiBwcm9wZXJ0eSB2YWx1ZXMgdG8gbWF0Y2guXG4gICAgICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgc3BlYyBmdW5jdGlvbi5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBiYXNlTWF0Y2hlcyhzb3VyY2UpIHtcbiAgICAgIHZhciBtYXRjaERhdGEgPSBnZXRNYXRjaERhdGEoc291cmNlKTtcbiAgICAgIGlmIChtYXRjaERhdGEubGVuZ3RoID09IDEgJiYgbWF0Y2hEYXRhWzBdWzJdKSB7XG4gICAgICAgIHJldHVybiBtYXRjaGVzU3RyaWN0Q29tcGFyYWJsZShtYXRjaERhdGFbMF1bMF0sIG1hdGNoRGF0YVswXVsxXSk7XG4gICAgICB9XG4gICAgICByZXR1cm4gZnVuY3Rpb24ob2JqZWN0KSB7XG4gICAgICAgIHJldHVybiBvYmplY3QgPT09IHNvdXJjZSB8fCBiYXNlSXNNYXRjaChvYmplY3QsIHNvdXJjZSwgbWF0Y2hEYXRhKTtcbiAgICAgIH07XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8ubWF0Y2hlc1Byb3BlcnR5YCB3aGljaCBkb2Vzbid0IGNsb25lIGBzcmNWYWx1ZWAuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBwYXRoIFRoZSBwYXRoIG9mIHRoZSBwcm9wZXJ0eSB0byBnZXQuXG4gICAgICogQHBhcmFtIHsqfSBzcmNWYWx1ZSBUaGUgdmFsdWUgdG8gbWF0Y2guXG4gICAgICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgc3BlYyBmdW5jdGlvbi5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBiYXNlTWF0Y2hlc1Byb3BlcnR5KHBhdGgsIHNyY1ZhbHVlKSB7XG4gICAgICBpZiAoaXNLZXkocGF0aCkgJiYgaXNTdHJpY3RDb21wYXJhYmxlKHNyY1ZhbHVlKSkge1xuICAgICAgICByZXR1cm4gbWF0Y2hlc1N0cmljdENvbXBhcmFibGUodG9LZXkocGF0aCksIHNyY1ZhbHVlKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBmdW5jdGlvbihvYmplY3QpIHtcbiAgICAgICAgdmFyIG9ialZhbHVlID0gZ2V0KG9iamVjdCwgcGF0aCk7XG4gICAgICAgIHJldHVybiAob2JqVmFsdWUgPT09IHVuZGVmaW5lZCAmJiBvYmpWYWx1ZSA9PT0gc3JjVmFsdWUpXG4gICAgICAgICAgPyBoYXNJbihvYmplY3QsIHBhdGgpXG4gICAgICAgICAgOiBiYXNlSXNFcXVhbChzcmNWYWx1ZSwgb2JqVmFsdWUsIENPTVBBUkVfUEFSVElBTF9GTEFHIHwgQ09NUEFSRV9VTk9SREVSRURfRkxBRyk7XG4gICAgICB9O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLm1lcmdlYCB3aXRob3V0IHN1cHBvcnQgZm9yIG11bHRpcGxlIHNvdXJjZXMuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIGRlc3RpbmF0aW9uIG9iamVjdC5cbiAgICAgKiBAcGFyYW0ge09iamVjdH0gc291cmNlIFRoZSBzb3VyY2Ugb2JqZWN0LlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBzcmNJbmRleCBUaGUgaW5kZXggb2YgYHNvdXJjZWAuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gW2N1c3RvbWl6ZXJdIFRoZSBmdW5jdGlvbiB0byBjdXN0b21pemUgbWVyZ2VkIHZhbHVlcy5cbiAgICAgKiBAcGFyYW0ge09iamVjdH0gW3N0YWNrXSBUcmFja3MgdHJhdmVyc2VkIHNvdXJjZSB2YWx1ZXMgYW5kIHRoZWlyIG1lcmdlZFxuICAgICAqICBjb3VudGVycGFydHMuXG4gICAgICovXG4gICAgZnVuY3Rpb24gYmFzZU1lcmdlKG9iamVjdCwgc291cmNlLCBzcmNJbmRleCwgY3VzdG9taXplciwgc3RhY2spIHtcbiAgICAgIGlmIChvYmplY3QgPT09IHNvdXJjZSkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgICBiYXNlRm9yKHNvdXJjZSwgZnVuY3Rpb24oc3JjVmFsdWUsIGtleSkge1xuICAgICAgICBzdGFjayB8fCAoc3RhY2sgPSBuZXcgU3RhY2spO1xuICAgICAgICBpZiAoaXNPYmplY3Qoc3JjVmFsdWUpKSB7XG4gICAgICAgICAgYmFzZU1lcmdlRGVlcChvYmplY3QsIHNvdXJjZSwga2V5LCBzcmNJbmRleCwgYmFzZU1lcmdlLCBjdXN0b21pemVyLCBzdGFjayk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgdmFyIG5ld1ZhbHVlID0gY3VzdG9taXplclxuICAgICAgICAgICAgPyBjdXN0b21pemVyKHNhZmVHZXQob2JqZWN0LCBrZXkpLCBzcmNWYWx1ZSwgKGtleSArICcnKSwgb2JqZWN0LCBzb3VyY2UsIHN0YWNrKVxuICAgICAgICAgICAgOiB1bmRlZmluZWQ7XG5cbiAgICAgICAgICBpZiAobmV3VmFsdWUgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgbmV3VmFsdWUgPSBzcmNWYWx1ZTtcbiAgICAgICAgICB9XG4gICAgICAgICAgYXNzaWduTWVyZ2VWYWx1ZShvYmplY3QsIGtleSwgbmV3VmFsdWUpO1xuICAgICAgICB9XG4gICAgICB9LCBrZXlzSW4pO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEEgc3BlY2lhbGl6ZWQgdmVyc2lvbiBvZiBgYmFzZU1lcmdlYCBmb3IgYXJyYXlzIGFuZCBvYmplY3RzIHdoaWNoIHBlcmZvcm1zXG4gICAgICogZGVlcCBtZXJnZXMgYW5kIHRyYWNrcyB0cmF2ZXJzZWQgb2JqZWN0cyBlbmFibGluZyBvYmplY3RzIHdpdGggY2lyY3VsYXJcbiAgICAgKiByZWZlcmVuY2VzIHRvIGJlIG1lcmdlZC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgZGVzdGluYXRpb24gb2JqZWN0LlxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBzb3VyY2UgVGhlIHNvdXJjZSBvYmplY3QuXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IGtleSBUaGUga2V5IG9mIHRoZSB2YWx1ZSB0byBtZXJnZS5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gc3JjSW5kZXggVGhlIGluZGV4IG9mIGBzb3VyY2VgLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IG1lcmdlRnVuYyBUaGUgZnVuY3Rpb24gdG8gbWVyZ2UgdmFsdWVzLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtjdXN0b21pemVyXSBUaGUgZnVuY3Rpb24gdG8gY3VzdG9taXplIGFzc2lnbmVkIHZhbHVlcy5cbiAgICAgKiBAcGFyYW0ge09iamVjdH0gW3N0YWNrXSBUcmFja3MgdHJhdmVyc2VkIHNvdXJjZSB2YWx1ZXMgYW5kIHRoZWlyIG1lcmdlZFxuICAgICAqICBjb3VudGVycGFydHMuXG4gICAgICovXG4gICAgZnVuY3Rpb24gYmFzZU1lcmdlRGVlcChvYmplY3QsIHNvdXJjZSwga2V5LCBzcmNJbmRleCwgbWVyZ2VGdW5jLCBjdXN0b21pemVyLCBzdGFjaykge1xuICAgICAgdmFyIG9ialZhbHVlID0gc2FmZUdldChvYmplY3QsIGtleSksXG4gICAgICAgICAgc3JjVmFsdWUgPSBzYWZlR2V0KHNvdXJjZSwga2V5KSxcbiAgICAgICAgICBzdGFja2VkID0gc3RhY2suZ2V0KHNyY1ZhbHVlKTtcblxuICAgICAgaWYgKHN0YWNrZWQpIHtcbiAgICAgICAgYXNzaWduTWVyZ2VWYWx1ZShvYmplY3QsIGtleSwgc3RhY2tlZCk7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgIHZhciBuZXdWYWx1ZSA9IGN1c3RvbWl6ZXJcbiAgICAgICAgPyBjdXN0b21pemVyKG9ialZhbHVlLCBzcmNWYWx1ZSwgKGtleSArICcnKSwgb2JqZWN0LCBzb3VyY2UsIHN0YWNrKVxuICAgICAgICA6IHVuZGVmaW5lZDtcblxuICAgICAgdmFyIGlzQ29tbW9uID0gbmV3VmFsdWUgPT09IHVuZGVmaW5lZDtcblxuICAgICAgaWYgKGlzQ29tbW9uKSB7XG4gICAgICAgIHZhciBpc0FyciA9IGlzQXJyYXkoc3JjVmFsdWUpLFxuICAgICAgICAgICAgaXNCdWZmID0gIWlzQXJyICYmIGlzQnVmZmVyKHNyY1ZhbHVlKSxcbiAgICAgICAgICAgIGlzVHlwZWQgPSAhaXNBcnIgJiYgIWlzQnVmZiAmJiBpc1R5cGVkQXJyYXkoc3JjVmFsdWUpO1xuXG4gICAgICAgIG5ld1ZhbHVlID0gc3JjVmFsdWU7XG4gICAgICAgIGlmIChpc0FyciB8fCBpc0J1ZmYgfHwgaXNUeXBlZCkge1xuICAgICAgICAgIGlmIChpc0FycmF5KG9ialZhbHVlKSkge1xuICAgICAgICAgICAgbmV3VmFsdWUgPSBvYmpWYWx1ZTtcbiAgICAgICAgICB9XG4gICAgICAgICAgZWxzZSBpZiAoaXNBcnJheUxpa2VPYmplY3Qob2JqVmFsdWUpKSB7XG4gICAgICAgICAgICBuZXdWYWx1ZSA9IGNvcHlBcnJheShvYmpWYWx1ZSk7XG4gICAgICAgICAgfVxuICAgICAgICAgIGVsc2UgaWYgKGlzQnVmZikge1xuICAgICAgICAgICAgaXNDb21tb24gPSBmYWxzZTtcbiAgICAgICAgICAgIG5ld1ZhbHVlID0gY2xvbmVCdWZmZXIoc3JjVmFsdWUsIHRydWUpO1xuICAgICAgICAgIH1cbiAgICAgICAgICBlbHNlIGlmIChpc1R5cGVkKSB7XG4gICAgICAgICAgICBpc0NvbW1vbiA9IGZhbHNlO1xuICAgICAgICAgICAgbmV3VmFsdWUgPSBjbG9uZVR5cGVkQXJyYXkoc3JjVmFsdWUsIHRydWUpO1xuICAgICAgICAgIH1cbiAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIG5ld1ZhbHVlID0gW107XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKGlzUGxhaW5PYmplY3Qoc3JjVmFsdWUpIHx8IGlzQXJndW1lbnRzKHNyY1ZhbHVlKSkge1xuICAgICAgICAgIG5ld1ZhbHVlID0gb2JqVmFsdWU7XG4gICAgICAgICAgaWYgKGlzQXJndW1lbnRzKG9ialZhbHVlKSkge1xuICAgICAgICAgICAgbmV3VmFsdWUgPSB0b1BsYWluT2JqZWN0KG9ialZhbHVlKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgZWxzZSBpZiAoIWlzT2JqZWN0KG9ialZhbHVlKSB8fCBpc0Z1bmN0aW9uKG9ialZhbHVlKSkge1xuICAgICAgICAgICAgbmV3VmFsdWUgPSBpbml0Q2xvbmVPYmplY3Qoc3JjVmFsdWUpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICBpc0NvbW1vbiA9IGZhbHNlO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBpZiAoaXNDb21tb24pIHtcbiAgICAgICAgLy8gUmVjdXJzaXZlbHkgbWVyZ2Ugb2JqZWN0cyBhbmQgYXJyYXlzIChzdXNjZXB0aWJsZSB0byBjYWxsIHN0YWNrIGxpbWl0cykuXG4gICAgICAgIHN0YWNrLnNldChzcmNWYWx1ZSwgbmV3VmFsdWUpO1xuICAgICAgICBtZXJnZUZ1bmMobmV3VmFsdWUsIHNyY1ZhbHVlLCBzcmNJbmRleCwgY3VzdG9taXplciwgc3RhY2spO1xuICAgICAgICBzdGFja1snZGVsZXRlJ10oc3JjVmFsdWUpO1xuICAgICAgfVxuICAgICAgYXNzaWduTWVyZ2VWYWx1ZShvYmplY3QsIGtleSwgbmV3VmFsdWUpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLm50aGAgd2hpY2ggZG9lc24ndCBjb2VyY2UgYXJndW1lbnRzLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gcXVlcnkuXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IG4gVGhlIGluZGV4IG9mIHRoZSBlbGVtZW50IHRvIHJldHVybi5cbiAgICAgKiBAcmV0dXJucyB7Kn0gUmV0dXJucyB0aGUgbnRoIGVsZW1lbnQgb2YgYGFycmF5YC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBiYXNlTnRoKGFycmF5LCBuKSB7XG4gICAgICB2YXIgbGVuZ3RoID0gYXJyYXkubGVuZ3RoO1xuICAgICAgaWYgKCFsZW5ndGgpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgbiArPSBuIDwgMCA/IGxlbmd0aCA6IDA7XG4gICAgICByZXR1cm4gaXNJbmRleChuLCBsZW5ndGgpID8gYXJyYXlbbl0gOiB1bmRlZmluZWQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8ub3JkZXJCeWAgd2l0aG91dCBwYXJhbSBndWFyZHMuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7QXJyYXl8T2JqZWN0fSBjb2xsZWN0aW9uIFRoZSBjb2xsZWN0aW9uIHRvIGl0ZXJhdGUgb3Zlci5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9uW118T2JqZWN0W118c3RyaW5nW119IGl0ZXJhdGVlcyBUaGUgaXRlcmF0ZWVzIHRvIHNvcnQgYnkuXG4gICAgICogQHBhcmFtIHtzdHJpbmdbXX0gb3JkZXJzIFRoZSBzb3J0IG9yZGVycyBvZiBgaXRlcmF0ZWVzYC5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIG5ldyBzb3J0ZWQgYXJyYXkuXG4gICAgICovXG4gICAgZnVuY3Rpb24gYmFzZU9yZGVyQnkoY29sbGVjdGlvbiwgaXRlcmF0ZWVzLCBvcmRlcnMpIHtcbiAgICAgIGlmIChpdGVyYXRlZXMubGVuZ3RoKSB7XG4gICAgICAgIGl0ZXJhdGVlcyA9IGFycmF5TWFwKGl0ZXJhdGVlcywgZnVuY3Rpb24oaXRlcmF0ZWUpIHtcbiAgICAgICAgICBpZiAoaXNBcnJheShpdGVyYXRlZSkpIHtcbiAgICAgICAgICAgIHJldHVybiBmdW5jdGlvbih2YWx1ZSkge1xuICAgICAgICAgICAgICByZXR1cm4gYmFzZUdldCh2YWx1ZSwgaXRlcmF0ZWUubGVuZ3RoID09PSAxID8gaXRlcmF0ZWVbMF0gOiBpdGVyYXRlZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICAgIHJldHVybiBpdGVyYXRlZTtcbiAgICAgICAgfSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBpdGVyYXRlZXMgPSBbaWRlbnRpdHldO1xuICAgICAgfVxuXG4gICAgICB2YXIgaW5kZXggPSAtMTtcbiAgICAgIGl0ZXJhdGVlcyA9IGFycmF5TWFwKGl0ZXJhdGVlcywgYmFzZVVuYXJ5KGdldEl0ZXJhdGVlKCkpKTtcblxuICAgICAgdmFyIHJlc3VsdCA9IGJhc2VNYXAoY29sbGVjdGlvbiwgZnVuY3Rpb24odmFsdWUsIGtleSwgY29sbGVjdGlvbikge1xuICAgICAgICB2YXIgY3JpdGVyaWEgPSBhcnJheU1hcChpdGVyYXRlZXMsIGZ1bmN0aW9uKGl0ZXJhdGVlKSB7XG4gICAgICAgICAgcmV0dXJuIGl0ZXJhdGVlKHZhbHVlKTtcbiAgICAgICAgfSk7XG4gICAgICAgIHJldHVybiB7ICdjcml0ZXJpYSc6IGNyaXRlcmlhLCAnaW5kZXgnOiArK2luZGV4LCAndmFsdWUnOiB2YWx1ZSB9O1xuICAgICAgfSk7XG5cbiAgICAgIHJldHVybiBiYXNlU29ydEJ5KHJlc3VsdCwgZnVuY3Rpb24ob2JqZWN0LCBvdGhlcikge1xuICAgICAgICByZXR1cm4gY29tcGFyZU11bHRpcGxlKG9iamVjdCwgb3RoZXIsIG9yZGVycyk7XG4gICAgICB9KTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5waWNrYCB3aXRob3V0IHN1cHBvcnQgZm9yIGluZGl2aWR1YWxcbiAgICAgKiBwcm9wZXJ0eSBpZGVudGlmaWVycy5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgc291cmNlIG9iamVjdC5cbiAgICAgKiBAcGFyYW0ge3N0cmluZ1tdfSBwYXRocyBUaGUgcHJvcGVydHkgcGF0aHMgdG8gcGljay5cbiAgICAgKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIHRoZSBuZXcgb2JqZWN0LlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGJhc2VQaWNrKG9iamVjdCwgcGF0aHMpIHtcbiAgICAgIHJldHVybiBiYXNlUGlja0J5KG9iamVjdCwgcGF0aHMsIGZ1bmN0aW9uKHZhbHVlLCBwYXRoKSB7XG4gICAgICAgIHJldHVybiBoYXNJbihvYmplY3QsIHBhdGgpO1xuICAgICAgfSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgIGBfLnBpY2tCeWAgd2l0aG91dCBzdXBwb3J0IGZvciBpdGVyYXRlZSBzaG9ydGhhbmRzLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBzb3VyY2Ugb2JqZWN0LlxuICAgICAqIEBwYXJhbSB7c3RyaW5nW119IHBhdGhzIFRoZSBwcm9wZXJ0eSBwYXRocyB0byBwaWNrLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IHByZWRpY2F0ZSBUaGUgZnVuY3Rpb24gaW52b2tlZCBwZXIgcHJvcGVydHkuXG4gICAgICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyB0aGUgbmV3IG9iamVjdC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBiYXNlUGlja0J5KG9iamVjdCwgcGF0aHMsIHByZWRpY2F0ZSkge1xuICAgICAgdmFyIGluZGV4ID0gLTEsXG4gICAgICAgICAgbGVuZ3RoID0gcGF0aHMubGVuZ3RoLFxuICAgICAgICAgIHJlc3VsdCA9IHt9O1xuXG4gICAgICB3aGlsZSAoKytpbmRleCA8IGxlbmd0aCkge1xuICAgICAgICB2YXIgcGF0aCA9IHBhdGhzW2luZGV4XSxcbiAgICAgICAgICAgIHZhbHVlID0gYmFzZUdldChvYmplY3QsIHBhdGgpO1xuXG4gICAgICAgIGlmIChwcmVkaWNhdGUodmFsdWUsIHBhdGgpKSB7XG4gICAgICAgICAgYmFzZVNldChyZXN1bHQsIGNhc3RQYXRoKHBhdGgsIG9iamVjdCksIHZhbHVlKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBBIHNwZWNpYWxpemVkIHZlcnNpb24gb2YgYGJhc2VQcm9wZXJ0eWAgd2hpY2ggc3VwcG9ydHMgZGVlcCBwYXRocy5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtBcnJheXxzdHJpbmd9IHBhdGggVGhlIHBhdGggb2YgdGhlIHByb3BlcnR5IHRvIGdldC5cbiAgICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyBhY2Nlc3NvciBmdW5jdGlvbi5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBiYXNlUHJvcGVydHlEZWVwKHBhdGgpIHtcbiAgICAgIHJldHVybiBmdW5jdGlvbihvYmplY3QpIHtcbiAgICAgICAgcmV0dXJuIGJhc2VHZXQob2JqZWN0LCBwYXRoKTtcbiAgICAgIH07XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8ucHVsbEFsbEJ5YCB3aXRob3V0IHN1cHBvcnQgZm9yIGl0ZXJhdGVlXG4gICAgICogc2hvcnRoYW5kcy5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIG1vZGlmeS5cbiAgICAgKiBAcGFyYW0ge0FycmF5fSB2YWx1ZXMgVGhlIHZhbHVlcyB0byByZW1vdmUuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gW2l0ZXJhdGVlXSBUaGUgaXRlcmF0ZWUgaW52b2tlZCBwZXIgZWxlbWVudC5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbY29tcGFyYXRvcl0gVGhlIGNvbXBhcmF0b3IgaW52b2tlZCBwZXIgZWxlbWVudC5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgYGFycmF5YC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBiYXNlUHVsbEFsbChhcnJheSwgdmFsdWVzLCBpdGVyYXRlZSwgY29tcGFyYXRvcikge1xuICAgICAgdmFyIGluZGV4T2YgPSBjb21wYXJhdG9yID8gYmFzZUluZGV4T2ZXaXRoIDogYmFzZUluZGV4T2YsXG4gICAgICAgICAgaW5kZXggPSAtMSxcbiAgICAgICAgICBsZW5ndGggPSB2YWx1ZXMubGVuZ3RoLFxuICAgICAgICAgIHNlZW4gPSBhcnJheTtcblxuICAgICAgaWYgKGFycmF5ID09PSB2YWx1ZXMpIHtcbiAgICAgICAgdmFsdWVzID0gY29weUFycmF5KHZhbHVlcyk7XG4gICAgICB9XG4gICAgICBpZiAoaXRlcmF0ZWUpIHtcbiAgICAgICAgc2VlbiA9IGFycmF5TWFwKGFycmF5LCBiYXNlVW5hcnkoaXRlcmF0ZWUpKTtcbiAgICAgIH1cbiAgICAgIHdoaWxlICgrK2luZGV4IDwgbGVuZ3RoKSB7XG4gICAgICAgIHZhciBmcm9tSW5kZXggPSAwLFxuICAgICAgICAgICAgdmFsdWUgPSB2YWx1ZXNbaW5kZXhdLFxuICAgICAgICAgICAgY29tcHV0ZWQgPSBpdGVyYXRlZSA/IGl0ZXJhdGVlKHZhbHVlKSA6IHZhbHVlO1xuXG4gICAgICAgIHdoaWxlICgoZnJvbUluZGV4ID0gaW5kZXhPZihzZWVuLCBjb21wdXRlZCwgZnJvbUluZGV4LCBjb21wYXJhdG9yKSkgPiAtMSkge1xuICAgICAgICAgIGlmIChzZWVuICE9PSBhcnJheSkge1xuICAgICAgICAgICAgc3BsaWNlLmNhbGwoc2VlbiwgZnJvbUluZGV4LCAxKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgc3BsaWNlLmNhbGwoYXJyYXksIGZyb21JbmRleCwgMSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHJldHVybiBhcnJheTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5wdWxsQXRgIHdpdGhvdXQgc3VwcG9ydCBmb3IgaW5kaXZpZHVhbFxuICAgICAqIGluZGV4ZXMgb3IgY2FwdHVyaW5nIHRoZSByZW1vdmVkIGVsZW1lbnRzLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gbW9kaWZ5LlxuICAgICAqIEBwYXJhbSB7bnVtYmVyW119IGluZGV4ZXMgVGhlIGluZGV4ZXMgb2YgZWxlbWVudHMgdG8gcmVtb3ZlLlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyBgYXJyYXlgLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGJhc2VQdWxsQXQoYXJyYXksIGluZGV4ZXMpIHtcbiAgICAgIHZhciBsZW5ndGggPSBhcnJheSA/IGluZGV4ZXMubGVuZ3RoIDogMCxcbiAgICAgICAgICBsYXN0SW5kZXggPSBsZW5ndGggLSAxO1xuXG4gICAgICB3aGlsZSAobGVuZ3RoLS0pIHtcbiAgICAgICAgdmFyIGluZGV4ID0gaW5kZXhlc1tsZW5ndGhdO1xuICAgICAgICBpZiAobGVuZ3RoID09IGxhc3RJbmRleCB8fCBpbmRleCAhPT0gcHJldmlvdXMpIHtcbiAgICAgICAgICB2YXIgcHJldmlvdXMgPSBpbmRleDtcbiAgICAgICAgICBpZiAoaXNJbmRleChpbmRleCkpIHtcbiAgICAgICAgICAgIHNwbGljZS5jYWxsKGFycmF5LCBpbmRleCwgMSk7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGJhc2VVbnNldChhcnJheSwgaW5kZXgpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgcmV0dXJuIGFycmF5O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLnJhbmRvbWAgd2l0aG91dCBzdXBwb3J0IGZvciByZXR1cm5pbmdcbiAgICAgKiBmbG9hdGluZy1wb2ludCBudW1iZXJzLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge251bWJlcn0gbG93ZXIgVGhlIGxvd2VyIGJvdW5kLlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSB1cHBlciBUaGUgdXBwZXIgYm91bmQuXG4gICAgICogQHJldHVybnMge251bWJlcn0gUmV0dXJucyB0aGUgcmFuZG9tIG51bWJlci5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBiYXNlUmFuZG9tKGxvd2VyLCB1cHBlcikge1xuICAgICAgcmV0dXJuIGxvd2VyICsgbmF0aXZlRmxvb3IobmF0aXZlUmFuZG9tKCkgKiAodXBwZXIgLSBsb3dlciArIDEpKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5yYW5nZWAgYW5kIGBfLnJhbmdlUmlnaHRgIHdoaWNoIGRvZXNuJ3RcbiAgICAgKiBjb2VyY2UgYXJndW1lbnRzLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge251bWJlcn0gc3RhcnQgVGhlIHN0YXJ0IG9mIHRoZSByYW5nZS5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gZW5kIFRoZSBlbmQgb2YgdGhlIHJhbmdlLlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBzdGVwIFRoZSB2YWx1ZSB0byBpbmNyZW1lbnQgb3IgZGVjcmVtZW50IGJ5LlxuICAgICAqIEBwYXJhbSB7Ym9vbGVhbn0gW2Zyb21SaWdodF0gU3BlY2lmeSBpdGVyYXRpbmcgZnJvbSByaWdodCB0byBsZWZ0LlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgcmFuZ2Ugb2YgbnVtYmVycy5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBiYXNlUmFuZ2Uoc3RhcnQsIGVuZCwgc3RlcCwgZnJvbVJpZ2h0KSB7XG4gICAgICB2YXIgaW5kZXggPSAtMSxcbiAgICAgICAgICBsZW5ndGggPSBuYXRpdmVNYXgobmF0aXZlQ2VpbCgoZW5kIC0gc3RhcnQpIC8gKHN0ZXAgfHwgMSkpLCAwKSxcbiAgICAgICAgICByZXN1bHQgPSBBcnJheShsZW5ndGgpO1xuXG4gICAgICB3aGlsZSAobGVuZ3RoLS0pIHtcbiAgICAgICAgcmVzdWx0W2Zyb21SaWdodCA/IGxlbmd0aCA6ICsraW5kZXhdID0gc3RhcnQ7XG4gICAgICAgIHN0YXJ0ICs9IHN0ZXA7XG4gICAgICB9XG4gICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLnJlcGVhdGAgd2hpY2ggZG9lc24ndCBjb2VyY2UgYXJndW1lbnRzLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gc3RyaW5nIFRoZSBzdHJpbmcgdG8gcmVwZWF0LlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBuIFRoZSBudW1iZXIgb2YgdGltZXMgdG8gcmVwZWF0IHRoZSBzdHJpbmcuXG4gICAgICogQHJldHVybnMge3N0cmluZ30gUmV0dXJucyB0aGUgcmVwZWF0ZWQgc3RyaW5nLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGJhc2VSZXBlYXQoc3RyaW5nLCBuKSB7XG4gICAgICB2YXIgcmVzdWx0ID0gJyc7XG4gICAgICBpZiAoIXN0cmluZyB8fCBuIDwgMSB8fCBuID4gTUFYX1NBRkVfSU5URUdFUikge1xuICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgICAgfVxuICAgICAgLy8gTGV2ZXJhZ2UgdGhlIGV4cG9uZW50aWF0aW9uIGJ5IHNxdWFyaW5nIGFsZ29yaXRobSBmb3IgYSBmYXN0ZXIgcmVwZWF0LlxuICAgICAgLy8gU2VlIGh0dHBzOi8vZW4ud2lraXBlZGlhLm9yZy93aWtpL0V4cG9uZW50aWF0aW9uX2J5X3NxdWFyaW5nIGZvciBtb3JlIGRldGFpbHMuXG4gICAgICBkbyB7XG4gICAgICAgIGlmIChuICUgMikge1xuICAgICAgICAgIHJlc3VsdCArPSBzdHJpbmc7XG4gICAgICAgIH1cbiAgICAgICAgbiA9IG5hdGl2ZUZsb29yKG4gLyAyKTtcbiAgICAgICAgaWYgKG4pIHtcbiAgICAgICAgICBzdHJpbmcgKz0gc3RyaW5nO1xuICAgICAgICB9XG4gICAgICB9IHdoaWxlIChuKTtcblxuICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5yZXN0YCB3aGljaCBkb2Vzbid0IHZhbGlkYXRlIG9yIGNvZXJjZSBhcmd1bWVudHMuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGZ1bmMgVGhlIGZ1bmN0aW9uIHRvIGFwcGx5IGEgcmVzdCBwYXJhbWV0ZXIgdG8uXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IFtzdGFydD1mdW5jLmxlbmd0aC0xXSBUaGUgc3RhcnQgcG9zaXRpb24gb2YgdGhlIHJlc3QgcGFyYW1ldGVyLlxuICAgICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IGZ1bmN0aW9uLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGJhc2VSZXN0KGZ1bmMsIHN0YXJ0KSB7XG4gICAgICByZXR1cm4gc2V0VG9TdHJpbmcob3ZlclJlc3QoZnVuYywgc3RhcnQsIGlkZW50aXR5KSwgZnVuYyArICcnKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5zYW1wbGVgLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge0FycmF5fE9iamVjdH0gY29sbGVjdGlvbiBUaGUgY29sbGVjdGlvbiB0byBzYW1wbGUuXG4gICAgICogQHJldHVybnMgeyp9IFJldHVybnMgdGhlIHJhbmRvbSBlbGVtZW50LlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGJhc2VTYW1wbGUoY29sbGVjdGlvbikge1xuICAgICAgcmV0dXJuIGFycmF5U2FtcGxlKHZhbHVlcyhjb2xsZWN0aW9uKSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8uc2FtcGxlU2l6ZWAgd2l0aG91dCBwYXJhbSBndWFyZHMuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7QXJyYXl8T2JqZWN0fSBjb2xsZWN0aW9uIFRoZSBjb2xsZWN0aW9uIHRvIHNhbXBsZS5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gbiBUaGUgbnVtYmVyIG9mIGVsZW1lbnRzIHRvIHNhbXBsZS5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIHJhbmRvbSBlbGVtZW50cy5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBiYXNlU2FtcGxlU2l6ZShjb2xsZWN0aW9uLCBuKSB7XG4gICAgICB2YXIgYXJyYXkgPSB2YWx1ZXMoY29sbGVjdGlvbik7XG4gICAgICByZXR1cm4gc2h1ZmZsZVNlbGYoYXJyYXksIGJhc2VDbGFtcChuLCAwLCBhcnJheS5sZW5ndGgpKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5zZXRgLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gbW9kaWZ5LlxuICAgICAqIEBwYXJhbSB7QXJyYXl8c3RyaW5nfSBwYXRoIFRoZSBwYXRoIG9mIHRoZSBwcm9wZXJ0eSB0byBzZXQuXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gc2V0LlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtjdXN0b21pemVyXSBUaGUgZnVuY3Rpb24gdG8gY3VzdG9taXplIHBhdGggY3JlYXRpb24uXG4gICAgICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyBgb2JqZWN0YC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBiYXNlU2V0KG9iamVjdCwgcGF0aCwgdmFsdWUsIGN1c3RvbWl6ZXIpIHtcbiAgICAgIGlmICghaXNPYmplY3Qob2JqZWN0KSkge1xuICAgICAgICByZXR1cm4gb2JqZWN0O1xuICAgICAgfVxuICAgICAgcGF0aCA9IGNhc3RQYXRoKHBhdGgsIG9iamVjdCk7XG5cbiAgICAgIHZhciBpbmRleCA9IC0xLFxuICAgICAgICAgIGxlbmd0aCA9IHBhdGgubGVuZ3RoLFxuICAgICAgICAgIGxhc3RJbmRleCA9IGxlbmd0aCAtIDEsXG4gICAgICAgICAgbmVzdGVkID0gb2JqZWN0O1xuXG4gICAgICB3aGlsZSAobmVzdGVkICE9IG51bGwgJiYgKytpbmRleCA8IGxlbmd0aCkge1xuICAgICAgICB2YXIga2V5ID0gdG9LZXkocGF0aFtpbmRleF0pLFxuICAgICAgICAgICAgbmV3VmFsdWUgPSB2YWx1ZTtcblxuICAgICAgICBpZiAoa2V5ID09PSAnX19wcm90b19fJyB8fCBrZXkgPT09ICdjb25zdHJ1Y3RvcicgfHwga2V5ID09PSAncHJvdG90eXBlJykge1xuICAgICAgICAgIHJldHVybiBvYmplY3Q7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoaW5kZXggIT0gbGFzdEluZGV4KSB7XG4gICAgICAgICAgdmFyIG9ialZhbHVlID0gbmVzdGVkW2tleV07XG4gICAgICAgICAgbmV3VmFsdWUgPSBjdXN0b21pemVyID8gY3VzdG9taXplcihvYmpWYWx1ZSwga2V5LCBuZXN0ZWQpIDogdW5kZWZpbmVkO1xuICAgICAgICAgIGlmIChuZXdWYWx1ZSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICBuZXdWYWx1ZSA9IGlzT2JqZWN0KG9ialZhbHVlKVxuICAgICAgICAgICAgICA/IG9ialZhbHVlXG4gICAgICAgICAgICAgIDogKGlzSW5kZXgocGF0aFtpbmRleCArIDFdKSA/IFtdIDoge30pO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBhc3NpZ25WYWx1ZShuZXN0ZWQsIGtleSwgbmV3VmFsdWUpO1xuICAgICAgICBuZXN0ZWQgPSBuZXN0ZWRba2V5XTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBvYmplY3Q7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYHNldERhdGFgIHdpdGhvdXQgc3VwcG9ydCBmb3IgaG90IGxvb3Agc2hvcnRpbmcuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGZ1bmMgVGhlIGZ1bmN0aW9uIHRvIGFzc29jaWF0ZSBtZXRhZGF0YSB3aXRoLlxuICAgICAqIEBwYXJhbSB7Kn0gZGF0YSBUaGUgbWV0YWRhdGEuXG4gICAgICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIGBmdW5jYC5cbiAgICAgKi9cbiAgICB2YXIgYmFzZVNldERhdGEgPSAhbWV0YU1hcCA/IGlkZW50aXR5IDogZnVuY3Rpb24oZnVuYywgZGF0YSkge1xuICAgICAgbWV0YU1hcC5zZXQoZnVuYywgZGF0YSk7XG4gICAgICByZXR1cm4gZnVuYztcbiAgICB9O1xuXG4gICAgLyoqXG4gICAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYHNldFRvU3RyaW5nYCB3aXRob3V0IHN1cHBvcnQgZm9yIGhvdCBsb29wIHNob3J0aW5nLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBmdW5jIFRoZSBmdW5jdGlvbiB0byBtb2RpZnkuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gc3RyaW5nIFRoZSBgdG9TdHJpbmdgIHJlc3VsdC5cbiAgICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgYGZ1bmNgLlxuICAgICAqL1xuICAgIHZhciBiYXNlU2V0VG9TdHJpbmcgPSAhZGVmaW5lUHJvcGVydHkgPyBpZGVudGl0eSA6IGZ1bmN0aW9uKGZ1bmMsIHN0cmluZykge1xuICAgICAgcmV0dXJuIGRlZmluZVByb3BlcnR5KGZ1bmMsICd0b1N0cmluZycsIHtcbiAgICAgICAgJ2NvbmZpZ3VyYWJsZSc6IHRydWUsXG4gICAgICAgICdlbnVtZXJhYmxlJzogZmFsc2UsXG4gICAgICAgICd2YWx1ZSc6IGNvbnN0YW50KHN0cmluZyksXG4gICAgICAgICd3cml0YWJsZSc6IHRydWVcbiAgICAgIH0pO1xuICAgIH07XG5cbiAgICAvKipcbiAgICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5zaHVmZmxlYC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtBcnJheXxPYmplY3R9IGNvbGxlY3Rpb24gVGhlIGNvbGxlY3Rpb24gdG8gc2h1ZmZsZS5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIG5ldyBzaHVmZmxlZCBhcnJheS5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBiYXNlU2h1ZmZsZShjb2xsZWN0aW9uKSB7XG4gICAgICByZXR1cm4gc2h1ZmZsZVNlbGYodmFsdWVzKGNvbGxlY3Rpb24pKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5zbGljZWAgd2l0aG91dCBhbiBpdGVyYXRlZSBjYWxsIGd1YXJkLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gc2xpY2UuXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IFtzdGFydD0wXSBUaGUgc3RhcnQgcG9zaXRpb24uXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IFtlbmQ9YXJyYXkubGVuZ3RoXSBUaGUgZW5kIHBvc2l0aW9uLlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgc2xpY2Ugb2YgYGFycmF5YC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBiYXNlU2xpY2UoYXJyYXksIHN0YXJ0LCBlbmQpIHtcbiAgICAgIHZhciBpbmRleCA9IC0xLFxuICAgICAgICAgIGxlbmd0aCA9IGFycmF5Lmxlbmd0aDtcblxuICAgICAgaWYgKHN0YXJ0IDwgMCkge1xuICAgICAgICBzdGFydCA9IC1zdGFydCA+IGxlbmd0aCA/IDAgOiAobGVuZ3RoICsgc3RhcnQpO1xuICAgICAgfVxuICAgICAgZW5kID0gZW5kID4gbGVuZ3RoID8gbGVuZ3RoIDogZW5kO1xuICAgICAgaWYgKGVuZCA8IDApIHtcbiAgICAgICAgZW5kICs9IGxlbmd0aDtcbiAgICAgIH1cbiAgICAgIGxlbmd0aCA9IHN0YXJ0ID4gZW5kID8gMCA6ICgoZW5kIC0gc3RhcnQpID4+PiAwKTtcbiAgICAgIHN0YXJ0ID4+Pj0gMDtcblxuICAgICAgdmFyIHJlc3VsdCA9IEFycmF5KGxlbmd0aCk7XG4gICAgICB3aGlsZSAoKytpbmRleCA8IGxlbmd0aCkge1xuICAgICAgICByZXN1bHRbaW5kZXhdID0gYXJyYXlbaW5kZXggKyBzdGFydF07XG4gICAgICB9XG4gICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLnNvbWVgIHdpdGhvdXQgc3VwcG9ydCBmb3IgaXRlcmF0ZWUgc2hvcnRoYW5kcy5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtBcnJheXxPYmplY3R9IGNvbGxlY3Rpb24gVGhlIGNvbGxlY3Rpb24gdG8gaXRlcmF0ZSBvdmVyLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IHByZWRpY2F0ZSBUaGUgZnVuY3Rpb24gaW52b2tlZCBwZXIgaXRlcmF0aW9uLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBhbnkgZWxlbWVudCBwYXNzZXMgdGhlIHByZWRpY2F0ZSBjaGVjayxcbiAgICAgKiAgZWxzZSBgZmFsc2VgLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGJhc2VTb21lKGNvbGxlY3Rpb24sIHByZWRpY2F0ZSkge1xuICAgICAgdmFyIHJlc3VsdDtcblxuICAgICAgYmFzZUVhY2goY29sbGVjdGlvbiwgZnVuY3Rpb24odmFsdWUsIGluZGV4LCBjb2xsZWN0aW9uKSB7XG4gICAgICAgIHJlc3VsdCA9IHByZWRpY2F0ZSh2YWx1ZSwgaW5kZXgsIGNvbGxlY3Rpb24pO1xuICAgICAgICByZXR1cm4gIXJlc3VsdDtcbiAgICAgIH0pO1xuICAgICAgcmV0dXJuICEhcmVzdWx0O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLnNvcnRlZEluZGV4YCBhbmQgYF8uc29ydGVkTGFzdEluZGV4YCB3aGljaFxuICAgICAqIHBlcmZvcm1zIGEgYmluYXJ5IHNlYXJjaCBvZiBgYXJyYXlgIHRvIGRldGVybWluZSB0aGUgaW5kZXggYXQgd2hpY2ggYHZhbHVlYFxuICAgICAqIHNob3VsZCBiZSBpbnNlcnRlZCBpbnRvIGBhcnJheWAgaW4gb3JkZXIgdG8gbWFpbnRhaW4gaXRzIHNvcnQgb3JkZXIuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBzb3J0ZWQgYXJyYXkgdG8gaW5zcGVjdC5cbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBldmFsdWF0ZS5cbiAgICAgKiBAcGFyYW0ge2Jvb2xlYW59IFtyZXRIaWdoZXN0XSBTcGVjaWZ5IHJldHVybmluZyB0aGUgaGlnaGVzdCBxdWFsaWZpZWQgaW5kZXguXG4gICAgICogQHJldHVybnMge251bWJlcn0gUmV0dXJucyB0aGUgaW5kZXggYXQgd2hpY2ggYHZhbHVlYCBzaG91bGQgYmUgaW5zZXJ0ZWRcbiAgICAgKiAgaW50byBgYXJyYXlgLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGJhc2VTb3J0ZWRJbmRleChhcnJheSwgdmFsdWUsIHJldEhpZ2hlc3QpIHtcbiAgICAgIHZhciBsb3cgPSAwLFxuICAgICAgICAgIGhpZ2ggPSBhcnJheSA9PSBudWxsID8gbG93IDogYXJyYXkubGVuZ3RoO1xuXG4gICAgICBpZiAodHlwZW9mIHZhbHVlID09ICdudW1iZXInICYmIHZhbHVlID09PSB2YWx1ZSAmJiBoaWdoIDw9IEhBTEZfTUFYX0FSUkFZX0xFTkdUSCkge1xuICAgICAgICB3aGlsZSAobG93IDwgaGlnaCkge1xuICAgICAgICAgIHZhciBtaWQgPSAobG93ICsgaGlnaCkgPj4+IDEsXG4gICAgICAgICAgICAgIGNvbXB1dGVkID0gYXJyYXlbbWlkXTtcblxuICAgICAgICAgIGlmIChjb21wdXRlZCAhPT0gbnVsbCAmJiAhaXNTeW1ib2woY29tcHV0ZWQpICYmXG4gICAgICAgICAgICAgIChyZXRIaWdoZXN0ID8gKGNvbXB1dGVkIDw9IHZhbHVlKSA6IChjb21wdXRlZCA8IHZhbHVlKSkpIHtcbiAgICAgICAgICAgIGxvdyA9IG1pZCArIDE7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGhpZ2ggPSBtaWQ7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiBoaWdoO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGJhc2VTb3J0ZWRJbmRleEJ5KGFycmF5LCB2YWx1ZSwgaWRlbnRpdHksIHJldEhpZ2hlc3QpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLnNvcnRlZEluZGV4QnlgIGFuZCBgXy5zb3J0ZWRMYXN0SW5kZXhCeWBcbiAgICAgKiB3aGljaCBpbnZva2VzIGBpdGVyYXRlZWAgZm9yIGB2YWx1ZWAgYW5kIGVhY2ggZWxlbWVudCBvZiBgYXJyYXlgIHRvIGNvbXB1dGVcbiAgICAgKiB0aGVpciBzb3J0IHJhbmtpbmcuIFRoZSBpdGVyYXRlZSBpcyBpbnZva2VkIHdpdGggb25lIGFyZ3VtZW50OyAodmFsdWUpLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgc29ydGVkIGFycmF5IHRvIGluc3BlY3QuXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gZXZhbHVhdGUuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gaXRlcmF0ZWUgVGhlIGl0ZXJhdGVlIGludm9rZWQgcGVyIGVsZW1lbnQuXG4gICAgICogQHBhcmFtIHtib29sZWFufSBbcmV0SGlnaGVzdF0gU3BlY2lmeSByZXR1cm5pbmcgdGhlIGhpZ2hlc3QgcXVhbGlmaWVkIGluZGV4LlxuICAgICAqIEByZXR1cm5zIHtudW1iZXJ9IFJldHVybnMgdGhlIGluZGV4IGF0IHdoaWNoIGB2YWx1ZWAgc2hvdWxkIGJlIGluc2VydGVkXG4gICAgICogIGludG8gYGFycmF5YC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBiYXNlU29ydGVkSW5kZXhCeShhcnJheSwgdmFsdWUsIGl0ZXJhdGVlLCByZXRIaWdoZXN0KSB7XG4gICAgICB2YXIgbG93ID0gMCxcbiAgICAgICAgICBoaWdoID0gYXJyYXkgPT0gbnVsbCA/IDAgOiBhcnJheS5sZW5ndGg7XG4gICAgICBpZiAoaGlnaCA9PT0gMCkge1xuICAgICAgICByZXR1cm4gMDtcbiAgICAgIH1cblxuICAgICAgdmFsdWUgPSBpdGVyYXRlZSh2YWx1ZSk7XG4gICAgICB2YXIgdmFsSXNOYU4gPSB2YWx1ZSAhPT0gdmFsdWUsXG4gICAgICAgICAgdmFsSXNOdWxsID0gdmFsdWUgPT09IG51bGwsXG4gICAgICAgICAgdmFsSXNTeW1ib2wgPSBpc1N5bWJvbCh2YWx1ZSksXG4gICAgICAgICAgdmFsSXNVbmRlZmluZWQgPSB2YWx1ZSA9PT0gdW5kZWZpbmVkO1xuXG4gICAgICB3aGlsZSAobG93IDwgaGlnaCkge1xuICAgICAgICB2YXIgbWlkID0gbmF0aXZlRmxvb3IoKGxvdyArIGhpZ2gpIC8gMiksXG4gICAgICAgICAgICBjb21wdXRlZCA9IGl0ZXJhdGVlKGFycmF5W21pZF0pLFxuICAgICAgICAgICAgb3RoSXNEZWZpbmVkID0gY29tcHV0ZWQgIT09IHVuZGVmaW5lZCxcbiAgICAgICAgICAgIG90aElzTnVsbCA9IGNvbXB1dGVkID09PSBudWxsLFxuICAgICAgICAgICAgb3RoSXNSZWZsZXhpdmUgPSBjb21wdXRlZCA9PT0gY29tcHV0ZWQsXG4gICAgICAgICAgICBvdGhJc1N5bWJvbCA9IGlzU3ltYm9sKGNvbXB1dGVkKTtcblxuICAgICAgICBpZiAodmFsSXNOYU4pIHtcbiAgICAgICAgICB2YXIgc2V0TG93ID0gcmV0SGlnaGVzdCB8fCBvdGhJc1JlZmxleGl2ZTtcbiAgICAgICAgfSBlbHNlIGlmICh2YWxJc1VuZGVmaW5lZCkge1xuICAgICAgICAgIHNldExvdyA9IG90aElzUmVmbGV4aXZlICYmIChyZXRIaWdoZXN0IHx8IG90aElzRGVmaW5lZCk7XG4gICAgICAgIH0gZWxzZSBpZiAodmFsSXNOdWxsKSB7XG4gICAgICAgICAgc2V0TG93ID0gb3RoSXNSZWZsZXhpdmUgJiYgb3RoSXNEZWZpbmVkICYmIChyZXRIaWdoZXN0IHx8ICFvdGhJc051bGwpO1xuICAgICAgICB9IGVsc2UgaWYgKHZhbElzU3ltYm9sKSB7XG4gICAgICAgICAgc2V0TG93ID0gb3RoSXNSZWZsZXhpdmUgJiYgb3RoSXNEZWZpbmVkICYmICFvdGhJc051bGwgJiYgKHJldEhpZ2hlc3QgfHwgIW90aElzU3ltYm9sKTtcbiAgICAgICAgfSBlbHNlIGlmIChvdGhJc051bGwgfHwgb3RoSXNTeW1ib2wpIHtcbiAgICAgICAgICBzZXRMb3cgPSBmYWxzZTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBzZXRMb3cgPSByZXRIaWdoZXN0ID8gKGNvbXB1dGVkIDw9IHZhbHVlKSA6IChjb21wdXRlZCA8IHZhbHVlKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoc2V0TG93KSB7XG4gICAgICAgICAgbG93ID0gbWlkICsgMTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBoaWdoID0gbWlkO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICByZXR1cm4gbmF0aXZlTWluKGhpZ2gsIE1BWF9BUlJBWV9JTkRFWCk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8uc29ydGVkVW5pcWAgYW5kIGBfLnNvcnRlZFVuaXFCeWAgd2l0aG91dFxuICAgICAqIHN1cHBvcnQgZm9yIGl0ZXJhdGVlIHNob3J0aGFuZHMuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBpbnNwZWN0LlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtpdGVyYXRlZV0gVGhlIGl0ZXJhdGVlIGludm9rZWQgcGVyIGVsZW1lbnQuXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBuZXcgZHVwbGljYXRlIGZyZWUgYXJyYXkuXG4gICAgICovXG4gICAgZnVuY3Rpb24gYmFzZVNvcnRlZFVuaXEoYXJyYXksIGl0ZXJhdGVlKSB7XG4gICAgICB2YXIgaW5kZXggPSAtMSxcbiAgICAgICAgICBsZW5ndGggPSBhcnJheS5sZW5ndGgsXG4gICAgICAgICAgcmVzSW5kZXggPSAwLFxuICAgICAgICAgIHJlc3VsdCA9IFtdO1xuXG4gICAgICB3aGlsZSAoKytpbmRleCA8IGxlbmd0aCkge1xuICAgICAgICB2YXIgdmFsdWUgPSBhcnJheVtpbmRleF0sXG4gICAgICAgICAgICBjb21wdXRlZCA9IGl0ZXJhdGVlID8gaXRlcmF0ZWUodmFsdWUpIDogdmFsdWU7XG5cbiAgICAgICAgaWYgKCFpbmRleCB8fCAhZXEoY29tcHV0ZWQsIHNlZW4pKSB7XG4gICAgICAgICAgdmFyIHNlZW4gPSBjb21wdXRlZDtcbiAgICAgICAgICByZXN1bHRbcmVzSW5kZXgrK10gPSB2YWx1ZSA9PT0gMCA/IDAgOiB2YWx1ZTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy50b051bWJlcmAgd2hpY2ggZG9lc24ndCBlbnN1cmUgY29ycmVjdFxuICAgICAqIGNvbnZlcnNpb25zIG9mIGJpbmFyeSwgaGV4YWRlY2ltYWwsIG9yIG9jdGFsIHN0cmluZyB2YWx1ZXMuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIHByb2Nlc3MuXG4gICAgICogQHJldHVybnMge251bWJlcn0gUmV0dXJucyB0aGUgbnVtYmVyLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGJhc2VUb051bWJlcih2YWx1ZSkge1xuICAgICAgaWYgKHR5cGVvZiB2YWx1ZSA9PSAnbnVtYmVyJykge1xuICAgICAgICByZXR1cm4gdmFsdWU7XG4gICAgICB9XG4gICAgICBpZiAoaXNTeW1ib2wodmFsdWUpKSB7XG4gICAgICAgIHJldHVybiBOQU47XG4gICAgICB9XG4gICAgICByZXR1cm4gK3ZhbHVlO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLnRvU3RyaW5nYCB3aGljaCBkb2Vzbid0IGNvbnZlcnQgbnVsbGlzaFxuICAgICAqIHZhbHVlcyB0byBlbXB0eSBzdHJpbmdzLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBwcm9jZXNzLlxuICAgICAqIEByZXR1cm5zIHtzdHJpbmd9IFJldHVybnMgdGhlIHN0cmluZy5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBiYXNlVG9TdHJpbmcodmFsdWUpIHtcbiAgICAgIC8vIEV4aXQgZWFybHkgZm9yIHN0cmluZ3MgdG8gYXZvaWQgYSBwZXJmb3JtYW5jZSBoaXQgaW4gc29tZSBlbnZpcm9ubWVudHMuXG4gICAgICBpZiAodHlwZW9mIHZhbHVlID09ICdzdHJpbmcnKSB7XG4gICAgICAgIHJldHVybiB2YWx1ZTtcbiAgICAgIH1cbiAgICAgIGlmIChpc0FycmF5KHZhbHVlKSkge1xuICAgICAgICAvLyBSZWN1cnNpdmVseSBjb252ZXJ0IHZhbHVlcyAoc3VzY2VwdGlibGUgdG8gY2FsbCBzdGFjayBsaW1pdHMpLlxuICAgICAgICByZXR1cm4gYXJyYXlNYXAodmFsdWUsIGJhc2VUb1N0cmluZykgKyAnJztcbiAgICAgIH1cbiAgICAgIGlmIChpc1N5bWJvbCh2YWx1ZSkpIHtcbiAgICAgICAgcmV0dXJuIHN5bWJvbFRvU3RyaW5nID8gc3ltYm9sVG9TdHJpbmcuY2FsbCh2YWx1ZSkgOiAnJztcbiAgICAgIH1cbiAgICAgIHZhciByZXN1bHQgPSAodmFsdWUgKyAnJyk7XG4gICAgICByZXR1cm4gKHJlc3VsdCA9PSAnMCcgJiYgKDEgLyB2YWx1ZSkgPT0gLUlORklOSVRZKSA/ICctMCcgOiByZXN1bHQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8udW5pcUJ5YCB3aXRob3V0IHN1cHBvcnQgZm9yIGl0ZXJhdGVlIHNob3J0aGFuZHMuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBpbnNwZWN0LlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtpdGVyYXRlZV0gVGhlIGl0ZXJhdGVlIGludm9rZWQgcGVyIGVsZW1lbnQuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gW2NvbXBhcmF0b3JdIFRoZSBjb21wYXJhdG9yIGludm9rZWQgcGVyIGVsZW1lbnQuXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBuZXcgZHVwbGljYXRlIGZyZWUgYXJyYXkuXG4gICAgICovXG4gICAgZnVuY3Rpb24gYmFzZVVuaXEoYXJyYXksIGl0ZXJhdGVlLCBjb21wYXJhdG9yKSB7XG4gICAgICB2YXIgaW5kZXggPSAtMSxcbiAgICAgICAgICBpbmNsdWRlcyA9IGFycmF5SW5jbHVkZXMsXG4gICAgICAgICAgbGVuZ3RoID0gYXJyYXkubGVuZ3RoLFxuICAgICAgICAgIGlzQ29tbW9uID0gdHJ1ZSxcbiAgICAgICAgICByZXN1bHQgPSBbXSxcbiAgICAgICAgICBzZWVuID0gcmVzdWx0O1xuXG4gICAgICBpZiAoY29tcGFyYXRvcikge1xuICAgICAgICBpc0NvbW1vbiA9IGZhbHNlO1xuICAgICAgICBpbmNsdWRlcyA9IGFycmF5SW5jbHVkZXNXaXRoO1xuICAgICAgfVxuICAgICAgZWxzZSBpZiAobGVuZ3RoID49IExBUkdFX0FSUkFZX1NJWkUpIHtcbiAgICAgICAgdmFyIHNldCA9IGl0ZXJhdGVlID8gbnVsbCA6IGNyZWF0ZVNldChhcnJheSk7XG4gICAgICAgIGlmIChzZXQpIHtcbiAgICAgICAgICByZXR1cm4gc2V0VG9BcnJheShzZXQpO1xuICAgICAgICB9XG4gICAgICAgIGlzQ29tbW9uID0gZmFsc2U7XG4gICAgICAgIGluY2x1ZGVzID0gY2FjaGVIYXM7XG4gICAgICAgIHNlZW4gPSBuZXcgU2V0Q2FjaGU7XG4gICAgICB9XG4gICAgICBlbHNlIHtcbiAgICAgICAgc2VlbiA9IGl0ZXJhdGVlID8gW10gOiByZXN1bHQ7XG4gICAgICB9XG4gICAgICBvdXRlcjpcbiAgICAgIHdoaWxlICgrK2luZGV4IDwgbGVuZ3RoKSB7XG4gICAgICAgIHZhciB2YWx1ZSA9IGFycmF5W2luZGV4XSxcbiAgICAgICAgICAgIGNvbXB1dGVkID0gaXRlcmF0ZWUgPyBpdGVyYXRlZSh2YWx1ZSkgOiB2YWx1ZTtcblxuICAgICAgICB2YWx1ZSA9IChjb21wYXJhdG9yIHx8IHZhbHVlICE9PSAwKSA/IHZhbHVlIDogMDtcbiAgICAgICAgaWYgKGlzQ29tbW9uICYmIGNvbXB1dGVkID09PSBjb21wdXRlZCkge1xuICAgICAgICAgIHZhciBzZWVuSW5kZXggPSBzZWVuLmxlbmd0aDtcbiAgICAgICAgICB3aGlsZSAoc2VlbkluZGV4LS0pIHtcbiAgICAgICAgICAgIGlmIChzZWVuW3NlZW5JbmRleF0gPT09IGNvbXB1dGVkKSB7XG4gICAgICAgICAgICAgIGNvbnRpbnVlIG91dGVyO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgICBpZiAoaXRlcmF0ZWUpIHtcbiAgICAgICAgICAgIHNlZW4ucHVzaChjb21wdXRlZCk7XG4gICAgICAgICAgfVxuICAgICAgICAgIHJlc3VsdC5wdXNoKHZhbHVlKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmICghaW5jbHVkZXMoc2VlbiwgY29tcHV0ZWQsIGNvbXBhcmF0b3IpKSB7XG4gICAgICAgICAgaWYgKHNlZW4gIT09IHJlc3VsdCkge1xuICAgICAgICAgICAgc2Vlbi5wdXNoKGNvbXB1dGVkKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgcmVzdWx0LnB1c2godmFsdWUpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLnVuc2V0YC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIG1vZGlmeS5cbiAgICAgKiBAcGFyYW0ge0FycmF5fHN0cmluZ30gcGF0aCBUaGUgcHJvcGVydHkgcGF0aCB0byB1bnNldC5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgdGhlIHByb3BlcnR5IGlzIGRlbGV0ZWQsIGVsc2UgYGZhbHNlYC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBiYXNlVW5zZXQob2JqZWN0LCBwYXRoKSB7XG4gICAgICBwYXRoID0gY2FzdFBhdGgocGF0aCwgb2JqZWN0KTtcbiAgICAgIG9iamVjdCA9IHBhcmVudChvYmplY3QsIHBhdGgpO1xuICAgICAgcmV0dXJuIG9iamVjdCA9PSBudWxsIHx8IGRlbGV0ZSBvYmplY3RbdG9LZXkobGFzdChwYXRoKSldO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLnVwZGF0ZWAuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBtb2RpZnkuXG4gICAgICogQHBhcmFtIHtBcnJheXxzdHJpbmd9IHBhdGggVGhlIHBhdGggb2YgdGhlIHByb3BlcnR5IHRvIHVwZGF0ZS5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSB1cGRhdGVyIFRoZSBmdW5jdGlvbiB0byBwcm9kdWNlIHRoZSB1cGRhdGVkIHZhbHVlLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtjdXN0b21pemVyXSBUaGUgZnVuY3Rpb24gdG8gY3VzdG9taXplIHBhdGggY3JlYXRpb24uXG4gICAgICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyBgb2JqZWN0YC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBiYXNlVXBkYXRlKG9iamVjdCwgcGF0aCwgdXBkYXRlciwgY3VzdG9taXplcikge1xuICAgICAgcmV0dXJuIGJhc2VTZXQob2JqZWN0LCBwYXRoLCB1cGRhdGVyKGJhc2VHZXQob2JqZWN0LCBwYXRoKSksIGN1c3RvbWl6ZXIpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIG1ldGhvZHMgbGlrZSBgXy5kcm9wV2hpbGVgIGFuZCBgXy50YWtlV2hpbGVgXG4gICAgICogd2l0aG91dCBzdXBwb3J0IGZvciBpdGVyYXRlZSBzaG9ydGhhbmRzLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gcXVlcnkuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gcHJlZGljYXRlIFRoZSBmdW5jdGlvbiBpbnZva2VkIHBlciBpdGVyYXRpb24uXG4gICAgICogQHBhcmFtIHtib29sZWFufSBbaXNEcm9wXSBTcGVjaWZ5IGRyb3BwaW5nIGVsZW1lbnRzIGluc3RlYWQgb2YgdGFraW5nIHRoZW0uXG4gICAgICogQHBhcmFtIHtib29sZWFufSBbZnJvbVJpZ2h0XSBTcGVjaWZ5IGl0ZXJhdGluZyBmcm9tIHJpZ2h0IHRvIGxlZnQuXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBzbGljZSBvZiBgYXJyYXlgLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGJhc2VXaGlsZShhcnJheSwgcHJlZGljYXRlLCBpc0Ryb3AsIGZyb21SaWdodCkge1xuICAgICAgdmFyIGxlbmd0aCA9IGFycmF5Lmxlbmd0aCxcbiAgICAgICAgICBpbmRleCA9IGZyb21SaWdodCA/IGxlbmd0aCA6IC0xO1xuXG4gICAgICB3aGlsZSAoKGZyb21SaWdodCA/IGluZGV4LS0gOiArK2luZGV4IDwgbGVuZ3RoKSAmJlxuICAgICAgICBwcmVkaWNhdGUoYXJyYXlbaW5kZXhdLCBpbmRleCwgYXJyYXkpKSB7fVxuXG4gICAgICByZXR1cm4gaXNEcm9wXG4gICAgICAgID8gYmFzZVNsaWNlKGFycmF5LCAoZnJvbVJpZ2h0ID8gMCA6IGluZGV4KSwgKGZyb21SaWdodCA/IGluZGV4ICsgMSA6IGxlbmd0aCkpXG4gICAgICAgIDogYmFzZVNsaWNlKGFycmF5LCAoZnJvbVJpZ2h0ID8gaW5kZXggKyAxIDogMCksIChmcm9tUmlnaHQgPyBsZW5ndGggOiBpbmRleCkpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGB3cmFwcGVyVmFsdWVgIHdoaWNoIHJldHVybnMgdGhlIHJlc3VsdCBvZlxuICAgICAqIHBlcmZvcm1pbmcgYSBzZXF1ZW5jZSBvZiBhY3Rpb25zIG9uIHRoZSB1bndyYXBwZWQgYHZhbHVlYCwgd2hlcmUgZWFjaFxuICAgICAqIHN1Y2Nlc3NpdmUgYWN0aW9uIGlzIHN1cHBsaWVkIHRoZSByZXR1cm4gdmFsdWUgb2YgdGhlIHByZXZpb3VzLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB1bndyYXBwZWQgdmFsdWUuXG4gICAgICogQHBhcmFtIHtBcnJheX0gYWN0aW9ucyBBY3Rpb25zIHRvIHBlcmZvcm0gdG8gcmVzb2x2ZSB0aGUgdW53cmFwcGVkIHZhbHVlLlxuICAgICAqIEByZXR1cm5zIHsqfSBSZXR1cm5zIHRoZSByZXNvbHZlZCB2YWx1ZS5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBiYXNlV3JhcHBlclZhbHVlKHZhbHVlLCBhY3Rpb25zKSB7XG4gICAgICB2YXIgcmVzdWx0ID0gdmFsdWU7XG4gICAgICBpZiAocmVzdWx0IGluc3RhbmNlb2YgTGF6eVdyYXBwZXIpIHtcbiAgICAgICAgcmVzdWx0ID0gcmVzdWx0LnZhbHVlKCk7XG4gICAgICB9XG4gICAgICByZXR1cm4gYXJyYXlSZWR1Y2UoYWN0aW9ucywgZnVuY3Rpb24ocmVzdWx0LCBhY3Rpb24pIHtcbiAgICAgICAgcmV0dXJuIGFjdGlvbi5mdW5jLmFwcGx5KGFjdGlvbi50aGlzQXJnLCBhcnJheVB1c2goW3Jlc3VsdF0sIGFjdGlvbi5hcmdzKSk7XG4gICAgICB9LCByZXN1bHQpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIG1ldGhvZHMgbGlrZSBgXy54b3JgLCB3aXRob3V0IHN1cHBvcnQgZm9yXG4gICAgICogaXRlcmF0ZWUgc2hvcnRoYW5kcywgdGhhdCBhY2NlcHRzIGFuIGFycmF5IG9mIGFycmF5cyB0byBpbnNwZWN0LlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheXMgVGhlIGFycmF5cyB0byBpbnNwZWN0LlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtpdGVyYXRlZV0gVGhlIGl0ZXJhdGVlIGludm9rZWQgcGVyIGVsZW1lbnQuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gW2NvbXBhcmF0b3JdIFRoZSBjb21wYXJhdG9yIGludm9rZWQgcGVyIGVsZW1lbnQuXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBuZXcgYXJyYXkgb2YgdmFsdWVzLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGJhc2VYb3IoYXJyYXlzLCBpdGVyYXRlZSwgY29tcGFyYXRvcikge1xuICAgICAgdmFyIGxlbmd0aCA9IGFycmF5cy5sZW5ndGg7XG4gICAgICBpZiAobGVuZ3RoIDwgMikge1xuICAgICAgICByZXR1cm4gbGVuZ3RoID8gYmFzZVVuaXEoYXJyYXlzWzBdKSA6IFtdO1xuICAgICAgfVxuICAgICAgdmFyIGluZGV4ID0gLTEsXG4gICAgICAgICAgcmVzdWx0ID0gQXJyYXkobGVuZ3RoKTtcblxuICAgICAgd2hpbGUgKCsraW5kZXggPCBsZW5ndGgpIHtcbiAgICAgICAgdmFyIGFycmF5ID0gYXJyYXlzW2luZGV4XSxcbiAgICAgICAgICAgIG90aEluZGV4ID0gLTE7XG5cbiAgICAgICAgd2hpbGUgKCsrb3RoSW5kZXggPCBsZW5ndGgpIHtcbiAgICAgICAgICBpZiAob3RoSW5kZXggIT0gaW5kZXgpIHtcbiAgICAgICAgICAgIHJlc3VsdFtpbmRleF0gPSBiYXNlRGlmZmVyZW5jZShyZXN1bHRbaW5kZXhdIHx8IGFycmF5LCBhcnJheXNbb3RoSW5kZXhdLCBpdGVyYXRlZSwgY29tcGFyYXRvcik7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgICByZXR1cm4gYmFzZVVuaXEoYmFzZUZsYXR0ZW4ocmVzdWx0LCAxKSwgaXRlcmF0ZWUsIGNvbXBhcmF0b3IpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoaXMgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy56aXBPYmplY3RgIHdoaWNoIGFzc2lnbnMgdmFsdWVzIHVzaW5nIGBhc3NpZ25GdW5jYC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtBcnJheX0gcHJvcHMgVGhlIHByb3BlcnR5IGlkZW50aWZpZXJzLlxuICAgICAqIEBwYXJhbSB7QXJyYXl9IHZhbHVlcyBUaGUgcHJvcGVydHkgdmFsdWVzLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGFzc2lnbkZ1bmMgVGhlIGZ1bmN0aW9uIHRvIGFzc2lnbiB2YWx1ZXMuXG4gICAgICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyB0aGUgbmV3IG9iamVjdC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBiYXNlWmlwT2JqZWN0KHByb3BzLCB2YWx1ZXMsIGFzc2lnbkZ1bmMpIHtcbiAgICAgIHZhciBpbmRleCA9IC0xLFxuICAgICAgICAgIGxlbmd0aCA9IHByb3BzLmxlbmd0aCxcbiAgICAgICAgICB2YWxzTGVuZ3RoID0gdmFsdWVzLmxlbmd0aCxcbiAgICAgICAgICByZXN1bHQgPSB7fTtcblxuICAgICAgd2hpbGUgKCsraW5kZXggPCBsZW5ndGgpIHtcbiAgICAgICAgdmFyIHZhbHVlID0gaW5kZXggPCB2YWxzTGVuZ3RoID8gdmFsdWVzW2luZGV4XSA6IHVuZGVmaW5lZDtcbiAgICAgICAgYXNzaWduRnVuYyhyZXN1bHQsIHByb3BzW2luZGV4XSwgdmFsdWUpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDYXN0cyBgdmFsdWVgIHRvIGFuIGVtcHR5IGFycmF5IGlmIGl0J3Mgbm90IGFuIGFycmF5IGxpa2Ugb2JqZWN0LlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBpbnNwZWN0LlxuICAgICAqIEByZXR1cm5zIHtBcnJheXxPYmplY3R9IFJldHVybnMgdGhlIGNhc3QgYXJyYXktbGlrZSBvYmplY3QuXG4gICAgICovXG4gICAgZnVuY3Rpb24gY2FzdEFycmF5TGlrZU9iamVjdCh2YWx1ZSkge1xuICAgICAgcmV0dXJuIGlzQXJyYXlMaWtlT2JqZWN0KHZhbHVlKSA/IHZhbHVlIDogW107XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ2FzdHMgYHZhbHVlYCB0byBgaWRlbnRpdHlgIGlmIGl0J3Mgbm90IGEgZnVuY3Rpb24uXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGluc3BlY3QuXG4gICAgICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIGNhc3QgZnVuY3Rpb24uXG4gICAgICovXG4gICAgZnVuY3Rpb24gY2FzdEZ1bmN0aW9uKHZhbHVlKSB7XG4gICAgICByZXR1cm4gdHlwZW9mIHZhbHVlID09ICdmdW5jdGlvbicgPyB2YWx1ZSA6IGlkZW50aXR5O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENhc3RzIGB2YWx1ZWAgdG8gYSBwYXRoIGFycmF5IGlmIGl0J3Mgbm90IG9uZS5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gaW5zcGVjdC5cbiAgICAgKiBAcGFyYW0ge09iamVjdH0gW29iamVjdF0gVGhlIG9iamVjdCB0byBxdWVyeSBrZXlzIG9uLlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgY2FzdCBwcm9wZXJ0eSBwYXRoIGFycmF5LlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGNhc3RQYXRoKHZhbHVlLCBvYmplY3QpIHtcbiAgICAgIGlmIChpc0FycmF5KHZhbHVlKSkge1xuICAgICAgICByZXR1cm4gdmFsdWU7XG4gICAgICB9XG4gICAgICByZXR1cm4gaXNLZXkodmFsdWUsIG9iamVjdCkgPyBbdmFsdWVdIDogc3RyaW5nVG9QYXRoKHRvU3RyaW5nKHZhbHVlKSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQSBgYmFzZVJlc3RgIGFsaWFzIHdoaWNoIGNhbiBiZSByZXBsYWNlZCB3aXRoIGBpZGVudGl0eWAgYnkgbW9kdWxlXG4gICAgICogcmVwbGFjZW1lbnQgcGx1Z2lucy5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHR5cGUge0Z1bmN0aW9ufVxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGZ1bmMgVGhlIGZ1bmN0aW9uIHRvIGFwcGx5IGEgcmVzdCBwYXJhbWV0ZXIgdG8uXG4gICAgICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgZnVuY3Rpb24uXG4gICAgICovXG4gICAgdmFyIGNhc3RSZXN0ID0gYmFzZVJlc3Q7XG5cbiAgICAvKipcbiAgICAgKiBDYXN0cyBgYXJyYXlgIHRvIGEgc2xpY2UgaWYgaXQncyBuZWVkZWQuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBpbnNwZWN0LlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBzdGFydCBUaGUgc3RhcnQgcG9zaXRpb24uXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IFtlbmQ9YXJyYXkubGVuZ3RoXSBUaGUgZW5kIHBvc2l0aW9uLlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgY2FzdCBzbGljZS5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBjYXN0U2xpY2UoYXJyYXksIHN0YXJ0LCBlbmQpIHtcbiAgICAgIHZhciBsZW5ndGggPSBhcnJheS5sZW5ndGg7XG4gICAgICBlbmQgPSBlbmQgPT09IHVuZGVmaW5lZCA/IGxlbmd0aCA6IGVuZDtcbiAgICAgIHJldHVybiAoIXN0YXJ0ICYmIGVuZCA+PSBsZW5ndGgpID8gYXJyYXkgOiBiYXNlU2xpY2UoYXJyYXksIHN0YXJ0LCBlbmQpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEEgc2ltcGxlIHdyYXBwZXIgYXJvdW5kIHRoZSBnbG9iYWwgW2BjbGVhclRpbWVvdXRgXShodHRwczovL21kbi5pby9jbGVhclRpbWVvdXQpLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge251bWJlcnxPYmplY3R9IGlkIFRoZSB0aW1lciBpZCBvciB0aW1lb3V0IG9iamVjdCBvZiB0aGUgdGltZXIgdG8gY2xlYXIuXG4gICAgICovXG4gICAgdmFyIGNsZWFyVGltZW91dCA9IGN0eENsZWFyVGltZW91dCB8fCBmdW5jdGlvbihpZCkge1xuICAgICAgcmV0dXJuIHJvb3QuY2xlYXJUaW1lb3V0KGlkKTtcbiAgICB9O1xuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIGNsb25lIG9mICBgYnVmZmVyYC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtCdWZmZXJ9IGJ1ZmZlciBUaGUgYnVmZmVyIHRvIGNsb25lLlxuICAgICAqIEBwYXJhbSB7Ym9vbGVhbn0gW2lzRGVlcF0gU3BlY2lmeSBhIGRlZXAgY2xvbmUuXG4gICAgICogQHJldHVybnMge0J1ZmZlcn0gUmV0dXJucyB0aGUgY2xvbmVkIGJ1ZmZlci5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBjbG9uZUJ1ZmZlcihidWZmZXIsIGlzRGVlcCkge1xuICAgICAgaWYgKGlzRGVlcCkge1xuICAgICAgICByZXR1cm4gYnVmZmVyLnNsaWNlKCk7XG4gICAgICB9XG4gICAgICB2YXIgbGVuZ3RoID0gYnVmZmVyLmxlbmd0aCxcbiAgICAgICAgICByZXN1bHQgPSBhbGxvY1Vuc2FmZSA/IGFsbG9jVW5zYWZlKGxlbmd0aCkgOiBuZXcgYnVmZmVyLmNvbnN0cnVjdG9yKGxlbmd0aCk7XG5cbiAgICAgIGJ1ZmZlci5jb3B5KHJlc3VsdCk7XG4gICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBjbG9uZSBvZiBgYXJyYXlCdWZmZXJgLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge0FycmF5QnVmZmVyfSBhcnJheUJ1ZmZlciBUaGUgYXJyYXkgYnVmZmVyIHRvIGNsb25lLlxuICAgICAqIEByZXR1cm5zIHtBcnJheUJ1ZmZlcn0gUmV0dXJucyB0aGUgY2xvbmVkIGFycmF5IGJ1ZmZlci5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBjbG9uZUFycmF5QnVmZmVyKGFycmF5QnVmZmVyKSB7XG4gICAgICB2YXIgcmVzdWx0ID0gbmV3IGFycmF5QnVmZmVyLmNvbnN0cnVjdG9yKGFycmF5QnVmZmVyLmJ5dGVMZW5ndGgpO1xuICAgICAgbmV3IFVpbnQ4QXJyYXkocmVzdWx0KS5zZXQobmV3IFVpbnQ4QXJyYXkoYXJyYXlCdWZmZXIpKTtcbiAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIGNsb25lIG9mIGBkYXRhVmlld2AuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBkYXRhVmlldyBUaGUgZGF0YSB2aWV3IHRvIGNsb25lLlxuICAgICAqIEBwYXJhbSB7Ym9vbGVhbn0gW2lzRGVlcF0gU3BlY2lmeSBhIGRlZXAgY2xvbmUuXG4gICAgICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyB0aGUgY2xvbmVkIGRhdGEgdmlldy5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBjbG9uZURhdGFWaWV3KGRhdGFWaWV3LCBpc0RlZXApIHtcbiAgICAgIHZhciBidWZmZXIgPSBpc0RlZXAgPyBjbG9uZUFycmF5QnVmZmVyKGRhdGFWaWV3LmJ1ZmZlcikgOiBkYXRhVmlldy5idWZmZXI7XG4gICAgICByZXR1cm4gbmV3IGRhdGFWaWV3LmNvbnN0cnVjdG9yKGJ1ZmZlciwgZGF0YVZpZXcuYnl0ZU9mZnNldCwgZGF0YVZpZXcuYnl0ZUxlbmd0aCk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIGNsb25lIG9mIGByZWdleHBgLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gcmVnZXhwIFRoZSByZWdleHAgdG8gY2xvbmUuXG4gICAgICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyB0aGUgY2xvbmVkIHJlZ2V4cC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBjbG9uZVJlZ0V4cChyZWdleHApIHtcbiAgICAgIHZhciByZXN1bHQgPSBuZXcgcmVnZXhwLmNvbnN0cnVjdG9yKHJlZ2V4cC5zb3VyY2UsIHJlRmxhZ3MuZXhlYyhyZWdleHApKTtcbiAgICAgIHJlc3VsdC5sYXN0SW5kZXggPSByZWdleHAubGFzdEluZGV4O1xuICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgY2xvbmUgb2YgdGhlIGBzeW1ib2xgIG9iamVjdC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtPYmplY3R9IHN5bWJvbCBUaGUgc3ltYm9sIG9iamVjdCB0byBjbG9uZS5cbiAgICAgKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIHRoZSBjbG9uZWQgc3ltYm9sIG9iamVjdC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBjbG9uZVN5bWJvbChzeW1ib2wpIHtcbiAgICAgIHJldHVybiBzeW1ib2xWYWx1ZU9mID8gT2JqZWN0KHN5bWJvbFZhbHVlT2YuY2FsbChzeW1ib2wpKSA6IHt9O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBjbG9uZSBvZiBgdHlwZWRBcnJheWAuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSB0eXBlZEFycmF5IFRoZSB0eXBlZCBhcnJheSB0byBjbG9uZS5cbiAgICAgKiBAcGFyYW0ge2Jvb2xlYW59IFtpc0RlZXBdIFNwZWNpZnkgYSBkZWVwIGNsb25lLlxuICAgICAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgdGhlIGNsb25lZCB0eXBlZCBhcnJheS5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBjbG9uZVR5cGVkQXJyYXkodHlwZWRBcnJheSwgaXNEZWVwKSB7XG4gICAgICB2YXIgYnVmZmVyID0gaXNEZWVwID8gY2xvbmVBcnJheUJ1ZmZlcih0eXBlZEFycmF5LmJ1ZmZlcikgOiB0eXBlZEFycmF5LmJ1ZmZlcjtcbiAgICAgIHJldHVybiBuZXcgdHlwZWRBcnJheS5jb25zdHJ1Y3RvcihidWZmZXIsIHR5cGVkQXJyYXkuYnl0ZU9mZnNldCwgdHlwZWRBcnJheS5sZW5ndGgpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENvbXBhcmVzIHZhbHVlcyB0byBzb3J0IHRoZW0gaW4gYXNjZW5kaW5nIG9yZGVyLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjb21wYXJlLlxuICAgICAqIEBwYXJhbSB7Kn0gb3RoZXIgVGhlIG90aGVyIHZhbHVlIHRvIGNvbXBhcmUuXG4gICAgICogQHJldHVybnMge251bWJlcn0gUmV0dXJucyB0aGUgc29ydCBvcmRlciBpbmRpY2F0b3IgZm9yIGB2YWx1ZWAuXG4gICAgICovXG4gICAgZnVuY3Rpb24gY29tcGFyZUFzY2VuZGluZyh2YWx1ZSwgb3RoZXIpIHtcbiAgICAgIGlmICh2YWx1ZSAhPT0gb3RoZXIpIHtcbiAgICAgICAgdmFyIHZhbElzRGVmaW5lZCA9IHZhbHVlICE9PSB1bmRlZmluZWQsXG4gICAgICAgICAgICB2YWxJc051bGwgPSB2YWx1ZSA9PT0gbnVsbCxcbiAgICAgICAgICAgIHZhbElzUmVmbGV4aXZlID0gdmFsdWUgPT09IHZhbHVlLFxuICAgICAgICAgICAgdmFsSXNTeW1ib2wgPSBpc1N5bWJvbCh2YWx1ZSk7XG5cbiAgICAgICAgdmFyIG90aElzRGVmaW5lZCA9IG90aGVyICE9PSB1bmRlZmluZWQsXG4gICAgICAgICAgICBvdGhJc051bGwgPSBvdGhlciA9PT0gbnVsbCxcbiAgICAgICAgICAgIG90aElzUmVmbGV4aXZlID0gb3RoZXIgPT09IG90aGVyLFxuICAgICAgICAgICAgb3RoSXNTeW1ib2wgPSBpc1N5bWJvbChvdGhlcik7XG5cbiAgICAgICAgaWYgKCghb3RoSXNOdWxsICYmICFvdGhJc1N5bWJvbCAmJiAhdmFsSXNTeW1ib2wgJiYgdmFsdWUgPiBvdGhlcikgfHxcbiAgICAgICAgICAgICh2YWxJc1N5bWJvbCAmJiBvdGhJc0RlZmluZWQgJiYgb3RoSXNSZWZsZXhpdmUgJiYgIW90aElzTnVsbCAmJiAhb3RoSXNTeW1ib2wpIHx8XG4gICAgICAgICAgICAodmFsSXNOdWxsICYmIG90aElzRGVmaW5lZCAmJiBvdGhJc1JlZmxleGl2ZSkgfHxcbiAgICAgICAgICAgICghdmFsSXNEZWZpbmVkICYmIG90aElzUmVmbGV4aXZlKSB8fFxuICAgICAgICAgICAgIXZhbElzUmVmbGV4aXZlKSB7XG4gICAgICAgICAgcmV0dXJuIDE7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKCghdmFsSXNOdWxsICYmICF2YWxJc1N5bWJvbCAmJiAhb3RoSXNTeW1ib2wgJiYgdmFsdWUgPCBvdGhlcikgfHxcbiAgICAgICAgICAgIChvdGhJc1N5bWJvbCAmJiB2YWxJc0RlZmluZWQgJiYgdmFsSXNSZWZsZXhpdmUgJiYgIXZhbElzTnVsbCAmJiAhdmFsSXNTeW1ib2wpIHx8XG4gICAgICAgICAgICAob3RoSXNOdWxsICYmIHZhbElzRGVmaW5lZCAmJiB2YWxJc1JlZmxleGl2ZSkgfHxcbiAgICAgICAgICAgICghb3RoSXNEZWZpbmVkICYmIHZhbElzUmVmbGV4aXZlKSB8fFxuICAgICAgICAgICAgIW90aElzUmVmbGV4aXZlKSB7XG4gICAgICAgICAgcmV0dXJuIC0xO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICByZXR1cm4gMDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBVc2VkIGJ5IGBfLm9yZGVyQnlgIHRvIGNvbXBhcmUgbXVsdGlwbGUgcHJvcGVydGllcyBvZiBhIHZhbHVlIHRvIGFub3RoZXJcbiAgICAgKiBhbmQgc3RhYmxlIHNvcnQgdGhlbS5cbiAgICAgKlxuICAgICAqIElmIGBvcmRlcnNgIGlzIHVuc3BlY2lmaWVkLCBhbGwgdmFsdWVzIGFyZSBzb3J0ZWQgaW4gYXNjZW5kaW5nIG9yZGVyLiBPdGhlcndpc2UsXG4gICAgICogc3BlY2lmeSBhbiBvcmRlciBvZiBcImRlc2NcIiBmb3IgZGVzY2VuZGluZyBvciBcImFzY1wiIGZvciBhc2NlbmRpbmcgc29ydCBvcmRlclxuICAgICAqIG9mIGNvcnJlc3BvbmRpbmcgdmFsdWVzLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gY29tcGFyZS5cbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb3RoZXIgVGhlIG90aGVyIG9iamVjdCB0byBjb21wYXJlLlxuICAgICAqIEBwYXJhbSB7Ym9vbGVhbltdfHN0cmluZ1tdfSBvcmRlcnMgVGhlIG9yZGVyIHRvIHNvcnQgYnkgZm9yIGVhY2ggcHJvcGVydHkuXG4gICAgICogQHJldHVybnMge251bWJlcn0gUmV0dXJucyB0aGUgc29ydCBvcmRlciBpbmRpY2F0b3IgZm9yIGBvYmplY3RgLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGNvbXBhcmVNdWx0aXBsZShvYmplY3QsIG90aGVyLCBvcmRlcnMpIHtcbiAgICAgIHZhciBpbmRleCA9IC0xLFxuICAgICAgICAgIG9iakNyaXRlcmlhID0gb2JqZWN0LmNyaXRlcmlhLFxuICAgICAgICAgIG90aENyaXRlcmlhID0gb3RoZXIuY3JpdGVyaWEsXG4gICAgICAgICAgbGVuZ3RoID0gb2JqQ3JpdGVyaWEubGVuZ3RoLFxuICAgICAgICAgIG9yZGVyc0xlbmd0aCA9IG9yZGVycy5sZW5ndGg7XG5cbiAgICAgIHdoaWxlICgrK2luZGV4IDwgbGVuZ3RoKSB7XG4gICAgICAgIHZhciByZXN1bHQgPSBjb21wYXJlQXNjZW5kaW5nKG9iakNyaXRlcmlhW2luZGV4XSwgb3RoQ3JpdGVyaWFbaW5kZXhdKTtcbiAgICAgICAgaWYgKHJlc3VsdCkge1xuICAgICAgICAgIGlmIChpbmRleCA+PSBvcmRlcnNMZW5ndGgpIHtcbiAgICAgICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgICAgICAgfVxuICAgICAgICAgIHZhciBvcmRlciA9IG9yZGVyc1tpbmRleF07XG4gICAgICAgICAgcmV0dXJuIHJlc3VsdCAqIChvcmRlciA9PSAnZGVzYycgPyAtMSA6IDEpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICAvLyBGaXhlcyBhbiBgQXJyYXkjc29ydGAgYnVnIGluIHRoZSBKUyBlbmdpbmUgZW1iZWRkZWQgaW4gQWRvYmUgYXBwbGljYXRpb25zXG4gICAgICAvLyB0aGF0IGNhdXNlcyBpdCwgdW5kZXIgY2VydGFpbiBjaXJjdW1zdGFuY2VzLCB0byBwcm92aWRlIHRoZSBzYW1lIHZhbHVlIGZvclxuICAgICAgLy8gYG9iamVjdGAgYW5kIGBvdGhlcmAuIFNlZSBodHRwczovL2dpdGh1Yi5jb20vamFzaGtlbmFzL3VuZGVyc2NvcmUvcHVsbC8xMjQ3XG4gICAgICAvLyBmb3IgbW9yZSBkZXRhaWxzLlxuICAgICAgLy9cbiAgICAgIC8vIFRoaXMgYWxzbyBlbnN1cmVzIGEgc3RhYmxlIHNvcnQgaW4gVjggYW5kIG90aGVyIGVuZ2luZXMuXG4gICAgICAvLyBTZWUgaHR0cHM6Ly9idWdzLmNocm9taXVtLm9yZy9wL3Y4L2lzc3Vlcy9kZXRhaWw/aWQ9OTAgZm9yIG1vcmUgZGV0YWlscy5cbiAgICAgIHJldHVybiBvYmplY3QuaW5kZXggLSBvdGhlci5pbmRleDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGFuIGFycmF5IHRoYXQgaXMgdGhlIGNvbXBvc2l0aW9uIG9mIHBhcnRpYWxseSBhcHBsaWVkIGFyZ3VtZW50cyxcbiAgICAgKiBwbGFjZWhvbGRlcnMsIGFuZCBwcm92aWRlZCBhcmd1bWVudHMgaW50byBhIHNpbmdsZSBhcnJheSBvZiBhcmd1bWVudHMuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGFyZ3MgVGhlIHByb3ZpZGVkIGFyZ3VtZW50cy5cbiAgICAgKiBAcGFyYW0ge0FycmF5fSBwYXJ0aWFscyBUaGUgYXJndW1lbnRzIHRvIHByZXBlbmQgdG8gdGhvc2UgcHJvdmlkZWQuXG4gICAgICogQHBhcmFtIHtBcnJheX0gaG9sZGVycyBUaGUgYHBhcnRpYWxzYCBwbGFjZWhvbGRlciBpbmRleGVzLlxuICAgICAqIEBwYXJhbXMge2Jvb2xlYW59IFtpc0N1cnJpZWRdIFNwZWNpZnkgY29tcG9zaW5nIGZvciBhIGN1cnJpZWQgZnVuY3Rpb24uXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBuZXcgYXJyYXkgb2YgY29tcG9zZWQgYXJndW1lbnRzLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGNvbXBvc2VBcmdzKGFyZ3MsIHBhcnRpYWxzLCBob2xkZXJzLCBpc0N1cnJpZWQpIHtcbiAgICAgIHZhciBhcmdzSW5kZXggPSAtMSxcbiAgICAgICAgICBhcmdzTGVuZ3RoID0gYXJncy5sZW5ndGgsXG4gICAgICAgICAgaG9sZGVyc0xlbmd0aCA9IGhvbGRlcnMubGVuZ3RoLFxuICAgICAgICAgIGxlZnRJbmRleCA9IC0xLFxuICAgICAgICAgIGxlZnRMZW5ndGggPSBwYXJ0aWFscy5sZW5ndGgsXG4gICAgICAgICAgcmFuZ2VMZW5ndGggPSBuYXRpdmVNYXgoYXJnc0xlbmd0aCAtIGhvbGRlcnNMZW5ndGgsIDApLFxuICAgICAgICAgIHJlc3VsdCA9IEFycmF5KGxlZnRMZW5ndGggKyByYW5nZUxlbmd0aCksXG4gICAgICAgICAgaXNVbmN1cnJpZWQgPSAhaXNDdXJyaWVkO1xuXG4gICAgICB3aGlsZSAoKytsZWZ0SW5kZXggPCBsZWZ0TGVuZ3RoKSB7XG4gICAgICAgIHJlc3VsdFtsZWZ0SW5kZXhdID0gcGFydGlhbHNbbGVmdEluZGV4XTtcbiAgICAgIH1cbiAgICAgIHdoaWxlICgrK2FyZ3NJbmRleCA8IGhvbGRlcnNMZW5ndGgpIHtcbiAgICAgICAgaWYgKGlzVW5jdXJyaWVkIHx8IGFyZ3NJbmRleCA8IGFyZ3NMZW5ndGgpIHtcbiAgICAgICAgICByZXN1bHRbaG9sZGVyc1thcmdzSW5kZXhdXSA9IGFyZ3NbYXJnc0luZGV4XTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgd2hpbGUgKHJhbmdlTGVuZ3RoLS0pIHtcbiAgICAgICAgcmVzdWx0W2xlZnRJbmRleCsrXSA9IGFyZ3NbYXJnc0luZGV4KytdO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGlzIGZ1bmN0aW9uIGlzIGxpa2UgYGNvbXBvc2VBcmdzYCBleGNlcHQgdGhhdCB0aGUgYXJndW1lbnRzIGNvbXBvc2l0aW9uXG4gICAgICogaXMgdGFpbG9yZWQgZm9yIGBfLnBhcnRpYWxSaWdodGAuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGFyZ3MgVGhlIHByb3ZpZGVkIGFyZ3VtZW50cy5cbiAgICAgKiBAcGFyYW0ge0FycmF5fSBwYXJ0aWFscyBUaGUgYXJndW1lbnRzIHRvIGFwcGVuZCB0byB0aG9zZSBwcm92aWRlZC5cbiAgICAgKiBAcGFyYW0ge0FycmF5fSBob2xkZXJzIFRoZSBgcGFydGlhbHNgIHBsYWNlaG9sZGVyIGluZGV4ZXMuXG4gICAgICogQHBhcmFtcyB7Ym9vbGVhbn0gW2lzQ3VycmllZF0gU3BlY2lmeSBjb21wb3NpbmcgZm9yIGEgY3VycmllZCBmdW5jdGlvbi5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIG5ldyBhcnJheSBvZiBjb21wb3NlZCBhcmd1bWVudHMuXG4gICAgICovXG4gICAgZnVuY3Rpb24gY29tcG9zZUFyZ3NSaWdodChhcmdzLCBwYXJ0aWFscywgaG9sZGVycywgaXNDdXJyaWVkKSB7XG4gICAgICB2YXIgYXJnc0luZGV4ID0gLTEsXG4gICAgICAgICAgYXJnc0xlbmd0aCA9IGFyZ3MubGVuZ3RoLFxuICAgICAgICAgIGhvbGRlcnNJbmRleCA9IC0xLFxuICAgICAgICAgIGhvbGRlcnNMZW5ndGggPSBob2xkZXJzLmxlbmd0aCxcbiAgICAgICAgICByaWdodEluZGV4ID0gLTEsXG4gICAgICAgICAgcmlnaHRMZW5ndGggPSBwYXJ0aWFscy5sZW5ndGgsXG4gICAgICAgICAgcmFuZ2VMZW5ndGggPSBuYXRpdmVNYXgoYXJnc0xlbmd0aCAtIGhvbGRlcnNMZW5ndGgsIDApLFxuICAgICAgICAgIHJlc3VsdCA9IEFycmF5KHJhbmdlTGVuZ3RoICsgcmlnaHRMZW5ndGgpLFxuICAgICAgICAgIGlzVW5jdXJyaWVkID0gIWlzQ3VycmllZDtcblxuICAgICAgd2hpbGUgKCsrYXJnc0luZGV4IDwgcmFuZ2VMZW5ndGgpIHtcbiAgICAgICAgcmVzdWx0W2FyZ3NJbmRleF0gPSBhcmdzW2FyZ3NJbmRleF07XG4gICAgICB9XG4gICAgICB2YXIgb2Zmc2V0ID0gYXJnc0luZGV4O1xuICAgICAgd2hpbGUgKCsrcmlnaHRJbmRleCA8IHJpZ2h0TGVuZ3RoKSB7XG4gICAgICAgIHJlc3VsdFtvZmZzZXQgKyByaWdodEluZGV4XSA9IHBhcnRpYWxzW3JpZ2h0SW5kZXhdO1xuICAgICAgfVxuICAgICAgd2hpbGUgKCsraG9sZGVyc0luZGV4IDwgaG9sZGVyc0xlbmd0aCkge1xuICAgICAgICBpZiAoaXNVbmN1cnJpZWQgfHwgYXJnc0luZGV4IDwgYXJnc0xlbmd0aCkge1xuICAgICAgICAgIHJlc3VsdFtvZmZzZXQgKyBob2xkZXJzW2hvbGRlcnNJbmRleF1dID0gYXJnc1thcmdzSW5kZXgrK107XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ29waWVzIHRoZSB2YWx1ZXMgb2YgYHNvdXJjZWAgdG8gYGFycmF5YC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtBcnJheX0gc291cmNlIFRoZSBhcnJheSB0byBjb3B5IHZhbHVlcyBmcm9tLlxuICAgICAqIEBwYXJhbSB7QXJyYXl9IFthcnJheT1bXV0gVGhlIGFycmF5IHRvIGNvcHkgdmFsdWVzIHRvLlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyBgYXJyYXlgLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGNvcHlBcnJheShzb3VyY2UsIGFycmF5KSB7XG4gICAgICB2YXIgaW5kZXggPSAtMSxcbiAgICAgICAgICBsZW5ndGggPSBzb3VyY2UubGVuZ3RoO1xuXG4gICAgICBhcnJheSB8fCAoYXJyYXkgPSBBcnJheShsZW5ndGgpKTtcbiAgICAgIHdoaWxlICgrK2luZGV4IDwgbGVuZ3RoKSB7XG4gICAgICAgIGFycmF5W2luZGV4XSA9IHNvdXJjZVtpbmRleF07XG4gICAgICB9XG4gICAgICByZXR1cm4gYXJyYXk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ29waWVzIHByb3BlcnRpZXMgb2YgYHNvdXJjZWAgdG8gYG9iamVjdGAuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBzb3VyY2UgVGhlIG9iamVjdCB0byBjb3B5IHByb3BlcnRpZXMgZnJvbS5cbiAgICAgKiBAcGFyYW0ge0FycmF5fSBwcm9wcyBUaGUgcHJvcGVydHkgaWRlbnRpZmllcnMgdG8gY29weS5cbiAgICAgKiBAcGFyYW0ge09iamVjdH0gW29iamVjdD17fV0gVGhlIG9iamVjdCB0byBjb3B5IHByb3BlcnRpZXMgdG8uXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gW2N1c3RvbWl6ZXJdIFRoZSBmdW5jdGlvbiB0byBjdXN0b21pemUgY29waWVkIHZhbHVlcy5cbiAgICAgKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIGBvYmplY3RgLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGNvcHlPYmplY3Qoc291cmNlLCBwcm9wcywgb2JqZWN0LCBjdXN0b21pemVyKSB7XG4gICAgICB2YXIgaXNOZXcgPSAhb2JqZWN0O1xuICAgICAgb2JqZWN0IHx8IChvYmplY3QgPSB7fSk7XG5cbiAgICAgIHZhciBpbmRleCA9IC0xLFxuICAgICAgICAgIGxlbmd0aCA9IHByb3BzLmxlbmd0aDtcblxuICAgICAgd2hpbGUgKCsraW5kZXggPCBsZW5ndGgpIHtcbiAgICAgICAgdmFyIGtleSA9IHByb3BzW2luZGV4XTtcblxuICAgICAgICB2YXIgbmV3VmFsdWUgPSBjdXN0b21pemVyXG4gICAgICAgICAgPyBjdXN0b21pemVyKG9iamVjdFtrZXldLCBzb3VyY2Vba2V5XSwga2V5LCBvYmplY3QsIHNvdXJjZSlcbiAgICAgICAgICA6IHVuZGVmaW5lZDtcblxuICAgICAgICBpZiAobmV3VmFsdWUgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgIG5ld1ZhbHVlID0gc291cmNlW2tleV07XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGlzTmV3KSB7XG4gICAgICAgICAgYmFzZUFzc2lnblZhbHVlKG9iamVjdCwga2V5LCBuZXdWYWx1ZSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgYXNzaWduVmFsdWUob2JqZWN0LCBrZXksIG5ld1ZhbHVlKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgcmV0dXJuIG9iamVjdDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDb3BpZXMgb3duIHN5bWJvbHMgb2YgYHNvdXJjZWAgdG8gYG9iamVjdGAuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBzb3VyY2UgVGhlIG9iamVjdCB0byBjb3B5IHN5bWJvbHMgZnJvbS5cbiAgICAgKiBAcGFyYW0ge09iamVjdH0gW29iamVjdD17fV0gVGhlIG9iamVjdCB0byBjb3B5IHN5bWJvbHMgdG8uXG4gICAgICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyBgb2JqZWN0YC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBjb3B5U3ltYm9scyhzb3VyY2UsIG9iamVjdCkge1xuICAgICAgcmV0dXJuIGNvcHlPYmplY3Qoc291cmNlLCBnZXRTeW1ib2xzKHNvdXJjZSksIG9iamVjdCk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ29waWVzIG93biBhbmQgaW5oZXJpdGVkIHN5bWJvbHMgb2YgYHNvdXJjZWAgdG8gYG9iamVjdGAuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBzb3VyY2UgVGhlIG9iamVjdCB0byBjb3B5IHN5bWJvbHMgZnJvbS5cbiAgICAgKiBAcGFyYW0ge09iamVjdH0gW29iamVjdD17fV0gVGhlIG9iamVjdCB0byBjb3B5IHN5bWJvbHMgdG8uXG4gICAgICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyBgb2JqZWN0YC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBjb3B5U3ltYm9sc0luKHNvdXJjZSwgb2JqZWN0KSB7XG4gICAgICByZXR1cm4gY29weU9iamVjdChzb3VyY2UsIGdldFN5bWJvbHNJbihzb3VyY2UpLCBvYmplY3QpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBmdW5jdGlvbiBsaWtlIGBfLmdyb3VwQnlgLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBzZXR0ZXIgVGhlIGZ1bmN0aW9uIHRvIHNldCBhY2N1bXVsYXRvciB2YWx1ZXMuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gW2luaXRpYWxpemVyXSBUaGUgYWNjdW11bGF0b3Igb2JqZWN0IGluaXRpYWxpemVyLlxuICAgICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IGFnZ3JlZ2F0b3IgZnVuY3Rpb24uXG4gICAgICovXG4gICAgZnVuY3Rpb24gY3JlYXRlQWdncmVnYXRvcihzZXR0ZXIsIGluaXRpYWxpemVyKSB7XG4gICAgICByZXR1cm4gZnVuY3Rpb24oY29sbGVjdGlvbiwgaXRlcmF0ZWUpIHtcbiAgICAgICAgdmFyIGZ1bmMgPSBpc0FycmF5KGNvbGxlY3Rpb24pID8gYXJyYXlBZ2dyZWdhdG9yIDogYmFzZUFnZ3JlZ2F0b3IsXG4gICAgICAgICAgICBhY2N1bXVsYXRvciA9IGluaXRpYWxpemVyID8gaW5pdGlhbGl6ZXIoKSA6IHt9O1xuXG4gICAgICAgIHJldHVybiBmdW5jKGNvbGxlY3Rpb24sIHNldHRlciwgZ2V0SXRlcmF0ZWUoaXRlcmF0ZWUsIDIpLCBhY2N1bXVsYXRvcik7XG4gICAgICB9O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBmdW5jdGlvbiBsaWtlIGBfLmFzc2lnbmAuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGFzc2lnbmVyIFRoZSBmdW5jdGlvbiB0byBhc3NpZ24gdmFsdWVzLlxuICAgICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IGFzc2lnbmVyIGZ1bmN0aW9uLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGNyZWF0ZUFzc2lnbmVyKGFzc2lnbmVyKSB7XG4gICAgICByZXR1cm4gYmFzZVJlc3QoZnVuY3Rpb24ob2JqZWN0LCBzb3VyY2VzKSB7XG4gICAgICAgIHZhciBpbmRleCA9IC0xLFxuICAgICAgICAgICAgbGVuZ3RoID0gc291cmNlcy5sZW5ndGgsXG4gICAgICAgICAgICBjdXN0b21pemVyID0gbGVuZ3RoID4gMSA/IHNvdXJjZXNbbGVuZ3RoIC0gMV0gOiB1bmRlZmluZWQsXG4gICAgICAgICAgICBndWFyZCA9IGxlbmd0aCA+IDIgPyBzb3VyY2VzWzJdIDogdW5kZWZpbmVkO1xuXG4gICAgICAgIGN1c3RvbWl6ZXIgPSAoYXNzaWduZXIubGVuZ3RoID4gMyAmJiB0eXBlb2YgY3VzdG9taXplciA9PSAnZnVuY3Rpb24nKVxuICAgICAgICAgID8gKGxlbmd0aC0tLCBjdXN0b21pemVyKVxuICAgICAgICAgIDogdW5kZWZpbmVkO1xuXG4gICAgICAgIGlmIChndWFyZCAmJiBpc0l0ZXJhdGVlQ2FsbChzb3VyY2VzWzBdLCBzb3VyY2VzWzFdLCBndWFyZCkpIHtcbiAgICAgICAgICBjdXN0b21pemVyID0gbGVuZ3RoIDwgMyA/IHVuZGVmaW5lZCA6IGN1c3RvbWl6ZXI7XG4gICAgICAgICAgbGVuZ3RoID0gMTtcbiAgICAgICAgfVxuICAgICAgICBvYmplY3QgPSBPYmplY3Qob2JqZWN0KTtcbiAgICAgICAgd2hpbGUgKCsraW5kZXggPCBsZW5ndGgpIHtcbiAgICAgICAgICB2YXIgc291cmNlID0gc291cmNlc1tpbmRleF07XG4gICAgICAgICAgaWYgKHNvdXJjZSkge1xuICAgICAgICAgICAgYXNzaWduZXIob2JqZWN0LCBzb3VyY2UsIGluZGV4LCBjdXN0b21pemVyKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIG9iamVjdDtcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBgYmFzZUVhY2hgIG9yIGBiYXNlRWFjaFJpZ2h0YCBmdW5jdGlvbi5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gZWFjaEZ1bmMgVGhlIGZ1bmN0aW9uIHRvIGl0ZXJhdGUgb3ZlciBhIGNvbGxlY3Rpb24uXG4gICAgICogQHBhcmFtIHtib29sZWFufSBbZnJvbVJpZ2h0XSBTcGVjaWZ5IGl0ZXJhdGluZyBmcm9tIHJpZ2h0IHRvIGxlZnQuXG4gICAgICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgYmFzZSBmdW5jdGlvbi5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBjcmVhdGVCYXNlRWFjaChlYWNoRnVuYywgZnJvbVJpZ2h0KSB7XG4gICAgICByZXR1cm4gZnVuY3Rpb24oY29sbGVjdGlvbiwgaXRlcmF0ZWUpIHtcbiAgICAgICAgaWYgKGNvbGxlY3Rpb24gPT0gbnVsbCkge1xuICAgICAgICAgIHJldHVybiBjb2xsZWN0aW9uO1xuICAgICAgICB9XG4gICAgICAgIGlmICghaXNBcnJheUxpa2UoY29sbGVjdGlvbikpIHtcbiAgICAgICAgICByZXR1cm4gZWFjaEZ1bmMoY29sbGVjdGlvbiwgaXRlcmF0ZWUpO1xuICAgICAgICB9XG4gICAgICAgIHZhciBsZW5ndGggPSBjb2xsZWN0aW9uLmxlbmd0aCxcbiAgICAgICAgICAgIGluZGV4ID0gZnJvbVJpZ2h0ID8gbGVuZ3RoIDogLTEsXG4gICAgICAgICAgICBpdGVyYWJsZSA9IE9iamVjdChjb2xsZWN0aW9uKTtcblxuICAgICAgICB3aGlsZSAoKGZyb21SaWdodCA/IGluZGV4LS0gOiArK2luZGV4IDwgbGVuZ3RoKSkge1xuICAgICAgICAgIGlmIChpdGVyYXRlZShpdGVyYWJsZVtpbmRleF0sIGluZGV4LCBpdGVyYWJsZSkgPT09IGZhbHNlKSB7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGNvbGxlY3Rpb247XG4gICAgICB9O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBiYXNlIGZ1bmN0aW9uIGZvciBtZXRob2RzIGxpa2UgYF8uZm9ySW5gIGFuZCBgXy5mb3JPd25gLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge2Jvb2xlYW59IFtmcm9tUmlnaHRdIFNwZWNpZnkgaXRlcmF0aW5nIGZyb20gcmlnaHQgdG8gbGVmdC5cbiAgICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyBiYXNlIGZ1bmN0aW9uLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGNyZWF0ZUJhc2VGb3IoZnJvbVJpZ2h0KSB7XG4gICAgICByZXR1cm4gZnVuY3Rpb24ob2JqZWN0LCBpdGVyYXRlZSwga2V5c0Z1bmMpIHtcbiAgICAgICAgdmFyIGluZGV4ID0gLTEsXG4gICAgICAgICAgICBpdGVyYWJsZSA9IE9iamVjdChvYmplY3QpLFxuICAgICAgICAgICAgcHJvcHMgPSBrZXlzRnVuYyhvYmplY3QpLFxuICAgICAgICAgICAgbGVuZ3RoID0gcHJvcHMubGVuZ3RoO1xuXG4gICAgICAgIHdoaWxlIChsZW5ndGgtLSkge1xuICAgICAgICAgIHZhciBrZXkgPSBwcm9wc1tmcm9tUmlnaHQgPyBsZW5ndGggOiArK2luZGV4XTtcbiAgICAgICAgICBpZiAoaXRlcmF0ZWUoaXRlcmFibGVba2V5XSwga2V5LCBpdGVyYWJsZSkgPT09IGZhbHNlKSB7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIG9iamVjdDtcbiAgICAgIH07XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIGZ1bmN0aW9uIHRoYXQgd3JhcHMgYGZ1bmNgIHRvIGludm9rZSBpdCB3aXRoIHRoZSBvcHRpb25hbCBgdGhpc2BcbiAgICAgKiBiaW5kaW5nIG9mIGB0aGlzQXJnYC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gZnVuYyBUaGUgZnVuY3Rpb24gdG8gd3JhcC5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gYml0bWFzayBUaGUgYml0bWFzayBmbGFncy4gU2VlIGBjcmVhdGVXcmFwYCBmb3IgbW9yZSBkZXRhaWxzLlxuICAgICAqIEBwYXJhbSB7Kn0gW3RoaXNBcmddIFRoZSBgdGhpc2AgYmluZGluZyBvZiBgZnVuY2AuXG4gICAgICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgd3JhcHBlZCBmdW5jdGlvbi5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBjcmVhdGVCaW5kKGZ1bmMsIGJpdG1hc2ssIHRoaXNBcmcpIHtcbiAgICAgIHZhciBpc0JpbmQgPSBiaXRtYXNrICYgV1JBUF9CSU5EX0ZMQUcsXG4gICAgICAgICAgQ3RvciA9IGNyZWF0ZUN0b3IoZnVuYyk7XG5cbiAgICAgIGZ1bmN0aW9uIHdyYXBwZXIoKSB7XG4gICAgICAgIHZhciBmbiA9ICh0aGlzICYmIHRoaXMgIT09IHJvb3QgJiYgdGhpcyBpbnN0YW5jZW9mIHdyYXBwZXIpID8gQ3RvciA6IGZ1bmM7XG4gICAgICAgIHJldHVybiBmbi5hcHBseShpc0JpbmQgPyB0aGlzQXJnIDogdGhpcywgYXJndW1lbnRzKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiB3cmFwcGVyO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBmdW5jdGlvbiBsaWtlIGBfLmxvd2VyRmlyc3RgLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gbWV0aG9kTmFtZSBUaGUgbmFtZSBvZiB0aGUgYFN0cmluZ2AgY2FzZSBtZXRob2QgdG8gdXNlLlxuICAgICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IGNhc2UgZnVuY3Rpb24uXG4gICAgICovXG4gICAgZnVuY3Rpb24gY3JlYXRlQ2FzZUZpcnN0KG1ldGhvZE5hbWUpIHtcbiAgICAgIHJldHVybiBmdW5jdGlvbihzdHJpbmcpIHtcbiAgICAgICAgc3RyaW5nID0gdG9TdHJpbmcoc3RyaW5nKTtcblxuICAgICAgICB2YXIgc3RyU3ltYm9scyA9IGhhc1VuaWNvZGUoc3RyaW5nKVxuICAgICAgICAgID8gc3RyaW5nVG9BcnJheShzdHJpbmcpXG4gICAgICAgICAgOiB1bmRlZmluZWQ7XG5cbiAgICAgICAgdmFyIGNociA9IHN0clN5bWJvbHNcbiAgICAgICAgICA/IHN0clN5bWJvbHNbMF1cbiAgICAgICAgICA6IHN0cmluZy5jaGFyQXQoMCk7XG5cbiAgICAgICAgdmFyIHRyYWlsaW5nID0gc3RyU3ltYm9sc1xuICAgICAgICAgID8gY2FzdFNsaWNlKHN0clN5bWJvbHMsIDEpLmpvaW4oJycpXG4gICAgICAgICAgOiBzdHJpbmcuc2xpY2UoMSk7XG5cbiAgICAgICAgcmV0dXJuIGNoclttZXRob2ROYW1lXSgpICsgdHJhaWxpbmc7XG4gICAgICB9O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBmdW5jdGlvbiBsaWtlIGBfLmNhbWVsQ2FzZWAuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGNhbGxiYWNrIFRoZSBmdW5jdGlvbiB0byBjb21iaW5lIGVhY2ggd29yZC5cbiAgICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyBjb21wb3VuZGVyIGZ1bmN0aW9uLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGNyZWF0ZUNvbXBvdW5kZXIoY2FsbGJhY2spIHtcbiAgICAgIHJldHVybiBmdW5jdGlvbihzdHJpbmcpIHtcbiAgICAgICAgcmV0dXJuIGFycmF5UmVkdWNlKHdvcmRzKGRlYnVycihzdHJpbmcpLnJlcGxhY2UocmVBcG9zLCAnJykpLCBjYWxsYmFjaywgJycpO1xuICAgICAgfTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgZnVuY3Rpb24gdGhhdCBwcm9kdWNlcyBhbiBpbnN0YW5jZSBvZiBgQ3RvcmAgcmVnYXJkbGVzcyBvZlxuICAgICAqIHdoZXRoZXIgaXQgd2FzIGludm9rZWQgYXMgcGFydCBvZiBhIGBuZXdgIGV4cHJlc3Npb24gb3IgYnkgYGNhbGxgIG9yIGBhcHBseWAuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IEN0b3IgVGhlIGNvbnN0cnVjdG9yIHRvIHdyYXAuXG4gICAgICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgd3JhcHBlZCBmdW5jdGlvbi5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBjcmVhdGVDdG9yKEN0b3IpIHtcbiAgICAgIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICAgICAgLy8gVXNlIGEgYHN3aXRjaGAgc3RhdGVtZW50IHRvIHdvcmsgd2l0aCBjbGFzcyBjb25zdHJ1Y3RvcnMuIFNlZVxuICAgICAgICAvLyBodHRwOi8vZWNtYS1pbnRlcm5hdGlvbmFsLm9yZy9lY21hLTI2Mi83LjAvI3NlYy1lY21hc2NyaXB0LWZ1bmN0aW9uLW9iamVjdHMtY2FsbC10aGlzYXJndW1lbnQtYXJndW1lbnRzbGlzdFxuICAgICAgICAvLyBmb3IgbW9yZSBkZXRhaWxzLlxuICAgICAgICB2YXIgYXJncyA9IGFyZ3VtZW50cztcbiAgICAgICAgc3dpdGNoIChhcmdzLmxlbmd0aCkge1xuICAgICAgICAgIGNhc2UgMDogcmV0dXJuIG5ldyBDdG9yO1xuICAgICAgICAgIGNhc2UgMTogcmV0dXJuIG5ldyBDdG9yKGFyZ3NbMF0pO1xuICAgICAgICAgIGNhc2UgMjogcmV0dXJuIG5ldyBDdG9yKGFyZ3NbMF0sIGFyZ3NbMV0pO1xuICAgICAgICAgIGNhc2UgMzogcmV0dXJuIG5ldyBDdG9yKGFyZ3NbMF0sIGFyZ3NbMV0sIGFyZ3NbMl0pO1xuICAgICAgICAgIGNhc2UgNDogcmV0dXJuIG5ldyBDdG9yKGFyZ3NbMF0sIGFyZ3NbMV0sIGFyZ3NbMl0sIGFyZ3NbM10pO1xuICAgICAgICAgIGNhc2UgNTogcmV0dXJuIG5ldyBDdG9yKGFyZ3NbMF0sIGFyZ3NbMV0sIGFyZ3NbMl0sIGFyZ3NbM10sIGFyZ3NbNF0pO1xuICAgICAgICAgIGNhc2UgNjogcmV0dXJuIG5ldyBDdG9yKGFyZ3NbMF0sIGFyZ3NbMV0sIGFyZ3NbMl0sIGFyZ3NbM10sIGFyZ3NbNF0sIGFyZ3NbNV0pO1xuICAgICAgICAgIGNhc2UgNzogcmV0dXJuIG5ldyBDdG9yKGFyZ3NbMF0sIGFyZ3NbMV0sIGFyZ3NbMl0sIGFyZ3NbM10sIGFyZ3NbNF0sIGFyZ3NbNV0sIGFyZ3NbNl0pO1xuICAgICAgICB9XG4gICAgICAgIHZhciB0aGlzQmluZGluZyA9IGJhc2VDcmVhdGUoQ3Rvci5wcm90b3R5cGUpLFxuICAgICAgICAgICAgcmVzdWx0ID0gQ3Rvci5hcHBseSh0aGlzQmluZGluZywgYXJncyk7XG5cbiAgICAgICAgLy8gTWltaWMgdGhlIGNvbnN0cnVjdG9yJ3MgYHJldHVybmAgYmVoYXZpb3IuXG4gICAgICAgIC8vIFNlZSBodHRwczovL2VzNS5naXRodWIuaW8vI3gxMy4yLjIgZm9yIG1vcmUgZGV0YWlscy5cbiAgICAgICAgcmV0dXJuIGlzT2JqZWN0KHJlc3VsdCkgPyByZXN1bHQgOiB0aGlzQmluZGluZztcbiAgICAgIH07XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIGZ1bmN0aW9uIHRoYXQgd3JhcHMgYGZ1bmNgIHRvIGVuYWJsZSBjdXJyeWluZy5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gZnVuYyBUaGUgZnVuY3Rpb24gdG8gd3JhcC5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gYml0bWFzayBUaGUgYml0bWFzayBmbGFncy4gU2VlIGBjcmVhdGVXcmFwYCBmb3IgbW9yZSBkZXRhaWxzLlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBhcml0eSBUaGUgYXJpdHkgb2YgYGZ1bmNgLlxuICAgICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IHdyYXBwZWQgZnVuY3Rpb24uXG4gICAgICovXG4gICAgZnVuY3Rpb24gY3JlYXRlQ3VycnkoZnVuYywgYml0bWFzaywgYXJpdHkpIHtcbiAgICAgIHZhciBDdG9yID0gY3JlYXRlQ3RvcihmdW5jKTtcblxuICAgICAgZnVuY3Rpb24gd3JhcHBlcigpIHtcbiAgICAgICAgdmFyIGxlbmd0aCA9IGFyZ3VtZW50cy5sZW5ndGgsXG4gICAgICAgICAgICBhcmdzID0gQXJyYXkobGVuZ3RoKSxcbiAgICAgICAgICAgIGluZGV4ID0gbGVuZ3RoLFxuICAgICAgICAgICAgcGxhY2Vob2xkZXIgPSBnZXRIb2xkZXIod3JhcHBlcik7XG5cbiAgICAgICAgd2hpbGUgKGluZGV4LS0pIHtcbiAgICAgICAgICBhcmdzW2luZGV4XSA9IGFyZ3VtZW50c1tpbmRleF07XG4gICAgICAgIH1cbiAgICAgICAgdmFyIGhvbGRlcnMgPSAobGVuZ3RoIDwgMyAmJiBhcmdzWzBdICE9PSBwbGFjZWhvbGRlciAmJiBhcmdzW2xlbmd0aCAtIDFdICE9PSBwbGFjZWhvbGRlcilcbiAgICAgICAgICA/IFtdXG4gICAgICAgICAgOiByZXBsYWNlSG9sZGVycyhhcmdzLCBwbGFjZWhvbGRlcik7XG5cbiAgICAgICAgbGVuZ3RoIC09IGhvbGRlcnMubGVuZ3RoO1xuICAgICAgICBpZiAobGVuZ3RoIDwgYXJpdHkpIHtcbiAgICAgICAgICByZXR1cm4gY3JlYXRlUmVjdXJyeShcbiAgICAgICAgICAgIGZ1bmMsIGJpdG1hc2ssIGNyZWF0ZUh5YnJpZCwgd3JhcHBlci5wbGFjZWhvbGRlciwgdW5kZWZpbmVkLFxuICAgICAgICAgICAgYXJncywgaG9sZGVycywgdW5kZWZpbmVkLCB1bmRlZmluZWQsIGFyaXR5IC0gbGVuZ3RoKTtcbiAgICAgICAgfVxuICAgICAgICB2YXIgZm4gPSAodGhpcyAmJiB0aGlzICE9PSByb290ICYmIHRoaXMgaW5zdGFuY2VvZiB3cmFwcGVyKSA/IEN0b3IgOiBmdW5jO1xuICAgICAgICByZXR1cm4gYXBwbHkoZm4sIHRoaXMsIGFyZ3MpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHdyYXBwZXI7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIGBfLmZpbmRgIG9yIGBfLmZpbmRMYXN0YCBmdW5jdGlvbi5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gZmluZEluZGV4RnVuYyBUaGUgZnVuY3Rpb24gdG8gZmluZCB0aGUgY29sbGVjdGlvbiBpbmRleC5cbiAgICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyBmaW5kIGZ1bmN0aW9uLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGNyZWF0ZUZpbmQoZmluZEluZGV4RnVuYykge1xuICAgICAgcmV0dXJuIGZ1bmN0aW9uKGNvbGxlY3Rpb24sIHByZWRpY2F0ZSwgZnJvbUluZGV4KSB7XG4gICAgICAgIHZhciBpdGVyYWJsZSA9IE9iamVjdChjb2xsZWN0aW9uKTtcbiAgICAgICAgaWYgKCFpc0FycmF5TGlrZShjb2xsZWN0aW9uKSkge1xuICAgICAgICAgIHZhciBpdGVyYXRlZSA9IGdldEl0ZXJhdGVlKHByZWRpY2F0ZSwgMyk7XG4gICAgICAgICAgY29sbGVjdGlvbiA9IGtleXMoY29sbGVjdGlvbik7XG4gICAgICAgICAgcHJlZGljYXRlID0gZnVuY3Rpb24oa2V5KSB7IHJldHVybiBpdGVyYXRlZShpdGVyYWJsZVtrZXldLCBrZXksIGl0ZXJhYmxlKTsgfTtcbiAgICAgICAgfVxuICAgICAgICB2YXIgaW5kZXggPSBmaW5kSW5kZXhGdW5jKGNvbGxlY3Rpb24sIHByZWRpY2F0ZSwgZnJvbUluZGV4KTtcbiAgICAgICAgcmV0dXJuIGluZGV4ID4gLTEgPyBpdGVyYWJsZVtpdGVyYXRlZSA/IGNvbGxlY3Rpb25baW5kZXhdIDogaW5kZXhdIDogdW5kZWZpbmVkO1xuICAgICAgfTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgYF8uZmxvd2Agb3IgYF8uZmxvd1JpZ2h0YCBmdW5jdGlvbi5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtib29sZWFufSBbZnJvbVJpZ2h0XSBTcGVjaWZ5IGl0ZXJhdGluZyBmcm9tIHJpZ2h0IHRvIGxlZnQuXG4gICAgICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgZmxvdyBmdW5jdGlvbi5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBjcmVhdGVGbG93KGZyb21SaWdodCkge1xuICAgICAgcmV0dXJuIGZsYXRSZXN0KGZ1bmN0aW9uKGZ1bmNzKSB7XG4gICAgICAgIHZhciBsZW5ndGggPSBmdW5jcy5sZW5ndGgsXG4gICAgICAgICAgICBpbmRleCA9IGxlbmd0aCxcbiAgICAgICAgICAgIHByZXJlcSA9IExvZGFzaFdyYXBwZXIucHJvdG90eXBlLnRocnU7XG5cbiAgICAgICAgaWYgKGZyb21SaWdodCkge1xuICAgICAgICAgIGZ1bmNzLnJldmVyc2UoKTtcbiAgICAgICAgfVxuICAgICAgICB3aGlsZSAoaW5kZXgtLSkge1xuICAgICAgICAgIHZhciBmdW5jID0gZnVuY3NbaW5kZXhdO1xuICAgICAgICAgIGlmICh0eXBlb2YgZnVuYyAhPSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKEZVTkNfRVJST1JfVEVYVCk7XG4gICAgICAgICAgfVxuICAgICAgICAgIGlmIChwcmVyZXEgJiYgIXdyYXBwZXIgJiYgZ2V0RnVuY05hbWUoZnVuYykgPT0gJ3dyYXBwZXInKSB7XG4gICAgICAgICAgICB2YXIgd3JhcHBlciA9IG5ldyBMb2Rhc2hXcmFwcGVyKFtdLCB0cnVlKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgaW5kZXggPSB3cmFwcGVyID8gaW5kZXggOiBsZW5ndGg7XG4gICAgICAgIHdoaWxlICgrK2luZGV4IDwgbGVuZ3RoKSB7XG4gICAgICAgICAgZnVuYyA9IGZ1bmNzW2luZGV4XTtcblxuICAgICAgICAgIHZhciBmdW5jTmFtZSA9IGdldEZ1bmNOYW1lKGZ1bmMpLFxuICAgICAgICAgICAgICBkYXRhID0gZnVuY05hbWUgPT0gJ3dyYXBwZXInID8gZ2V0RGF0YShmdW5jKSA6IHVuZGVmaW5lZDtcblxuICAgICAgICAgIGlmIChkYXRhICYmIGlzTGF6aWFibGUoZGF0YVswXSkgJiZcbiAgICAgICAgICAgICAgICBkYXRhWzFdID09IChXUkFQX0FSWV9GTEFHIHwgV1JBUF9DVVJSWV9GTEFHIHwgV1JBUF9QQVJUSUFMX0ZMQUcgfCBXUkFQX1JFQVJHX0ZMQUcpICYmXG4gICAgICAgICAgICAgICAgIWRhdGFbNF0ubGVuZ3RoICYmIGRhdGFbOV0gPT0gMVxuICAgICAgICAgICAgICApIHtcbiAgICAgICAgICAgIHdyYXBwZXIgPSB3cmFwcGVyW2dldEZ1bmNOYW1lKGRhdGFbMF0pXS5hcHBseSh3cmFwcGVyLCBkYXRhWzNdKTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgd3JhcHBlciA9IChmdW5jLmxlbmd0aCA9PSAxICYmIGlzTGF6aWFibGUoZnVuYykpXG4gICAgICAgICAgICAgID8gd3JhcHBlcltmdW5jTmFtZV0oKVxuICAgICAgICAgICAgICA6IHdyYXBwZXIudGhydShmdW5jKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgICAgICAgIHZhciBhcmdzID0gYXJndW1lbnRzLFxuICAgICAgICAgICAgICB2YWx1ZSA9IGFyZ3NbMF07XG5cbiAgICAgICAgICBpZiAod3JhcHBlciAmJiBhcmdzLmxlbmd0aCA9PSAxICYmIGlzQXJyYXkodmFsdWUpKSB7XG4gICAgICAgICAgICByZXR1cm4gd3JhcHBlci5wbGFudCh2YWx1ZSkudmFsdWUoKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgdmFyIGluZGV4ID0gMCxcbiAgICAgICAgICAgICAgcmVzdWx0ID0gbGVuZ3RoID8gZnVuY3NbaW5kZXhdLmFwcGx5KHRoaXMsIGFyZ3MpIDogdmFsdWU7XG5cbiAgICAgICAgICB3aGlsZSAoKytpbmRleCA8IGxlbmd0aCkge1xuICAgICAgICAgICAgcmVzdWx0ID0gZnVuY3NbaW5kZXhdLmNhbGwodGhpcywgcmVzdWx0KTtcbiAgICAgICAgICB9XG4gICAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICAgICAgfTtcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBmdW5jdGlvbiB0aGF0IHdyYXBzIGBmdW5jYCB0byBpbnZva2UgaXQgd2l0aCBvcHRpb25hbCBgdGhpc2BcbiAgICAgKiBiaW5kaW5nIG9mIGB0aGlzQXJnYCwgcGFydGlhbCBhcHBsaWNhdGlvbiwgYW5kIGN1cnJ5aW5nLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufHN0cmluZ30gZnVuYyBUaGUgZnVuY3Rpb24gb3IgbWV0aG9kIG5hbWUgdG8gd3JhcC5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gYml0bWFzayBUaGUgYml0bWFzayBmbGFncy4gU2VlIGBjcmVhdGVXcmFwYCBmb3IgbW9yZSBkZXRhaWxzLlxuICAgICAqIEBwYXJhbSB7Kn0gW3RoaXNBcmddIFRoZSBgdGhpc2AgYmluZGluZyBvZiBgZnVuY2AuXG4gICAgICogQHBhcmFtIHtBcnJheX0gW3BhcnRpYWxzXSBUaGUgYXJndW1lbnRzIHRvIHByZXBlbmQgdG8gdGhvc2UgcHJvdmlkZWQgdG9cbiAgICAgKiAgdGhlIG5ldyBmdW5jdGlvbi5cbiAgICAgKiBAcGFyYW0ge0FycmF5fSBbaG9sZGVyc10gVGhlIGBwYXJ0aWFsc2AgcGxhY2Vob2xkZXIgaW5kZXhlcy5cbiAgICAgKiBAcGFyYW0ge0FycmF5fSBbcGFydGlhbHNSaWdodF0gVGhlIGFyZ3VtZW50cyB0byBhcHBlbmQgdG8gdGhvc2UgcHJvdmlkZWRcbiAgICAgKiAgdG8gdGhlIG5ldyBmdW5jdGlvbi5cbiAgICAgKiBAcGFyYW0ge0FycmF5fSBbaG9sZGVyc1JpZ2h0XSBUaGUgYHBhcnRpYWxzUmlnaHRgIHBsYWNlaG9sZGVyIGluZGV4ZXMuXG4gICAgICogQHBhcmFtIHtBcnJheX0gW2FyZ1Bvc10gVGhlIGFyZ3VtZW50IHBvc2l0aW9ucyBvZiB0aGUgbmV3IGZ1bmN0aW9uLlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBbYXJ5XSBUaGUgYXJpdHkgY2FwIG9mIGBmdW5jYC5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gW2FyaXR5XSBUaGUgYXJpdHkgb2YgYGZ1bmNgLlxuICAgICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IHdyYXBwZWQgZnVuY3Rpb24uXG4gICAgICovXG4gICAgZnVuY3Rpb24gY3JlYXRlSHlicmlkKGZ1bmMsIGJpdG1hc2ssIHRoaXNBcmcsIHBhcnRpYWxzLCBob2xkZXJzLCBwYXJ0aWFsc1JpZ2h0LCBob2xkZXJzUmlnaHQsIGFyZ1BvcywgYXJ5LCBhcml0eSkge1xuICAgICAgdmFyIGlzQXJ5ID0gYml0bWFzayAmIFdSQVBfQVJZX0ZMQUcsXG4gICAgICAgICAgaXNCaW5kID0gYml0bWFzayAmIFdSQVBfQklORF9GTEFHLFxuICAgICAgICAgIGlzQmluZEtleSA9IGJpdG1hc2sgJiBXUkFQX0JJTkRfS0VZX0ZMQUcsXG4gICAgICAgICAgaXNDdXJyaWVkID0gYml0bWFzayAmIChXUkFQX0NVUlJZX0ZMQUcgfCBXUkFQX0NVUlJZX1JJR0hUX0ZMQUcpLFxuICAgICAgICAgIGlzRmxpcCA9IGJpdG1hc2sgJiBXUkFQX0ZMSVBfRkxBRyxcbiAgICAgICAgICBDdG9yID0gaXNCaW5kS2V5ID8gdW5kZWZpbmVkIDogY3JlYXRlQ3RvcihmdW5jKTtcblxuICAgICAgZnVuY3Rpb24gd3JhcHBlcigpIHtcbiAgICAgICAgdmFyIGxlbmd0aCA9IGFyZ3VtZW50cy5sZW5ndGgsXG4gICAgICAgICAgICBhcmdzID0gQXJyYXkobGVuZ3RoKSxcbiAgICAgICAgICAgIGluZGV4ID0gbGVuZ3RoO1xuXG4gICAgICAgIHdoaWxlIChpbmRleC0tKSB7XG4gICAgICAgICAgYXJnc1tpbmRleF0gPSBhcmd1bWVudHNbaW5kZXhdO1xuICAgICAgICB9XG4gICAgICAgIGlmIChpc0N1cnJpZWQpIHtcbiAgICAgICAgICB2YXIgcGxhY2Vob2xkZXIgPSBnZXRIb2xkZXIod3JhcHBlciksXG4gICAgICAgICAgICAgIGhvbGRlcnNDb3VudCA9IGNvdW50SG9sZGVycyhhcmdzLCBwbGFjZWhvbGRlcik7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHBhcnRpYWxzKSB7XG4gICAgICAgICAgYXJncyA9IGNvbXBvc2VBcmdzKGFyZ3MsIHBhcnRpYWxzLCBob2xkZXJzLCBpc0N1cnJpZWQpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChwYXJ0aWFsc1JpZ2h0KSB7XG4gICAgICAgICAgYXJncyA9IGNvbXBvc2VBcmdzUmlnaHQoYXJncywgcGFydGlhbHNSaWdodCwgaG9sZGVyc1JpZ2h0LCBpc0N1cnJpZWQpO1xuICAgICAgICB9XG4gICAgICAgIGxlbmd0aCAtPSBob2xkZXJzQ291bnQ7XG4gICAgICAgIGlmIChpc0N1cnJpZWQgJiYgbGVuZ3RoIDwgYXJpdHkpIHtcbiAgICAgICAgICB2YXIgbmV3SG9sZGVycyA9IHJlcGxhY2VIb2xkZXJzKGFyZ3MsIHBsYWNlaG9sZGVyKTtcbiAgICAgICAgICByZXR1cm4gY3JlYXRlUmVjdXJyeShcbiAgICAgICAgICAgIGZ1bmMsIGJpdG1hc2ssIGNyZWF0ZUh5YnJpZCwgd3JhcHBlci5wbGFjZWhvbGRlciwgdGhpc0FyZyxcbiAgICAgICAgICAgIGFyZ3MsIG5ld0hvbGRlcnMsIGFyZ1BvcywgYXJ5LCBhcml0eSAtIGxlbmd0aFxuICAgICAgICAgICk7XG4gICAgICAgIH1cbiAgICAgICAgdmFyIHRoaXNCaW5kaW5nID0gaXNCaW5kID8gdGhpc0FyZyA6IHRoaXMsXG4gICAgICAgICAgICBmbiA9IGlzQmluZEtleSA/IHRoaXNCaW5kaW5nW2Z1bmNdIDogZnVuYztcblxuICAgICAgICBsZW5ndGggPSBhcmdzLmxlbmd0aDtcbiAgICAgICAgaWYgKGFyZ1Bvcykge1xuICAgICAgICAgIGFyZ3MgPSByZW9yZGVyKGFyZ3MsIGFyZ1Bvcyk7XG4gICAgICAgIH0gZWxzZSBpZiAoaXNGbGlwICYmIGxlbmd0aCA+IDEpIHtcbiAgICAgICAgICBhcmdzLnJldmVyc2UoKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoaXNBcnkgJiYgYXJ5IDwgbGVuZ3RoKSB7XG4gICAgICAgICAgYXJncy5sZW5ndGggPSBhcnk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHRoaXMgJiYgdGhpcyAhPT0gcm9vdCAmJiB0aGlzIGluc3RhbmNlb2Ygd3JhcHBlcikge1xuICAgICAgICAgIGZuID0gQ3RvciB8fCBjcmVhdGVDdG9yKGZuKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gZm4uYXBwbHkodGhpc0JpbmRpbmcsIGFyZ3MpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHdyYXBwZXI7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIGZ1bmN0aW9uIGxpa2UgYF8uaW52ZXJ0QnlgLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBzZXR0ZXIgVGhlIGZ1bmN0aW9uIHRvIHNldCBhY2N1bXVsYXRvciB2YWx1ZXMuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gdG9JdGVyYXRlZSBUaGUgZnVuY3Rpb24gdG8gcmVzb2x2ZSBpdGVyYXRlZXMuXG4gICAgICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgaW52ZXJ0ZXIgZnVuY3Rpb24uXG4gICAgICovXG4gICAgZnVuY3Rpb24gY3JlYXRlSW52ZXJ0ZXIoc2V0dGVyLCB0b0l0ZXJhdGVlKSB7XG4gICAgICByZXR1cm4gZnVuY3Rpb24ob2JqZWN0LCBpdGVyYXRlZSkge1xuICAgICAgICByZXR1cm4gYmFzZUludmVydGVyKG9iamVjdCwgc2V0dGVyLCB0b0l0ZXJhdGVlKGl0ZXJhdGVlKSwge30pO1xuICAgICAgfTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgZnVuY3Rpb24gdGhhdCBwZXJmb3JtcyBhIG1hdGhlbWF0aWNhbCBvcGVyYXRpb24gb24gdHdvIHZhbHVlcy5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gb3BlcmF0b3IgVGhlIGZ1bmN0aW9uIHRvIHBlcmZvcm0gdGhlIG9wZXJhdGlvbi5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gW2RlZmF1bHRWYWx1ZV0gVGhlIHZhbHVlIHVzZWQgZm9yIGB1bmRlZmluZWRgIGFyZ3VtZW50cy5cbiAgICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyBtYXRoZW1hdGljYWwgb3BlcmF0aW9uIGZ1bmN0aW9uLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGNyZWF0ZU1hdGhPcGVyYXRpb24ob3BlcmF0b3IsIGRlZmF1bHRWYWx1ZSkge1xuICAgICAgcmV0dXJuIGZ1bmN0aW9uKHZhbHVlLCBvdGhlcikge1xuICAgICAgICB2YXIgcmVzdWx0O1xuICAgICAgICBpZiAodmFsdWUgPT09IHVuZGVmaW5lZCAmJiBvdGhlciA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgcmV0dXJuIGRlZmF1bHRWYWx1ZTtcbiAgICAgICAgfVxuICAgICAgICBpZiAodmFsdWUgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgIHJlc3VsdCA9IHZhbHVlO1xuICAgICAgICB9XG4gICAgICAgIGlmIChvdGhlciAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgaWYgKHJlc3VsdCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICByZXR1cm4gb3RoZXI7XG4gICAgICAgICAgfVxuICAgICAgICAgIGlmICh0eXBlb2YgdmFsdWUgPT0gJ3N0cmluZycgfHwgdHlwZW9mIG90aGVyID09ICdzdHJpbmcnKSB7XG4gICAgICAgICAgICB2YWx1ZSA9IGJhc2VUb1N0cmluZyh2YWx1ZSk7XG4gICAgICAgICAgICBvdGhlciA9IGJhc2VUb1N0cmluZyhvdGhlcik7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHZhbHVlID0gYmFzZVRvTnVtYmVyKHZhbHVlKTtcbiAgICAgICAgICAgIG90aGVyID0gYmFzZVRvTnVtYmVyKG90aGVyKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgcmVzdWx0ID0gb3BlcmF0b3IodmFsdWUsIG90aGVyKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgICAgfTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgZnVuY3Rpb24gbGlrZSBgXy5vdmVyYC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gYXJyYXlGdW5jIFRoZSBmdW5jdGlvbiB0byBpdGVyYXRlIG92ZXIgaXRlcmF0ZWVzLlxuICAgICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IG92ZXIgZnVuY3Rpb24uXG4gICAgICovXG4gICAgZnVuY3Rpb24gY3JlYXRlT3ZlcihhcnJheUZ1bmMpIHtcbiAgICAgIHJldHVybiBmbGF0UmVzdChmdW5jdGlvbihpdGVyYXRlZXMpIHtcbiAgICAgICAgaXRlcmF0ZWVzID0gYXJyYXlNYXAoaXRlcmF0ZWVzLCBiYXNlVW5hcnkoZ2V0SXRlcmF0ZWUoKSkpO1xuICAgICAgICByZXR1cm4gYmFzZVJlc3QoZnVuY3Rpb24oYXJncykge1xuICAgICAgICAgIHZhciB0aGlzQXJnID0gdGhpcztcbiAgICAgICAgICByZXR1cm4gYXJyYXlGdW5jKGl0ZXJhdGVlcywgZnVuY3Rpb24oaXRlcmF0ZWUpIHtcbiAgICAgICAgICAgIHJldHVybiBhcHBseShpdGVyYXRlZSwgdGhpc0FyZywgYXJncyk7XG4gICAgICAgICAgfSk7XG4gICAgICAgIH0pO1xuICAgICAgfSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyB0aGUgcGFkZGluZyBmb3IgYHN0cmluZ2AgYmFzZWQgb24gYGxlbmd0aGAuIFRoZSBgY2hhcnNgIHN0cmluZ1xuICAgICAqIGlzIHRydW5jYXRlZCBpZiB0aGUgbnVtYmVyIG9mIGNoYXJhY3RlcnMgZXhjZWVkcyBgbGVuZ3RoYC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IGxlbmd0aCBUaGUgcGFkZGluZyBsZW5ndGguXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IFtjaGFycz0nICddIFRoZSBzdHJpbmcgdXNlZCBhcyBwYWRkaW5nLlxuICAgICAqIEByZXR1cm5zIHtzdHJpbmd9IFJldHVybnMgdGhlIHBhZGRpbmcgZm9yIGBzdHJpbmdgLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGNyZWF0ZVBhZGRpbmcobGVuZ3RoLCBjaGFycykge1xuICAgICAgY2hhcnMgPSBjaGFycyA9PT0gdW5kZWZpbmVkID8gJyAnIDogYmFzZVRvU3RyaW5nKGNoYXJzKTtcblxuICAgICAgdmFyIGNoYXJzTGVuZ3RoID0gY2hhcnMubGVuZ3RoO1xuICAgICAgaWYgKGNoYXJzTGVuZ3RoIDwgMikge1xuICAgICAgICByZXR1cm4gY2hhcnNMZW5ndGggPyBiYXNlUmVwZWF0KGNoYXJzLCBsZW5ndGgpIDogY2hhcnM7XG4gICAgICB9XG4gICAgICB2YXIgcmVzdWx0ID0gYmFzZVJlcGVhdChjaGFycywgbmF0aXZlQ2VpbChsZW5ndGggLyBzdHJpbmdTaXplKGNoYXJzKSkpO1xuICAgICAgcmV0dXJuIGhhc1VuaWNvZGUoY2hhcnMpXG4gICAgICAgID8gY2FzdFNsaWNlKHN0cmluZ1RvQXJyYXkocmVzdWx0KSwgMCwgbGVuZ3RoKS5qb2luKCcnKVxuICAgICAgICA6IHJlc3VsdC5zbGljZSgwLCBsZW5ndGgpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBmdW5jdGlvbiB0aGF0IHdyYXBzIGBmdW5jYCB0byBpbnZva2UgaXQgd2l0aCB0aGUgYHRoaXNgIGJpbmRpbmdcbiAgICAgKiBvZiBgdGhpc0FyZ2AgYW5kIGBwYXJ0aWFsc2AgcHJlcGVuZGVkIHRvIHRoZSBhcmd1bWVudHMgaXQgcmVjZWl2ZXMuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGZ1bmMgVGhlIGZ1bmN0aW9uIHRvIHdyYXAuXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IGJpdG1hc2sgVGhlIGJpdG1hc2sgZmxhZ3MuIFNlZSBgY3JlYXRlV3JhcGAgZm9yIG1vcmUgZGV0YWlscy5cbiAgICAgKiBAcGFyYW0geyp9IHRoaXNBcmcgVGhlIGB0aGlzYCBiaW5kaW5nIG9mIGBmdW5jYC5cbiAgICAgKiBAcGFyYW0ge0FycmF5fSBwYXJ0aWFscyBUaGUgYXJndW1lbnRzIHRvIHByZXBlbmQgdG8gdGhvc2UgcHJvdmlkZWQgdG9cbiAgICAgKiAgdGhlIG5ldyBmdW5jdGlvbi5cbiAgICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyB3cmFwcGVkIGZ1bmN0aW9uLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGNyZWF0ZVBhcnRpYWwoZnVuYywgYml0bWFzaywgdGhpc0FyZywgcGFydGlhbHMpIHtcbiAgICAgIHZhciBpc0JpbmQgPSBiaXRtYXNrICYgV1JBUF9CSU5EX0ZMQUcsXG4gICAgICAgICAgQ3RvciA9IGNyZWF0ZUN0b3IoZnVuYyk7XG5cbiAgICAgIGZ1bmN0aW9uIHdyYXBwZXIoKSB7XG4gICAgICAgIHZhciBhcmdzSW5kZXggPSAtMSxcbiAgICAgICAgICAgIGFyZ3NMZW5ndGggPSBhcmd1bWVudHMubGVuZ3RoLFxuICAgICAgICAgICAgbGVmdEluZGV4ID0gLTEsXG4gICAgICAgICAgICBsZWZ0TGVuZ3RoID0gcGFydGlhbHMubGVuZ3RoLFxuICAgICAgICAgICAgYXJncyA9IEFycmF5KGxlZnRMZW5ndGggKyBhcmdzTGVuZ3RoKSxcbiAgICAgICAgICAgIGZuID0gKHRoaXMgJiYgdGhpcyAhPT0gcm9vdCAmJiB0aGlzIGluc3RhbmNlb2Ygd3JhcHBlcikgPyBDdG9yIDogZnVuYztcblxuICAgICAgICB3aGlsZSAoKytsZWZ0SW5kZXggPCBsZWZ0TGVuZ3RoKSB7XG4gICAgICAgICAgYXJnc1tsZWZ0SW5kZXhdID0gcGFydGlhbHNbbGVmdEluZGV4XTtcbiAgICAgICAgfVxuICAgICAgICB3aGlsZSAoYXJnc0xlbmd0aC0tKSB7XG4gICAgICAgICAgYXJnc1tsZWZ0SW5kZXgrK10gPSBhcmd1bWVudHNbKythcmdzSW5kZXhdO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBhcHBseShmbiwgaXNCaW5kID8gdGhpc0FyZyA6IHRoaXMsIGFyZ3MpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHdyYXBwZXI7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIGBfLnJhbmdlYCBvciBgXy5yYW5nZVJpZ2h0YCBmdW5jdGlvbi5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtib29sZWFufSBbZnJvbVJpZ2h0XSBTcGVjaWZ5IGl0ZXJhdGluZyBmcm9tIHJpZ2h0IHRvIGxlZnQuXG4gICAgICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgcmFuZ2UgZnVuY3Rpb24uXG4gICAgICovXG4gICAgZnVuY3Rpb24gY3JlYXRlUmFuZ2UoZnJvbVJpZ2h0KSB7XG4gICAgICByZXR1cm4gZnVuY3Rpb24oc3RhcnQsIGVuZCwgc3RlcCkge1xuICAgICAgICBpZiAoc3RlcCAmJiB0eXBlb2Ygc3RlcCAhPSAnbnVtYmVyJyAmJiBpc0l0ZXJhdGVlQ2FsbChzdGFydCwgZW5kLCBzdGVwKSkge1xuICAgICAgICAgIGVuZCA9IHN0ZXAgPSB1bmRlZmluZWQ7XG4gICAgICAgIH1cbiAgICAgICAgLy8gRW5zdXJlIHRoZSBzaWduIG9mIGAtMGAgaXMgcHJlc2VydmVkLlxuICAgICAgICBzdGFydCA9IHRvRmluaXRlKHN0YXJ0KTtcbiAgICAgICAgaWYgKGVuZCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgZW5kID0gc3RhcnQ7XG4gICAgICAgICAgc3RhcnQgPSAwO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGVuZCA9IHRvRmluaXRlKGVuZCk7XG4gICAgICAgIH1cbiAgICAgICAgc3RlcCA9IHN0ZXAgPT09IHVuZGVmaW5lZCA/IChzdGFydCA8IGVuZCA/IDEgOiAtMSkgOiB0b0Zpbml0ZShzdGVwKTtcbiAgICAgICAgcmV0dXJuIGJhc2VSYW5nZShzdGFydCwgZW5kLCBzdGVwLCBmcm9tUmlnaHQpO1xuICAgICAgfTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgZnVuY3Rpb24gdGhhdCBwZXJmb3JtcyBhIHJlbGF0aW9uYWwgb3BlcmF0aW9uIG9uIHR3byB2YWx1ZXMuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IG9wZXJhdG9yIFRoZSBmdW5jdGlvbiB0byBwZXJmb3JtIHRoZSBvcGVyYXRpb24uXG4gICAgICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgcmVsYXRpb25hbCBvcGVyYXRpb24gZnVuY3Rpb24uXG4gICAgICovXG4gICAgZnVuY3Rpb24gY3JlYXRlUmVsYXRpb25hbE9wZXJhdGlvbihvcGVyYXRvcikge1xuICAgICAgcmV0dXJuIGZ1bmN0aW9uKHZhbHVlLCBvdGhlcikge1xuICAgICAgICBpZiAoISh0eXBlb2YgdmFsdWUgPT0gJ3N0cmluZycgJiYgdHlwZW9mIG90aGVyID09ICdzdHJpbmcnKSkge1xuICAgICAgICAgIHZhbHVlID0gdG9OdW1iZXIodmFsdWUpO1xuICAgICAgICAgIG90aGVyID0gdG9OdW1iZXIob3RoZXIpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBvcGVyYXRvcih2YWx1ZSwgb3RoZXIpO1xuICAgICAgfTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgZnVuY3Rpb24gdGhhdCB3cmFwcyBgZnVuY2AgdG8gY29udGludWUgY3VycnlpbmcuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGZ1bmMgVGhlIGZ1bmN0aW9uIHRvIHdyYXAuXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IGJpdG1hc2sgVGhlIGJpdG1hc2sgZmxhZ3MuIFNlZSBgY3JlYXRlV3JhcGAgZm9yIG1vcmUgZGV0YWlscy5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSB3cmFwRnVuYyBUaGUgZnVuY3Rpb24gdG8gY3JlYXRlIHRoZSBgZnVuY2Agd3JhcHBlci5cbiAgICAgKiBAcGFyYW0geyp9IHBsYWNlaG9sZGVyIFRoZSBwbGFjZWhvbGRlciB2YWx1ZS5cbiAgICAgKiBAcGFyYW0geyp9IFt0aGlzQXJnXSBUaGUgYHRoaXNgIGJpbmRpbmcgb2YgYGZ1bmNgLlxuICAgICAqIEBwYXJhbSB7QXJyYXl9IFtwYXJ0aWFsc10gVGhlIGFyZ3VtZW50cyB0byBwcmVwZW5kIHRvIHRob3NlIHByb3ZpZGVkIHRvXG4gICAgICogIHRoZSBuZXcgZnVuY3Rpb24uXG4gICAgICogQHBhcmFtIHtBcnJheX0gW2hvbGRlcnNdIFRoZSBgcGFydGlhbHNgIHBsYWNlaG9sZGVyIGluZGV4ZXMuXG4gICAgICogQHBhcmFtIHtBcnJheX0gW2FyZ1Bvc10gVGhlIGFyZ3VtZW50IHBvc2l0aW9ucyBvZiB0aGUgbmV3IGZ1bmN0aW9uLlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBbYXJ5XSBUaGUgYXJpdHkgY2FwIG9mIGBmdW5jYC5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gW2FyaXR5XSBUaGUgYXJpdHkgb2YgYGZ1bmNgLlxuICAgICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IHdyYXBwZWQgZnVuY3Rpb24uXG4gICAgICovXG4gICAgZnVuY3Rpb24gY3JlYXRlUmVjdXJyeShmdW5jLCBiaXRtYXNrLCB3cmFwRnVuYywgcGxhY2Vob2xkZXIsIHRoaXNBcmcsIHBhcnRpYWxzLCBob2xkZXJzLCBhcmdQb3MsIGFyeSwgYXJpdHkpIHtcbiAgICAgIHZhciBpc0N1cnJ5ID0gYml0bWFzayAmIFdSQVBfQ1VSUllfRkxBRyxcbiAgICAgICAgICBuZXdIb2xkZXJzID0gaXNDdXJyeSA/IGhvbGRlcnMgOiB1bmRlZmluZWQsXG4gICAgICAgICAgbmV3SG9sZGVyc1JpZ2h0ID0gaXNDdXJyeSA/IHVuZGVmaW5lZCA6IGhvbGRlcnMsXG4gICAgICAgICAgbmV3UGFydGlhbHMgPSBpc0N1cnJ5ID8gcGFydGlhbHMgOiB1bmRlZmluZWQsXG4gICAgICAgICAgbmV3UGFydGlhbHNSaWdodCA9IGlzQ3VycnkgPyB1bmRlZmluZWQgOiBwYXJ0aWFscztcblxuICAgICAgYml0bWFzayB8PSAoaXNDdXJyeSA/IFdSQVBfUEFSVElBTF9GTEFHIDogV1JBUF9QQVJUSUFMX1JJR0hUX0ZMQUcpO1xuICAgICAgYml0bWFzayAmPSB+KGlzQ3VycnkgPyBXUkFQX1BBUlRJQUxfUklHSFRfRkxBRyA6IFdSQVBfUEFSVElBTF9GTEFHKTtcblxuICAgICAgaWYgKCEoYml0bWFzayAmIFdSQVBfQ1VSUllfQk9VTkRfRkxBRykpIHtcbiAgICAgICAgYml0bWFzayAmPSB+KFdSQVBfQklORF9GTEFHIHwgV1JBUF9CSU5EX0tFWV9GTEFHKTtcbiAgICAgIH1cbiAgICAgIHZhciBuZXdEYXRhID0gW1xuICAgICAgICBmdW5jLCBiaXRtYXNrLCB0aGlzQXJnLCBuZXdQYXJ0aWFscywgbmV3SG9sZGVycywgbmV3UGFydGlhbHNSaWdodCxcbiAgICAgICAgbmV3SG9sZGVyc1JpZ2h0LCBhcmdQb3MsIGFyeSwgYXJpdHlcbiAgICAgIF07XG5cbiAgICAgIHZhciByZXN1bHQgPSB3cmFwRnVuYy5hcHBseSh1bmRlZmluZWQsIG5ld0RhdGEpO1xuICAgICAgaWYgKGlzTGF6aWFibGUoZnVuYykpIHtcbiAgICAgICAgc2V0RGF0YShyZXN1bHQsIG5ld0RhdGEpO1xuICAgICAgfVxuICAgICAgcmVzdWx0LnBsYWNlaG9sZGVyID0gcGxhY2Vob2xkZXI7XG4gICAgICByZXR1cm4gc2V0V3JhcFRvU3RyaW5nKHJlc3VsdCwgZnVuYywgYml0bWFzayk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIGZ1bmN0aW9uIGxpa2UgYF8ucm91bmRgLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gbWV0aG9kTmFtZSBUaGUgbmFtZSBvZiB0aGUgYE1hdGhgIG1ldGhvZCB0byB1c2Ugd2hlbiByb3VuZGluZy5cbiAgICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyByb3VuZCBmdW5jdGlvbi5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBjcmVhdGVSb3VuZChtZXRob2ROYW1lKSB7XG4gICAgICB2YXIgZnVuYyA9IE1hdGhbbWV0aG9kTmFtZV07XG4gICAgICByZXR1cm4gZnVuY3Rpb24obnVtYmVyLCBwcmVjaXNpb24pIHtcbiAgICAgICAgbnVtYmVyID0gdG9OdW1iZXIobnVtYmVyKTtcbiAgICAgICAgcHJlY2lzaW9uID0gcHJlY2lzaW9uID09IG51bGwgPyAwIDogbmF0aXZlTWluKHRvSW50ZWdlcihwcmVjaXNpb24pLCAyOTIpO1xuICAgICAgICBpZiAocHJlY2lzaW9uICYmIG5hdGl2ZUlzRmluaXRlKG51bWJlcikpIHtcbiAgICAgICAgICAvLyBTaGlmdCB3aXRoIGV4cG9uZW50aWFsIG5vdGF0aW9uIHRvIGF2b2lkIGZsb2F0aW5nLXBvaW50IGlzc3Vlcy5cbiAgICAgICAgICAvLyBTZWUgW01ETl0oaHR0cHM6Ly9tZG4uaW8vcm91bmQjRXhhbXBsZXMpIGZvciBtb3JlIGRldGFpbHMuXG4gICAgICAgICAgdmFyIHBhaXIgPSAodG9TdHJpbmcobnVtYmVyKSArICdlJykuc3BsaXQoJ2UnKSxcbiAgICAgICAgICAgICAgdmFsdWUgPSBmdW5jKHBhaXJbMF0gKyAnZScgKyAoK3BhaXJbMV0gKyBwcmVjaXNpb24pKTtcblxuICAgICAgICAgIHBhaXIgPSAodG9TdHJpbmcodmFsdWUpICsgJ2UnKS5zcGxpdCgnZScpO1xuICAgICAgICAgIHJldHVybiArKHBhaXJbMF0gKyAnZScgKyAoK3BhaXJbMV0gLSBwcmVjaXNpb24pKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gZnVuYyhudW1iZXIpO1xuICAgICAgfTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgc2V0IG9iamVjdCBvZiBgdmFsdWVzYC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtBcnJheX0gdmFsdWVzIFRoZSB2YWx1ZXMgdG8gYWRkIHRvIHRoZSBzZXQuXG4gICAgICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyB0aGUgbmV3IHNldC5cbiAgICAgKi9cbiAgICB2YXIgY3JlYXRlU2V0ID0gIShTZXQgJiYgKDEgLyBzZXRUb0FycmF5KG5ldyBTZXQoWywtMF0pKVsxXSkgPT0gSU5GSU5JVFkpID8gbm9vcCA6IGZ1bmN0aW9uKHZhbHVlcykge1xuICAgICAgcmV0dXJuIG5ldyBTZXQodmFsdWVzKTtcbiAgICB9O1xuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIGBfLnRvUGFpcnNgIG9yIGBfLnRvUGFpcnNJbmAgZnVuY3Rpb24uXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGtleXNGdW5jIFRoZSBmdW5jdGlvbiB0byBnZXQgdGhlIGtleXMgb2YgYSBnaXZlbiBvYmplY3QuXG4gICAgICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgcGFpcnMgZnVuY3Rpb24uXG4gICAgICovXG4gICAgZnVuY3Rpb24gY3JlYXRlVG9QYWlycyhrZXlzRnVuYykge1xuICAgICAgcmV0dXJuIGZ1bmN0aW9uKG9iamVjdCkge1xuICAgICAgICB2YXIgdGFnID0gZ2V0VGFnKG9iamVjdCk7XG4gICAgICAgIGlmICh0YWcgPT0gbWFwVGFnKSB7XG4gICAgICAgICAgcmV0dXJuIG1hcFRvQXJyYXkob2JqZWN0KTtcbiAgICAgICAgfVxuICAgICAgICBpZiAodGFnID09IHNldFRhZykge1xuICAgICAgICAgIHJldHVybiBzZXRUb1BhaXJzKG9iamVjdCk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGJhc2VUb1BhaXJzKG9iamVjdCwga2V5c0Z1bmMob2JqZWN0KSk7XG4gICAgICB9O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBmdW5jdGlvbiB0aGF0IGVpdGhlciBjdXJyaWVzIG9yIGludm9rZXMgYGZ1bmNgIHdpdGggb3B0aW9uYWxcbiAgICAgKiBgdGhpc2AgYmluZGluZyBhbmQgcGFydGlhbGx5IGFwcGxpZWQgYXJndW1lbnRzLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufHN0cmluZ30gZnVuYyBUaGUgZnVuY3Rpb24gb3IgbWV0aG9kIG5hbWUgdG8gd3JhcC5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gYml0bWFzayBUaGUgYml0bWFzayBmbGFncy5cbiAgICAgKiAgICAxIC0gYF8uYmluZGBcbiAgICAgKiAgICAyIC0gYF8uYmluZEtleWBcbiAgICAgKiAgICA0IC0gYF8uY3VycnlgIG9yIGBfLmN1cnJ5UmlnaHRgIG9mIGEgYm91bmQgZnVuY3Rpb25cbiAgICAgKiAgICA4IC0gYF8uY3VycnlgXG4gICAgICogICAxNiAtIGBfLmN1cnJ5UmlnaHRgXG4gICAgICogICAzMiAtIGBfLnBhcnRpYWxgXG4gICAgICogICA2NCAtIGBfLnBhcnRpYWxSaWdodGBcbiAgICAgKiAgMTI4IC0gYF8ucmVhcmdgXG4gICAgICogIDI1NiAtIGBfLmFyeWBcbiAgICAgKiAgNTEyIC0gYF8uZmxpcGBcbiAgICAgKiBAcGFyYW0geyp9IFt0aGlzQXJnXSBUaGUgYHRoaXNgIGJpbmRpbmcgb2YgYGZ1bmNgLlxuICAgICAqIEBwYXJhbSB7QXJyYXl9IFtwYXJ0aWFsc10gVGhlIGFyZ3VtZW50cyB0byBiZSBwYXJ0aWFsbHkgYXBwbGllZC5cbiAgICAgKiBAcGFyYW0ge0FycmF5fSBbaG9sZGVyc10gVGhlIGBwYXJ0aWFsc2AgcGxhY2Vob2xkZXIgaW5kZXhlcy5cbiAgICAgKiBAcGFyYW0ge0FycmF5fSBbYXJnUG9zXSBUaGUgYXJndW1lbnQgcG9zaXRpb25zIG9mIHRoZSBuZXcgZnVuY3Rpb24uXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IFthcnldIFRoZSBhcml0eSBjYXAgb2YgYGZ1bmNgLlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBbYXJpdHldIFRoZSBhcml0eSBvZiBgZnVuY2AuXG4gICAgICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgd3JhcHBlZCBmdW5jdGlvbi5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBjcmVhdGVXcmFwKGZ1bmMsIGJpdG1hc2ssIHRoaXNBcmcsIHBhcnRpYWxzLCBob2xkZXJzLCBhcmdQb3MsIGFyeSwgYXJpdHkpIHtcbiAgICAgIHZhciBpc0JpbmRLZXkgPSBiaXRtYXNrICYgV1JBUF9CSU5EX0tFWV9GTEFHO1xuICAgICAgaWYgKCFpc0JpbmRLZXkgJiYgdHlwZW9mIGZ1bmMgIT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKEZVTkNfRVJST1JfVEVYVCk7XG4gICAgICB9XG4gICAgICB2YXIgbGVuZ3RoID0gcGFydGlhbHMgPyBwYXJ0aWFscy5sZW5ndGggOiAwO1xuICAgICAgaWYgKCFsZW5ndGgpIHtcbiAgICAgICAgYml0bWFzayAmPSB+KFdSQVBfUEFSVElBTF9GTEFHIHwgV1JBUF9QQVJUSUFMX1JJR0hUX0ZMQUcpO1xuICAgICAgICBwYXJ0aWFscyA9IGhvbGRlcnMgPSB1bmRlZmluZWQ7XG4gICAgICB9XG4gICAgICBhcnkgPSBhcnkgPT09IHVuZGVmaW5lZCA/IGFyeSA6IG5hdGl2ZU1heCh0b0ludGVnZXIoYXJ5KSwgMCk7XG4gICAgICBhcml0eSA9IGFyaXR5ID09PSB1bmRlZmluZWQgPyBhcml0eSA6IHRvSW50ZWdlcihhcml0eSk7XG4gICAgICBsZW5ndGggLT0gaG9sZGVycyA/IGhvbGRlcnMubGVuZ3RoIDogMDtcblxuICAgICAgaWYgKGJpdG1hc2sgJiBXUkFQX1BBUlRJQUxfUklHSFRfRkxBRykge1xuICAgICAgICB2YXIgcGFydGlhbHNSaWdodCA9IHBhcnRpYWxzLFxuICAgICAgICAgICAgaG9sZGVyc1JpZ2h0ID0gaG9sZGVycztcblxuICAgICAgICBwYXJ0aWFscyA9IGhvbGRlcnMgPSB1bmRlZmluZWQ7XG4gICAgICB9XG4gICAgICB2YXIgZGF0YSA9IGlzQmluZEtleSA/IHVuZGVmaW5lZCA6IGdldERhdGEoZnVuYyk7XG5cbiAgICAgIHZhciBuZXdEYXRhID0gW1xuICAgICAgICBmdW5jLCBiaXRtYXNrLCB0aGlzQXJnLCBwYXJ0aWFscywgaG9sZGVycywgcGFydGlhbHNSaWdodCwgaG9sZGVyc1JpZ2h0LFxuICAgICAgICBhcmdQb3MsIGFyeSwgYXJpdHlcbiAgICAgIF07XG5cbiAgICAgIGlmIChkYXRhKSB7XG4gICAgICAgIG1lcmdlRGF0YShuZXdEYXRhLCBkYXRhKTtcbiAgICAgIH1cbiAgICAgIGZ1bmMgPSBuZXdEYXRhWzBdO1xuICAgICAgYml0bWFzayA9IG5ld0RhdGFbMV07XG4gICAgICB0aGlzQXJnID0gbmV3RGF0YVsyXTtcbiAgICAgIHBhcnRpYWxzID0gbmV3RGF0YVszXTtcbiAgICAgIGhvbGRlcnMgPSBuZXdEYXRhWzRdO1xuICAgICAgYXJpdHkgPSBuZXdEYXRhWzldID0gbmV3RGF0YVs5XSA9PT0gdW5kZWZpbmVkXG4gICAgICAgID8gKGlzQmluZEtleSA/IDAgOiBmdW5jLmxlbmd0aClcbiAgICAgICAgOiBuYXRpdmVNYXgobmV3RGF0YVs5XSAtIGxlbmd0aCwgMCk7XG5cbiAgICAgIGlmICghYXJpdHkgJiYgYml0bWFzayAmIChXUkFQX0NVUlJZX0ZMQUcgfCBXUkFQX0NVUlJZX1JJR0hUX0ZMQUcpKSB7XG4gICAgICAgIGJpdG1hc2sgJj0gfihXUkFQX0NVUlJZX0ZMQUcgfCBXUkFQX0NVUlJZX1JJR0hUX0ZMQUcpO1xuICAgICAgfVxuICAgICAgaWYgKCFiaXRtYXNrIHx8IGJpdG1hc2sgPT0gV1JBUF9CSU5EX0ZMQUcpIHtcbiAgICAgICAgdmFyIHJlc3VsdCA9IGNyZWF0ZUJpbmQoZnVuYywgYml0bWFzaywgdGhpc0FyZyk7XG4gICAgICB9IGVsc2UgaWYgKGJpdG1hc2sgPT0gV1JBUF9DVVJSWV9GTEFHIHx8IGJpdG1hc2sgPT0gV1JBUF9DVVJSWV9SSUdIVF9GTEFHKSB7XG4gICAgICAgIHJlc3VsdCA9IGNyZWF0ZUN1cnJ5KGZ1bmMsIGJpdG1hc2ssIGFyaXR5KTtcbiAgICAgIH0gZWxzZSBpZiAoKGJpdG1hc2sgPT0gV1JBUF9QQVJUSUFMX0ZMQUcgfHwgYml0bWFzayA9PSAoV1JBUF9CSU5EX0ZMQUcgfCBXUkFQX1BBUlRJQUxfRkxBRykpICYmICFob2xkZXJzLmxlbmd0aCkge1xuICAgICAgICByZXN1bHQgPSBjcmVhdGVQYXJ0aWFsKGZ1bmMsIGJpdG1hc2ssIHRoaXNBcmcsIHBhcnRpYWxzKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJlc3VsdCA9IGNyZWF0ZUh5YnJpZC5hcHBseSh1bmRlZmluZWQsIG5ld0RhdGEpO1xuICAgICAgfVxuICAgICAgdmFyIHNldHRlciA9IGRhdGEgPyBiYXNlU2V0RGF0YSA6IHNldERhdGE7XG4gICAgICByZXR1cm4gc2V0V3JhcFRvU3RyaW5nKHNldHRlcihyZXN1bHQsIG5ld0RhdGEpLCBmdW5jLCBiaXRtYXNrKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBVc2VkIGJ5IGBfLmRlZmF1bHRzYCB0byBjdXN0b21pemUgaXRzIGBfLmFzc2lnbkluYCB1c2UgdG8gYXNzaWduIHByb3BlcnRpZXNcbiAgICAgKiBvZiBzb3VyY2Ugb2JqZWN0cyB0byB0aGUgZGVzdGluYXRpb24gb2JqZWN0IGZvciBhbGwgZGVzdGluYXRpb24gcHJvcGVydGllc1xuICAgICAqIHRoYXQgcmVzb2x2ZSB0byBgdW5kZWZpbmVkYC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHsqfSBvYmpWYWx1ZSBUaGUgZGVzdGluYXRpb24gdmFsdWUuXG4gICAgICogQHBhcmFtIHsqfSBzcmNWYWx1ZSBUaGUgc291cmNlIHZhbHVlLlxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgVGhlIGtleSBvZiB0aGUgcHJvcGVydHkgdG8gYXNzaWduLlxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIHBhcmVudCBvYmplY3Qgb2YgYG9ialZhbHVlYC5cbiAgICAgKiBAcmV0dXJucyB7Kn0gUmV0dXJucyB0aGUgdmFsdWUgdG8gYXNzaWduLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGN1c3RvbURlZmF1bHRzQXNzaWduSW4ob2JqVmFsdWUsIHNyY1ZhbHVlLCBrZXksIG9iamVjdCkge1xuICAgICAgaWYgKG9ialZhbHVlID09PSB1bmRlZmluZWQgfHxcbiAgICAgICAgICAoZXEob2JqVmFsdWUsIG9iamVjdFByb3RvW2tleV0pICYmICFoYXNPd25Qcm9wZXJ0eS5jYWxsKG9iamVjdCwga2V5KSkpIHtcbiAgICAgICAgcmV0dXJuIHNyY1ZhbHVlO1xuICAgICAgfVxuICAgICAgcmV0dXJuIG9ialZhbHVlO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFVzZWQgYnkgYF8uZGVmYXVsdHNEZWVwYCB0byBjdXN0b21pemUgaXRzIGBfLm1lcmdlYCB1c2UgdG8gbWVyZ2Ugc291cmNlXG4gICAgICogb2JqZWN0cyBpbnRvIGRlc3RpbmF0aW9uIG9iamVjdHMgdGhhdCBhcmUgcGFzc2VkIHRocnUuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7Kn0gb2JqVmFsdWUgVGhlIGRlc3RpbmF0aW9uIHZhbHVlLlxuICAgICAqIEBwYXJhbSB7Kn0gc3JjVmFsdWUgVGhlIHNvdXJjZSB2YWx1ZS5cbiAgICAgKiBAcGFyYW0ge3N0cmluZ30ga2V5IFRoZSBrZXkgb2YgdGhlIHByb3BlcnR5IHRvIG1lcmdlLlxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIHBhcmVudCBvYmplY3Qgb2YgYG9ialZhbHVlYC5cbiAgICAgKiBAcGFyYW0ge09iamVjdH0gc291cmNlIFRoZSBwYXJlbnQgb2JqZWN0IG9mIGBzcmNWYWx1ZWAuXG4gICAgICogQHBhcmFtIHtPYmplY3R9IFtzdGFja10gVHJhY2tzIHRyYXZlcnNlZCBzb3VyY2UgdmFsdWVzIGFuZCB0aGVpciBtZXJnZWRcbiAgICAgKiAgY291bnRlcnBhcnRzLlxuICAgICAqIEByZXR1cm5zIHsqfSBSZXR1cm5zIHRoZSB2YWx1ZSB0byBhc3NpZ24uXG4gICAgICovXG4gICAgZnVuY3Rpb24gY3VzdG9tRGVmYXVsdHNNZXJnZShvYmpWYWx1ZSwgc3JjVmFsdWUsIGtleSwgb2JqZWN0LCBzb3VyY2UsIHN0YWNrKSB7XG4gICAgICBpZiAoaXNPYmplY3Qob2JqVmFsdWUpICYmIGlzT2JqZWN0KHNyY1ZhbHVlKSkge1xuICAgICAgICAvLyBSZWN1cnNpdmVseSBtZXJnZSBvYmplY3RzIGFuZCBhcnJheXMgKHN1c2NlcHRpYmxlIHRvIGNhbGwgc3RhY2sgbGltaXRzKS5cbiAgICAgICAgc3RhY2suc2V0KHNyY1ZhbHVlLCBvYmpWYWx1ZSk7XG4gICAgICAgIGJhc2VNZXJnZShvYmpWYWx1ZSwgc3JjVmFsdWUsIHVuZGVmaW5lZCwgY3VzdG9tRGVmYXVsdHNNZXJnZSwgc3RhY2spO1xuICAgICAgICBzdGFja1snZGVsZXRlJ10oc3JjVmFsdWUpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIG9ialZhbHVlO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFVzZWQgYnkgYF8ub21pdGAgdG8gY3VzdG9taXplIGl0cyBgXy5jbG9uZURlZXBgIHVzZSB0byBvbmx5IGNsb25lIHBsYWluXG4gICAgICogb2JqZWN0cy5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gaW5zcGVjdC5cbiAgICAgKiBAcGFyYW0ge3N0cmluZ30ga2V5IFRoZSBrZXkgb2YgdGhlIHByb3BlcnR5IHRvIGluc3BlY3QuXG4gICAgICogQHJldHVybnMgeyp9IFJldHVybnMgdGhlIHVuY2xvbmVkIHZhbHVlIG9yIGB1bmRlZmluZWRgIHRvIGRlZmVyIGNsb25pbmcgdG8gYF8uY2xvbmVEZWVwYC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBjdXN0b21PbWl0Q2xvbmUodmFsdWUpIHtcbiAgICAgIHJldHVybiBpc1BsYWluT2JqZWN0KHZhbHVlKSA/IHVuZGVmaW5lZCA6IHZhbHVlO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEEgc3BlY2lhbGl6ZWQgdmVyc2lvbiBvZiBgYmFzZUlzRXF1YWxEZWVwYCBmb3IgYXJyYXlzIHdpdGggc3VwcG9ydCBmb3JcbiAgICAgKiBwYXJ0aWFsIGRlZXAgY29tcGFyaXNvbnMuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBjb21wYXJlLlxuICAgICAqIEBwYXJhbSB7QXJyYXl9IG90aGVyIFRoZSBvdGhlciBhcnJheSB0byBjb21wYXJlLlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBiaXRtYXNrIFRoZSBiaXRtYXNrIGZsYWdzLiBTZWUgYGJhc2VJc0VxdWFsYCBmb3IgbW9yZSBkZXRhaWxzLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGN1c3RvbWl6ZXIgVGhlIGZ1bmN0aW9uIHRvIGN1c3RvbWl6ZSBjb21wYXJpc29ucy5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBlcXVhbEZ1bmMgVGhlIGZ1bmN0aW9uIHRvIGRldGVybWluZSBlcXVpdmFsZW50cyBvZiB2YWx1ZXMuXG4gICAgICogQHBhcmFtIHtPYmplY3R9IHN0YWNrIFRyYWNrcyB0cmF2ZXJzZWQgYGFycmF5YCBhbmQgYG90aGVyYCBvYmplY3RzLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiB0aGUgYXJyYXlzIGFyZSBlcXVpdmFsZW50LCBlbHNlIGBmYWxzZWAuXG4gICAgICovXG4gICAgZnVuY3Rpb24gZXF1YWxBcnJheXMoYXJyYXksIG90aGVyLCBiaXRtYXNrLCBjdXN0b21pemVyLCBlcXVhbEZ1bmMsIHN0YWNrKSB7XG4gICAgICB2YXIgaXNQYXJ0aWFsID0gYml0bWFzayAmIENPTVBBUkVfUEFSVElBTF9GTEFHLFxuICAgICAgICAgIGFyckxlbmd0aCA9IGFycmF5Lmxlbmd0aCxcbiAgICAgICAgICBvdGhMZW5ndGggPSBvdGhlci5sZW5ndGg7XG5cbiAgICAgIGlmIChhcnJMZW5ndGggIT0gb3RoTGVuZ3RoICYmICEoaXNQYXJ0aWFsICYmIG90aExlbmd0aCA+IGFyckxlbmd0aCkpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgfVxuICAgICAgLy8gQ2hlY2sgdGhhdCBjeWNsaWMgdmFsdWVzIGFyZSBlcXVhbC5cbiAgICAgIHZhciBhcnJTdGFja2VkID0gc3RhY2suZ2V0KGFycmF5KTtcbiAgICAgIHZhciBvdGhTdGFja2VkID0gc3RhY2suZ2V0KG90aGVyKTtcbiAgICAgIGlmIChhcnJTdGFja2VkICYmIG90aFN0YWNrZWQpIHtcbiAgICAgICAgcmV0dXJuIGFyclN0YWNrZWQgPT0gb3RoZXIgJiYgb3RoU3RhY2tlZCA9PSBhcnJheTtcbiAgICAgIH1cbiAgICAgIHZhciBpbmRleCA9IC0xLFxuICAgICAgICAgIHJlc3VsdCA9IHRydWUsXG4gICAgICAgICAgc2VlbiA9IChiaXRtYXNrICYgQ09NUEFSRV9VTk9SREVSRURfRkxBRykgPyBuZXcgU2V0Q2FjaGUgOiB1bmRlZmluZWQ7XG5cbiAgICAgIHN0YWNrLnNldChhcnJheSwgb3RoZXIpO1xuICAgICAgc3RhY2suc2V0KG90aGVyLCBhcnJheSk7XG5cbiAgICAgIC8vIElnbm9yZSBub24taW5kZXggcHJvcGVydGllcy5cbiAgICAgIHdoaWxlICgrK2luZGV4IDwgYXJyTGVuZ3RoKSB7XG4gICAgICAgIHZhciBhcnJWYWx1ZSA9IGFycmF5W2luZGV4XSxcbiAgICAgICAgICAgIG90aFZhbHVlID0gb3RoZXJbaW5kZXhdO1xuXG4gICAgICAgIGlmIChjdXN0b21pemVyKSB7XG4gICAgICAgICAgdmFyIGNvbXBhcmVkID0gaXNQYXJ0aWFsXG4gICAgICAgICAgICA/IGN1c3RvbWl6ZXIob3RoVmFsdWUsIGFyclZhbHVlLCBpbmRleCwgb3RoZXIsIGFycmF5LCBzdGFjaylcbiAgICAgICAgICAgIDogY3VzdG9taXplcihhcnJWYWx1ZSwgb3RoVmFsdWUsIGluZGV4LCBhcnJheSwgb3RoZXIsIHN0YWNrKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoY29tcGFyZWQgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgIGlmIChjb21wYXJlZCkge1xuICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgfVxuICAgICAgICAgIHJlc3VsdCA9IGZhbHNlO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICAgIC8vIFJlY3Vyc2l2ZWx5IGNvbXBhcmUgYXJyYXlzIChzdXNjZXB0aWJsZSB0byBjYWxsIHN0YWNrIGxpbWl0cykuXG4gICAgICAgIGlmIChzZWVuKSB7XG4gICAgICAgICAgaWYgKCFhcnJheVNvbWUob3RoZXIsIGZ1bmN0aW9uKG90aFZhbHVlLCBvdGhJbmRleCkge1xuICAgICAgICAgICAgICAgIGlmICghY2FjaGVIYXMoc2Vlbiwgb3RoSW5kZXgpICYmXG4gICAgICAgICAgICAgICAgICAgIChhcnJWYWx1ZSA9PT0gb3RoVmFsdWUgfHwgZXF1YWxGdW5jKGFyclZhbHVlLCBvdGhWYWx1ZSwgYml0bWFzaywgY3VzdG9taXplciwgc3RhY2spKSkge1xuICAgICAgICAgICAgICAgICAgcmV0dXJuIHNlZW4ucHVzaChvdGhJbmRleCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICB9KSkge1xuICAgICAgICAgICAgcmVzdWx0ID0gZmFsc2U7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSBpZiAoIShcbiAgICAgICAgICAgICAgYXJyVmFsdWUgPT09IG90aFZhbHVlIHx8XG4gICAgICAgICAgICAgICAgZXF1YWxGdW5jKGFyclZhbHVlLCBvdGhWYWx1ZSwgYml0bWFzaywgY3VzdG9taXplciwgc3RhY2spXG4gICAgICAgICAgICApKSB7XG4gICAgICAgICAgcmVzdWx0ID0gZmFsc2U7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHN0YWNrWydkZWxldGUnXShhcnJheSk7XG4gICAgICBzdGFja1snZGVsZXRlJ10ob3RoZXIpO1xuICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBBIHNwZWNpYWxpemVkIHZlcnNpb24gb2YgYGJhc2VJc0VxdWFsRGVlcGAgZm9yIGNvbXBhcmluZyBvYmplY3RzIG9mXG4gICAgICogdGhlIHNhbWUgYHRvU3RyaW5nVGFnYC5cbiAgICAgKlxuICAgICAqICoqTm90ZToqKiBUaGlzIGZ1bmN0aW9uIG9ubHkgc3VwcG9ydHMgY29tcGFyaW5nIHZhbHVlcyB3aXRoIHRhZ3Mgb2ZcbiAgICAgKiBgQm9vbGVhbmAsIGBEYXRlYCwgYEVycm9yYCwgYE51bWJlcmAsIGBSZWdFeHBgLCBvciBgU3RyaW5nYC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIGNvbXBhcmUuXG4gICAgICogQHBhcmFtIHtPYmplY3R9IG90aGVyIFRoZSBvdGhlciBvYmplY3QgdG8gY29tcGFyZS5cbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gdGFnIFRoZSBgdG9TdHJpbmdUYWdgIG9mIHRoZSBvYmplY3RzIHRvIGNvbXBhcmUuXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IGJpdG1hc2sgVGhlIGJpdG1hc2sgZmxhZ3MuIFNlZSBgYmFzZUlzRXF1YWxgIGZvciBtb3JlIGRldGFpbHMuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gY3VzdG9taXplciBUaGUgZnVuY3Rpb24gdG8gY3VzdG9taXplIGNvbXBhcmlzb25zLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGVxdWFsRnVuYyBUaGUgZnVuY3Rpb24gdG8gZGV0ZXJtaW5lIGVxdWl2YWxlbnRzIG9mIHZhbHVlcy5cbiAgICAgKiBAcGFyYW0ge09iamVjdH0gc3RhY2sgVHJhY2tzIHRyYXZlcnNlZCBgb2JqZWN0YCBhbmQgYG90aGVyYCBvYmplY3RzLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiB0aGUgb2JqZWN0cyBhcmUgZXF1aXZhbGVudCwgZWxzZSBgZmFsc2VgLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGVxdWFsQnlUYWcob2JqZWN0LCBvdGhlciwgdGFnLCBiaXRtYXNrLCBjdXN0b21pemVyLCBlcXVhbEZ1bmMsIHN0YWNrKSB7XG4gICAgICBzd2l0Y2ggKHRhZykge1xuICAgICAgICBjYXNlIGRhdGFWaWV3VGFnOlxuICAgICAgICAgIGlmICgob2JqZWN0LmJ5dGVMZW5ndGggIT0gb3RoZXIuYnl0ZUxlbmd0aCkgfHxcbiAgICAgICAgICAgICAgKG9iamVjdC5ieXRlT2Zmc2V0ICE9IG90aGVyLmJ5dGVPZmZzZXQpKSB7XG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgfVxuICAgICAgICAgIG9iamVjdCA9IG9iamVjdC5idWZmZXI7XG4gICAgICAgICAgb3RoZXIgPSBvdGhlci5idWZmZXI7XG5cbiAgICAgICAgY2FzZSBhcnJheUJ1ZmZlclRhZzpcbiAgICAgICAgICBpZiAoKG9iamVjdC5ieXRlTGVuZ3RoICE9IG90aGVyLmJ5dGVMZW5ndGgpIHx8XG4gICAgICAgICAgICAgICFlcXVhbEZ1bmMobmV3IFVpbnQ4QXJyYXkob2JqZWN0KSwgbmV3IFVpbnQ4QXJyYXkob3RoZXIpKSkge1xuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgIH1cbiAgICAgICAgICByZXR1cm4gdHJ1ZTtcblxuICAgICAgICBjYXNlIGJvb2xUYWc6XG4gICAgICAgIGNhc2UgZGF0ZVRhZzpcbiAgICAgICAgY2FzZSBudW1iZXJUYWc6XG4gICAgICAgICAgLy8gQ29lcmNlIGJvb2xlYW5zIHRvIGAxYCBvciBgMGAgYW5kIGRhdGVzIHRvIG1pbGxpc2Vjb25kcy5cbiAgICAgICAgICAvLyBJbnZhbGlkIGRhdGVzIGFyZSBjb2VyY2VkIHRvIGBOYU5gLlxuICAgICAgICAgIHJldHVybiBlcSgrb2JqZWN0LCArb3RoZXIpO1xuXG4gICAgICAgIGNhc2UgZXJyb3JUYWc6XG4gICAgICAgICAgcmV0dXJuIG9iamVjdC5uYW1lID09IG90aGVyLm5hbWUgJiYgb2JqZWN0Lm1lc3NhZ2UgPT0gb3RoZXIubWVzc2FnZTtcblxuICAgICAgICBjYXNlIHJlZ2V4cFRhZzpcbiAgICAgICAgY2FzZSBzdHJpbmdUYWc6XG4gICAgICAgICAgLy8gQ29lcmNlIHJlZ2V4ZXMgdG8gc3RyaW5ncyBhbmQgdHJlYXQgc3RyaW5ncywgcHJpbWl0aXZlcyBhbmQgb2JqZWN0cyxcbiAgICAgICAgICAvLyBhcyBlcXVhbC4gU2VlIGh0dHA6Ly93d3cuZWNtYS1pbnRlcm5hdGlvbmFsLm9yZy9lY21hLTI2Mi83LjAvI3NlYy1yZWdleHAucHJvdG90eXBlLnRvc3RyaW5nXG4gICAgICAgICAgLy8gZm9yIG1vcmUgZGV0YWlscy5cbiAgICAgICAgICByZXR1cm4gb2JqZWN0ID09IChvdGhlciArICcnKTtcblxuICAgICAgICBjYXNlIG1hcFRhZzpcbiAgICAgICAgICB2YXIgY29udmVydCA9IG1hcFRvQXJyYXk7XG5cbiAgICAgICAgY2FzZSBzZXRUYWc6XG4gICAgICAgICAgdmFyIGlzUGFydGlhbCA9IGJpdG1hc2sgJiBDT01QQVJFX1BBUlRJQUxfRkxBRztcbiAgICAgICAgICBjb252ZXJ0IHx8IChjb252ZXJ0ID0gc2V0VG9BcnJheSk7XG5cbiAgICAgICAgICBpZiAob2JqZWN0LnNpemUgIT0gb3RoZXIuc2l6ZSAmJiAhaXNQYXJ0aWFsKSB7XG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgfVxuICAgICAgICAgIC8vIEFzc3VtZSBjeWNsaWMgdmFsdWVzIGFyZSBlcXVhbC5cbiAgICAgICAgICB2YXIgc3RhY2tlZCA9IHN0YWNrLmdldChvYmplY3QpO1xuICAgICAgICAgIGlmIChzdGFja2VkKSB7XG4gICAgICAgICAgICByZXR1cm4gc3RhY2tlZCA9PSBvdGhlcjtcbiAgICAgICAgICB9XG4gICAgICAgICAgYml0bWFzayB8PSBDT01QQVJFX1VOT1JERVJFRF9GTEFHO1xuXG4gICAgICAgICAgLy8gUmVjdXJzaXZlbHkgY29tcGFyZSBvYmplY3RzIChzdXNjZXB0aWJsZSB0byBjYWxsIHN0YWNrIGxpbWl0cykuXG4gICAgICAgICAgc3RhY2suc2V0KG9iamVjdCwgb3RoZXIpO1xuICAgICAgICAgIHZhciByZXN1bHQgPSBlcXVhbEFycmF5cyhjb252ZXJ0KG9iamVjdCksIGNvbnZlcnQob3RoZXIpLCBiaXRtYXNrLCBjdXN0b21pemVyLCBlcXVhbEZ1bmMsIHN0YWNrKTtcbiAgICAgICAgICBzdGFja1snZGVsZXRlJ10ob2JqZWN0KTtcbiAgICAgICAgICByZXR1cm4gcmVzdWx0O1xuXG4gICAgICAgIGNhc2Ugc3ltYm9sVGFnOlxuICAgICAgICAgIGlmIChzeW1ib2xWYWx1ZU9mKSB7XG4gICAgICAgICAgICByZXR1cm4gc3ltYm9sVmFsdWVPZi5jYWxsKG9iamVjdCkgPT0gc3ltYm9sVmFsdWVPZi5jYWxsKG90aGVyKTtcbiAgICAgICAgICB9XG4gICAgICB9XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQSBzcGVjaWFsaXplZCB2ZXJzaW9uIG9mIGBiYXNlSXNFcXVhbERlZXBgIGZvciBvYmplY3RzIHdpdGggc3VwcG9ydCBmb3JcbiAgICAgKiBwYXJ0aWFsIGRlZXAgY29tcGFyaXNvbnMuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBjb21wYXJlLlxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvdGhlciBUaGUgb3RoZXIgb2JqZWN0IHRvIGNvbXBhcmUuXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IGJpdG1hc2sgVGhlIGJpdG1hc2sgZmxhZ3MuIFNlZSBgYmFzZUlzRXF1YWxgIGZvciBtb3JlIGRldGFpbHMuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gY3VzdG9taXplciBUaGUgZnVuY3Rpb24gdG8gY3VzdG9taXplIGNvbXBhcmlzb25zLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGVxdWFsRnVuYyBUaGUgZnVuY3Rpb24gdG8gZGV0ZXJtaW5lIGVxdWl2YWxlbnRzIG9mIHZhbHVlcy5cbiAgICAgKiBAcGFyYW0ge09iamVjdH0gc3RhY2sgVHJhY2tzIHRyYXZlcnNlZCBgb2JqZWN0YCBhbmQgYG90aGVyYCBvYmplY3RzLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiB0aGUgb2JqZWN0cyBhcmUgZXF1aXZhbGVudCwgZWxzZSBgZmFsc2VgLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGVxdWFsT2JqZWN0cyhvYmplY3QsIG90aGVyLCBiaXRtYXNrLCBjdXN0b21pemVyLCBlcXVhbEZ1bmMsIHN0YWNrKSB7XG4gICAgICB2YXIgaXNQYXJ0aWFsID0gYml0bWFzayAmIENPTVBBUkVfUEFSVElBTF9GTEFHLFxuICAgICAgICAgIG9ialByb3BzID0gZ2V0QWxsS2V5cyhvYmplY3QpLFxuICAgICAgICAgIG9iakxlbmd0aCA9IG9ialByb3BzLmxlbmd0aCxcbiAgICAgICAgICBvdGhQcm9wcyA9IGdldEFsbEtleXMob3RoZXIpLFxuICAgICAgICAgIG90aExlbmd0aCA9IG90aFByb3BzLmxlbmd0aDtcblxuICAgICAgaWYgKG9iakxlbmd0aCAhPSBvdGhMZW5ndGggJiYgIWlzUGFydGlhbCkge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICB9XG4gICAgICB2YXIgaW5kZXggPSBvYmpMZW5ndGg7XG4gICAgICB3aGlsZSAoaW5kZXgtLSkge1xuICAgICAgICB2YXIga2V5ID0gb2JqUHJvcHNbaW5kZXhdO1xuICAgICAgICBpZiAoIShpc1BhcnRpYWwgPyBrZXkgaW4gb3RoZXIgOiBoYXNPd25Qcm9wZXJ0eS5jYWxsKG90aGVyLCBrZXkpKSkge1xuICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgLy8gQ2hlY2sgdGhhdCBjeWNsaWMgdmFsdWVzIGFyZSBlcXVhbC5cbiAgICAgIHZhciBvYmpTdGFja2VkID0gc3RhY2suZ2V0KG9iamVjdCk7XG4gICAgICB2YXIgb3RoU3RhY2tlZCA9IHN0YWNrLmdldChvdGhlcik7XG4gICAgICBpZiAob2JqU3RhY2tlZCAmJiBvdGhTdGFja2VkKSB7XG4gICAgICAgIHJldHVybiBvYmpTdGFja2VkID09IG90aGVyICYmIG90aFN0YWNrZWQgPT0gb2JqZWN0O1xuICAgICAgfVxuICAgICAgdmFyIHJlc3VsdCA9IHRydWU7XG4gICAgICBzdGFjay5zZXQob2JqZWN0LCBvdGhlcik7XG4gICAgICBzdGFjay5zZXQob3RoZXIsIG9iamVjdCk7XG5cbiAgICAgIHZhciBza2lwQ3RvciA9IGlzUGFydGlhbDtcbiAgICAgIHdoaWxlICgrK2luZGV4IDwgb2JqTGVuZ3RoKSB7XG4gICAgICAgIGtleSA9IG9ialByb3BzW2luZGV4XTtcbiAgICAgICAgdmFyIG9ialZhbHVlID0gb2JqZWN0W2tleV0sXG4gICAgICAgICAgICBvdGhWYWx1ZSA9IG90aGVyW2tleV07XG5cbiAgICAgICAgaWYgKGN1c3RvbWl6ZXIpIHtcbiAgICAgICAgICB2YXIgY29tcGFyZWQgPSBpc1BhcnRpYWxcbiAgICAgICAgICAgID8gY3VzdG9taXplcihvdGhWYWx1ZSwgb2JqVmFsdWUsIGtleSwgb3RoZXIsIG9iamVjdCwgc3RhY2spXG4gICAgICAgICAgICA6IGN1c3RvbWl6ZXIob2JqVmFsdWUsIG90aFZhbHVlLCBrZXksIG9iamVjdCwgb3RoZXIsIHN0YWNrKTtcbiAgICAgICAgfVxuICAgICAgICAvLyBSZWN1cnNpdmVseSBjb21wYXJlIG9iamVjdHMgKHN1c2NlcHRpYmxlIHRvIGNhbGwgc3RhY2sgbGltaXRzKS5cbiAgICAgICAgaWYgKCEoY29tcGFyZWQgPT09IHVuZGVmaW5lZFxuICAgICAgICAgICAgICA/IChvYmpWYWx1ZSA9PT0gb3RoVmFsdWUgfHwgZXF1YWxGdW5jKG9ialZhbHVlLCBvdGhWYWx1ZSwgYml0bWFzaywgY3VzdG9taXplciwgc3RhY2spKVxuICAgICAgICAgICAgICA6IGNvbXBhcmVkXG4gICAgICAgICAgICApKSB7XG4gICAgICAgICAgcmVzdWx0ID0gZmFsc2U7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgICAgc2tpcEN0b3IgfHwgKHNraXBDdG9yID0ga2V5ID09ICdjb25zdHJ1Y3RvcicpO1xuICAgICAgfVxuICAgICAgaWYgKHJlc3VsdCAmJiAhc2tpcEN0b3IpIHtcbiAgICAgICAgdmFyIG9iakN0b3IgPSBvYmplY3QuY29uc3RydWN0b3IsXG4gICAgICAgICAgICBvdGhDdG9yID0gb3RoZXIuY29uc3RydWN0b3I7XG5cbiAgICAgICAgLy8gTm9uIGBPYmplY3RgIG9iamVjdCBpbnN0YW5jZXMgd2l0aCBkaWZmZXJlbnQgY29uc3RydWN0b3JzIGFyZSBub3QgZXF1YWwuXG4gICAgICAgIGlmIChvYmpDdG9yICE9IG90aEN0b3IgJiZcbiAgICAgICAgICAgICgnY29uc3RydWN0b3InIGluIG9iamVjdCAmJiAnY29uc3RydWN0b3InIGluIG90aGVyKSAmJlxuICAgICAgICAgICAgISh0eXBlb2Ygb2JqQ3RvciA9PSAnZnVuY3Rpb24nICYmIG9iakN0b3IgaW5zdGFuY2VvZiBvYmpDdG9yICYmXG4gICAgICAgICAgICAgIHR5cGVvZiBvdGhDdG9yID09ICdmdW5jdGlvbicgJiYgb3RoQ3RvciBpbnN0YW5jZW9mIG90aEN0b3IpKSB7XG4gICAgICAgICAgcmVzdWx0ID0gZmFsc2U7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHN0YWNrWydkZWxldGUnXShvYmplY3QpO1xuICAgICAgc3RhY2tbJ2RlbGV0ZSddKG90aGVyKTtcbiAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQSBzcGVjaWFsaXplZCB2ZXJzaW9uIG9mIGBiYXNlUmVzdGAgd2hpY2ggZmxhdHRlbnMgdGhlIHJlc3QgYXJyYXkuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGZ1bmMgVGhlIGZ1bmN0aW9uIHRvIGFwcGx5IGEgcmVzdCBwYXJhbWV0ZXIgdG8uXG4gICAgICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgZnVuY3Rpb24uXG4gICAgICovXG4gICAgZnVuY3Rpb24gZmxhdFJlc3QoZnVuYykge1xuICAgICAgcmV0dXJuIHNldFRvU3RyaW5nKG92ZXJSZXN0KGZ1bmMsIHVuZGVmaW5lZCwgZmxhdHRlbiksIGZ1bmMgKyAnJyk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhbiBhcnJheSBvZiBvd24gZW51bWVyYWJsZSBwcm9wZXJ0eSBuYW1lcyBhbmQgc3ltYm9scyBvZiBgb2JqZWN0YC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIHF1ZXJ5LlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgYXJyYXkgb2YgcHJvcGVydHkgbmFtZXMgYW5kIHN5bWJvbHMuXG4gICAgICovXG4gICAgZnVuY3Rpb24gZ2V0QWxsS2V5cyhvYmplY3QpIHtcbiAgICAgIHJldHVybiBiYXNlR2V0QWxsS2V5cyhvYmplY3QsIGtleXMsIGdldFN5bWJvbHMpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYW4gYXJyYXkgb2Ygb3duIGFuZCBpbmhlcml0ZWQgZW51bWVyYWJsZSBwcm9wZXJ0eSBuYW1lcyBhbmRcbiAgICAgKiBzeW1ib2xzIG9mIGBvYmplY3RgLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gcXVlcnkuXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBhcnJheSBvZiBwcm9wZXJ0eSBuYW1lcyBhbmQgc3ltYm9scy5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBnZXRBbGxLZXlzSW4ob2JqZWN0KSB7XG4gICAgICByZXR1cm4gYmFzZUdldEFsbEtleXMob2JqZWN0LCBrZXlzSW4sIGdldFN5bWJvbHNJbik7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogR2V0cyBtZXRhZGF0YSBmb3IgYGZ1bmNgLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBmdW5jIFRoZSBmdW5jdGlvbiB0byBxdWVyeS5cbiAgICAgKiBAcmV0dXJucyB7Kn0gUmV0dXJucyB0aGUgbWV0YWRhdGEgZm9yIGBmdW5jYC5cbiAgICAgKi9cbiAgICB2YXIgZ2V0RGF0YSA9ICFtZXRhTWFwID8gbm9vcCA6IGZ1bmN0aW9uKGZ1bmMpIHtcbiAgICAgIHJldHVybiBtZXRhTWFwLmdldChmdW5jKTtcbiAgICB9O1xuXG4gICAgLyoqXG4gICAgICogR2V0cyB0aGUgbmFtZSBvZiBgZnVuY2AuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGZ1bmMgVGhlIGZ1bmN0aW9uIHRvIHF1ZXJ5LlxuICAgICAqIEByZXR1cm5zIHtzdHJpbmd9IFJldHVybnMgdGhlIGZ1bmN0aW9uIG5hbWUuXG4gICAgICovXG4gICAgZnVuY3Rpb24gZ2V0RnVuY05hbWUoZnVuYykge1xuICAgICAgdmFyIHJlc3VsdCA9IChmdW5jLm5hbWUgKyAnJyksXG4gICAgICAgICAgYXJyYXkgPSByZWFsTmFtZXNbcmVzdWx0XSxcbiAgICAgICAgICBsZW5ndGggPSBoYXNPd25Qcm9wZXJ0eS5jYWxsKHJlYWxOYW1lcywgcmVzdWx0KSA/IGFycmF5Lmxlbmd0aCA6IDA7XG5cbiAgICAgIHdoaWxlIChsZW5ndGgtLSkge1xuICAgICAgICB2YXIgZGF0YSA9IGFycmF5W2xlbmd0aF0sXG4gICAgICAgICAgICBvdGhlckZ1bmMgPSBkYXRhLmZ1bmM7XG4gICAgICAgIGlmIChvdGhlckZ1bmMgPT0gbnVsbCB8fCBvdGhlckZ1bmMgPT0gZnVuYykge1xuICAgICAgICAgIHJldHVybiBkYXRhLm5hbWU7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogR2V0cyB0aGUgYXJndW1lbnQgcGxhY2Vob2xkZXIgdmFsdWUgZm9yIGBmdW5jYC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gZnVuYyBUaGUgZnVuY3Rpb24gdG8gaW5zcGVjdC5cbiAgICAgKiBAcmV0dXJucyB7Kn0gUmV0dXJucyB0aGUgcGxhY2Vob2xkZXIgdmFsdWUuXG4gICAgICovXG4gICAgZnVuY3Rpb24gZ2V0SG9sZGVyKGZ1bmMpIHtcbiAgICAgIHZhciBvYmplY3QgPSBoYXNPd25Qcm9wZXJ0eS5jYWxsKGxvZGFzaCwgJ3BsYWNlaG9sZGVyJykgPyBsb2Rhc2ggOiBmdW5jO1xuICAgICAgcmV0dXJuIG9iamVjdC5wbGFjZWhvbGRlcjtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBHZXRzIHRoZSBhcHByb3ByaWF0ZSBcIml0ZXJhdGVlXCIgZnVuY3Rpb24uIElmIGBfLml0ZXJhdGVlYCBpcyBjdXN0b21pemVkLFxuICAgICAqIHRoaXMgZnVuY3Rpb24gcmV0dXJucyB0aGUgY3VzdG9tIG1ldGhvZCwgb3RoZXJ3aXNlIGl0IHJldHVybnMgYGJhc2VJdGVyYXRlZWAuXG4gICAgICogSWYgYXJndW1lbnRzIGFyZSBwcm92aWRlZCwgdGhlIGNob3NlbiBmdW5jdGlvbiBpcyBpbnZva2VkIHdpdGggdGhlbSBhbmRcbiAgICAgKiBpdHMgcmVzdWx0IGlzIHJldHVybmVkLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0geyp9IFt2YWx1ZV0gVGhlIHZhbHVlIHRvIGNvbnZlcnQgdG8gYW4gaXRlcmF0ZWUuXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IFthcml0eV0gVGhlIGFyaXR5IG9mIHRoZSBjcmVhdGVkIGl0ZXJhdGVlLlxuICAgICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgY2hvc2VuIGZ1bmN0aW9uIG9yIGl0cyByZXN1bHQuXG4gICAgICovXG4gICAgZnVuY3Rpb24gZ2V0SXRlcmF0ZWUoKSB7XG4gICAgICB2YXIgcmVzdWx0ID0gbG9kYXNoLml0ZXJhdGVlIHx8IGl0ZXJhdGVlO1xuICAgICAgcmVzdWx0ID0gcmVzdWx0ID09PSBpdGVyYXRlZSA/IGJhc2VJdGVyYXRlZSA6IHJlc3VsdDtcbiAgICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gcmVzdWx0KGFyZ3VtZW50c1swXSwgYXJndW1lbnRzWzFdKSA6IHJlc3VsdDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBHZXRzIHRoZSBkYXRhIGZvciBgbWFwYC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtPYmplY3R9IG1hcCBUaGUgbWFwIHRvIHF1ZXJ5LlxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgVGhlIHJlZmVyZW5jZSBrZXkuXG4gICAgICogQHJldHVybnMgeyp9IFJldHVybnMgdGhlIG1hcCBkYXRhLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGdldE1hcERhdGEobWFwLCBrZXkpIHtcbiAgICAgIHZhciBkYXRhID0gbWFwLl9fZGF0YV9fO1xuICAgICAgcmV0dXJuIGlzS2V5YWJsZShrZXkpXG4gICAgICAgID8gZGF0YVt0eXBlb2Yga2V5ID09ICdzdHJpbmcnID8gJ3N0cmluZycgOiAnaGFzaCddXG4gICAgICAgIDogZGF0YS5tYXA7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogR2V0cyB0aGUgcHJvcGVydHkgbmFtZXMsIHZhbHVlcywgYW5kIGNvbXBhcmUgZmxhZ3Mgb2YgYG9iamVjdGAuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBxdWVyeS5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIG1hdGNoIGRhdGEgb2YgYG9iamVjdGAuXG4gICAgICovXG4gICAgZnVuY3Rpb24gZ2V0TWF0Y2hEYXRhKG9iamVjdCkge1xuICAgICAgdmFyIHJlc3VsdCA9IGtleXMob2JqZWN0KSxcbiAgICAgICAgICBsZW5ndGggPSByZXN1bHQubGVuZ3RoO1xuXG4gICAgICB3aGlsZSAobGVuZ3RoLS0pIHtcbiAgICAgICAgdmFyIGtleSA9IHJlc3VsdFtsZW5ndGhdLFxuICAgICAgICAgICAgdmFsdWUgPSBvYmplY3Rba2V5XTtcblxuICAgICAgICByZXN1bHRbbGVuZ3RoXSA9IFtrZXksIHZhbHVlLCBpc1N0cmljdENvbXBhcmFibGUodmFsdWUpXTtcbiAgICAgIH1cbiAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogR2V0cyB0aGUgbmF0aXZlIGZ1bmN0aW9uIGF0IGBrZXlgIG9mIGBvYmplY3RgLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gcXVlcnkuXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IGtleSBUaGUga2V5IG9mIHRoZSBtZXRob2QgdG8gZ2V0LlxuICAgICAqIEByZXR1cm5zIHsqfSBSZXR1cm5zIHRoZSBmdW5jdGlvbiBpZiBpdCdzIG5hdGl2ZSwgZWxzZSBgdW5kZWZpbmVkYC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBnZXROYXRpdmUob2JqZWN0LCBrZXkpIHtcbiAgICAgIHZhciB2YWx1ZSA9IGdldFZhbHVlKG9iamVjdCwga2V5KTtcbiAgICAgIHJldHVybiBiYXNlSXNOYXRpdmUodmFsdWUpID8gdmFsdWUgOiB1bmRlZmluZWQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQSBzcGVjaWFsaXplZCB2ZXJzaW9uIG9mIGBiYXNlR2V0VGFnYCB3aGljaCBpZ25vcmVzIGBTeW1ib2wudG9TdHJpbmdUYWdgIHZhbHVlcy5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gcXVlcnkuXG4gICAgICogQHJldHVybnMge3N0cmluZ30gUmV0dXJucyB0aGUgcmF3IGB0b1N0cmluZ1RhZ2AuXG4gICAgICovXG4gICAgZnVuY3Rpb24gZ2V0UmF3VGFnKHZhbHVlKSB7XG4gICAgICB2YXIgaXNPd24gPSBoYXNPd25Qcm9wZXJ0eS5jYWxsKHZhbHVlLCBzeW1Ub1N0cmluZ1RhZyksXG4gICAgICAgICAgdGFnID0gdmFsdWVbc3ltVG9TdHJpbmdUYWddO1xuXG4gICAgICB0cnkge1xuICAgICAgICB2YWx1ZVtzeW1Ub1N0cmluZ1RhZ10gPSB1bmRlZmluZWQ7XG4gICAgICAgIHZhciB1bm1hc2tlZCA9IHRydWU7XG4gICAgICB9IGNhdGNoIChlKSB7fVxuXG4gICAgICB2YXIgcmVzdWx0ID0gbmF0aXZlT2JqZWN0VG9TdHJpbmcuY2FsbCh2YWx1ZSk7XG4gICAgICBpZiAodW5tYXNrZWQpIHtcbiAgICAgICAgaWYgKGlzT3duKSB7XG4gICAgICAgICAgdmFsdWVbc3ltVG9TdHJpbmdUYWddID0gdGFnO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGRlbGV0ZSB2YWx1ZVtzeW1Ub1N0cmluZ1RhZ107XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhbiBhcnJheSBvZiB0aGUgb3duIGVudW1lcmFibGUgc3ltYm9scyBvZiBgb2JqZWN0YC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIHF1ZXJ5LlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgYXJyYXkgb2Ygc3ltYm9scy5cbiAgICAgKi9cbiAgICB2YXIgZ2V0U3ltYm9scyA9ICFuYXRpdmVHZXRTeW1ib2xzID8gc3R1YkFycmF5IDogZnVuY3Rpb24ob2JqZWN0KSB7XG4gICAgICBpZiAob2JqZWN0ID09IG51bGwpIHtcbiAgICAgICAgcmV0dXJuIFtdO1xuICAgICAgfVxuICAgICAgb2JqZWN0ID0gT2JqZWN0KG9iamVjdCk7XG4gICAgICByZXR1cm4gYXJyYXlGaWx0ZXIobmF0aXZlR2V0U3ltYm9scyhvYmplY3QpLCBmdW5jdGlvbihzeW1ib2wpIHtcbiAgICAgICAgcmV0dXJuIHByb3BlcnR5SXNFbnVtZXJhYmxlLmNhbGwob2JqZWN0LCBzeW1ib2wpO1xuICAgICAgfSk7XG4gICAgfTtcblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYW4gYXJyYXkgb2YgdGhlIG93biBhbmQgaW5oZXJpdGVkIGVudW1lcmFibGUgc3ltYm9scyBvZiBgb2JqZWN0YC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIHF1ZXJ5LlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgYXJyYXkgb2Ygc3ltYm9scy5cbiAgICAgKi9cbiAgICB2YXIgZ2V0U3ltYm9sc0luID0gIW5hdGl2ZUdldFN5bWJvbHMgPyBzdHViQXJyYXkgOiBmdW5jdGlvbihvYmplY3QpIHtcbiAgICAgIHZhciByZXN1bHQgPSBbXTtcbiAgICAgIHdoaWxlIChvYmplY3QpIHtcbiAgICAgICAgYXJyYXlQdXNoKHJlc3VsdCwgZ2V0U3ltYm9scyhvYmplY3QpKTtcbiAgICAgICAgb2JqZWN0ID0gZ2V0UHJvdG90eXBlKG9iamVjdCk7XG4gICAgICB9XG4gICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH07XG5cbiAgICAvKipcbiAgICAgKiBHZXRzIHRoZSBgdG9TdHJpbmdUYWdgIG9mIGB2YWx1ZWAuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIHF1ZXJ5LlxuICAgICAqIEByZXR1cm5zIHtzdHJpbmd9IFJldHVybnMgdGhlIGB0b1N0cmluZ1RhZ2AuXG4gICAgICovXG4gICAgdmFyIGdldFRhZyA9IGJhc2VHZXRUYWc7XG5cbiAgICAvLyBGYWxsYmFjayBmb3IgZGF0YSB2aWV3cywgbWFwcywgc2V0cywgYW5kIHdlYWsgbWFwcyBpbiBJRSAxMSBhbmQgcHJvbWlzZXMgaW4gTm9kZS5qcyA8IDYuXG4gICAgaWYgKChEYXRhVmlldyAmJiBnZXRUYWcobmV3IERhdGFWaWV3KG5ldyBBcnJheUJ1ZmZlcigxKSkpICE9IGRhdGFWaWV3VGFnKSB8fFxuICAgICAgICAoTWFwICYmIGdldFRhZyhuZXcgTWFwKSAhPSBtYXBUYWcpIHx8XG4gICAgICAgIChQcm9taXNlICYmIGdldFRhZyhQcm9taXNlLnJlc29sdmUoKSkgIT0gcHJvbWlzZVRhZykgfHxcbiAgICAgICAgKFNldCAmJiBnZXRUYWcobmV3IFNldCkgIT0gc2V0VGFnKSB8fFxuICAgICAgICAoV2Vha01hcCAmJiBnZXRUYWcobmV3IFdlYWtNYXApICE9IHdlYWtNYXBUYWcpKSB7XG4gICAgICBnZXRUYWcgPSBmdW5jdGlvbih2YWx1ZSkge1xuICAgICAgICB2YXIgcmVzdWx0ID0gYmFzZUdldFRhZyh2YWx1ZSksXG4gICAgICAgICAgICBDdG9yID0gcmVzdWx0ID09IG9iamVjdFRhZyA/IHZhbHVlLmNvbnN0cnVjdG9yIDogdW5kZWZpbmVkLFxuICAgICAgICAgICAgY3RvclN0cmluZyA9IEN0b3IgPyB0b1NvdXJjZShDdG9yKSA6ICcnO1xuXG4gICAgICAgIGlmIChjdG9yU3RyaW5nKSB7XG4gICAgICAgICAgc3dpdGNoIChjdG9yU3RyaW5nKSB7XG4gICAgICAgICAgICBjYXNlIGRhdGFWaWV3Q3RvclN0cmluZzogcmV0dXJuIGRhdGFWaWV3VGFnO1xuICAgICAgICAgICAgY2FzZSBtYXBDdG9yU3RyaW5nOiByZXR1cm4gbWFwVGFnO1xuICAgICAgICAgICAgY2FzZSBwcm9taXNlQ3RvclN0cmluZzogcmV0dXJuIHByb21pc2VUYWc7XG4gICAgICAgICAgICBjYXNlIHNldEN0b3JTdHJpbmc6IHJldHVybiBzZXRUYWc7XG4gICAgICAgICAgICBjYXNlIHdlYWtNYXBDdG9yU3RyaW5nOiByZXR1cm4gd2Vha01hcFRhZztcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICAgIH07XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogR2V0cyB0aGUgdmlldywgYXBwbHlpbmcgYW55IGB0cmFuc2Zvcm1zYCB0byB0aGUgYHN0YXJ0YCBhbmQgYGVuZGAgcG9zaXRpb25zLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge251bWJlcn0gc3RhcnQgVGhlIHN0YXJ0IG9mIHRoZSB2aWV3LlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBlbmQgVGhlIGVuZCBvZiB0aGUgdmlldy5cbiAgICAgKiBAcGFyYW0ge0FycmF5fSB0cmFuc2Zvcm1zIFRoZSB0cmFuc2Zvcm1hdGlvbnMgdG8gYXBwbHkgdG8gdGhlIHZpZXcuXG4gICAgICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyBhbiBvYmplY3QgY29udGFpbmluZyB0aGUgYHN0YXJ0YCBhbmQgYGVuZGBcbiAgICAgKiAgcG9zaXRpb25zIG9mIHRoZSB2aWV3LlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGdldFZpZXcoc3RhcnQsIGVuZCwgdHJhbnNmb3Jtcykge1xuICAgICAgdmFyIGluZGV4ID0gLTEsXG4gICAgICAgICAgbGVuZ3RoID0gdHJhbnNmb3Jtcy5sZW5ndGg7XG5cbiAgICAgIHdoaWxlICgrK2luZGV4IDwgbGVuZ3RoKSB7XG4gICAgICAgIHZhciBkYXRhID0gdHJhbnNmb3Jtc1tpbmRleF0sXG4gICAgICAgICAgICBzaXplID0gZGF0YS5zaXplO1xuXG4gICAgICAgIHN3aXRjaCAoZGF0YS50eXBlKSB7XG4gICAgICAgICAgY2FzZSAnZHJvcCc6ICAgICAgc3RhcnQgKz0gc2l6ZTsgYnJlYWs7XG4gICAgICAgICAgY2FzZSAnZHJvcFJpZ2h0JzogZW5kIC09IHNpemU7IGJyZWFrO1xuICAgICAgICAgIGNhc2UgJ3Rha2UnOiAgICAgIGVuZCA9IG5hdGl2ZU1pbihlbmQsIHN0YXJ0ICsgc2l6ZSk7IGJyZWFrO1xuICAgICAgICAgIGNhc2UgJ3Rha2VSaWdodCc6IHN0YXJ0ID0gbmF0aXZlTWF4KHN0YXJ0LCBlbmQgLSBzaXplKTsgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHJldHVybiB7ICdzdGFydCc6IHN0YXJ0LCAnZW5kJzogZW5kIH07XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogRXh0cmFjdHMgd3JhcHBlciBkZXRhaWxzIGZyb20gdGhlIGBzb3VyY2VgIGJvZHkgY29tbWVudC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IHNvdXJjZSBUaGUgc291cmNlIHRvIGluc3BlY3QuXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSB3cmFwcGVyIGRldGFpbHMuXG4gICAgICovXG4gICAgZnVuY3Rpb24gZ2V0V3JhcERldGFpbHMoc291cmNlKSB7XG4gICAgICB2YXIgbWF0Y2ggPSBzb3VyY2UubWF0Y2gocmVXcmFwRGV0YWlscyk7XG4gICAgICByZXR1cm4gbWF0Y2ggPyBtYXRjaFsxXS5zcGxpdChyZVNwbGl0RGV0YWlscykgOiBbXTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDaGVja3MgaWYgYHBhdGhgIGV4aXN0cyBvbiBgb2JqZWN0YC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIHF1ZXJ5LlxuICAgICAqIEBwYXJhbSB7QXJyYXl8c3RyaW5nfSBwYXRoIFRoZSBwYXRoIHRvIGNoZWNrLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGhhc0Z1bmMgVGhlIGZ1bmN0aW9uIHRvIGNoZWNrIHByb3BlcnRpZXMuXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGBwYXRoYCBleGlzdHMsIGVsc2UgYGZhbHNlYC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBoYXNQYXRoKG9iamVjdCwgcGF0aCwgaGFzRnVuYykge1xuICAgICAgcGF0aCA9IGNhc3RQYXRoKHBhdGgsIG9iamVjdCk7XG5cbiAgICAgIHZhciBpbmRleCA9IC0xLFxuICAgICAgICAgIGxlbmd0aCA9IHBhdGgubGVuZ3RoLFxuICAgICAgICAgIHJlc3VsdCA9IGZhbHNlO1xuXG4gICAgICB3aGlsZSAoKytpbmRleCA8IGxlbmd0aCkge1xuICAgICAgICB2YXIga2V5ID0gdG9LZXkocGF0aFtpbmRleF0pO1xuICAgICAgICBpZiAoIShyZXN1bHQgPSBvYmplY3QgIT0gbnVsbCAmJiBoYXNGdW5jKG9iamVjdCwga2V5KSkpIHtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgICBvYmplY3QgPSBvYmplY3Rba2V5XTtcbiAgICAgIH1cbiAgICAgIGlmIChyZXN1bHQgfHwgKytpbmRleCAhPSBsZW5ndGgpIHtcbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICAgIH1cbiAgICAgIGxlbmd0aCA9IG9iamVjdCA9PSBudWxsID8gMCA6IG9iamVjdC5sZW5ndGg7XG4gICAgICByZXR1cm4gISFsZW5ndGggJiYgaXNMZW5ndGgobGVuZ3RoKSAmJiBpc0luZGV4KGtleSwgbGVuZ3RoKSAmJlxuICAgICAgICAoaXNBcnJheShvYmplY3QpIHx8IGlzQXJndW1lbnRzKG9iamVjdCkpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEluaXRpYWxpemVzIGFuIGFycmF5IGNsb25lLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gY2xvbmUuXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBpbml0aWFsaXplZCBjbG9uZS5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBpbml0Q2xvbmVBcnJheShhcnJheSkge1xuICAgICAgdmFyIGxlbmd0aCA9IGFycmF5Lmxlbmd0aCxcbiAgICAgICAgICByZXN1bHQgPSBuZXcgYXJyYXkuY29uc3RydWN0b3IobGVuZ3RoKTtcblxuICAgICAgLy8gQWRkIHByb3BlcnRpZXMgYXNzaWduZWQgYnkgYFJlZ0V4cCNleGVjYC5cbiAgICAgIGlmIChsZW5ndGggJiYgdHlwZW9mIGFycmF5WzBdID09ICdzdHJpbmcnICYmIGhhc093blByb3BlcnR5LmNhbGwoYXJyYXksICdpbmRleCcpKSB7XG4gICAgICAgIHJlc3VsdC5pbmRleCA9IGFycmF5LmluZGV4O1xuICAgICAgICByZXN1bHQuaW5wdXQgPSBhcnJheS5pbnB1dDtcbiAgICAgIH1cbiAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogSW5pdGlhbGl6ZXMgYW4gb2JqZWN0IGNsb25lLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gY2xvbmUuXG4gICAgICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyB0aGUgaW5pdGlhbGl6ZWQgY2xvbmUuXG4gICAgICovXG4gICAgZnVuY3Rpb24gaW5pdENsb25lT2JqZWN0KG9iamVjdCkge1xuICAgICAgcmV0dXJuICh0eXBlb2Ygb2JqZWN0LmNvbnN0cnVjdG9yID09ICdmdW5jdGlvbicgJiYgIWlzUHJvdG90eXBlKG9iamVjdCkpXG4gICAgICAgID8gYmFzZUNyZWF0ZShnZXRQcm90b3R5cGUob2JqZWN0KSlcbiAgICAgICAgOiB7fTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBJbml0aWFsaXplcyBhbiBvYmplY3QgY2xvbmUgYmFzZWQgb24gaXRzIGB0b1N0cmluZ1RhZ2AuXG4gICAgICpcbiAgICAgKiAqKk5vdGU6KiogVGhpcyBmdW5jdGlvbiBvbmx5IHN1cHBvcnRzIGNsb25pbmcgdmFsdWVzIHdpdGggdGFncyBvZlxuICAgICAqIGBCb29sZWFuYCwgYERhdGVgLCBgRXJyb3JgLCBgTWFwYCwgYE51bWJlcmAsIGBSZWdFeHBgLCBgU2V0YCwgb3IgYFN0cmluZ2AuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBjbG9uZS5cbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gdGFnIFRoZSBgdG9TdHJpbmdUYWdgIG9mIHRoZSBvYmplY3QgdG8gY2xvbmUuXG4gICAgICogQHBhcmFtIHtib29sZWFufSBbaXNEZWVwXSBTcGVjaWZ5IGEgZGVlcCBjbG9uZS5cbiAgICAgKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIHRoZSBpbml0aWFsaXplZCBjbG9uZS5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBpbml0Q2xvbmVCeVRhZyhvYmplY3QsIHRhZywgaXNEZWVwKSB7XG4gICAgICB2YXIgQ3RvciA9IG9iamVjdC5jb25zdHJ1Y3RvcjtcbiAgICAgIHN3aXRjaCAodGFnKSB7XG4gICAgICAgIGNhc2UgYXJyYXlCdWZmZXJUYWc6XG4gICAgICAgICAgcmV0dXJuIGNsb25lQXJyYXlCdWZmZXIob2JqZWN0KTtcblxuICAgICAgICBjYXNlIGJvb2xUYWc6XG4gICAgICAgIGNhc2UgZGF0ZVRhZzpcbiAgICAgICAgICByZXR1cm4gbmV3IEN0b3IoK29iamVjdCk7XG5cbiAgICAgICAgY2FzZSBkYXRhVmlld1RhZzpcbiAgICAgICAgICByZXR1cm4gY2xvbmVEYXRhVmlldyhvYmplY3QsIGlzRGVlcCk7XG5cbiAgICAgICAgY2FzZSBmbG9hdDMyVGFnOiBjYXNlIGZsb2F0NjRUYWc6XG4gICAgICAgIGNhc2UgaW50OFRhZzogY2FzZSBpbnQxNlRhZzogY2FzZSBpbnQzMlRhZzpcbiAgICAgICAgY2FzZSB1aW50OFRhZzogY2FzZSB1aW50OENsYW1wZWRUYWc6IGNhc2UgdWludDE2VGFnOiBjYXNlIHVpbnQzMlRhZzpcbiAgICAgICAgICByZXR1cm4gY2xvbmVUeXBlZEFycmF5KG9iamVjdCwgaXNEZWVwKTtcblxuICAgICAgICBjYXNlIG1hcFRhZzpcbiAgICAgICAgICByZXR1cm4gbmV3IEN0b3I7XG5cbiAgICAgICAgY2FzZSBudW1iZXJUYWc6XG4gICAgICAgIGNhc2Ugc3RyaW5nVGFnOlxuICAgICAgICAgIHJldHVybiBuZXcgQ3RvcihvYmplY3QpO1xuXG4gICAgICAgIGNhc2UgcmVnZXhwVGFnOlxuICAgICAgICAgIHJldHVybiBjbG9uZVJlZ0V4cChvYmplY3QpO1xuXG4gICAgICAgIGNhc2Ugc2V0VGFnOlxuICAgICAgICAgIHJldHVybiBuZXcgQ3RvcjtcblxuICAgICAgICBjYXNlIHN5bWJvbFRhZzpcbiAgICAgICAgICByZXR1cm4gY2xvbmVTeW1ib2wob2JqZWN0KTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBJbnNlcnRzIHdyYXBwZXIgYGRldGFpbHNgIGluIGEgY29tbWVudCBhdCB0aGUgdG9wIG9mIHRoZSBgc291cmNlYCBib2R5LlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gc291cmNlIFRoZSBzb3VyY2UgdG8gbW9kaWZ5LlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gZGV0YWlscyBUaGUgZGV0YWlscyB0byBpbnNlcnQuXG4gICAgICogQHJldHVybnMge3N0cmluZ30gUmV0dXJucyB0aGUgbW9kaWZpZWQgc291cmNlLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGluc2VydFdyYXBEZXRhaWxzKHNvdXJjZSwgZGV0YWlscykge1xuICAgICAgdmFyIGxlbmd0aCA9IGRldGFpbHMubGVuZ3RoO1xuICAgICAgaWYgKCFsZW5ndGgpIHtcbiAgICAgICAgcmV0dXJuIHNvdXJjZTtcbiAgICAgIH1cbiAgICAgIHZhciBsYXN0SW5kZXggPSBsZW5ndGggLSAxO1xuICAgICAgZGV0YWlsc1tsYXN0SW5kZXhdID0gKGxlbmd0aCA+IDEgPyAnJiAnIDogJycpICsgZGV0YWlsc1tsYXN0SW5kZXhdO1xuICAgICAgZGV0YWlscyA9IGRldGFpbHMuam9pbihsZW5ndGggPiAyID8gJywgJyA6ICcgJyk7XG4gICAgICByZXR1cm4gc291cmNlLnJlcGxhY2UocmVXcmFwQ29tbWVudCwgJ3tcXG4vKiBbd3JhcHBlZCB3aXRoICcgKyBkZXRhaWxzICsgJ10gKi9cXG4nKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDaGVja3MgaWYgYHZhbHVlYCBpcyBhIGZsYXR0ZW5hYmxlIGBhcmd1bWVudHNgIG9iamVjdCBvciBhcnJheS5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgZmxhdHRlbmFibGUsIGVsc2UgYGZhbHNlYC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBpc0ZsYXR0ZW5hYmxlKHZhbHVlKSB7XG4gICAgICByZXR1cm4gaXNBcnJheSh2YWx1ZSkgfHwgaXNBcmd1bWVudHModmFsdWUpIHx8XG4gICAgICAgICEhKHNwcmVhZGFibGVTeW1ib2wgJiYgdmFsdWUgJiYgdmFsdWVbc3ByZWFkYWJsZVN5bWJvbF0pO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIGEgdmFsaWQgYXJyYXktbGlrZSBpbmRleC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IFtsZW5ndGg9TUFYX1NBRkVfSU5URUdFUl0gVGhlIHVwcGVyIGJvdW5kcyBvZiBhIHZhbGlkIGluZGV4LlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGEgdmFsaWQgaW5kZXgsIGVsc2UgYGZhbHNlYC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBpc0luZGV4KHZhbHVlLCBsZW5ndGgpIHtcbiAgICAgIHZhciB0eXBlID0gdHlwZW9mIHZhbHVlO1xuICAgICAgbGVuZ3RoID0gbGVuZ3RoID09IG51bGwgPyBNQVhfU0FGRV9JTlRFR0VSIDogbGVuZ3RoO1xuXG4gICAgICByZXR1cm4gISFsZW5ndGggJiZcbiAgICAgICAgKHR5cGUgPT0gJ251bWJlcicgfHxcbiAgICAgICAgICAodHlwZSAhPSAnc3ltYm9sJyAmJiByZUlzVWludC50ZXN0KHZhbHVlKSkpICYmXG4gICAgICAgICAgICAodmFsdWUgPiAtMSAmJiB2YWx1ZSAlIDEgPT0gMCAmJiB2YWx1ZSA8IGxlbmd0aCk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ2hlY2tzIGlmIHRoZSBnaXZlbiBhcmd1bWVudHMgYXJlIGZyb20gYW4gaXRlcmF0ZWUgY2FsbC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgcG90ZW50aWFsIGl0ZXJhdGVlIHZhbHVlIGFyZ3VtZW50LlxuICAgICAqIEBwYXJhbSB7Kn0gaW5kZXggVGhlIHBvdGVudGlhbCBpdGVyYXRlZSBpbmRleCBvciBrZXkgYXJndW1lbnQuXG4gICAgICogQHBhcmFtIHsqfSBvYmplY3QgVGhlIHBvdGVudGlhbCBpdGVyYXRlZSBvYmplY3QgYXJndW1lbnQuXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIHRoZSBhcmd1bWVudHMgYXJlIGZyb20gYW4gaXRlcmF0ZWUgY2FsbCxcbiAgICAgKiAgZWxzZSBgZmFsc2VgLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGlzSXRlcmF0ZWVDYWxsKHZhbHVlLCBpbmRleCwgb2JqZWN0KSB7XG4gICAgICBpZiAoIWlzT2JqZWN0KG9iamVjdCkpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgfVxuICAgICAgdmFyIHR5cGUgPSB0eXBlb2YgaW5kZXg7XG4gICAgICBpZiAodHlwZSA9PSAnbnVtYmVyJ1xuICAgICAgICAgICAgPyAoaXNBcnJheUxpa2Uob2JqZWN0KSAmJiBpc0luZGV4KGluZGV4LCBvYmplY3QubGVuZ3RoKSlcbiAgICAgICAgICAgIDogKHR5cGUgPT0gJ3N0cmluZycgJiYgaW5kZXggaW4gb2JqZWN0KVxuICAgICAgICAgICkge1xuICAgICAgICByZXR1cm4gZXEob2JqZWN0W2luZGV4XSwgdmFsdWUpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIGEgcHJvcGVydHkgbmFtZSBhbmQgbm90IGEgcHJvcGVydHkgcGF0aC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gICAgICogQHBhcmFtIHtPYmplY3R9IFtvYmplY3RdIFRoZSBvYmplY3QgdG8gcXVlcnkga2V5cyBvbi5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBhIHByb3BlcnR5IG5hbWUsIGVsc2UgYGZhbHNlYC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBpc0tleSh2YWx1ZSwgb2JqZWN0KSB7XG4gICAgICBpZiAoaXNBcnJheSh2YWx1ZSkpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgfVxuICAgICAgdmFyIHR5cGUgPSB0eXBlb2YgdmFsdWU7XG4gICAgICBpZiAodHlwZSA9PSAnbnVtYmVyJyB8fCB0eXBlID09ICdzeW1ib2wnIHx8IHR5cGUgPT0gJ2Jvb2xlYW4nIHx8XG4gICAgICAgICAgdmFsdWUgPT0gbnVsbCB8fCBpc1N5bWJvbCh2YWx1ZSkpIHtcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICB9XG4gICAgICByZXR1cm4gcmVJc1BsYWluUHJvcC50ZXN0KHZhbHVlKSB8fCAhcmVJc0RlZXBQcm9wLnRlc3QodmFsdWUpIHx8XG4gICAgICAgIChvYmplY3QgIT0gbnVsbCAmJiB2YWx1ZSBpbiBPYmplY3Qob2JqZWN0KSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgc3VpdGFibGUgZm9yIHVzZSBhcyB1bmlxdWUgb2JqZWN0IGtleS5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgc3VpdGFibGUsIGVsc2UgYGZhbHNlYC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBpc0tleWFibGUodmFsdWUpIHtcbiAgICAgIHZhciB0eXBlID0gdHlwZW9mIHZhbHVlO1xuICAgICAgcmV0dXJuICh0eXBlID09ICdzdHJpbmcnIHx8IHR5cGUgPT0gJ251bWJlcicgfHwgdHlwZSA9PSAnc3ltYm9sJyB8fCB0eXBlID09ICdib29sZWFuJylcbiAgICAgICAgPyAodmFsdWUgIT09ICdfX3Byb3RvX18nKVxuICAgICAgICA6ICh2YWx1ZSA9PT0gbnVsbCk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ2hlY2tzIGlmIGBmdW5jYCBoYXMgYSBsYXp5IGNvdW50ZXJwYXJ0LlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBmdW5jIFRoZSBmdW5jdGlvbiB0byBjaGVjay5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYGZ1bmNgIGhhcyBhIGxhenkgY291bnRlcnBhcnQsXG4gICAgICogIGVsc2UgYGZhbHNlYC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBpc0xhemlhYmxlKGZ1bmMpIHtcbiAgICAgIHZhciBmdW5jTmFtZSA9IGdldEZ1bmNOYW1lKGZ1bmMpLFxuICAgICAgICAgIG90aGVyID0gbG9kYXNoW2Z1bmNOYW1lXTtcblxuICAgICAgaWYgKHR5cGVvZiBvdGhlciAhPSAnZnVuY3Rpb24nIHx8ICEoZnVuY05hbWUgaW4gTGF6eVdyYXBwZXIucHJvdG90eXBlKSkge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICB9XG4gICAgICBpZiAoZnVuYyA9PT0gb3RoZXIpIHtcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICB9XG4gICAgICB2YXIgZGF0YSA9IGdldERhdGEob3RoZXIpO1xuICAgICAgcmV0dXJuICEhZGF0YSAmJiBmdW5jID09PSBkYXRhWzBdO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENoZWNrcyBpZiBgZnVuY2AgaGFzIGl0cyBzb3VyY2UgbWFza2VkLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBmdW5jIFRoZSBmdW5jdGlvbiB0byBjaGVjay5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYGZ1bmNgIGlzIG1hc2tlZCwgZWxzZSBgZmFsc2VgLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGlzTWFza2VkKGZ1bmMpIHtcbiAgICAgIHJldHVybiAhIW1hc2tTcmNLZXkgJiYgKG1hc2tTcmNLZXkgaW4gZnVuYyk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ2hlY2tzIGlmIGBmdW5jYCBpcyBjYXBhYmxlIG9mIGJlaW5nIG1hc2tlZC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGBmdW5jYCBpcyBtYXNrYWJsZSwgZWxzZSBgZmFsc2VgLlxuICAgICAqL1xuICAgIHZhciBpc01hc2thYmxlID0gY29yZUpzRGF0YSA/IGlzRnVuY3Rpb24gOiBzdHViRmFsc2U7XG5cbiAgICAvKipcbiAgICAgKiBDaGVja3MgaWYgYHZhbHVlYCBpcyBsaWtlbHkgYSBwcm90b3R5cGUgb2JqZWN0LlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBhIHByb3RvdHlwZSwgZWxzZSBgZmFsc2VgLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGlzUHJvdG90eXBlKHZhbHVlKSB7XG4gICAgICB2YXIgQ3RvciA9IHZhbHVlICYmIHZhbHVlLmNvbnN0cnVjdG9yLFxuICAgICAgICAgIHByb3RvID0gKHR5cGVvZiBDdG9yID09ICdmdW5jdGlvbicgJiYgQ3Rvci5wcm90b3R5cGUpIHx8IG9iamVjdFByb3RvO1xuXG4gICAgICByZXR1cm4gdmFsdWUgPT09IHByb3RvO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIHN1aXRhYmxlIGZvciBzdHJpY3QgZXF1YWxpdHkgY29tcGFyaXNvbnMsIGkuZS4gYD09PWAuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlmIHN1aXRhYmxlIGZvciBzdHJpY3RcbiAgICAgKiAgZXF1YWxpdHkgY29tcGFyaXNvbnMsIGVsc2UgYGZhbHNlYC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBpc1N0cmljdENvbXBhcmFibGUodmFsdWUpIHtcbiAgICAgIHJldHVybiB2YWx1ZSA9PT0gdmFsdWUgJiYgIWlzT2JqZWN0KHZhbHVlKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBBIHNwZWNpYWxpemVkIHZlcnNpb24gb2YgYG1hdGNoZXNQcm9wZXJ0eWAgZm9yIHNvdXJjZSB2YWx1ZXMgc3VpdGFibGVcbiAgICAgKiBmb3Igc3RyaWN0IGVxdWFsaXR5IGNvbXBhcmlzb25zLCBpLmUuIGA9PT1gLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30ga2V5IFRoZSBrZXkgb2YgdGhlIHByb3BlcnR5IHRvIGdldC5cbiAgICAgKiBAcGFyYW0geyp9IHNyY1ZhbHVlIFRoZSB2YWx1ZSB0byBtYXRjaC5cbiAgICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyBzcGVjIGZ1bmN0aW9uLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIG1hdGNoZXNTdHJpY3RDb21wYXJhYmxlKGtleSwgc3JjVmFsdWUpIHtcbiAgICAgIHJldHVybiBmdW5jdGlvbihvYmplY3QpIHtcbiAgICAgICAgaWYgKG9iamVjdCA9PSBudWxsKSB7XG4gICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBvYmplY3Rba2V5XSA9PT0gc3JjVmFsdWUgJiZcbiAgICAgICAgICAoc3JjVmFsdWUgIT09IHVuZGVmaW5lZCB8fCAoa2V5IGluIE9iamVjdChvYmplY3QpKSk7XG4gICAgICB9O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEEgc3BlY2lhbGl6ZWQgdmVyc2lvbiBvZiBgXy5tZW1vaXplYCB3aGljaCBjbGVhcnMgdGhlIG1lbW9pemVkIGZ1bmN0aW9uJ3NcbiAgICAgKiBjYWNoZSB3aGVuIGl0IGV4Y2VlZHMgYE1BWF9NRU1PSVpFX1NJWkVgLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBmdW5jIFRoZSBmdW5jdGlvbiB0byBoYXZlIGl0cyBvdXRwdXQgbWVtb2l6ZWQuXG4gICAgICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgbWVtb2l6ZWQgZnVuY3Rpb24uXG4gICAgICovXG4gICAgZnVuY3Rpb24gbWVtb2l6ZUNhcHBlZChmdW5jKSB7XG4gICAgICB2YXIgcmVzdWx0ID0gbWVtb2l6ZShmdW5jLCBmdW5jdGlvbihrZXkpIHtcbiAgICAgICAgaWYgKGNhY2hlLnNpemUgPT09IE1BWF9NRU1PSVpFX1NJWkUpIHtcbiAgICAgICAgICBjYWNoZS5jbGVhcigpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBrZXk7XG4gICAgICB9KTtcblxuICAgICAgdmFyIGNhY2hlID0gcmVzdWx0LmNhY2hlO1xuICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBNZXJnZXMgdGhlIGZ1bmN0aW9uIG1ldGFkYXRhIG9mIGBzb3VyY2VgIGludG8gYGRhdGFgLlxuICAgICAqXG4gICAgICogTWVyZ2luZyBtZXRhZGF0YSByZWR1Y2VzIHRoZSBudW1iZXIgb2Ygd3JhcHBlcnMgdXNlZCB0byBpbnZva2UgYSBmdW5jdGlvbi5cbiAgICAgKiBUaGlzIGlzIHBvc3NpYmxlIGJlY2F1c2UgbWV0aG9kcyBsaWtlIGBfLmJpbmRgLCBgXy5jdXJyeWAsIGFuZCBgXy5wYXJ0aWFsYFxuICAgICAqIG1heSBiZSBhcHBsaWVkIHJlZ2FyZGxlc3Mgb2YgZXhlY3V0aW9uIG9yZGVyLiBNZXRob2RzIGxpa2UgYF8uYXJ5YCBhbmRcbiAgICAgKiBgXy5yZWFyZ2AgbW9kaWZ5IGZ1bmN0aW9uIGFyZ3VtZW50cywgbWFraW5nIHRoZSBvcmRlciBpbiB3aGljaCB0aGV5IGFyZVxuICAgICAqIGV4ZWN1dGVkIGltcG9ydGFudCwgcHJldmVudGluZyB0aGUgbWVyZ2luZyBvZiBtZXRhZGF0YS4gSG93ZXZlciwgd2UgbWFrZVxuICAgICAqIGFuIGV4Y2VwdGlvbiBmb3IgYSBzYWZlIGNvbWJpbmVkIGNhc2Ugd2hlcmUgY3VycmllZCBmdW5jdGlvbnMgaGF2ZSBgXy5hcnlgXG4gICAgICogYW5kIG9yIGBfLnJlYXJnYCBhcHBsaWVkLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBkYXRhIFRoZSBkZXN0aW5hdGlvbiBtZXRhZGF0YS5cbiAgICAgKiBAcGFyYW0ge0FycmF5fSBzb3VyY2UgVGhlIHNvdXJjZSBtZXRhZGF0YS5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgYGRhdGFgLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIG1lcmdlRGF0YShkYXRhLCBzb3VyY2UpIHtcbiAgICAgIHZhciBiaXRtYXNrID0gZGF0YVsxXSxcbiAgICAgICAgICBzcmNCaXRtYXNrID0gc291cmNlWzFdLFxuICAgICAgICAgIG5ld0JpdG1hc2sgPSBiaXRtYXNrIHwgc3JjQml0bWFzayxcbiAgICAgICAgICBpc0NvbW1vbiA9IG5ld0JpdG1hc2sgPCAoV1JBUF9CSU5EX0ZMQUcgfCBXUkFQX0JJTkRfS0VZX0ZMQUcgfCBXUkFQX0FSWV9GTEFHKTtcblxuICAgICAgdmFyIGlzQ29tYm8gPVxuICAgICAgICAoKHNyY0JpdG1hc2sgPT0gV1JBUF9BUllfRkxBRykgJiYgKGJpdG1hc2sgPT0gV1JBUF9DVVJSWV9GTEFHKSkgfHxcbiAgICAgICAgKChzcmNCaXRtYXNrID09IFdSQVBfQVJZX0ZMQUcpICYmIChiaXRtYXNrID09IFdSQVBfUkVBUkdfRkxBRykgJiYgKGRhdGFbN10ubGVuZ3RoIDw9IHNvdXJjZVs4XSkpIHx8XG4gICAgICAgICgoc3JjQml0bWFzayA9PSAoV1JBUF9BUllfRkxBRyB8IFdSQVBfUkVBUkdfRkxBRykpICYmIChzb3VyY2VbN10ubGVuZ3RoIDw9IHNvdXJjZVs4XSkgJiYgKGJpdG1hc2sgPT0gV1JBUF9DVVJSWV9GTEFHKSk7XG5cbiAgICAgIC8vIEV4aXQgZWFybHkgaWYgbWV0YWRhdGEgY2FuJ3QgYmUgbWVyZ2VkLlxuICAgICAgaWYgKCEoaXNDb21tb24gfHwgaXNDb21ibykpIHtcbiAgICAgICAgcmV0dXJuIGRhdGE7XG4gICAgICB9XG4gICAgICAvLyBVc2Ugc291cmNlIGB0aGlzQXJnYCBpZiBhdmFpbGFibGUuXG4gICAgICBpZiAoc3JjQml0bWFzayAmIFdSQVBfQklORF9GTEFHKSB7XG4gICAgICAgIGRhdGFbMl0gPSBzb3VyY2VbMl07XG4gICAgICAgIC8vIFNldCB3aGVuIGN1cnJ5aW5nIGEgYm91bmQgZnVuY3Rpb24uXG4gICAgICAgIG5ld0JpdG1hc2sgfD0gYml0bWFzayAmIFdSQVBfQklORF9GTEFHID8gMCA6IFdSQVBfQ1VSUllfQk9VTkRfRkxBRztcbiAgICAgIH1cbiAgICAgIC8vIENvbXBvc2UgcGFydGlhbCBhcmd1bWVudHMuXG4gICAgICB2YXIgdmFsdWUgPSBzb3VyY2VbM107XG4gICAgICBpZiAodmFsdWUpIHtcbiAgICAgICAgdmFyIHBhcnRpYWxzID0gZGF0YVszXTtcbiAgICAgICAgZGF0YVszXSA9IHBhcnRpYWxzID8gY29tcG9zZUFyZ3MocGFydGlhbHMsIHZhbHVlLCBzb3VyY2VbNF0pIDogdmFsdWU7XG4gICAgICAgIGRhdGFbNF0gPSBwYXJ0aWFscyA/IHJlcGxhY2VIb2xkZXJzKGRhdGFbM10sIFBMQUNFSE9MREVSKSA6IHNvdXJjZVs0XTtcbiAgICAgIH1cbiAgICAgIC8vIENvbXBvc2UgcGFydGlhbCByaWdodCBhcmd1bWVudHMuXG4gICAgICB2YWx1ZSA9IHNvdXJjZVs1XTtcbiAgICAgIGlmICh2YWx1ZSkge1xuICAgICAgICBwYXJ0aWFscyA9IGRhdGFbNV07XG4gICAgICAgIGRhdGFbNV0gPSBwYXJ0aWFscyA/IGNvbXBvc2VBcmdzUmlnaHQocGFydGlhbHMsIHZhbHVlLCBzb3VyY2VbNl0pIDogdmFsdWU7XG4gICAgICAgIGRhdGFbNl0gPSBwYXJ0aWFscyA/IHJlcGxhY2VIb2xkZXJzKGRhdGFbNV0sIFBMQUNFSE9MREVSKSA6IHNvdXJjZVs2XTtcbiAgICAgIH1cbiAgICAgIC8vIFVzZSBzb3VyY2UgYGFyZ1Bvc2AgaWYgYXZhaWxhYmxlLlxuICAgICAgdmFsdWUgPSBzb3VyY2VbN107XG4gICAgICBpZiAodmFsdWUpIHtcbiAgICAgICAgZGF0YVs3XSA9IHZhbHVlO1xuICAgICAgfVxuICAgICAgLy8gVXNlIHNvdXJjZSBgYXJ5YCBpZiBpdCdzIHNtYWxsZXIuXG4gICAgICBpZiAoc3JjQml0bWFzayAmIFdSQVBfQVJZX0ZMQUcpIHtcbiAgICAgICAgZGF0YVs4XSA9IGRhdGFbOF0gPT0gbnVsbCA/IHNvdXJjZVs4XSA6IG5hdGl2ZU1pbihkYXRhWzhdLCBzb3VyY2VbOF0pO1xuICAgICAgfVxuICAgICAgLy8gVXNlIHNvdXJjZSBgYXJpdHlgIGlmIG9uZSBpcyBub3QgcHJvdmlkZWQuXG4gICAgICBpZiAoZGF0YVs5XSA9PSBudWxsKSB7XG4gICAgICAgIGRhdGFbOV0gPSBzb3VyY2VbOV07XG4gICAgICB9XG4gICAgICAvLyBVc2Ugc291cmNlIGBmdW5jYCBhbmQgbWVyZ2UgYml0bWFza3MuXG4gICAgICBkYXRhWzBdID0gc291cmNlWzBdO1xuICAgICAgZGF0YVsxXSA9IG5ld0JpdG1hc2s7XG5cbiAgICAgIHJldHVybiBkYXRhO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoaXMgZnVuY3Rpb24gaXMgbGlrZVxuICAgICAqIFtgT2JqZWN0LmtleXNgXShodHRwOi8vZWNtYS1pbnRlcm5hdGlvbmFsLm9yZy9lY21hLTI2Mi83LjAvI3NlYy1vYmplY3Qua2V5cylcbiAgICAgKiBleGNlcHQgdGhhdCBpdCBpbmNsdWRlcyBpbmhlcml0ZWQgZW51bWVyYWJsZSBwcm9wZXJ0aWVzLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gcXVlcnkuXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBhcnJheSBvZiBwcm9wZXJ0eSBuYW1lcy5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBuYXRpdmVLZXlzSW4ob2JqZWN0KSB7XG4gICAgICB2YXIgcmVzdWx0ID0gW107XG4gICAgICBpZiAob2JqZWN0ICE9IG51bGwpIHtcbiAgICAgICAgZm9yICh2YXIga2V5IGluIE9iamVjdChvYmplY3QpKSB7XG4gICAgICAgICAgcmVzdWx0LnB1c2goa2V5KTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDb252ZXJ0cyBgdmFsdWVgIHRvIGEgc3RyaW5nIHVzaW5nIGBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nYC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY29udmVydC5cbiAgICAgKiBAcmV0dXJucyB7c3RyaW5nfSBSZXR1cm5zIHRoZSBjb252ZXJ0ZWQgc3RyaW5nLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIG9iamVjdFRvU3RyaW5nKHZhbHVlKSB7XG4gICAgICByZXR1cm4gbmF0aXZlT2JqZWN0VG9TdHJpbmcuY2FsbCh2YWx1ZSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQSBzcGVjaWFsaXplZCB2ZXJzaW9uIG9mIGBiYXNlUmVzdGAgd2hpY2ggdHJhbnNmb3JtcyB0aGUgcmVzdCBhcnJheS5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gZnVuYyBUaGUgZnVuY3Rpb24gdG8gYXBwbHkgYSByZXN0IHBhcmFtZXRlciB0by5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gW3N0YXJ0PWZ1bmMubGVuZ3RoLTFdIFRoZSBzdGFydCBwb3NpdGlvbiBvZiB0aGUgcmVzdCBwYXJhbWV0ZXIuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gdHJhbnNmb3JtIFRoZSByZXN0IGFycmF5IHRyYW5zZm9ybS5cbiAgICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyBmdW5jdGlvbi5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBvdmVyUmVzdChmdW5jLCBzdGFydCwgdHJhbnNmb3JtKSB7XG4gICAgICBzdGFydCA9IG5hdGl2ZU1heChzdGFydCA9PT0gdW5kZWZpbmVkID8gKGZ1bmMubGVuZ3RoIC0gMSkgOiBzdGFydCwgMCk7XG4gICAgICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgICAgIHZhciBhcmdzID0gYXJndW1lbnRzLFxuICAgICAgICAgICAgaW5kZXggPSAtMSxcbiAgICAgICAgICAgIGxlbmd0aCA9IG5hdGl2ZU1heChhcmdzLmxlbmd0aCAtIHN0YXJ0LCAwKSxcbiAgICAgICAgICAgIGFycmF5ID0gQXJyYXkobGVuZ3RoKTtcblxuICAgICAgICB3aGlsZSAoKytpbmRleCA8IGxlbmd0aCkge1xuICAgICAgICAgIGFycmF5W2luZGV4XSA9IGFyZ3Nbc3RhcnQgKyBpbmRleF07XG4gICAgICAgIH1cbiAgICAgICAgaW5kZXggPSAtMTtcbiAgICAgICAgdmFyIG90aGVyQXJncyA9IEFycmF5KHN0YXJ0ICsgMSk7XG4gICAgICAgIHdoaWxlICgrK2luZGV4IDwgc3RhcnQpIHtcbiAgICAgICAgICBvdGhlckFyZ3NbaW5kZXhdID0gYXJnc1tpbmRleF07XG4gICAgICAgIH1cbiAgICAgICAgb3RoZXJBcmdzW3N0YXJ0XSA9IHRyYW5zZm9ybShhcnJheSk7XG4gICAgICAgIHJldHVybiBhcHBseShmdW5jLCB0aGlzLCBvdGhlckFyZ3MpO1xuICAgICAgfTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBHZXRzIHRoZSBwYXJlbnQgdmFsdWUgYXQgYHBhdGhgIG9mIGBvYmplY3RgLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gcXVlcnkuXG4gICAgICogQHBhcmFtIHtBcnJheX0gcGF0aCBUaGUgcGF0aCB0byBnZXQgdGhlIHBhcmVudCB2YWx1ZSBvZi5cbiAgICAgKiBAcmV0dXJucyB7Kn0gUmV0dXJucyB0aGUgcGFyZW50IHZhbHVlLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHBhcmVudChvYmplY3QsIHBhdGgpIHtcbiAgICAgIHJldHVybiBwYXRoLmxlbmd0aCA8IDIgPyBvYmplY3QgOiBiYXNlR2V0KG9iamVjdCwgYmFzZVNsaWNlKHBhdGgsIDAsIC0xKSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogUmVvcmRlciBgYXJyYXlgIGFjY29yZGluZyB0byB0aGUgc3BlY2lmaWVkIGluZGV4ZXMgd2hlcmUgdGhlIGVsZW1lbnQgYXRcbiAgICAgKiB0aGUgZmlyc3QgaW5kZXggaXMgYXNzaWduZWQgYXMgdGhlIGZpcnN0IGVsZW1lbnQsIHRoZSBlbGVtZW50IGF0XG4gICAgICogdGhlIHNlY29uZCBpbmRleCBpcyBhc3NpZ25lZCBhcyB0aGUgc2Vjb25kIGVsZW1lbnQsIGFuZCBzbyBvbi5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIHJlb3JkZXIuXG4gICAgICogQHBhcmFtIHtBcnJheX0gaW5kZXhlcyBUaGUgYXJyYW5nZWQgYXJyYXkgaW5kZXhlcy5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgYGFycmF5YC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiByZW9yZGVyKGFycmF5LCBpbmRleGVzKSB7XG4gICAgICB2YXIgYXJyTGVuZ3RoID0gYXJyYXkubGVuZ3RoLFxuICAgICAgICAgIGxlbmd0aCA9IG5hdGl2ZU1pbihpbmRleGVzLmxlbmd0aCwgYXJyTGVuZ3RoKSxcbiAgICAgICAgICBvbGRBcnJheSA9IGNvcHlBcnJheShhcnJheSk7XG5cbiAgICAgIHdoaWxlIChsZW5ndGgtLSkge1xuICAgICAgICB2YXIgaW5kZXggPSBpbmRleGVzW2xlbmd0aF07XG4gICAgICAgIGFycmF5W2xlbmd0aF0gPSBpc0luZGV4KGluZGV4LCBhcnJMZW5ndGgpID8gb2xkQXJyYXlbaW5kZXhdIDogdW5kZWZpbmVkO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGFycmF5O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEdldHMgdGhlIHZhbHVlIGF0IGBrZXlgLCB1bmxlc3MgYGtleWAgaXMgXCJfX3Byb3RvX19cIiBvciBcImNvbnN0cnVjdG9yXCIuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBxdWVyeS5cbiAgICAgKiBAcGFyYW0ge3N0cmluZ30ga2V5IFRoZSBrZXkgb2YgdGhlIHByb3BlcnR5IHRvIGdldC5cbiAgICAgKiBAcmV0dXJucyB7Kn0gUmV0dXJucyB0aGUgcHJvcGVydHkgdmFsdWUuXG4gICAgICovXG4gICAgZnVuY3Rpb24gc2FmZUdldChvYmplY3QsIGtleSkge1xuICAgICAgaWYgKGtleSA9PT0gJ2NvbnN0cnVjdG9yJyAmJiB0eXBlb2Ygb2JqZWN0W2tleV0gPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICBpZiAoa2V5ID09ICdfX3Byb3RvX18nKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIG9iamVjdFtrZXldO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFNldHMgbWV0YWRhdGEgZm9yIGBmdW5jYC5cbiAgICAgKlxuICAgICAqICoqTm90ZToqKiBJZiB0aGlzIGZ1bmN0aW9uIGJlY29tZXMgaG90LCBpLmUuIGlzIGludm9rZWQgYSBsb3QgaW4gYSBzaG9ydFxuICAgICAqIHBlcmlvZCBvZiB0aW1lLCBpdCB3aWxsIHRyaXAgaXRzIGJyZWFrZXIgYW5kIHRyYW5zaXRpb24gdG8gYW4gaWRlbnRpdHlcbiAgICAgKiBmdW5jdGlvbiB0byBhdm9pZCBnYXJiYWdlIGNvbGxlY3Rpb24gcGF1c2VzIGluIFY4LiBTZWVcbiAgICAgKiBbVjggaXNzdWUgMjA3MF0oaHR0cHM6Ly9idWdzLmNocm9taXVtLm9yZy9wL3Y4L2lzc3Vlcy9kZXRhaWw/aWQ9MjA3MClcbiAgICAgKiBmb3IgbW9yZSBkZXRhaWxzLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBmdW5jIFRoZSBmdW5jdGlvbiB0byBhc3NvY2lhdGUgbWV0YWRhdGEgd2l0aC5cbiAgICAgKiBAcGFyYW0geyp9IGRhdGEgVGhlIG1ldGFkYXRhLlxuICAgICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyBgZnVuY2AuXG4gICAgICovXG4gICAgdmFyIHNldERhdGEgPSBzaG9ydE91dChiYXNlU2V0RGF0YSk7XG5cbiAgICAvKipcbiAgICAgKiBBIHNpbXBsZSB3cmFwcGVyIGFyb3VuZCB0aGUgZ2xvYmFsIFtgc2V0VGltZW91dGBdKGh0dHBzOi8vbWRuLmlvL3NldFRpbWVvdXQpLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBmdW5jIFRoZSBmdW5jdGlvbiB0byBkZWxheS5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gd2FpdCBUaGUgbnVtYmVyIG9mIG1pbGxpc2Vjb25kcyB0byBkZWxheSBpbnZvY2F0aW9uLlxuICAgICAqIEByZXR1cm5zIHtudW1iZXJ8T2JqZWN0fSBSZXR1cm5zIHRoZSB0aW1lciBpZCBvciB0aW1lb3V0IG9iamVjdC5cbiAgICAgKi9cbiAgICB2YXIgc2V0VGltZW91dCA9IGN0eFNldFRpbWVvdXQgfHwgZnVuY3Rpb24oZnVuYywgd2FpdCkge1xuICAgICAgcmV0dXJuIHJvb3Quc2V0VGltZW91dChmdW5jLCB3YWl0KTtcbiAgICB9O1xuXG4gICAgLyoqXG4gICAgICogU2V0cyB0aGUgYHRvU3RyaW5nYCBtZXRob2Qgb2YgYGZ1bmNgIHRvIHJldHVybiBgc3RyaW5nYC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gZnVuYyBUaGUgZnVuY3Rpb24gdG8gbW9kaWZ5LlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IHN0cmluZyBUaGUgYHRvU3RyaW5nYCByZXN1bHQuXG4gICAgICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIGBmdW5jYC5cbiAgICAgKi9cbiAgICB2YXIgc2V0VG9TdHJpbmcgPSBzaG9ydE91dChiYXNlU2V0VG9TdHJpbmcpO1xuXG4gICAgLyoqXG4gICAgICogU2V0cyB0aGUgYHRvU3RyaW5nYCBtZXRob2Qgb2YgYHdyYXBwZXJgIHRvIG1pbWljIHRoZSBzb3VyY2Ugb2YgYHJlZmVyZW5jZWBcbiAgICAgKiB3aXRoIHdyYXBwZXIgZGV0YWlscyBpbiBhIGNvbW1lbnQgYXQgdGhlIHRvcCBvZiB0aGUgc291cmNlIGJvZHkuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IHdyYXBwZXIgVGhlIGZ1bmN0aW9uIHRvIG1vZGlmeS5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSByZWZlcmVuY2UgVGhlIHJlZmVyZW5jZSBmdW5jdGlvbi5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gYml0bWFzayBUaGUgYml0bWFzayBmbGFncy4gU2VlIGBjcmVhdGVXcmFwYCBmb3IgbW9yZSBkZXRhaWxzLlxuICAgICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyBgd3JhcHBlcmAuXG4gICAgICovXG4gICAgZnVuY3Rpb24gc2V0V3JhcFRvU3RyaW5nKHdyYXBwZXIsIHJlZmVyZW5jZSwgYml0bWFzaykge1xuICAgICAgdmFyIHNvdXJjZSA9IChyZWZlcmVuY2UgKyAnJyk7XG4gICAgICByZXR1cm4gc2V0VG9TdHJpbmcod3JhcHBlciwgaW5zZXJ0V3JhcERldGFpbHMoc291cmNlLCB1cGRhdGVXcmFwRGV0YWlscyhnZXRXcmFwRGV0YWlscyhzb3VyY2UpLCBiaXRtYXNrKSkpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBmdW5jdGlvbiB0aGF0J2xsIHNob3J0IG91dCBhbmQgaW52b2tlIGBpZGVudGl0eWAgaW5zdGVhZFxuICAgICAqIG9mIGBmdW5jYCB3aGVuIGl0J3MgY2FsbGVkIGBIT1RfQ09VTlRgIG9yIG1vcmUgdGltZXMgaW4gYEhPVF9TUEFOYFxuICAgICAqIG1pbGxpc2Vjb25kcy5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gZnVuYyBUaGUgZnVuY3Rpb24gdG8gcmVzdHJpY3QuXG4gICAgICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgc2hvcnRhYmxlIGZ1bmN0aW9uLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHNob3J0T3V0KGZ1bmMpIHtcbiAgICAgIHZhciBjb3VudCA9IDAsXG4gICAgICAgICAgbGFzdENhbGxlZCA9IDA7XG5cbiAgICAgIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICAgICAgdmFyIHN0YW1wID0gbmF0aXZlTm93KCksXG4gICAgICAgICAgICByZW1haW5pbmcgPSBIT1RfU1BBTiAtIChzdGFtcCAtIGxhc3RDYWxsZWQpO1xuXG4gICAgICAgIGxhc3RDYWxsZWQgPSBzdGFtcDtcbiAgICAgICAgaWYgKHJlbWFpbmluZyA+IDApIHtcbiAgICAgICAgICBpZiAoKytjb3VudCA+PSBIT1RfQ09VTlQpIHtcbiAgICAgICAgICAgIHJldHVybiBhcmd1bWVudHNbMF07XG4gICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGNvdW50ID0gMDtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gZnVuYy5hcHBseSh1bmRlZmluZWQsIGFyZ3VtZW50cyk7XG4gICAgICB9O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEEgc3BlY2lhbGl6ZWQgdmVyc2lvbiBvZiBgXy5zaHVmZmxlYCB3aGljaCBtdXRhdGVzIGFuZCBzZXRzIHRoZSBzaXplIG9mIGBhcnJheWAuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBzaHVmZmxlLlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBbc2l6ZT1hcnJheS5sZW5ndGhdIFRoZSBzaXplIG9mIGBhcnJheWAuXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIGBhcnJheWAuXG4gICAgICovXG4gICAgZnVuY3Rpb24gc2h1ZmZsZVNlbGYoYXJyYXksIHNpemUpIHtcbiAgICAgIHZhciBpbmRleCA9IC0xLFxuICAgICAgICAgIGxlbmd0aCA9IGFycmF5Lmxlbmd0aCxcbiAgICAgICAgICBsYXN0SW5kZXggPSBsZW5ndGggLSAxO1xuXG4gICAgICBzaXplID0gc2l6ZSA9PT0gdW5kZWZpbmVkID8gbGVuZ3RoIDogc2l6ZTtcbiAgICAgIHdoaWxlICgrK2luZGV4IDwgc2l6ZSkge1xuICAgICAgICB2YXIgcmFuZCA9IGJhc2VSYW5kb20oaW5kZXgsIGxhc3RJbmRleCksXG4gICAgICAgICAgICB2YWx1ZSA9IGFycmF5W3JhbmRdO1xuXG4gICAgICAgIGFycmF5W3JhbmRdID0gYXJyYXlbaW5kZXhdO1xuICAgICAgICBhcnJheVtpbmRleF0gPSB2YWx1ZTtcbiAgICAgIH1cbiAgICAgIGFycmF5Lmxlbmd0aCA9IHNpemU7XG4gICAgICByZXR1cm4gYXJyYXk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ29udmVydHMgYHN0cmluZ2AgdG8gYSBwcm9wZXJ0eSBwYXRoIGFycmF5LlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gc3RyaW5nIFRoZSBzdHJpbmcgdG8gY29udmVydC5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIHByb3BlcnR5IHBhdGggYXJyYXkuXG4gICAgICovXG4gICAgdmFyIHN0cmluZ1RvUGF0aCA9IG1lbW9pemVDYXBwZWQoZnVuY3Rpb24oc3RyaW5nKSB7XG4gICAgICB2YXIgcmVzdWx0ID0gW107XG4gICAgICBpZiAoc3RyaW5nLmNoYXJDb2RlQXQoMCkgPT09IDQ2IC8qIC4gKi8pIHtcbiAgICAgICAgcmVzdWx0LnB1c2goJycpO1xuICAgICAgfVxuICAgICAgc3RyaW5nLnJlcGxhY2UocmVQcm9wTmFtZSwgZnVuY3Rpb24obWF0Y2gsIG51bWJlciwgcXVvdGUsIHN1YlN0cmluZykge1xuICAgICAgICByZXN1bHQucHVzaChxdW90ZSA/IHN1YlN0cmluZy5yZXBsYWNlKHJlRXNjYXBlQ2hhciwgJyQxJykgOiAobnVtYmVyIHx8IG1hdGNoKSk7XG4gICAgICB9KTtcbiAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfSk7XG5cbiAgICAvKipcbiAgICAgKiBDb252ZXJ0cyBgdmFsdWVgIHRvIGEgc3RyaW5nIGtleSBpZiBpdCdzIG5vdCBhIHN0cmluZyBvciBzeW1ib2wuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGluc3BlY3QuXG4gICAgICogQHJldHVybnMge3N0cmluZ3xzeW1ib2x9IFJldHVybnMgdGhlIGtleS5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiB0b0tleSh2YWx1ZSkge1xuICAgICAgaWYgKHR5cGVvZiB2YWx1ZSA9PSAnc3RyaW5nJyB8fCBpc1N5bWJvbCh2YWx1ZSkpIHtcbiAgICAgICAgcmV0dXJuIHZhbHVlO1xuICAgICAgfVxuICAgICAgdmFyIHJlc3VsdCA9ICh2YWx1ZSArICcnKTtcbiAgICAgIHJldHVybiAocmVzdWx0ID09ICcwJyAmJiAoMSAvIHZhbHVlKSA9PSAtSU5GSU5JVFkpID8gJy0wJyA6IHJlc3VsdDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDb252ZXJ0cyBgZnVuY2AgdG8gaXRzIHNvdXJjZSBjb2RlLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBmdW5jIFRoZSBmdW5jdGlvbiB0byBjb252ZXJ0LlxuICAgICAqIEByZXR1cm5zIHtzdHJpbmd9IFJldHVybnMgdGhlIHNvdXJjZSBjb2RlLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHRvU291cmNlKGZ1bmMpIHtcbiAgICAgIGlmIChmdW5jICE9IG51bGwpIHtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICByZXR1cm4gZnVuY1RvU3RyaW5nLmNhbGwoZnVuYyk7XG4gICAgICAgIH0gY2F0Y2ggKGUpIHt9XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgcmV0dXJuIChmdW5jICsgJycpO1xuICAgICAgICB9IGNhdGNoIChlKSB7fVxuICAgICAgfVxuICAgICAgcmV0dXJuICcnO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFVwZGF0ZXMgd3JhcHBlciBgZGV0YWlsc2AgYmFzZWQgb24gYGJpdG1hc2tgIGZsYWdzLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IGRldGFpbHMgVGhlIGRldGFpbHMgdG8gbW9kaWZ5LlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBiaXRtYXNrIFRoZSBiaXRtYXNrIGZsYWdzLiBTZWUgYGNyZWF0ZVdyYXBgIGZvciBtb3JlIGRldGFpbHMuXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIGBkZXRhaWxzYC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiB1cGRhdGVXcmFwRGV0YWlscyhkZXRhaWxzLCBiaXRtYXNrKSB7XG4gICAgICBhcnJheUVhY2god3JhcEZsYWdzLCBmdW5jdGlvbihwYWlyKSB7XG4gICAgICAgIHZhciB2YWx1ZSA9ICdfLicgKyBwYWlyWzBdO1xuICAgICAgICBpZiAoKGJpdG1hc2sgJiBwYWlyWzFdKSAmJiAhYXJyYXlJbmNsdWRlcyhkZXRhaWxzLCB2YWx1ZSkpIHtcbiAgICAgICAgICBkZXRhaWxzLnB1c2godmFsdWUpO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICAgIHJldHVybiBkZXRhaWxzLnNvcnQoKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgY2xvbmUgb2YgYHdyYXBwZXJgLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gd3JhcHBlciBUaGUgd3JhcHBlciB0byBjbG9uZS5cbiAgICAgKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIHRoZSBjbG9uZWQgd3JhcHBlci5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiB3cmFwcGVyQ2xvbmUod3JhcHBlcikge1xuICAgICAgaWYgKHdyYXBwZXIgaW5zdGFuY2VvZiBMYXp5V3JhcHBlcikge1xuICAgICAgICByZXR1cm4gd3JhcHBlci5jbG9uZSgpO1xuICAgICAgfVxuICAgICAgdmFyIHJlc3VsdCA9IG5ldyBMb2Rhc2hXcmFwcGVyKHdyYXBwZXIuX193cmFwcGVkX18sIHdyYXBwZXIuX19jaGFpbl9fKTtcbiAgICAgIHJlc3VsdC5fX2FjdGlvbnNfXyA9IGNvcHlBcnJheSh3cmFwcGVyLl9fYWN0aW9uc19fKTtcbiAgICAgIHJlc3VsdC5fX2luZGV4X18gID0gd3JhcHBlci5fX2luZGV4X187XG4gICAgICByZXN1bHQuX192YWx1ZXNfXyA9IHdyYXBwZXIuX192YWx1ZXNfXztcbiAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuXG4gICAgLyotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0qL1xuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhbiBhcnJheSBvZiBlbGVtZW50cyBzcGxpdCBpbnRvIGdyb3VwcyB0aGUgbGVuZ3RoIG9mIGBzaXplYC5cbiAgICAgKiBJZiBgYXJyYXlgIGNhbid0IGJlIHNwbGl0IGV2ZW5seSwgdGhlIGZpbmFsIGNodW5rIHdpbGwgYmUgdGhlIHJlbWFpbmluZ1xuICAgICAqIGVsZW1lbnRzLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDMuMC4wXG4gICAgICogQGNhdGVnb3J5IEFycmF5XG4gICAgICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIHByb2Nlc3MuXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IFtzaXplPTFdIFRoZSBsZW5ndGggb2YgZWFjaCBjaHVua1xuICAgICAqIEBwYXJhbS0ge09iamVjdH0gW2d1YXJkXSBFbmFibGVzIHVzZSBhcyBhbiBpdGVyYXRlZSBmb3IgbWV0aG9kcyBsaWtlIGBfLm1hcGAuXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBuZXcgYXJyYXkgb2YgY2h1bmtzLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLmNodW5rKFsnYScsICdiJywgJ2MnLCAnZCddLCAyKTtcbiAgICAgKiAvLyA9PiBbWydhJywgJ2InXSwgWydjJywgJ2QnXV1cbiAgICAgKlxuICAgICAqIF8uY2h1bmsoWydhJywgJ2InLCAnYycsICdkJ10sIDMpO1xuICAgICAqIC8vID0+IFtbJ2EnLCAnYicsICdjJ10sIFsnZCddXVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGNodW5rKGFycmF5LCBzaXplLCBndWFyZCkge1xuICAgICAgaWYgKChndWFyZCA/IGlzSXRlcmF0ZWVDYWxsKGFycmF5LCBzaXplLCBndWFyZCkgOiBzaXplID09PSB1bmRlZmluZWQpKSB7XG4gICAgICAgIHNpemUgPSAxO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgc2l6ZSA9IG5hdGl2ZU1heCh0b0ludGVnZXIoc2l6ZSksIDApO1xuICAgICAgfVxuICAgICAgdmFyIGxlbmd0aCA9IGFycmF5ID09IG51bGwgPyAwIDogYXJyYXkubGVuZ3RoO1xuICAgICAgaWYgKCFsZW5ndGggfHwgc2l6ZSA8IDEpIHtcbiAgICAgICAgcmV0dXJuIFtdO1xuICAgICAgfVxuICAgICAgdmFyIGluZGV4ID0gMCxcbiAgICAgICAgICByZXNJbmRleCA9IDAsXG4gICAgICAgICAgcmVzdWx0ID0gQXJyYXkobmF0aXZlQ2VpbChsZW5ndGggLyBzaXplKSk7XG5cbiAgICAgIHdoaWxlIChpbmRleCA8IGxlbmd0aCkge1xuICAgICAgICByZXN1bHRbcmVzSW5kZXgrK10gPSBiYXNlU2xpY2UoYXJyYXksIGluZGV4LCAoaW5kZXggKz0gc2l6ZSkpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGFuIGFycmF5IHdpdGggYWxsIGZhbHNleSB2YWx1ZXMgcmVtb3ZlZC4gVGhlIHZhbHVlcyBgZmFsc2VgLCBgbnVsbGAsXG4gICAgICogYDBgLCBgXCJcImAsIGB1bmRlZmluZWRgLCBhbmQgYE5hTmAgYXJlIGZhbHNleS5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAwLjEuMFxuICAgICAqIEBjYXRlZ29yeSBBcnJheVxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBjb21wYWN0LlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgbmV3IGFycmF5IG9mIGZpbHRlcmVkIHZhbHVlcy5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5jb21wYWN0KFswLCAxLCBmYWxzZSwgMiwgJycsIDNdKTtcbiAgICAgKiAvLyA9PiBbMSwgMiwgM11cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBjb21wYWN0KGFycmF5KSB7XG4gICAgICB2YXIgaW5kZXggPSAtMSxcbiAgICAgICAgICBsZW5ndGggPSBhcnJheSA9PSBudWxsID8gMCA6IGFycmF5Lmxlbmd0aCxcbiAgICAgICAgICByZXNJbmRleCA9IDAsXG4gICAgICAgICAgcmVzdWx0ID0gW107XG5cbiAgICAgIHdoaWxlICgrK2luZGV4IDwgbGVuZ3RoKSB7XG4gICAgICAgIHZhciB2YWx1ZSA9IGFycmF5W2luZGV4XTtcbiAgICAgICAgaWYgKHZhbHVlKSB7XG4gICAgICAgICAgcmVzdWx0W3Jlc0luZGV4KytdID0gdmFsdWU7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIG5ldyBhcnJheSBjb25jYXRlbmF0aW5nIGBhcnJheWAgd2l0aCBhbnkgYWRkaXRpb25hbCBhcnJheXNcbiAgICAgKiBhbmQvb3IgdmFsdWVzLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMC4wXG4gICAgICogQGNhdGVnb3J5IEFycmF5XG4gICAgICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIGNvbmNhdGVuYXRlLlxuICAgICAqIEBwYXJhbSB7Li4uKn0gW3ZhbHVlc10gVGhlIHZhbHVlcyB0byBjb25jYXRlbmF0ZS5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIG5ldyBjb25jYXRlbmF0ZWQgYXJyYXkuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciBhcnJheSA9IFsxXTtcbiAgICAgKiB2YXIgb3RoZXIgPSBfLmNvbmNhdChhcnJheSwgMiwgWzNdLCBbWzRdXSk7XG4gICAgICpcbiAgICAgKiBjb25zb2xlLmxvZyhvdGhlcik7XG4gICAgICogLy8gPT4gWzEsIDIsIDMsIFs0XV1cbiAgICAgKlxuICAgICAqIGNvbnNvbGUubG9nKGFycmF5KTtcbiAgICAgKiAvLyA9PiBbMV1cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBjb25jYXQoKSB7XG4gICAgICB2YXIgbGVuZ3RoID0gYXJndW1lbnRzLmxlbmd0aDtcbiAgICAgIGlmICghbGVuZ3RoKSB7XG4gICAgICAgIHJldHVybiBbXTtcbiAgICAgIH1cbiAgICAgIHZhciBhcmdzID0gQXJyYXkobGVuZ3RoIC0gMSksXG4gICAgICAgICAgYXJyYXkgPSBhcmd1bWVudHNbMF0sXG4gICAgICAgICAgaW5kZXggPSBsZW5ndGg7XG5cbiAgICAgIHdoaWxlIChpbmRleC0tKSB7XG4gICAgICAgIGFyZ3NbaW5kZXggLSAxXSA9IGFyZ3VtZW50c1tpbmRleF07XG4gICAgICB9XG4gICAgICByZXR1cm4gYXJyYXlQdXNoKGlzQXJyYXkoYXJyYXkpID8gY29weUFycmF5KGFycmF5KSA6IFthcnJheV0sIGJhc2VGbGF0dGVuKGFyZ3MsIDEpKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGFuIGFycmF5IG9mIGBhcnJheWAgdmFsdWVzIG5vdCBpbmNsdWRlZCBpbiB0aGUgb3RoZXIgZ2l2ZW4gYXJyYXlzXG4gICAgICogdXNpbmcgW2BTYW1lVmFsdWVaZXJvYF0oaHR0cDovL2VjbWEtaW50ZXJuYXRpb25hbC5vcmcvZWNtYS0yNjIvNy4wLyNzZWMtc2FtZXZhbHVlemVybylcbiAgICAgKiBmb3IgZXF1YWxpdHkgY29tcGFyaXNvbnMuIFRoZSBvcmRlciBhbmQgcmVmZXJlbmNlcyBvZiByZXN1bHQgdmFsdWVzIGFyZVxuICAgICAqIGRldGVybWluZWQgYnkgdGhlIGZpcnN0IGFycmF5LlxuICAgICAqXG4gICAgICogKipOb3RlOioqIFVubGlrZSBgXy5wdWxsQWxsYCwgdGhpcyBtZXRob2QgcmV0dXJucyBhIG5ldyBhcnJheS5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAwLjEuMFxuICAgICAqIEBjYXRlZ29yeSBBcnJheVxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBpbnNwZWN0LlxuICAgICAqIEBwYXJhbSB7Li4uQXJyYXl9IFt2YWx1ZXNdIFRoZSB2YWx1ZXMgdG8gZXhjbHVkZS5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIG5ldyBhcnJheSBvZiBmaWx0ZXJlZCB2YWx1ZXMuXG4gICAgICogQHNlZSBfLndpdGhvdXQsIF8ueG9yXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uZGlmZmVyZW5jZShbMiwgMV0sIFsyLCAzXSk7XG4gICAgICogLy8gPT4gWzFdXG4gICAgICovXG4gICAgdmFyIGRpZmZlcmVuY2UgPSBiYXNlUmVzdChmdW5jdGlvbihhcnJheSwgdmFsdWVzKSB7XG4gICAgICByZXR1cm4gaXNBcnJheUxpa2VPYmplY3QoYXJyYXkpXG4gICAgICAgID8gYmFzZURpZmZlcmVuY2UoYXJyYXksIGJhc2VGbGF0dGVuKHZhbHVlcywgMSwgaXNBcnJheUxpa2VPYmplY3QsIHRydWUpKVxuICAgICAgICA6IFtdO1xuICAgIH0pO1xuXG4gICAgLyoqXG4gICAgICogVGhpcyBtZXRob2QgaXMgbGlrZSBgXy5kaWZmZXJlbmNlYCBleGNlcHQgdGhhdCBpdCBhY2NlcHRzIGBpdGVyYXRlZWAgd2hpY2hcbiAgICAgKiBpcyBpbnZva2VkIGZvciBlYWNoIGVsZW1lbnQgb2YgYGFycmF5YCBhbmQgYHZhbHVlc2AgdG8gZ2VuZXJhdGUgdGhlIGNyaXRlcmlvblxuICAgICAqIGJ5IHdoaWNoIHRoZXkncmUgY29tcGFyZWQuIFRoZSBvcmRlciBhbmQgcmVmZXJlbmNlcyBvZiByZXN1bHQgdmFsdWVzIGFyZVxuICAgICAqIGRldGVybWluZWQgYnkgdGhlIGZpcnN0IGFycmF5LiBUaGUgaXRlcmF0ZWUgaXMgaW52b2tlZCB3aXRoIG9uZSBhcmd1bWVudDpcbiAgICAgKiAodmFsdWUpLlxuICAgICAqXG4gICAgICogKipOb3RlOioqIFVubGlrZSBgXy5wdWxsQWxsQnlgLCB0aGlzIG1ldGhvZCByZXR1cm5zIGEgbmV3IGFycmF5LlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMC4wXG4gICAgICogQGNhdGVnb3J5IEFycmF5XG4gICAgICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIGluc3BlY3QuXG4gICAgICogQHBhcmFtIHsuLi5BcnJheX0gW3ZhbHVlc10gVGhlIHZhbHVlcyB0byBleGNsdWRlLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtpdGVyYXRlZT1fLmlkZW50aXR5XSBUaGUgaXRlcmF0ZWUgaW52b2tlZCBwZXIgZWxlbWVudC5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIG5ldyBhcnJheSBvZiBmaWx0ZXJlZCB2YWx1ZXMuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uZGlmZmVyZW5jZUJ5KFsyLjEsIDEuMl0sIFsyLjMsIDMuNF0sIE1hdGguZmxvb3IpO1xuICAgICAqIC8vID0+IFsxLjJdXG4gICAgICpcbiAgICAgKiAvLyBUaGUgYF8ucHJvcGVydHlgIGl0ZXJhdGVlIHNob3J0aGFuZC5cbiAgICAgKiBfLmRpZmZlcmVuY2VCeShbeyAneCc6IDIgfSwgeyAneCc6IDEgfV0sIFt7ICd4JzogMSB9XSwgJ3gnKTtcbiAgICAgKiAvLyA9PiBbeyAneCc6IDIgfV1cbiAgICAgKi9cbiAgICB2YXIgZGlmZmVyZW5jZUJ5ID0gYmFzZVJlc3QoZnVuY3Rpb24oYXJyYXksIHZhbHVlcykge1xuICAgICAgdmFyIGl0ZXJhdGVlID0gbGFzdCh2YWx1ZXMpO1xuICAgICAgaWYgKGlzQXJyYXlMaWtlT2JqZWN0KGl0ZXJhdGVlKSkge1xuICAgICAgICBpdGVyYXRlZSA9IHVuZGVmaW5lZDtcbiAgICAgIH1cbiAgICAgIHJldHVybiBpc0FycmF5TGlrZU9iamVjdChhcnJheSlcbiAgICAgICAgPyBiYXNlRGlmZmVyZW5jZShhcnJheSwgYmFzZUZsYXR0ZW4odmFsdWVzLCAxLCBpc0FycmF5TGlrZU9iamVjdCwgdHJ1ZSksIGdldEl0ZXJhdGVlKGl0ZXJhdGVlLCAyKSlcbiAgICAgICAgOiBbXTtcbiAgICB9KTtcblxuICAgIC8qKlxuICAgICAqIFRoaXMgbWV0aG9kIGlzIGxpa2UgYF8uZGlmZmVyZW5jZWAgZXhjZXB0IHRoYXQgaXQgYWNjZXB0cyBgY29tcGFyYXRvcmBcbiAgICAgKiB3aGljaCBpcyBpbnZva2VkIHRvIGNvbXBhcmUgZWxlbWVudHMgb2YgYGFycmF5YCB0byBgdmFsdWVzYC4gVGhlIG9yZGVyIGFuZFxuICAgICAqIHJlZmVyZW5jZXMgb2YgcmVzdWx0IHZhbHVlcyBhcmUgZGV0ZXJtaW5lZCBieSB0aGUgZmlyc3QgYXJyYXkuIFRoZSBjb21wYXJhdG9yXG4gICAgICogaXMgaW52b2tlZCB3aXRoIHR3byBhcmd1bWVudHM6IChhcnJWYWwsIG90aFZhbCkuXG4gICAgICpcbiAgICAgKiAqKk5vdGU6KiogVW5saWtlIGBfLnB1bGxBbGxXaXRoYCwgdGhpcyBtZXRob2QgcmV0dXJucyBhIG5ldyBhcnJheS5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjAuMFxuICAgICAqIEBjYXRlZ29yeSBBcnJheVxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBpbnNwZWN0LlxuICAgICAqIEBwYXJhbSB7Li4uQXJyYXl9IFt2YWx1ZXNdIFRoZSB2YWx1ZXMgdG8gZXhjbHVkZS5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbY29tcGFyYXRvcl0gVGhlIGNvbXBhcmF0b3IgaW52b2tlZCBwZXIgZWxlbWVudC5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIG5ldyBhcnJheSBvZiBmaWx0ZXJlZCB2YWx1ZXMuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciBvYmplY3RzID0gW3sgJ3gnOiAxLCAneSc6IDIgfSwgeyAneCc6IDIsICd5JzogMSB9XTtcbiAgICAgKlxuICAgICAqIF8uZGlmZmVyZW5jZVdpdGgob2JqZWN0cywgW3sgJ3gnOiAxLCAneSc6IDIgfV0sIF8uaXNFcXVhbCk7XG4gICAgICogLy8gPT4gW3sgJ3gnOiAyLCAneSc6IDEgfV1cbiAgICAgKi9cbiAgICB2YXIgZGlmZmVyZW5jZVdpdGggPSBiYXNlUmVzdChmdW5jdGlvbihhcnJheSwgdmFsdWVzKSB7XG4gICAgICB2YXIgY29tcGFyYXRvciA9IGxhc3QodmFsdWVzKTtcbiAgICAgIGlmIChpc0FycmF5TGlrZU9iamVjdChjb21wYXJhdG9yKSkge1xuICAgICAgICBjb21wYXJhdG9yID0gdW5kZWZpbmVkO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGlzQXJyYXlMaWtlT2JqZWN0KGFycmF5KVxuICAgICAgICA/IGJhc2VEaWZmZXJlbmNlKGFycmF5LCBiYXNlRmxhdHRlbih2YWx1ZXMsIDEsIGlzQXJyYXlMaWtlT2JqZWN0LCB0cnVlKSwgdW5kZWZpbmVkLCBjb21wYXJhdG9yKVxuICAgICAgICA6IFtdO1xuICAgIH0pO1xuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIHNsaWNlIG9mIGBhcnJheWAgd2l0aCBgbmAgZWxlbWVudHMgZHJvcHBlZCBmcm9tIHRoZSBiZWdpbm5pbmcuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMC41LjBcbiAgICAgKiBAY2F0ZWdvcnkgQXJyYXlcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gcXVlcnkuXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IFtuPTFdIFRoZSBudW1iZXIgb2YgZWxlbWVudHMgdG8gZHJvcC5cbiAgICAgKiBAcGFyYW0tIHtPYmplY3R9IFtndWFyZF0gRW5hYmxlcyB1c2UgYXMgYW4gaXRlcmF0ZWUgZm9yIG1ldGhvZHMgbGlrZSBgXy5tYXBgLlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgc2xpY2Ugb2YgYGFycmF5YC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5kcm9wKFsxLCAyLCAzXSk7XG4gICAgICogLy8gPT4gWzIsIDNdXG4gICAgICpcbiAgICAgKiBfLmRyb3AoWzEsIDIsIDNdLCAyKTtcbiAgICAgKiAvLyA9PiBbM11cbiAgICAgKlxuICAgICAqIF8uZHJvcChbMSwgMiwgM10sIDUpO1xuICAgICAqIC8vID0+IFtdXG4gICAgICpcbiAgICAgKiBfLmRyb3AoWzEsIDIsIDNdLCAwKTtcbiAgICAgKiAvLyA9PiBbMSwgMiwgM11cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBkcm9wKGFycmF5LCBuLCBndWFyZCkge1xuICAgICAgdmFyIGxlbmd0aCA9IGFycmF5ID09IG51bGwgPyAwIDogYXJyYXkubGVuZ3RoO1xuICAgICAgaWYgKCFsZW5ndGgpIHtcbiAgICAgICAgcmV0dXJuIFtdO1xuICAgICAgfVxuICAgICAgbiA9IChndWFyZCB8fCBuID09PSB1bmRlZmluZWQpID8gMSA6IHRvSW50ZWdlcihuKTtcbiAgICAgIHJldHVybiBiYXNlU2xpY2UoYXJyYXksIG4gPCAwID8gMCA6IG4sIGxlbmd0aCk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIHNsaWNlIG9mIGBhcnJheWAgd2l0aCBgbmAgZWxlbWVudHMgZHJvcHBlZCBmcm9tIHRoZSBlbmQuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMy4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgQXJyYXlcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gcXVlcnkuXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IFtuPTFdIFRoZSBudW1iZXIgb2YgZWxlbWVudHMgdG8gZHJvcC5cbiAgICAgKiBAcGFyYW0tIHtPYmplY3R9IFtndWFyZF0gRW5hYmxlcyB1c2UgYXMgYW4gaXRlcmF0ZWUgZm9yIG1ldGhvZHMgbGlrZSBgXy5tYXBgLlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgc2xpY2Ugb2YgYGFycmF5YC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5kcm9wUmlnaHQoWzEsIDIsIDNdKTtcbiAgICAgKiAvLyA9PiBbMSwgMl1cbiAgICAgKlxuICAgICAqIF8uZHJvcFJpZ2h0KFsxLCAyLCAzXSwgMik7XG4gICAgICogLy8gPT4gWzFdXG4gICAgICpcbiAgICAgKiBfLmRyb3BSaWdodChbMSwgMiwgM10sIDUpO1xuICAgICAqIC8vID0+IFtdXG4gICAgICpcbiAgICAgKiBfLmRyb3BSaWdodChbMSwgMiwgM10sIDApO1xuICAgICAqIC8vID0+IFsxLCAyLCAzXVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGRyb3BSaWdodChhcnJheSwgbiwgZ3VhcmQpIHtcbiAgICAgIHZhciBsZW5ndGggPSBhcnJheSA9PSBudWxsID8gMCA6IGFycmF5Lmxlbmd0aDtcbiAgICAgIGlmICghbGVuZ3RoKSB7XG4gICAgICAgIHJldHVybiBbXTtcbiAgICAgIH1cbiAgICAgIG4gPSAoZ3VhcmQgfHwgbiA9PT0gdW5kZWZpbmVkKSA/IDEgOiB0b0ludGVnZXIobik7XG4gICAgICBuID0gbGVuZ3RoIC0gbjtcbiAgICAgIHJldHVybiBiYXNlU2xpY2UoYXJyYXksIDAsIG4gPCAwID8gMCA6IG4pO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBzbGljZSBvZiBgYXJyYXlgIGV4Y2x1ZGluZyBlbGVtZW50cyBkcm9wcGVkIGZyb20gdGhlIGVuZC5cbiAgICAgKiBFbGVtZW50cyBhcmUgZHJvcHBlZCB1bnRpbCBgcHJlZGljYXRlYCByZXR1cm5zIGZhbHNleS4gVGhlIHByZWRpY2F0ZSBpc1xuICAgICAqIGludm9rZWQgd2l0aCB0aHJlZSBhcmd1bWVudHM6ICh2YWx1ZSwgaW5kZXgsIGFycmF5KS5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAzLjAuMFxuICAgICAqIEBjYXRlZ29yeSBBcnJheVxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBxdWVyeS5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbcHJlZGljYXRlPV8uaWRlbnRpdHldIFRoZSBmdW5jdGlvbiBpbnZva2VkIHBlciBpdGVyYXRpb24uXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBzbGljZSBvZiBgYXJyYXlgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgdXNlcnMgPSBbXG4gICAgICogICB7ICd1c2VyJzogJ2Jhcm5leScsICAnYWN0aXZlJzogdHJ1ZSB9LFxuICAgICAqICAgeyAndXNlcic6ICdmcmVkJywgICAgJ2FjdGl2ZSc6IGZhbHNlIH0sXG4gICAgICogICB7ICd1c2VyJzogJ3BlYmJsZXMnLCAnYWN0aXZlJzogZmFsc2UgfVxuICAgICAqIF07XG4gICAgICpcbiAgICAgKiBfLmRyb3BSaWdodFdoaWxlKHVzZXJzLCBmdW5jdGlvbihvKSB7IHJldHVybiAhby5hY3RpdmU7IH0pO1xuICAgICAqIC8vID0+IG9iamVjdHMgZm9yIFsnYmFybmV5J11cbiAgICAgKlxuICAgICAqIC8vIFRoZSBgXy5tYXRjaGVzYCBpdGVyYXRlZSBzaG9ydGhhbmQuXG4gICAgICogXy5kcm9wUmlnaHRXaGlsZSh1c2VycywgeyAndXNlcic6ICdwZWJibGVzJywgJ2FjdGl2ZSc6IGZhbHNlIH0pO1xuICAgICAqIC8vID0+IG9iamVjdHMgZm9yIFsnYmFybmV5JywgJ2ZyZWQnXVxuICAgICAqXG4gICAgICogLy8gVGhlIGBfLm1hdGNoZXNQcm9wZXJ0eWAgaXRlcmF0ZWUgc2hvcnRoYW5kLlxuICAgICAqIF8uZHJvcFJpZ2h0V2hpbGUodXNlcnMsIFsnYWN0aXZlJywgZmFsc2VdKTtcbiAgICAgKiAvLyA9PiBvYmplY3RzIGZvciBbJ2Jhcm5leSddXG4gICAgICpcbiAgICAgKiAvLyBUaGUgYF8ucHJvcGVydHlgIGl0ZXJhdGVlIHNob3J0aGFuZC5cbiAgICAgKiBfLmRyb3BSaWdodFdoaWxlKHVzZXJzLCAnYWN0aXZlJyk7XG4gICAgICogLy8gPT4gb2JqZWN0cyBmb3IgWydiYXJuZXknLCAnZnJlZCcsICdwZWJibGVzJ11cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBkcm9wUmlnaHRXaGlsZShhcnJheSwgcHJlZGljYXRlKSB7XG4gICAgICByZXR1cm4gKGFycmF5ICYmIGFycmF5Lmxlbmd0aClcbiAgICAgICAgPyBiYXNlV2hpbGUoYXJyYXksIGdldEl0ZXJhdGVlKHByZWRpY2F0ZSwgMyksIHRydWUsIHRydWUpXG4gICAgICAgIDogW107XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIHNsaWNlIG9mIGBhcnJheWAgZXhjbHVkaW5nIGVsZW1lbnRzIGRyb3BwZWQgZnJvbSB0aGUgYmVnaW5uaW5nLlxuICAgICAqIEVsZW1lbnRzIGFyZSBkcm9wcGVkIHVudGlsIGBwcmVkaWNhdGVgIHJldHVybnMgZmFsc2V5LiBUaGUgcHJlZGljYXRlIGlzXG4gICAgICogaW52b2tlZCB3aXRoIHRocmVlIGFyZ3VtZW50czogKHZhbHVlLCBpbmRleCwgYXJyYXkpLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDMuMC4wXG4gICAgICogQGNhdGVnb3J5IEFycmF5XG4gICAgICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIHF1ZXJ5LlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtwcmVkaWNhdGU9Xy5pZGVudGl0eV0gVGhlIGZ1bmN0aW9uIGludm9rZWQgcGVyIGl0ZXJhdGlvbi5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIHNsaWNlIG9mIGBhcnJheWAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciB1c2VycyA9IFtcbiAgICAgKiAgIHsgJ3VzZXInOiAnYmFybmV5JywgICdhY3RpdmUnOiBmYWxzZSB9LFxuICAgICAqICAgeyAndXNlcic6ICdmcmVkJywgICAgJ2FjdGl2ZSc6IGZhbHNlIH0sXG4gICAgICogICB7ICd1c2VyJzogJ3BlYmJsZXMnLCAnYWN0aXZlJzogdHJ1ZSB9XG4gICAgICogXTtcbiAgICAgKlxuICAgICAqIF8uZHJvcFdoaWxlKHVzZXJzLCBmdW5jdGlvbihvKSB7IHJldHVybiAhby5hY3RpdmU7IH0pO1xuICAgICAqIC8vID0+IG9iamVjdHMgZm9yIFsncGViYmxlcyddXG4gICAgICpcbiAgICAgKiAvLyBUaGUgYF8ubWF0Y2hlc2AgaXRlcmF0ZWUgc2hvcnRoYW5kLlxuICAgICAqIF8uZHJvcFdoaWxlKHVzZXJzLCB7ICd1c2VyJzogJ2Jhcm5leScsICdhY3RpdmUnOiBmYWxzZSB9KTtcbiAgICAgKiAvLyA9PiBvYmplY3RzIGZvciBbJ2ZyZWQnLCAncGViYmxlcyddXG4gICAgICpcbiAgICAgKiAvLyBUaGUgYF8ubWF0Y2hlc1Byb3BlcnR5YCBpdGVyYXRlZSBzaG9ydGhhbmQuXG4gICAgICogXy5kcm9wV2hpbGUodXNlcnMsIFsnYWN0aXZlJywgZmFsc2VdKTtcbiAgICAgKiAvLyA9PiBvYmplY3RzIGZvciBbJ3BlYmJsZXMnXVxuICAgICAqXG4gICAgICogLy8gVGhlIGBfLnByb3BlcnR5YCBpdGVyYXRlZSBzaG9ydGhhbmQuXG4gICAgICogXy5kcm9wV2hpbGUodXNlcnMsICdhY3RpdmUnKTtcbiAgICAgKiAvLyA9PiBvYmplY3RzIGZvciBbJ2Jhcm5leScsICdmcmVkJywgJ3BlYmJsZXMnXVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGRyb3BXaGlsZShhcnJheSwgcHJlZGljYXRlKSB7XG4gICAgICByZXR1cm4gKGFycmF5ICYmIGFycmF5Lmxlbmd0aClcbiAgICAgICAgPyBiYXNlV2hpbGUoYXJyYXksIGdldEl0ZXJhdGVlKHByZWRpY2F0ZSwgMyksIHRydWUpXG4gICAgICAgIDogW107XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogRmlsbHMgZWxlbWVudHMgb2YgYGFycmF5YCB3aXRoIGB2YWx1ZWAgZnJvbSBgc3RhcnRgIHVwIHRvLCBidXQgbm90XG4gICAgICogaW5jbHVkaW5nLCBgZW5kYC5cbiAgICAgKlxuICAgICAqICoqTm90ZToqKiBUaGlzIG1ldGhvZCBtdXRhdGVzIGBhcnJheWAuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMy4yLjBcbiAgICAgKiBAY2F0ZWdvcnkgQXJyYXlcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gZmlsbC5cbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBmaWxsIGBhcnJheWAgd2l0aC5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gW3N0YXJ0PTBdIFRoZSBzdGFydCBwb3NpdGlvbi5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gW2VuZD1hcnJheS5sZW5ndGhdIFRoZSBlbmQgcG9zaXRpb24uXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIGBhcnJheWAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciBhcnJheSA9IFsxLCAyLCAzXTtcbiAgICAgKlxuICAgICAqIF8uZmlsbChhcnJheSwgJ2EnKTtcbiAgICAgKiBjb25zb2xlLmxvZyhhcnJheSk7XG4gICAgICogLy8gPT4gWydhJywgJ2EnLCAnYSddXG4gICAgICpcbiAgICAgKiBfLmZpbGwoQXJyYXkoMyksIDIpO1xuICAgICAqIC8vID0+IFsyLCAyLCAyXVxuICAgICAqXG4gICAgICogXy5maWxsKFs0LCA2LCA4LCAxMF0sICcqJywgMSwgMyk7XG4gICAgICogLy8gPT4gWzQsICcqJywgJyonLCAxMF1cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBmaWxsKGFycmF5LCB2YWx1ZSwgc3RhcnQsIGVuZCkge1xuICAgICAgdmFyIGxlbmd0aCA9IGFycmF5ID09IG51bGwgPyAwIDogYXJyYXkubGVuZ3RoO1xuICAgICAgaWYgKCFsZW5ndGgpIHtcbiAgICAgICAgcmV0dXJuIFtdO1xuICAgICAgfVxuICAgICAgaWYgKHN0YXJ0ICYmIHR5cGVvZiBzdGFydCAhPSAnbnVtYmVyJyAmJiBpc0l0ZXJhdGVlQ2FsbChhcnJheSwgdmFsdWUsIHN0YXJ0KSkge1xuICAgICAgICBzdGFydCA9IDA7XG4gICAgICAgIGVuZCA9IGxlbmd0aDtcbiAgICAgIH1cbiAgICAgIHJldHVybiBiYXNlRmlsbChhcnJheSwgdmFsdWUsIHN0YXJ0LCBlbmQpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoaXMgbWV0aG9kIGlzIGxpa2UgYF8uZmluZGAgZXhjZXB0IHRoYXQgaXQgcmV0dXJucyB0aGUgaW5kZXggb2YgdGhlIGZpcnN0XG4gICAgICogZWxlbWVudCBgcHJlZGljYXRlYCByZXR1cm5zIHRydXRoeSBmb3IgaW5zdGVhZCBvZiB0aGUgZWxlbWVudCBpdHNlbGYuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMS4xLjBcbiAgICAgKiBAY2F0ZWdvcnkgQXJyYXlcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gaW5zcGVjdC5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbcHJlZGljYXRlPV8uaWRlbnRpdHldIFRoZSBmdW5jdGlvbiBpbnZva2VkIHBlciBpdGVyYXRpb24uXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IFtmcm9tSW5kZXg9MF0gVGhlIGluZGV4IHRvIHNlYXJjaCBmcm9tLlxuICAgICAqIEByZXR1cm5zIHtudW1iZXJ9IFJldHVybnMgdGhlIGluZGV4IG9mIHRoZSBmb3VuZCBlbGVtZW50LCBlbHNlIGAtMWAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciB1c2VycyA9IFtcbiAgICAgKiAgIHsgJ3VzZXInOiAnYmFybmV5JywgICdhY3RpdmUnOiBmYWxzZSB9LFxuICAgICAqICAgeyAndXNlcic6ICdmcmVkJywgICAgJ2FjdGl2ZSc6IGZhbHNlIH0sXG4gICAgICogICB7ICd1c2VyJzogJ3BlYmJsZXMnLCAnYWN0aXZlJzogdHJ1ZSB9XG4gICAgICogXTtcbiAgICAgKlxuICAgICAqIF8uZmluZEluZGV4KHVzZXJzLCBmdW5jdGlvbihvKSB7IHJldHVybiBvLnVzZXIgPT0gJ2Jhcm5leSc7IH0pO1xuICAgICAqIC8vID0+IDBcbiAgICAgKlxuICAgICAqIC8vIFRoZSBgXy5tYXRjaGVzYCBpdGVyYXRlZSBzaG9ydGhhbmQuXG4gICAgICogXy5maW5kSW5kZXgodXNlcnMsIHsgJ3VzZXInOiAnZnJlZCcsICdhY3RpdmUnOiBmYWxzZSB9KTtcbiAgICAgKiAvLyA9PiAxXG4gICAgICpcbiAgICAgKiAvLyBUaGUgYF8ubWF0Y2hlc1Byb3BlcnR5YCBpdGVyYXRlZSBzaG9ydGhhbmQuXG4gICAgICogXy5maW5kSW5kZXgodXNlcnMsIFsnYWN0aXZlJywgZmFsc2VdKTtcbiAgICAgKiAvLyA9PiAwXG4gICAgICpcbiAgICAgKiAvLyBUaGUgYF8ucHJvcGVydHlgIGl0ZXJhdGVlIHNob3J0aGFuZC5cbiAgICAgKiBfLmZpbmRJbmRleCh1c2VycywgJ2FjdGl2ZScpO1xuICAgICAqIC8vID0+IDJcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBmaW5kSW5kZXgoYXJyYXksIHByZWRpY2F0ZSwgZnJvbUluZGV4KSB7XG4gICAgICB2YXIgbGVuZ3RoID0gYXJyYXkgPT0gbnVsbCA/IDAgOiBhcnJheS5sZW5ndGg7XG4gICAgICBpZiAoIWxlbmd0aCkge1xuICAgICAgICByZXR1cm4gLTE7XG4gICAgICB9XG4gICAgICB2YXIgaW5kZXggPSBmcm9tSW5kZXggPT0gbnVsbCA/IDAgOiB0b0ludGVnZXIoZnJvbUluZGV4KTtcbiAgICAgIGlmIChpbmRleCA8IDApIHtcbiAgICAgICAgaW5kZXggPSBuYXRpdmVNYXgobGVuZ3RoICsgaW5kZXgsIDApO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGJhc2VGaW5kSW5kZXgoYXJyYXksIGdldEl0ZXJhdGVlKHByZWRpY2F0ZSwgMyksIGluZGV4KTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGlzIG1ldGhvZCBpcyBsaWtlIGBfLmZpbmRJbmRleGAgZXhjZXB0IHRoYXQgaXQgaXRlcmF0ZXMgb3ZlciBlbGVtZW50c1xuICAgICAqIG9mIGBjb2xsZWN0aW9uYCBmcm9tIHJpZ2h0IHRvIGxlZnQuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMi4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgQXJyYXlcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gaW5zcGVjdC5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbcHJlZGljYXRlPV8uaWRlbnRpdHldIFRoZSBmdW5jdGlvbiBpbnZva2VkIHBlciBpdGVyYXRpb24uXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IFtmcm9tSW5kZXg9YXJyYXkubGVuZ3RoLTFdIFRoZSBpbmRleCB0byBzZWFyY2ggZnJvbS5cbiAgICAgKiBAcmV0dXJucyB7bnVtYmVyfSBSZXR1cm5zIHRoZSBpbmRleCBvZiB0aGUgZm91bmQgZWxlbWVudCwgZWxzZSBgLTFgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgdXNlcnMgPSBbXG4gICAgICogICB7ICd1c2VyJzogJ2Jhcm5leScsICAnYWN0aXZlJzogdHJ1ZSB9LFxuICAgICAqICAgeyAndXNlcic6ICdmcmVkJywgICAgJ2FjdGl2ZSc6IGZhbHNlIH0sXG4gICAgICogICB7ICd1c2VyJzogJ3BlYmJsZXMnLCAnYWN0aXZlJzogZmFsc2UgfVxuICAgICAqIF07XG4gICAgICpcbiAgICAgKiBfLmZpbmRMYXN0SW5kZXgodXNlcnMsIGZ1bmN0aW9uKG8pIHsgcmV0dXJuIG8udXNlciA9PSAncGViYmxlcyc7IH0pO1xuICAgICAqIC8vID0+IDJcbiAgICAgKlxuICAgICAqIC8vIFRoZSBgXy5tYXRjaGVzYCBpdGVyYXRlZSBzaG9ydGhhbmQuXG4gICAgICogXy5maW5kTGFzdEluZGV4KHVzZXJzLCB7ICd1c2VyJzogJ2Jhcm5leScsICdhY3RpdmUnOiB0cnVlIH0pO1xuICAgICAqIC8vID0+IDBcbiAgICAgKlxuICAgICAqIC8vIFRoZSBgXy5tYXRjaGVzUHJvcGVydHlgIGl0ZXJhdGVlIHNob3J0aGFuZC5cbiAgICAgKiBfLmZpbmRMYXN0SW5kZXgodXNlcnMsIFsnYWN0aXZlJywgZmFsc2VdKTtcbiAgICAgKiAvLyA9PiAyXG4gICAgICpcbiAgICAgKiAvLyBUaGUgYF8ucHJvcGVydHlgIGl0ZXJhdGVlIHNob3J0aGFuZC5cbiAgICAgKiBfLmZpbmRMYXN0SW5kZXgodXNlcnMsICdhY3RpdmUnKTtcbiAgICAgKiAvLyA9PiAwXG4gICAgICovXG4gICAgZnVuY3Rpb24gZmluZExhc3RJbmRleChhcnJheSwgcHJlZGljYXRlLCBmcm9tSW5kZXgpIHtcbiAgICAgIHZhciBsZW5ndGggPSBhcnJheSA9PSBudWxsID8gMCA6IGFycmF5Lmxlbmd0aDtcbiAgICAgIGlmICghbGVuZ3RoKSB7XG4gICAgICAgIHJldHVybiAtMTtcbiAgICAgIH1cbiAgICAgIHZhciBpbmRleCA9IGxlbmd0aCAtIDE7XG4gICAgICBpZiAoZnJvbUluZGV4ICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgaW5kZXggPSB0b0ludGVnZXIoZnJvbUluZGV4KTtcbiAgICAgICAgaW5kZXggPSBmcm9tSW5kZXggPCAwXG4gICAgICAgICAgPyBuYXRpdmVNYXgobGVuZ3RoICsgaW5kZXgsIDApXG4gICAgICAgICAgOiBuYXRpdmVNaW4oaW5kZXgsIGxlbmd0aCAtIDEpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGJhc2VGaW5kSW5kZXgoYXJyYXksIGdldEl0ZXJhdGVlKHByZWRpY2F0ZSwgMyksIGluZGV4LCB0cnVlKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBGbGF0dGVucyBgYXJyYXlgIGEgc2luZ2xlIGxldmVsIGRlZXAuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMC4xLjBcbiAgICAgKiBAY2F0ZWdvcnkgQXJyYXlcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gZmxhdHRlbi5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIG5ldyBmbGF0dGVuZWQgYXJyYXkuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uZmxhdHRlbihbMSwgWzIsIFszLCBbNF1dLCA1XV0pO1xuICAgICAqIC8vID0+IFsxLCAyLCBbMywgWzRdXSwgNV1cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBmbGF0dGVuKGFycmF5KSB7XG4gICAgICB2YXIgbGVuZ3RoID0gYXJyYXkgPT0gbnVsbCA/IDAgOiBhcnJheS5sZW5ndGg7XG4gICAgICByZXR1cm4gbGVuZ3RoID8gYmFzZUZsYXR0ZW4oYXJyYXksIDEpIDogW107XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogUmVjdXJzaXZlbHkgZmxhdHRlbnMgYGFycmF5YC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAzLjAuMFxuICAgICAqIEBjYXRlZ29yeSBBcnJheVxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBmbGF0dGVuLlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgbmV3IGZsYXR0ZW5lZCBhcnJheS5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5mbGF0dGVuRGVlcChbMSwgWzIsIFszLCBbNF1dLCA1XV0pO1xuICAgICAqIC8vID0+IFsxLCAyLCAzLCA0LCA1XVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGZsYXR0ZW5EZWVwKGFycmF5KSB7XG4gICAgICB2YXIgbGVuZ3RoID0gYXJyYXkgPT0gbnVsbCA/IDAgOiBhcnJheS5sZW5ndGg7XG4gICAgICByZXR1cm4gbGVuZ3RoID8gYmFzZUZsYXR0ZW4oYXJyYXksIElORklOSVRZKSA6IFtdO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFJlY3Vyc2l2ZWx5IGZsYXR0ZW4gYGFycmF5YCB1cCB0byBgZGVwdGhgIHRpbWVzLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuNC4wXG4gICAgICogQGNhdGVnb3J5IEFycmF5XG4gICAgICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIGZsYXR0ZW4uXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IFtkZXB0aD0xXSBUaGUgbWF4aW11bSByZWN1cnNpb24gZGVwdGguXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBuZXcgZmxhdHRlbmVkIGFycmF5LlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgYXJyYXkgPSBbMSwgWzIsIFszLCBbNF1dLCA1XV07XG4gICAgICpcbiAgICAgKiBfLmZsYXR0ZW5EZXB0aChhcnJheSwgMSk7XG4gICAgICogLy8gPT4gWzEsIDIsIFszLCBbNF1dLCA1XVxuICAgICAqXG4gICAgICogXy5mbGF0dGVuRGVwdGgoYXJyYXksIDIpO1xuICAgICAqIC8vID0+IFsxLCAyLCAzLCBbNF0sIDVdXG4gICAgICovXG4gICAgZnVuY3Rpb24gZmxhdHRlbkRlcHRoKGFycmF5LCBkZXB0aCkge1xuICAgICAgdmFyIGxlbmd0aCA9IGFycmF5ID09IG51bGwgPyAwIDogYXJyYXkubGVuZ3RoO1xuICAgICAgaWYgKCFsZW5ndGgpIHtcbiAgICAgICAgcmV0dXJuIFtdO1xuICAgICAgfVxuICAgICAgZGVwdGggPSBkZXB0aCA9PT0gdW5kZWZpbmVkID8gMSA6IHRvSW50ZWdlcihkZXB0aCk7XG4gICAgICByZXR1cm4gYmFzZUZsYXR0ZW4oYXJyYXksIGRlcHRoKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGUgaW52ZXJzZSBvZiBgXy50b1BhaXJzYDsgdGhpcyBtZXRob2QgcmV0dXJucyBhbiBvYmplY3QgY29tcG9zZWRcbiAgICAgKiBmcm9tIGtleS12YWx1ZSBgcGFpcnNgLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMC4wXG4gICAgICogQGNhdGVnb3J5IEFycmF5XG4gICAgICogQHBhcmFtIHtBcnJheX0gcGFpcnMgVGhlIGtleS12YWx1ZSBwYWlycy5cbiAgICAgKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIHRoZSBuZXcgb2JqZWN0LlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLmZyb21QYWlycyhbWydhJywgMV0sIFsnYicsIDJdXSk7XG4gICAgICogLy8gPT4geyAnYSc6IDEsICdiJzogMiB9XG4gICAgICovXG4gICAgZnVuY3Rpb24gZnJvbVBhaXJzKHBhaXJzKSB7XG4gICAgICB2YXIgaW5kZXggPSAtMSxcbiAgICAgICAgICBsZW5ndGggPSBwYWlycyA9PSBudWxsID8gMCA6IHBhaXJzLmxlbmd0aCxcbiAgICAgICAgICByZXN1bHQgPSB7fTtcblxuICAgICAgd2hpbGUgKCsraW5kZXggPCBsZW5ndGgpIHtcbiAgICAgICAgdmFyIHBhaXIgPSBwYWlyc1tpbmRleF07XG4gICAgICAgIHJlc3VsdFtwYWlyWzBdXSA9IHBhaXJbMV07XG4gICAgICB9XG4gICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEdldHMgdGhlIGZpcnN0IGVsZW1lbnQgb2YgYGFycmF5YC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAwLjEuMFxuICAgICAqIEBhbGlhcyBmaXJzdFxuICAgICAqIEBjYXRlZ29yeSBBcnJheVxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBxdWVyeS5cbiAgICAgKiBAcmV0dXJucyB7Kn0gUmV0dXJucyB0aGUgZmlyc3QgZWxlbWVudCBvZiBgYXJyYXlgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLmhlYWQoWzEsIDIsIDNdKTtcbiAgICAgKiAvLyA9PiAxXG4gICAgICpcbiAgICAgKiBfLmhlYWQoW10pO1xuICAgICAqIC8vID0+IHVuZGVmaW5lZFxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGhlYWQoYXJyYXkpIHtcbiAgICAgIHJldHVybiAoYXJyYXkgJiYgYXJyYXkubGVuZ3RoKSA/IGFycmF5WzBdIDogdW5kZWZpbmVkO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEdldHMgdGhlIGluZGV4IGF0IHdoaWNoIHRoZSBmaXJzdCBvY2N1cnJlbmNlIG9mIGB2YWx1ZWAgaXMgZm91bmQgaW4gYGFycmF5YFxuICAgICAqIHVzaW5nIFtgU2FtZVZhbHVlWmVyb2BdKGh0dHA6Ly9lY21hLWludGVybmF0aW9uYWwub3JnL2VjbWEtMjYyLzcuMC8jc2VjLXNhbWV2YWx1ZXplcm8pXG4gICAgICogZm9yIGVxdWFsaXR5IGNvbXBhcmlzb25zLiBJZiBgZnJvbUluZGV4YCBpcyBuZWdhdGl2ZSwgaXQncyB1c2VkIGFzIHRoZVxuICAgICAqIG9mZnNldCBmcm9tIHRoZSBlbmQgb2YgYGFycmF5YC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAwLjEuMFxuICAgICAqIEBjYXRlZ29yeSBBcnJheVxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBpbnNwZWN0LlxuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIHNlYXJjaCBmb3IuXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IFtmcm9tSW5kZXg9MF0gVGhlIGluZGV4IHRvIHNlYXJjaCBmcm9tLlxuICAgICAqIEByZXR1cm5zIHtudW1iZXJ9IFJldHVybnMgdGhlIGluZGV4IG9mIHRoZSBtYXRjaGVkIHZhbHVlLCBlbHNlIGAtMWAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uaW5kZXhPZihbMSwgMiwgMSwgMl0sIDIpO1xuICAgICAqIC8vID0+IDFcbiAgICAgKlxuICAgICAqIC8vIFNlYXJjaCBmcm9tIHRoZSBgZnJvbUluZGV4YC5cbiAgICAgKiBfLmluZGV4T2YoWzEsIDIsIDEsIDJdLCAyLCAyKTtcbiAgICAgKiAvLyA9PiAzXG4gICAgICovXG4gICAgZnVuY3Rpb24gaW5kZXhPZihhcnJheSwgdmFsdWUsIGZyb21JbmRleCkge1xuICAgICAgdmFyIGxlbmd0aCA9IGFycmF5ID09IG51bGwgPyAwIDogYXJyYXkubGVuZ3RoO1xuICAgICAgaWYgKCFsZW5ndGgpIHtcbiAgICAgICAgcmV0dXJuIC0xO1xuICAgICAgfVxuICAgICAgdmFyIGluZGV4ID0gZnJvbUluZGV4ID09IG51bGwgPyAwIDogdG9JbnRlZ2VyKGZyb21JbmRleCk7XG4gICAgICBpZiAoaW5kZXggPCAwKSB7XG4gICAgICAgIGluZGV4ID0gbmF0aXZlTWF4KGxlbmd0aCArIGluZGV4LCAwKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBiYXNlSW5kZXhPZihhcnJheSwgdmFsdWUsIGluZGV4KTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBHZXRzIGFsbCBidXQgdGhlIGxhc3QgZWxlbWVudCBvZiBgYXJyYXlgLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDAuMS4wXG4gICAgICogQGNhdGVnb3J5IEFycmF5XG4gICAgICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIHF1ZXJ5LlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgc2xpY2Ugb2YgYGFycmF5YC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5pbml0aWFsKFsxLCAyLCAzXSk7XG4gICAgICogLy8gPT4gWzEsIDJdXG4gICAgICovXG4gICAgZnVuY3Rpb24gaW5pdGlhbChhcnJheSkge1xuICAgICAgdmFyIGxlbmd0aCA9IGFycmF5ID09IG51bGwgPyAwIDogYXJyYXkubGVuZ3RoO1xuICAgICAgcmV0dXJuIGxlbmd0aCA/IGJhc2VTbGljZShhcnJheSwgMCwgLTEpIDogW107XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhbiBhcnJheSBvZiB1bmlxdWUgdmFsdWVzIHRoYXQgYXJlIGluY2x1ZGVkIGluIGFsbCBnaXZlbiBhcnJheXNcbiAgICAgKiB1c2luZyBbYFNhbWVWYWx1ZVplcm9gXShodHRwOi8vZWNtYS1pbnRlcm5hdGlvbmFsLm9yZy9lY21hLTI2Mi83LjAvI3NlYy1zYW1ldmFsdWV6ZXJvKVxuICAgICAqIGZvciBlcXVhbGl0eSBjb21wYXJpc29ucy4gVGhlIG9yZGVyIGFuZCByZWZlcmVuY2VzIG9mIHJlc3VsdCB2YWx1ZXMgYXJlXG4gICAgICogZGV0ZXJtaW5lZCBieSB0aGUgZmlyc3QgYXJyYXkuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMC4xLjBcbiAgICAgKiBAY2F0ZWdvcnkgQXJyYXlcbiAgICAgKiBAcGFyYW0gey4uLkFycmF5fSBbYXJyYXlzXSBUaGUgYXJyYXlzIHRvIGluc3BlY3QuXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBuZXcgYXJyYXkgb2YgaW50ZXJzZWN0aW5nIHZhbHVlcy5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5pbnRlcnNlY3Rpb24oWzIsIDFdLCBbMiwgM10pO1xuICAgICAqIC8vID0+IFsyXVxuICAgICAqL1xuICAgIHZhciBpbnRlcnNlY3Rpb24gPSBiYXNlUmVzdChmdW5jdGlvbihhcnJheXMpIHtcbiAgICAgIHZhciBtYXBwZWQgPSBhcnJheU1hcChhcnJheXMsIGNhc3RBcnJheUxpa2VPYmplY3QpO1xuICAgICAgcmV0dXJuIChtYXBwZWQubGVuZ3RoICYmIG1hcHBlZFswXSA9PT0gYXJyYXlzWzBdKVxuICAgICAgICA/IGJhc2VJbnRlcnNlY3Rpb24obWFwcGVkKVxuICAgICAgICA6IFtdO1xuICAgIH0pO1xuXG4gICAgLyoqXG4gICAgICogVGhpcyBtZXRob2QgaXMgbGlrZSBgXy5pbnRlcnNlY3Rpb25gIGV4Y2VwdCB0aGF0IGl0IGFjY2VwdHMgYGl0ZXJhdGVlYFxuICAgICAqIHdoaWNoIGlzIGludm9rZWQgZm9yIGVhY2ggZWxlbWVudCBvZiBlYWNoIGBhcnJheXNgIHRvIGdlbmVyYXRlIHRoZSBjcml0ZXJpb25cbiAgICAgKiBieSB3aGljaCB0aGV5J3JlIGNvbXBhcmVkLiBUaGUgb3JkZXIgYW5kIHJlZmVyZW5jZXMgb2YgcmVzdWx0IHZhbHVlcyBhcmVcbiAgICAgKiBkZXRlcm1pbmVkIGJ5IHRoZSBmaXJzdCBhcnJheS4gVGhlIGl0ZXJhdGVlIGlzIGludm9rZWQgd2l0aCBvbmUgYXJndW1lbnQ6XG4gICAgICogKHZhbHVlKS5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjAuMFxuICAgICAqIEBjYXRlZ29yeSBBcnJheVxuICAgICAqIEBwYXJhbSB7Li4uQXJyYXl9IFthcnJheXNdIFRoZSBhcnJheXMgdG8gaW5zcGVjdC5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbaXRlcmF0ZWU9Xy5pZGVudGl0eV0gVGhlIGl0ZXJhdGVlIGludm9rZWQgcGVyIGVsZW1lbnQuXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBuZXcgYXJyYXkgb2YgaW50ZXJzZWN0aW5nIHZhbHVlcy5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5pbnRlcnNlY3Rpb25CeShbMi4xLCAxLjJdLCBbMi4zLCAzLjRdLCBNYXRoLmZsb29yKTtcbiAgICAgKiAvLyA9PiBbMi4xXVxuICAgICAqXG4gICAgICogLy8gVGhlIGBfLnByb3BlcnR5YCBpdGVyYXRlZSBzaG9ydGhhbmQuXG4gICAgICogXy5pbnRlcnNlY3Rpb25CeShbeyAneCc6IDEgfV0sIFt7ICd4JzogMiB9LCB7ICd4JzogMSB9XSwgJ3gnKTtcbiAgICAgKiAvLyA9PiBbeyAneCc6IDEgfV1cbiAgICAgKi9cbiAgICB2YXIgaW50ZXJzZWN0aW9uQnkgPSBiYXNlUmVzdChmdW5jdGlvbihhcnJheXMpIHtcbiAgICAgIHZhciBpdGVyYXRlZSA9IGxhc3QoYXJyYXlzKSxcbiAgICAgICAgICBtYXBwZWQgPSBhcnJheU1hcChhcnJheXMsIGNhc3RBcnJheUxpa2VPYmplY3QpO1xuXG4gICAgICBpZiAoaXRlcmF0ZWUgPT09IGxhc3QobWFwcGVkKSkge1xuICAgICAgICBpdGVyYXRlZSA9IHVuZGVmaW5lZDtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIG1hcHBlZC5wb3AoKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiAobWFwcGVkLmxlbmd0aCAmJiBtYXBwZWRbMF0gPT09IGFycmF5c1swXSlcbiAgICAgICAgPyBiYXNlSW50ZXJzZWN0aW9uKG1hcHBlZCwgZ2V0SXRlcmF0ZWUoaXRlcmF0ZWUsIDIpKVxuICAgICAgICA6IFtdO1xuICAgIH0pO1xuXG4gICAgLyoqXG4gICAgICogVGhpcyBtZXRob2QgaXMgbGlrZSBgXy5pbnRlcnNlY3Rpb25gIGV4Y2VwdCB0aGF0IGl0IGFjY2VwdHMgYGNvbXBhcmF0b3JgXG4gICAgICogd2hpY2ggaXMgaW52b2tlZCB0byBjb21wYXJlIGVsZW1lbnRzIG9mIGBhcnJheXNgLiBUaGUgb3JkZXIgYW5kIHJlZmVyZW5jZXNcbiAgICAgKiBvZiByZXN1bHQgdmFsdWVzIGFyZSBkZXRlcm1pbmVkIGJ5IHRoZSBmaXJzdCBhcnJheS4gVGhlIGNvbXBhcmF0b3IgaXNcbiAgICAgKiBpbnZva2VkIHdpdGggdHdvIGFyZ3VtZW50czogKGFyclZhbCwgb3RoVmFsKS5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjAuMFxuICAgICAqIEBjYXRlZ29yeSBBcnJheVxuICAgICAqIEBwYXJhbSB7Li4uQXJyYXl9IFthcnJheXNdIFRoZSBhcnJheXMgdG8gaW5zcGVjdC5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbY29tcGFyYXRvcl0gVGhlIGNvbXBhcmF0b3IgaW52b2tlZCBwZXIgZWxlbWVudC5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIG5ldyBhcnJheSBvZiBpbnRlcnNlY3RpbmcgdmFsdWVzLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgb2JqZWN0cyA9IFt7ICd4JzogMSwgJ3knOiAyIH0sIHsgJ3gnOiAyLCAneSc6IDEgfV07XG4gICAgICogdmFyIG90aGVycyA9IFt7ICd4JzogMSwgJ3knOiAxIH0sIHsgJ3gnOiAxLCAneSc6IDIgfV07XG4gICAgICpcbiAgICAgKiBfLmludGVyc2VjdGlvbldpdGgob2JqZWN0cywgb3RoZXJzLCBfLmlzRXF1YWwpO1xuICAgICAqIC8vID0+IFt7ICd4JzogMSwgJ3knOiAyIH1dXG4gICAgICovXG4gICAgdmFyIGludGVyc2VjdGlvbldpdGggPSBiYXNlUmVzdChmdW5jdGlvbihhcnJheXMpIHtcbiAgICAgIHZhciBjb21wYXJhdG9yID0gbGFzdChhcnJheXMpLFxuICAgICAgICAgIG1hcHBlZCA9IGFycmF5TWFwKGFycmF5cywgY2FzdEFycmF5TGlrZU9iamVjdCk7XG5cbiAgICAgIGNvbXBhcmF0b3IgPSB0eXBlb2YgY29tcGFyYXRvciA9PSAnZnVuY3Rpb24nID8gY29tcGFyYXRvciA6IHVuZGVmaW5lZDtcbiAgICAgIGlmIChjb21wYXJhdG9yKSB7XG4gICAgICAgIG1hcHBlZC5wb3AoKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiAobWFwcGVkLmxlbmd0aCAmJiBtYXBwZWRbMF0gPT09IGFycmF5c1swXSlcbiAgICAgICAgPyBiYXNlSW50ZXJzZWN0aW9uKG1hcHBlZCwgdW5kZWZpbmVkLCBjb21wYXJhdG9yKVxuICAgICAgICA6IFtdO1xuICAgIH0pO1xuXG4gICAgLyoqXG4gICAgICogQ29udmVydHMgYWxsIGVsZW1lbnRzIGluIGBhcnJheWAgaW50byBhIHN0cmluZyBzZXBhcmF0ZWQgYnkgYHNlcGFyYXRvcmAuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgQXJyYXlcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gY29udmVydC5cbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gW3NlcGFyYXRvcj0nLCddIFRoZSBlbGVtZW50IHNlcGFyYXRvci5cbiAgICAgKiBAcmV0dXJucyB7c3RyaW5nfSBSZXR1cm5zIHRoZSBqb2luZWQgc3RyaW5nLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLmpvaW4oWydhJywgJ2InLCAnYyddLCAnficpO1xuICAgICAqIC8vID0+ICdhfmJ+YydcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBqb2luKGFycmF5LCBzZXBhcmF0b3IpIHtcbiAgICAgIHJldHVybiBhcnJheSA9PSBudWxsID8gJycgOiBuYXRpdmVKb2luLmNhbGwoYXJyYXksIHNlcGFyYXRvcik7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogR2V0cyB0aGUgbGFzdCBlbGVtZW50IG9mIGBhcnJheWAuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMC4xLjBcbiAgICAgKiBAY2F0ZWdvcnkgQXJyYXlcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gcXVlcnkuXG4gICAgICogQHJldHVybnMgeyp9IFJldHVybnMgdGhlIGxhc3QgZWxlbWVudCBvZiBgYXJyYXlgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLmxhc3QoWzEsIDIsIDNdKTtcbiAgICAgKiAvLyA9PiAzXG4gICAgICovXG4gICAgZnVuY3Rpb24gbGFzdChhcnJheSkge1xuICAgICAgdmFyIGxlbmd0aCA9IGFycmF5ID09IG51bGwgPyAwIDogYXJyYXkubGVuZ3RoO1xuICAgICAgcmV0dXJuIGxlbmd0aCA/IGFycmF5W2xlbmd0aCAtIDFdIDogdW5kZWZpbmVkO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoaXMgbWV0aG9kIGlzIGxpa2UgYF8uaW5kZXhPZmAgZXhjZXB0IHRoYXQgaXQgaXRlcmF0ZXMgb3ZlciBlbGVtZW50cyBvZlxuICAgICAqIGBhcnJheWAgZnJvbSByaWdodCB0byBsZWZ0LlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDAuMS4wXG4gICAgICogQGNhdGVnb3J5IEFycmF5XG4gICAgICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIGluc3BlY3QuXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gc2VhcmNoIGZvci5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gW2Zyb21JbmRleD1hcnJheS5sZW5ndGgtMV0gVGhlIGluZGV4IHRvIHNlYXJjaCBmcm9tLlxuICAgICAqIEByZXR1cm5zIHtudW1iZXJ9IFJldHVybnMgdGhlIGluZGV4IG9mIHRoZSBtYXRjaGVkIHZhbHVlLCBlbHNlIGAtMWAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8ubGFzdEluZGV4T2YoWzEsIDIsIDEsIDJdLCAyKTtcbiAgICAgKiAvLyA9PiAzXG4gICAgICpcbiAgICAgKiAvLyBTZWFyY2ggZnJvbSB0aGUgYGZyb21JbmRleGAuXG4gICAgICogXy5sYXN0SW5kZXhPZihbMSwgMiwgMSwgMl0sIDIsIDIpO1xuICAgICAqIC8vID0+IDFcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBsYXN0SW5kZXhPZihhcnJheSwgdmFsdWUsIGZyb21JbmRleCkge1xuICAgICAgdmFyIGxlbmd0aCA9IGFycmF5ID09IG51bGwgPyAwIDogYXJyYXkubGVuZ3RoO1xuICAgICAgaWYgKCFsZW5ndGgpIHtcbiAgICAgICAgcmV0dXJuIC0xO1xuICAgICAgfVxuICAgICAgdmFyIGluZGV4ID0gbGVuZ3RoO1xuICAgICAgaWYgKGZyb21JbmRleCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIGluZGV4ID0gdG9JbnRlZ2VyKGZyb21JbmRleCk7XG4gICAgICAgIGluZGV4ID0gaW5kZXggPCAwID8gbmF0aXZlTWF4KGxlbmd0aCArIGluZGV4LCAwKSA6IG5hdGl2ZU1pbihpbmRleCwgbGVuZ3RoIC0gMSk7XG4gICAgICB9XG4gICAgICByZXR1cm4gdmFsdWUgPT09IHZhbHVlXG4gICAgICAgID8gc3RyaWN0TGFzdEluZGV4T2YoYXJyYXksIHZhbHVlLCBpbmRleClcbiAgICAgICAgOiBiYXNlRmluZEluZGV4KGFycmF5LCBiYXNlSXNOYU4sIGluZGV4LCB0cnVlKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBHZXRzIHRoZSBlbGVtZW50IGF0IGluZGV4IGBuYCBvZiBgYXJyYXlgLiBJZiBgbmAgaXMgbmVnYXRpdmUsIHRoZSBudGhcbiAgICAgKiBlbGVtZW50IGZyb20gdGhlIGVuZCBpcyByZXR1cm5lZC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjExLjBcbiAgICAgKiBAY2F0ZWdvcnkgQXJyYXlcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gcXVlcnkuXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IFtuPTBdIFRoZSBpbmRleCBvZiB0aGUgZWxlbWVudCB0byByZXR1cm4uXG4gICAgICogQHJldHVybnMgeyp9IFJldHVybnMgdGhlIG50aCBlbGVtZW50IG9mIGBhcnJheWAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciBhcnJheSA9IFsnYScsICdiJywgJ2MnLCAnZCddO1xuICAgICAqXG4gICAgICogXy5udGgoYXJyYXksIDEpO1xuICAgICAqIC8vID0+ICdiJ1xuICAgICAqXG4gICAgICogXy5udGgoYXJyYXksIC0yKTtcbiAgICAgKiAvLyA9PiAnYyc7XG4gICAgICovXG4gICAgZnVuY3Rpb24gbnRoKGFycmF5LCBuKSB7XG4gICAgICByZXR1cm4gKGFycmF5ICYmIGFycmF5Lmxlbmd0aCkgPyBiYXNlTnRoKGFycmF5LCB0b0ludGVnZXIobikpIDogdW5kZWZpbmVkO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFJlbW92ZXMgYWxsIGdpdmVuIHZhbHVlcyBmcm9tIGBhcnJheWAgdXNpbmdcbiAgICAgKiBbYFNhbWVWYWx1ZVplcm9gXShodHRwOi8vZWNtYS1pbnRlcm5hdGlvbmFsLm9yZy9lY21hLTI2Mi83LjAvI3NlYy1zYW1ldmFsdWV6ZXJvKVxuICAgICAqIGZvciBlcXVhbGl0eSBjb21wYXJpc29ucy5cbiAgICAgKlxuICAgICAqICoqTm90ZToqKiBVbmxpa2UgYF8ud2l0aG91dGAsIHRoaXMgbWV0aG9kIG11dGF0ZXMgYGFycmF5YC4gVXNlIGBfLnJlbW92ZWBcbiAgICAgKiB0byByZW1vdmUgZWxlbWVudHMgZnJvbSBhbiBhcnJheSBieSBwcmVkaWNhdGUuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMi4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgQXJyYXlcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gbW9kaWZ5LlxuICAgICAqIEBwYXJhbSB7Li4uKn0gW3ZhbHVlc10gVGhlIHZhbHVlcyB0byByZW1vdmUuXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIGBhcnJheWAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciBhcnJheSA9IFsnYScsICdiJywgJ2MnLCAnYScsICdiJywgJ2MnXTtcbiAgICAgKlxuICAgICAqIF8ucHVsbChhcnJheSwgJ2EnLCAnYycpO1xuICAgICAqIGNvbnNvbGUubG9nKGFycmF5KTtcbiAgICAgKiAvLyA9PiBbJ2InLCAnYiddXG4gICAgICovXG4gICAgdmFyIHB1bGwgPSBiYXNlUmVzdChwdWxsQWxsKTtcblxuICAgIC8qKlxuICAgICAqIFRoaXMgbWV0aG9kIGlzIGxpa2UgYF8ucHVsbGAgZXhjZXB0IHRoYXQgaXQgYWNjZXB0cyBhbiBhcnJheSBvZiB2YWx1ZXMgdG8gcmVtb3ZlLlxuICAgICAqXG4gICAgICogKipOb3RlOioqIFVubGlrZSBgXy5kaWZmZXJlbmNlYCwgdGhpcyBtZXRob2QgbXV0YXRlcyBgYXJyYXlgLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMC4wXG4gICAgICogQGNhdGVnb3J5IEFycmF5XG4gICAgICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIG1vZGlmeS5cbiAgICAgKiBAcGFyYW0ge0FycmF5fSB2YWx1ZXMgVGhlIHZhbHVlcyB0byByZW1vdmUuXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIGBhcnJheWAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciBhcnJheSA9IFsnYScsICdiJywgJ2MnLCAnYScsICdiJywgJ2MnXTtcbiAgICAgKlxuICAgICAqIF8ucHVsbEFsbChhcnJheSwgWydhJywgJ2MnXSk7XG4gICAgICogY29uc29sZS5sb2coYXJyYXkpO1xuICAgICAqIC8vID0+IFsnYicsICdiJ11cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBwdWxsQWxsKGFycmF5LCB2YWx1ZXMpIHtcbiAgICAgIHJldHVybiAoYXJyYXkgJiYgYXJyYXkubGVuZ3RoICYmIHZhbHVlcyAmJiB2YWx1ZXMubGVuZ3RoKVxuICAgICAgICA/IGJhc2VQdWxsQWxsKGFycmF5LCB2YWx1ZXMpXG4gICAgICAgIDogYXJyYXk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhpcyBtZXRob2QgaXMgbGlrZSBgXy5wdWxsQWxsYCBleGNlcHQgdGhhdCBpdCBhY2NlcHRzIGBpdGVyYXRlZWAgd2hpY2ggaXNcbiAgICAgKiBpbnZva2VkIGZvciBlYWNoIGVsZW1lbnQgb2YgYGFycmF5YCBhbmQgYHZhbHVlc2AgdG8gZ2VuZXJhdGUgdGhlIGNyaXRlcmlvblxuICAgICAqIGJ5IHdoaWNoIHRoZXkncmUgY29tcGFyZWQuIFRoZSBpdGVyYXRlZSBpcyBpbnZva2VkIHdpdGggb25lIGFyZ3VtZW50OiAodmFsdWUpLlxuICAgICAqXG4gICAgICogKipOb3RlOioqIFVubGlrZSBgXy5kaWZmZXJlbmNlQnlgLCB0aGlzIG1ldGhvZCBtdXRhdGVzIGBhcnJheWAuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgQXJyYXlcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gbW9kaWZ5LlxuICAgICAqIEBwYXJhbSB7QXJyYXl9IHZhbHVlcyBUaGUgdmFsdWVzIHRvIHJlbW92ZS5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbaXRlcmF0ZWU9Xy5pZGVudGl0eV0gVGhlIGl0ZXJhdGVlIGludm9rZWQgcGVyIGVsZW1lbnQuXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIGBhcnJheWAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciBhcnJheSA9IFt7ICd4JzogMSB9LCB7ICd4JzogMiB9LCB7ICd4JzogMyB9LCB7ICd4JzogMSB9XTtcbiAgICAgKlxuICAgICAqIF8ucHVsbEFsbEJ5KGFycmF5LCBbeyAneCc6IDEgfSwgeyAneCc6IDMgfV0sICd4Jyk7XG4gICAgICogY29uc29sZS5sb2coYXJyYXkpO1xuICAgICAqIC8vID0+IFt7ICd4JzogMiB9XVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHB1bGxBbGxCeShhcnJheSwgdmFsdWVzLCBpdGVyYXRlZSkge1xuICAgICAgcmV0dXJuIChhcnJheSAmJiBhcnJheS5sZW5ndGggJiYgdmFsdWVzICYmIHZhbHVlcy5sZW5ndGgpXG4gICAgICAgID8gYmFzZVB1bGxBbGwoYXJyYXksIHZhbHVlcywgZ2V0SXRlcmF0ZWUoaXRlcmF0ZWUsIDIpKVxuICAgICAgICA6IGFycmF5O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoaXMgbWV0aG9kIGlzIGxpa2UgYF8ucHVsbEFsbGAgZXhjZXB0IHRoYXQgaXQgYWNjZXB0cyBgY29tcGFyYXRvcmAgd2hpY2hcbiAgICAgKiBpcyBpbnZva2VkIHRvIGNvbXBhcmUgZWxlbWVudHMgb2YgYGFycmF5YCB0byBgdmFsdWVzYC4gVGhlIGNvbXBhcmF0b3IgaXNcbiAgICAgKiBpbnZva2VkIHdpdGggdHdvIGFyZ3VtZW50czogKGFyclZhbCwgb3RoVmFsKS5cbiAgICAgKlxuICAgICAqICoqTm90ZToqKiBVbmxpa2UgYF8uZGlmZmVyZW5jZVdpdGhgLCB0aGlzIG1ldGhvZCBtdXRhdGVzIGBhcnJheWAuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC42LjBcbiAgICAgKiBAY2F0ZWdvcnkgQXJyYXlcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gbW9kaWZ5LlxuICAgICAqIEBwYXJhbSB7QXJyYXl9IHZhbHVlcyBUaGUgdmFsdWVzIHRvIHJlbW92ZS5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbY29tcGFyYXRvcl0gVGhlIGNvbXBhcmF0b3IgaW52b2tlZCBwZXIgZWxlbWVudC5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgYGFycmF5YC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIGFycmF5ID0gW3sgJ3gnOiAxLCAneSc6IDIgfSwgeyAneCc6IDMsICd5JzogNCB9LCB7ICd4JzogNSwgJ3knOiA2IH1dO1xuICAgICAqXG4gICAgICogXy5wdWxsQWxsV2l0aChhcnJheSwgW3sgJ3gnOiAzLCAneSc6IDQgfV0sIF8uaXNFcXVhbCk7XG4gICAgICogY29uc29sZS5sb2coYXJyYXkpO1xuICAgICAqIC8vID0+IFt7ICd4JzogMSwgJ3knOiAyIH0sIHsgJ3gnOiA1LCAneSc6IDYgfV1cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBwdWxsQWxsV2l0aChhcnJheSwgdmFsdWVzLCBjb21wYXJhdG9yKSB7XG4gICAgICByZXR1cm4gKGFycmF5ICYmIGFycmF5Lmxlbmd0aCAmJiB2YWx1ZXMgJiYgdmFsdWVzLmxlbmd0aClcbiAgICAgICAgPyBiYXNlUHVsbEFsbChhcnJheSwgdmFsdWVzLCB1bmRlZmluZWQsIGNvbXBhcmF0b3IpXG4gICAgICAgIDogYXJyYXk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogUmVtb3ZlcyBlbGVtZW50cyBmcm9tIGBhcnJheWAgY29ycmVzcG9uZGluZyB0byBgaW5kZXhlc2AgYW5kIHJldHVybnMgYW5cbiAgICAgKiBhcnJheSBvZiByZW1vdmVkIGVsZW1lbnRzLlxuICAgICAqXG4gICAgICogKipOb3RlOioqIFVubGlrZSBgXy5hdGAsIHRoaXMgbWV0aG9kIG11dGF0ZXMgYGFycmF5YC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAzLjAuMFxuICAgICAqIEBjYXRlZ29yeSBBcnJheVxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBtb2RpZnkuXG4gICAgICogQHBhcmFtIHsuLi4obnVtYmVyfG51bWJlcltdKX0gW2luZGV4ZXNdIFRoZSBpbmRleGVzIG9mIGVsZW1lbnRzIHRvIHJlbW92ZS5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIG5ldyBhcnJheSBvZiByZW1vdmVkIGVsZW1lbnRzLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgYXJyYXkgPSBbJ2EnLCAnYicsICdjJywgJ2QnXTtcbiAgICAgKiB2YXIgcHVsbGVkID0gXy5wdWxsQXQoYXJyYXksIFsxLCAzXSk7XG4gICAgICpcbiAgICAgKiBjb25zb2xlLmxvZyhhcnJheSk7XG4gICAgICogLy8gPT4gWydhJywgJ2MnXVxuICAgICAqXG4gICAgICogY29uc29sZS5sb2cocHVsbGVkKTtcbiAgICAgKiAvLyA9PiBbJ2InLCAnZCddXG4gICAgICovXG4gICAgdmFyIHB1bGxBdCA9IGZsYXRSZXN0KGZ1bmN0aW9uKGFycmF5LCBpbmRleGVzKSB7XG4gICAgICB2YXIgbGVuZ3RoID0gYXJyYXkgPT0gbnVsbCA/IDAgOiBhcnJheS5sZW5ndGgsXG4gICAgICAgICAgcmVzdWx0ID0gYmFzZUF0KGFycmF5LCBpbmRleGVzKTtcblxuICAgICAgYmFzZVB1bGxBdChhcnJheSwgYXJyYXlNYXAoaW5kZXhlcywgZnVuY3Rpb24oaW5kZXgpIHtcbiAgICAgICAgcmV0dXJuIGlzSW5kZXgoaW5kZXgsIGxlbmd0aCkgPyAraW5kZXggOiBpbmRleDtcbiAgICAgIH0pLnNvcnQoY29tcGFyZUFzY2VuZGluZykpO1xuXG4gICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH0pO1xuXG4gICAgLyoqXG4gICAgICogUmVtb3ZlcyBhbGwgZWxlbWVudHMgZnJvbSBgYXJyYXlgIHRoYXQgYHByZWRpY2F0ZWAgcmV0dXJucyB0cnV0aHkgZm9yXG4gICAgICogYW5kIHJldHVybnMgYW4gYXJyYXkgb2YgdGhlIHJlbW92ZWQgZWxlbWVudHMuIFRoZSBwcmVkaWNhdGUgaXMgaW52b2tlZFxuICAgICAqIHdpdGggdGhyZWUgYXJndW1lbnRzOiAodmFsdWUsIGluZGV4LCBhcnJheSkuXG4gICAgICpcbiAgICAgKiAqKk5vdGU6KiogVW5saWtlIGBfLmZpbHRlcmAsIHRoaXMgbWV0aG9kIG11dGF0ZXMgYGFycmF5YC4gVXNlIGBfLnB1bGxgXG4gICAgICogdG8gcHVsbCBlbGVtZW50cyBmcm9tIGFuIGFycmF5IGJ5IHZhbHVlLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDIuMC4wXG4gICAgICogQGNhdGVnb3J5IEFycmF5XG4gICAgICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIG1vZGlmeS5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbcHJlZGljYXRlPV8uaWRlbnRpdHldIFRoZSBmdW5jdGlvbiBpbnZva2VkIHBlciBpdGVyYXRpb24uXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBuZXcgYXJyYXkgb2YgcmVtb3ZlZCBlbGVtZW50cy5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIGFycmF5ID0gWzEsIDIsIDMsIDRdO1xuICAgICAqIHZhciBldmVucyA9IF8ucmVtb3ZlKGFycmF5LCBmdW5jdGlvbihuKSB7XG4gICAgICogICByZXR1cm4gbiAlIDIgPT0gMDtcbiAgICAgKiB9KTtcbiAgICAgKlxuICAgICAqIGNvbnNvbGUubG9nKGFycmF5KTtcbiAgICAgKiAvLyA9PiBbMSwgM11cbiAgICAgKlxuICAgICAqIGNvbnNvbGUubG9nKGV2ZW5zKTtcbiAgICAgKiAvLyA9PiBbMiwgNF1cbiAgICAgKi9cbiAgICBmdW5jdGlvbiByZW1vdmUoYXJyYXksIHByZWRpY2F0ZSkge1xuICAgICAgdmFyIHJlc3VsdCA9IFtdO1xuICAgICAgaWYgKCEoYXJyYXkgJiYgYXJyYXkubGVuZ3RoKSkge1xuICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgICAgfVxuICAgICAgdmFyIGluZGV4ID0gLTEsXG4gICAgICAgICAgaW5kZXhlcyA9IFtdLFxuICAgICAgICAgIGxlbmd0aCA9IGFycmF5Lmxlbmd0aDtcblxuICAgICAgcHJlZGljYXRlID0gZ2V0SXRlcmF0ZWUocHJlZGljYXRlLCAzKTtcbiAgICAgIHdoaWxlICgrK2luZGV4IDwgbGVuZ3RoKSB7XG4gICAgICAgIHZhciB2YWx1ZSA9IGFycmF5W2luZGV4XTtcbiAgICAgICAgaWYgKHByZWRpY2F0ZSh2YWx1ZSwgaW5kZXgsIGFycmF5KSkge1xuICAgICAgICAgIHJlc3VsdC5wdXNoKHZhbHVlKTtcbiAgICAgICAgICBpbmRleGVzLnB1c2goaW5kZXgpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBiYXNlUHVsbEF0KGFycmF5LCBpbmRleGVzKTtcbiAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogUmV2ZXJzZXMgYGFycmF5YCBzbyB0aGF0IHRoZSBmaXJzdCBlbGVtZW50IGJlY29tZXMgdGhlIGxhc3QsIHRoZSBzZWNvbmRcbiAgICAgKiBlbGVtZW50IGJlY29tZXMgdGhlIHNlY29uZCB0byBsYXN0LCBhbmQgc28gb24uXG4gICAgICpcbiAgICAgKiAqKk5vdGU6KiogVGhpcyBtZXRob2QgbXV0YXRlcyBgYXJyYXlgIGFuZCBpcyBiYXNlZCBvblxuICAgICAqIFtgQXJyYXkjcmV2ZXJzZWBdKGh0dHBzOi8vbWRuLmlvL0FycmF5L3JldmVyc2UpLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMC4wXG4gICAgICogQGNhdGVnb3J5IEFycmF5XG4gICAgICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIG1vZGlmeS5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgYGFycmF5YC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIGFycmF5ID0gWzEsIDIsIDNdO1xuICAgICAqXG4gICAgICogXy5yZXZlcnNlKGFycmF5KTtcbiAgICAgKiAvLyA9PiBbMywgMiwgMV1cbiAgICAgKlxuICAgICAqIGNvbnNvbGUubG9nKGFycmF5KTtcbiAgICAgKiAvLyA9PiBbMywgMiwgMV1cbiAgICAgKi9cbiAgICBmdW5jdGlvbiByZXZlcnNlKGFycmF5KSB7XG4gICAgICByZXR1cm4gYXJyYXkgPT0gbnVsbCA/IGFycmF5IDogbmF0aXZlUmV2ZXJzZS5jYWxsKGFycmF5KTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgc2xpY2Ugb2YgYGFycmF5YCBmcm9tIGBzdGFydGAgdXAgdG8sIGJ1dCBub3QgaW5jbHVkaW5nLCBgZW5kYC5cbiAgICAgKlxuICAgICAqICoqTm90ZToqKiBUaGlzIG1ldGhvZCBpcyB1c2VkIGluc3RlYWQgb2ZcbiAgICAgKiBbYEFycmF5I3NsaWNlYF0oaHR0cHM6Ly9tZG4uaW8vQXJyYXkvc2xpY2UpIHRvIGVuc3VyZSBkZW5zZSBhcnJheXMgYXJlXG4gICAgICogcmV0dXJuZWQuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMy4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgQXJyYXlcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gc2xpY2UuXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IFtzdGFydD0wXSBUaGUgc3RhcnQgcG9zaXRpb24uXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IFtlbmQ9YXJyYXkubGVuZ3RoXSBUaGUgZW5kIHBvc2l0aW9uLlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgc2xpY2Ugb2YgYGFycmF5YC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBzbGljZShhcnJheSwgc3RhcnQsIGVuZCkge1xuICAgICAgdmFyIGxlbmd0aCA9IGFycmF5ID09IG51bGwgPyAwIDogYXJyYXkubGVuZ3RoO1xuICAgICAgaWYgKCFsZW5ndGgpIHtcbiAgICAgICAgcmV0dXJuIFtdO1xuICAgICAgfVxuICAgICAgaWYgKGVuZCAmJiB0eXBlb2YgZW5kICE9ICdudW1iZXInICYmIGlzSXRlcmF0ZWVDYWxsKGFycmF5LCBzdGFydCwgZW5kKSkge1xuICAgICAgICBzdGFydCA9IDA7XG4gICAgICAgIGVuZCA9IGxlbmd0aDtcbiAgICAgIH1cbiAgICAgIGVsc2Uge1xuICAgICAgICBzdGFydCA9IHN0YXJ0ID09IG51bGwgPyAwIDogdG9JbnRlZ2VyKHN0YXJ0KTtcbiAgICAgICAgZW5kID0gZW5kID09PSB1bmRlZmluZWQgPyBsZW5ndGggOiB0b0ludGVnZXIoZW5kKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBiYXNlU2xpY2UoYXJyYXksIHN0YXJ0LCBlbmQpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFVzZXMgYSBiaW5hcnkgc2VhcmNoIHRvIGRldGVybWluZSB0aGUgbG93ZXN0IGluZGV4IGF0IHdoaWNoIGB2YWx1ZWBcbiAgICAgKiBzaG91bGQgYmUgaW5zZXJ0ZWQgaW50byBgYXJyYXlgIGluIG9yZGVyIHRvIG1haW50YWluIGl0cyBzb3J0IG9yZGVyLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDAuMS4wXG4gICAgICogQGNhdGVnb3J5IEFycmF5XG4gICAgICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIHNvcnRlZCBhcnJheSB0byBpbnNwZWN0LlxuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGV2YWx1YXRlLlxuICAgICAqIEByZXR1cm5zIHtudW1iZXJ9IFJldHVybnMgdGhlIGluZGV4IGF0IHdoaWNoIGB2YWx1ZWAgc2hvdWxkIGJlIGluc2VydGVkXG4gICAgICogIGludG8gYGFycmF5YC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5zb3J0ZWRJbmRleChbMzAsIDUwXSwgNDApO1xuICAgICAqIC8vID0+IDFcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBzb3J0ZWRJbmRleChhcnJheSwgdmFsdWUpIHtcbiAgICAgIHJldHVybiBiYXNlU29ydGVkSW5kZXgoYXJyYXksIHZhbHVlKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGlzIG1ldGhvZCBpcyBsaWtlIGBfLnNvcnRlZEluZGV4YCBleGNlcHQgdGhhdCBpdCBhY2NlcHRzIGBpdGVyYXRlZWBcbiAgICAgKiB3aGljaCBpcyBpbnZva2VkIGZvciBgdmFsdWVgIGFuZCBlYWNoIGVsZW1lbnQgb2YgYGFycmF5YCB0byBjb21wdXRlIHRoZWlyXG4gICAgICogc29ydCByYW5raW5nLiBUaGUgaXRlcmF0ZWUgaXMgaW52b2tlZCB3aXRoIG9uZSBhcmd1bWVudDogKHZhbHVlKS5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjAuMFxuICAgICAqIEBjYXRlZ29yeSBBcnJheVxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBzb3J0ZWQgYXJyYXkgdG8gaW5zcGVjdC5cbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBldmFsdWF0ZS5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbaXRlcmF0ZWU9Xy5pZGVudGl0eV0gVGhlIGl0ZXJhdGVlIGludm9rZWQgcGVyIGVsZW1lbnQuXG4gICAgICogQHJldHVybnMge251bWJlcn0gUmV0dXJucyB0aGUgaW5kZXggYXQgd2hpY2ggYHZhbHVlYCBzaG91bGQgYmUgaW5zZXJ0ZWRcbiAgICAgKiAgaW50byBgYXJyYXlgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgb2JqZWN0cyA9IFt7ICd4JzogNCB9LCB7ICd4JzogNSB9XTtcbiAgICAgKlxuICAgICAqIF8uc29ydGVkSW5kZXhCeShvYmplY3RzLCB7ICd4JzogNCB9LCBmdW5jdGlvbihvKSB7IHJldHVybiBvLng7IH0pO1xuICAgICAqIC8vID0+IDBcbiAgICAgKlxuICAgICAqIC8vIFRoZSBgXy5wcm9wZXJ0eWAgaXRlcmF0ZWUgc2hvcnRoYW5kLlxuICAgICAqIF8uc29ydGVkSW5kZXhCeShvYmplY3RzLCB7ICd4JzogNCB9LCAneCcpO1xuICAgICAqIC8vID0+IDBcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBzb3J0ZWRJbmRleEJ5KGFycmF5LCB2YWx1ZSwgaXRlcmF0ZWUpIHtcbiAgICAgIHJldHVybiBiYXNlU29ydGVkSW5kZXhCeShhcnJheSwgdmFsdWUsIGdldEl0ZXJhdGVlKGl0ZXJhdGVlLCAyKSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhpcyBtZXRob2QgaXMgbGlrZSBgXy5pbmRleE9mYCBleGNlcHQgdGhhdCBpdCBwZXJmb3JtcyBhIGJpbmFyeVxuICAgICAqIHNlYXJjaCBvbiBhIHNvcnRlZCBgYXJyYXlgLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMC4wXG4gICAgICogQGNhdGVnb3J5IEFycmF5XG4gICAgICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIGluc3BlY3QuXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gc2VhcmNoIGZvci5cbiAgICAgKiBAcmV0dXJucyB7bnVtYmVyfSBSZXR1cm5zIHRoZSBpbmRleCBvZiB0aGUgbWF0Y2hlZCB2YWx1ZSwgZWxzZSBgLTFgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLnNvcnRlZEluZGV4T2YoWzQsIDUsIDUsIDUsIDZdLCA1KTtcbiAgICAgKiAvLyA9PiAxXG4gICAgICovXG4gICAgZnVuY3Rpb24gc29ydGVkSW5kZXhPZihhcnJheSwgdmFsdWUpIHtcbiAgICAgIHZhciBsZW5ndGggPSBhcnJheSA9PSBudWxsID8gMCA6IGFycmF5Lmxlbmd0aDtcbiAgICAgIGlmIChsZW5ndGgpIHtcbiAgICAgICAgdmFyIGluZGV4ID0gYmFzZVNvcnRlZEluZGV4KGFycmF5LCB2YWx1ZSk7XG4gICAgICAgIGlmIChpbmRleCA8IGxlbmd0aCAmJiBlcShhcnJheVtpbmRleF0sIHZhbHVlKSkge1xuICAgICAgICAgIHJldHVybiBpbmRleDtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgcmV0dXJuIC0xO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoaXMgbWV0aG9kIGlzIGxpa2UgYF8uc29ydGVkSW5kZXhgIGV4Y2VwdCB0aGF0IGl0IHJldHVybnMgdGhlIGhpZ2hlc3RcbiAgICAgKiBpbmRleCBhdCB3aGljaCBgdmFsdWVgIHNob3VsZCBiZSBpbnNlcnRlZCBpbnRvIGBhcnJheWAgaW4gb3JkZXIgdG9cbiAgICAgKiBtYWludGFpbiBpdHMgc29ydCBvcmRlci5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAzLjAuMFxuICAgICAqIEBjYXRlZ29yeSBBcnJheVxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBzb3J0ZWQgYXJyYXkgdG8gaW5zcGVjdC5cbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBldmFsdWF0ZS5cbiAgICAgKiBAcmV0dXJucyB7bnVtYmVyfSBSZXR1cm5zIHRoZSBpbmRleCBhdCB3aGljaCBgdmFsdWVgIHNob3VsZCBiZSBpbnNlcnRlZFxuICAgICAqICBpbnRvIGBhcnJheWAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uc29ydGVkTGFzdEluZGV4KFs0LCA1LCA1LCA1LCA2XSwgNSk7XG4gICAgICogLy8gPT4gNFxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHNvcnRlZExhc3RJbmRleChhcnJheSwgdmFsdWUpIHtcbiAgICAgIHJldHVybiBiYXNlU29ydGVkSW5kZXgoYXJyYXksIHZhbHVlLCB0cnVlKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGlzIG1ldGhvZCBpcyBsaWtlIGBfLnNvcnRlZExhc3RJbmRleGAgZXhjZXB0IHRoYXQgaXQgYWNjZXB0cyBgaXRlcmF0ZWVgXG4gICAgICogd2hpY2ggaXMgaW52b2tlZCBmb3IgYHZhbHVlYCBhbmQgZWFjaCBlbGVtZW50IG9mIGBhcnJheWAgdG8gY29tcHV0ZSB0aGVpclxuICAgICAqIHNvcnQgcmFua2luZy4gVGhlIGl0ZXJhdGVlIGlzIGludm9rZWQgd2l0aCBvbmUgYXJndW1lbnQ6ICh2YWx1ZSkuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgQXJyYXlcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgc29ydGVkIGFycmF5IHRvIGluc3BlY3QuXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gZXZhbHVhdGUuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gW2l0ZXJhdGVlPV8uaWRlbnRpdHldIFRoZSBpdGVyYXRlZSBpbnZva2VkIHBlciBlbGVtZW50LlxuICAgICAqIEByZXR1cm5zIHtudW1iZXJ9IFJldHVybnMgdGhlIGluZGV4IGF0IHdoaWNoIGB2YWx1ZWAgc2hvdWxkIGJlIGluc2VydGVkXG4gICAgICogIGludG8gYGFycmF5YC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIG9iamVjdHMgPSBbeyAneCc6IDQgfSwgeyAneCc6IDUgfV07XG4gICAgICpcbiAgICAgKiBfLnNvcnRlZExhc3RJbmRleEJ5KG9iamVjdHMsIHsgJ3gnOiA0IH0sIGZ1bmN0aW9uKG8pIHsgcmV0dXJuIG8ueDsgfSk7XG4gICAgICogLy8gPT4gMVxuICAgICAqXG4gICAgICogLy8gVGhlIGBfLnByb3BlcnR5YCBpdGVyYXRlZSBzaG9ydGhhbmQuXG4gICAgICogXy5zb3J0ZWRMYXN0SW5kZXhCeShvYmplY3RzLCB7ICd4JzogNCB9LCAneCcpO1xuICAgICAqIC8vID0+IDFcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBzb3J0ZWRMYXN0SW5kZXhCeShhcnJheSwgdmFsdWUsIGl0ZXJhdGVlKSB7XG4gICAgICByZXR1cm4gYmFzZVNvcnRlZEluZGV4QnkoYXJyYXksIHZhbHVlLCBnZXRJdGVyYXRlZShpdGVyYXRlZSwgMiksIHRydWUpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoaXMgbWV0aG9kIGlzIGxpa2UgYF8ubGFzdEluZGV4T2ZgIGV4Y2VwdCB0aGF0IGl0IHBlcmZvcm1zIGEgYmluYXJ5XG4gICAgICogc2VhcmNoIG9uIGEgc29ydGVkIGBhcnJheWAuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgQXJyYXlcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gaW5zcGVjdC5cbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBzZWFyY2ggZm9yLlxuICAgICAqIEByZXR1cm5zIHtudW1iZXJ9IFJldHVybnMgdGhlIGluZGV4IG9mIHRoZSBtYXRjaGVkIHZhbHVlLCBlbHNlIGAtMWAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uc29ydGVkTGFzdEluZGV4T2YoWzQsIDUsIDUsIDUsIDZdLCA1KTtcbiAgICAgKiAvLyA9PiAzXG4gICAgICovXG4gICAgZnVuY3Rpb24gc29ydGVkTGFzdEluZGV4T2YoYXJyYXksIHZhbHVlKSB7XG4gICAgICB2YXIgbGVuZ3RoID0gYXJyYXkgPT0gbnVsbCA/IDAgOiBhcnJheS5sZW5ndGg7XG4gICAgICBpZiAobGVuZ3RoKSB7XG4gICAgICAgIHZhciBpbmRleCA9IGJhc2VTb3J0ZWRJbmRleChhcnJheSwgdmFsdWUsIHRydWUpIC0gMTtcbiAgICAgICAgaWYgKGVxKGFycmF5W2luZGV4XSwgdmFsdWUpKSB7XG4gICAgICAgICAgcmV0dXJuIGluZGV4O1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICByZXR1cm4gLTE7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhpcyBtZXRob2QgaXMgbGlrZSBgXy51bmlxYCBleGNlcHQgdGhhdCBpdCdzIGRlc2lnbmVkIGFuZCBvcHRpbWl6ZWRcbiAgICAgKiBmb3Igc29ydGVkIGFycmF5cy5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjAuMFxuICAgICAqIEBjYXRlZ29yeSBBcnJheVxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBpbnNwZWN0LlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgbmV3IGR1cGxpY2F0ZSBmcmVlIGFycmF5LlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLnNvcnRlZFVuaXEoWzEsIDEsIDJdKTtcbiAgICAgKiAvLyA9PiBbMSwgMl1cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBzb3J0ZWRVbmlxKGFycmF5KSB7XG4gICAgICByZXR1cm4gKGFycmF5ICYmIGFycmF5Lmxlbmd0aClcbiAgICAgICAgPyBiYXNlU29ydGVkVW5pcShhcnJheSlcbiAgICAgICAgOiBbXTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGlzIG1ldGhvZCBpcyBsaWtlIGBfLnVuaXFCeWAgZXhjZXB0IHRoYXQgaXQncyBkZXNpZ25lZCBhbmQgb3B0aW1pemVkXG4gICAgICogZm9yIHNvcnRlZCBhcnJheXMuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgQXJyYXlcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gaW5zcGVjdC5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbaXRlcmF0ZWVdIFRoZSBpdGVyYXRlZSBpbnZva2VkIHBlciBlbGVtZW50LlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgbmV3IGR1cGxpY2F0ZSBmcmVlIGFycmF5LlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLnNvcnRlZFVuaXFCeShbMS4xLCAxLjIsIDIuMywgMi40XSwgTWF0aC5mbG9vcik7XG4gICAgICogLy8gPT4gWzEuMSwgMi4zXVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHNvcnRlZFVuaXFCeShhcnJheSwgaXRlcmF0ZWUpIHtcbiAgICAgIHJldHVybiAoYXJyYXkgJiYgYXJyYXkubGVuZ3RoKVxuICAgICAgICA/IGJhc2VTb3J0ZWRVbmlxKGFycmF5LCBnZXRJdGVyYXRlZShpdGVyYXRlZSwgMikpXG4gICAgICAgIDogW107XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogR2V0cyBhbGwgYnV0IHRoZSBmaXJzdCBlbGVtZW50IG9mIGBhcnJheWAuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgQXJyYXlcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gcXVlcnkuXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBzbGljZSBvZiBgYXJyYXlgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLnRhaWwoWzEsIDIsIDNdKTtcbiAgICAgKiAvLyA9PiBbMiwgM11cbiAgICAgKi9cbiAgICBmdW5jdGlvbiB0YWlsKGFycmF5KSB7XG4gICAgICB2YXIgbGVuZ3RoID0gYXJyYXkgPT0gbnVsbCA/IDAgOiBhcnJheS5sZW5ndGg7XG4gICAgICByZXR1cm4gbGVuZ3RoID8gYmFzZVNsaWNlKGFycmF5LCAxLCBsZW5ndGgpIDogW107XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIHNsaWNlIG9mIGBhcnJheWAgd2l0aCBgbmAgZWxlbWVudHMgdGFrZW4gZnJvbSB0aGUgYmVnaW5uaW5nLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDAuMS4wXG4gICAgICogQGNhdGVnb3J5IEFycmF5XG4gICAgICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIHF1ZXJ5LlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBbbj0xXSBUaGUgbnVtYmVyIG9mIGVsZW1lbnRzIHRvIHRha2UuXG4gICAgICogQHBhcmFtLSB7T2JqZWN0fSBbZ3VhcmRdIEVuYWJsZXMgdXNlIGFzIGFuIGl0ZXJhdGVlIGZvciBtZXRob2RzIGxpa2UgYF8ubWFwYC5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIHNsaWNlIG9mIGBhcnJheWAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8udGFrZShbMSwgMiwgM10pO1xuICAgICAqIC8vID0+IFsxXVxuICAgICAqXG4gICAgICogXy50YWtlKFsxLCAyLCAzXSwgMik7XG4gICAgICogLy8gPT4gWzEsIDJdXG4gICAgICpcbiAgICAgKiBfLnRha2UoWzEsIDIsIDNdLCA1KTtcbiAgICAgKiAvLyA9PiBbMSwgMiwgM11cbiAgICAgKlxuICAgICAqIF8udGFrZShbMSwgMiwgM10sIDApO1xuICAgICAqIC8vID0+IFtdXG4gICAgICovXG4gICAgZnVuY3Rpb24gdGFrZShhcnJheSwgbiwgZ3VhcmQpIHtcbiAgICAgIGlmICghKGFycmF5ICYmIGFycmF5Lmxlbmd0aCkpIHtcbiAgICAgICAgcmV0dXJuIFtdO1xuICAgICAgfVxuICAgICAgbiA9IChndWFyZCB8fCBuID09PSB1bmRlZmluZWQpID8gMSA6IHRvSW50ZWdlcihuKTtcbiAgICAgIHJldHVybiBiYXNlU2xpY2UoYXJyYXksIDAsIG4gPCAwID8gMCA6IG4pO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBzbGljZSBvZiBgYXJyYXlgIHdpdGggYG5gIGVsZW1lbnRzIHRha2VuIGZyb20gdGhlIGVuZC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAzLjAuMFxuICAgICAqIEBjYXRlZ29yeSBBcnJheVxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBxdWVyeS5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gW249MV0gVGhlIG51bWJlciBvZiBlbGVtZW50cyB0byB0YWtlLlxuICAgICAqIEBwYXJhbS0ge09iamVjdH0gW2d1YXJkXSBFbmFibGVzIHVzZSBhcyBhbiBpdGVyYXRlZSBmb3IgbWV0aG9kcyBsaWtlIGBfLm1hcGAuXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBzbGljZSBvZiBgYXJyYXlgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLnRha2VSaWdodChbMSwgMiwgM10pO1xuICAgICAqIC8vID0+IFszXVxuICAgICAqXG4gICAgICogXy50YWtlUmlnaHQoWzEsIDIsIDNdLCAyKTtcbiAgICAgKiAvLyA9PiBbMiwgM11cbiAgICAgKlxuICAgICAqIF8udGFrZVJpZ2h0KFsxLCAyLCAzXSwgNSk7XG4gICAgICogLy8gPT4gWzEsIDIsIDNdXG4gICAgICpcbiAgICAgKiBfLnRha2VSaWdodChbMSwgMiwgM10sIDApO1xuICAgICAqIC8vID0+IFtdXG4gICAgICovXG4gICAgZnVuY3Rpb24gdGFrZVJpZ2h0KGFycmF5LCBuLCBndWFyZCkge1xuICAgICAgdmFyIGxlbmd0aCA9IGFycmF5ID09IG51bGwgPyAwIDogYXJyYXkubGVuZ3RoO1xuICAgICAgaWYgKCFsZW5ndGgpIHtcbiAgICAgICAgcmV0dXJuIFtdO1xuICAgICAgfVxuICAgICAgbiA9IChndWFyZCB8fCBuID09PSB1bmRlZmluZWQpID8gMSA6IHRvSW50ZWdlcihuKTtcbiAgICAgIG4gPSBsZW5ndGggLSBuO1xuICAgICAgcmV0dXJuIGJhc2VTbGljZShhcnJheSwgbiA8IDAgPyAwIDogbiwgbGVuZ3RoKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgc2xpY2Ugb2YgYGFycmF5YCB3aXRoIGVsZW1lbnRzIHRha2VuIGZyb20gdGhlIGVuZC4gRWxlbWVudHMgYXJlXG4gICAgICogdGFrZW4gdW50aWwgYHByZWRpY2F0ZWAgcmV0dXJucyBmYWxzZXkuIFRoZSBwcmVkaWNhdGUgaXMgaW52b2tlZCB3aXRoXG4gICAgICogdGhyZWUgYXJndW1lbnRzOiAodmFsdWUsIGluZGV4LCBhcnJheSkuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMy4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgQXJyYXlcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gcXVlcnkuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gW3ByZWRpY2F0ZT1fLmlkZW50aXR5XSBUaGUgZnVuY3Rpb24gaW52b2tlZCBwZXIgaXRlcmF0aW9uLlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgc2xpY2Ugb2YgYGFycmF5YC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIHVzZXJzID0gW1xuICAgICAqICAgeyAndXNlcic6ICdiYXJuZXknLCAgJ2FjdGl2ZSc6IHRydWUgfSxcbiAgICAgKiAgIHsgJ3VzZXInOiAnZnJlZCcsICAgICdhY3RpdmUnOiBmYWxzZSB9LFxuICAgICAqICAgeyAndXNlcic6ICdwZWJibGVzJywgJ2FjdGl2ZSc6IGZhbHNlIH1cbiAgICAgKiBdO1xuICAgICAqXG4gICAgICogXy50YWtlUmlnaHRXaGlsZSh1c2VycywgZnVuY3Rpb24obykgeyByZXR1cm4gIW8uYWN0aXZlOyB9KTtcbiAgICAgKiAvLyA9PiBvYmplY3RzIGZvciBbJ2ZyZWQnLCAncGViYmxlcyddXG4gICAgICpcbiAgICAgKiAvLyBUaGUgYF8ubWF0Y2hlc2AgaXRlcmF0ZWUgc2hvcnRoYW5kLlxuICAgICAqIF8udGFrZVJpZ2h0V2hpbGUodXNlcnMsIHsgJ3VzZXInOiAncGViYmxlcycsICdhY3RpdmUnOiBmYWxzZSB9KTtcbiAgICAgKiAvLyA9PiBvYmplY3RzIGZvciBbJ3BlYmJsZXMnXVxuICAgICAqXG4gICAgICogLy8gVGhlIGBfLm1hdGNoZXNQcm9wZXJ0eWAgaXRlcmF0ZWUgc2hvcnRoYW5kLlxuICAgICAqIF8udGFrZVJpZ2h0V2hpbGUodXNlcnMsIFsnYWN0aXZlJywgZmFsc2VdKTtcbiAgICAgKiAvLyA9PiBvYmplY3RzIGZvciBbJ2ZyZWQnLCAncGViYmxlcyddXG4gICAgICpcbiAgICAgKiAvLyBUaGUgYF8ucHJvcGVydHlgIGl0ZXJhdGVlIHNob3J0aGFuZC5cbiAgICAgKiBfLnRha2VSaWdodFdoaWxlKHVzZXJzLCAnYWN0aXZlJyk7XG4gICAgICogLy8gPT4gW11cbiAgICAgKi9cbiAgICBmdW5jdGlvbiB0YWtlUmlnaHRXaGlsZShhcnJheSwgcHJlZGljYXRlKSB7XG4gICAgICByZXR1cm4gKGFycmF5ICYmIGFycmF5Lmxlbmd0aClcbiAgICAgICAgPyBiYXNlV2hpbGUoYXJyYXksIGdldEl0ZXJhdGVlKHByZWRpY2F0ZSwgMyksIGZhbHNlLCB0cnVlKVxuICAgICAgICA6IFtdO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBzbGljZSBvZiBgYXJyYXlgIHdpdGggZWxlbWVudHMgdGFrZW4gZnJvbSB0aGUgYmVnaW5uaW5nLiBFbGVtZW50c1xuICAgICAqIGFyZSB0YWtlbiB1bnRpbCBgcHJlZGljYXRlYCByZXR1cm5zIGZhbHNleS4gVGhlIHByZWRpY2F0ZSBpcyBpbnZva2VkIHdpdGhcbiAgICAgKiB0aHJlZSBhcmd1bWVudHM6ICh2YWx1ZSwgaW5kZXgsIGFycmF5KS5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAzLjAuMFxuICAgICAqIEBjYXRlZ29yeSBBcnJheVxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBxdWVyeS5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbcHJlZGljYXRlPV8uaWRlbnRpdHldIFRoZSBmdW5jdGlvbiBpbnZva2VkIHBlciBpdGVyYXRpb24uXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBzbGljZSBvZiBgYXJyYXlgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgdXNlcnMgPSBbXG4gICAgICogICB7ICd1c2VyJzogJ2Jhcm5leScsICAnYWN0aXZlJzogZmFsc2UgfSxcbiAgICAgKiAgIHsgJ3VzZXInOiAnZnJlZCcsICAgICdhY3RpdmUnOiBmYWxzZSB9LFxuICAgICAqICAgeyAndXNlcic6ICdwZWJibGVzJywgJ2FjdGl2ZSc6IHRydWUgfVxuICAgICAqIF07XG4gICAgICpcbiAgICAgKiBfLnRha2VXaGlsZSh1c2VycywgZnVuY3Rpb24obykgeyByZXR1cm4gIW8uYWN0aXZlOyB9KTtcbiAgICAgKiAvLyA9PiBvYmplY3RzIGZvciBbJ2Jhcm5leScsICdmcmVkJ11cbiAgICAgKlxuICAgICAqIC8vIFRoZSBgXy5tYXRjaGVzYCBpdGVyYXRlZSBzaG9ydGhhbmQuXG4gICAgICogXy50YWtlV2hpbGUodXNlcnMsIHsgJ3VzZXInOiAnYmFybmV5JywgJ2FjdGl2ZSc6IGZhbHNlIH0pO1xuICAgICAqIC8vID0+IG9iamVjdHMgZm9yIFsnYmFybmV5J11cbiAgICAgKlxuICAgICAqIC8vIFRoZSBgXy5tYXRjaGVzUHJvcGVydHlgIGl0ZXJhdGVlIHNob3J0aGFuZC5cbiAgICAgKiBfLnRha2VXaGlsZSh1c2VycywgWydhY3RpdmUnLCBmYWxzZV0pO1xuICAgICAqIC8vID0+IG9iamVjdHMgZm9yIFsnYmFybmV5JywgJ2ZyZWQnXVxuICAgICAqXG4gICAgICogLy8gVGhlIGBfLnByb3BlcnR5YCBpdGVyYXRlZSBzaG9ydGhhbmQuXG4gICAgICogXy50YWtlV2hpbGUodXNlcnMsICdhY3RpdmUnKTtcbiAgICAgKiAvLyA9PiBbXVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHRha2VXaGlsZShhcnJheSwgcHJlZGljYXRlKSB7XG4gICAgICByZXR1cm4gKGFycmF5ICYmIGFycmF5Lmxlbmd0aClcbiAgICAgICAgPyBiYXNlV2hpbGUoYXJyYXksIGdldEl0ZXJhdGVlKHByZWRpY2F0ZSwgMykpXG4gICAgICAgIDogW107XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhbiBhcnJheSBvZiB1bmlxdWUgdmFsdWVzLCBpbiBvcmRlciwgZnJvbSBhbGwgZ2l2ZW4gYXJyYXlzIHVzaW5nXG4gICAgICogW2BTYW1lVmFsdWVaZXJvYF0oaHR0cDovL2VjbWEtaW50ZXJuYXRpb25hbC5vcmcvZWNtYS0yNjIvNy4wLyNzZWMtc2FtZXZhbHVlemVybylcbiAgICAgKiBmb3IgZXF1YWxpdHkgY29tcGFyaXNvbnMuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMC4xLjBcbiAgICAgKiBAY2F0ZWdvcnkgQXJyYXlcbiAgICAgKiBAcGFyYW0gey4uLkFycmF5fSBbYXJyYXlzXSBUaGUgYXJyYXlzIHRvIGluc3BlY3QuXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBuZXcgYXJyYXkgb2YgY29tYmluZWQgdmFsdWVzLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLnVuaW9uKFsyXSwgWzEsIDJdKTtcbiAgICAgKiAvLyA9PiBbMiwgMV1cbiAgICAgKi9cbiAgICB2YXIgdW5pb24gPSBiYXNlUmVzdChmdW5jdGlvbihhcnJheXMpIHtcbiAgICAgIHJldHVybiBiYXNlVW5pcShiYXNlRmxhdHRlbihhcnJheXMsIDEsIGlzQXJyYXlMaWtlT2JqZWN0LCB0cnVlKSk7XG4gICAgfSk7XG5cbiAgICAvKipcbiAgICAgKiBUaGlzIG1ldGhvZCBpcyBsaWtlIGBfLnVuaW9uYCBleGNlcHQgdGhhdCBpdCBhY2NlcHRzIGBpdGVyYXRlZWAgd2hpY2ggaXNcbiAgICAgKiBpbnZva2VkIGZvciBlYWNoIGVsZW1lbnQgb2YgZWFjaCBgYXJyYXlzYCB0byBnZW5lcmF0ZSB0aGUgY3JpdGVyaW9uIGJ5XG4gICAgICogd2hpY2ggdW5pcXVlbmVzcyBpcyBjb21wdXRlZC4gUmVzdWx0IHZhbHVlcyBhcmUgY2hvc2VuIGZyb20gdGhlIGZpcnN0XG4gICAgICogYXJyYXkgaW4gd2hpY2ggdGhlIHZhbHVlIG9jY3Vycy4gVGhlIGl0ZXJhdGVlIGlzIGludm9rZWQgd2l0aCBvbmUgYXJndW1lbnQ6XG4gICAgICogKHZhbHVlKS5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjAuMFxuICAgICAqIEBjYXRlZ29yeSBBcnJheVxuICAgICAqIEBwYXJhbSB7Li4uQXJyYXl9IFthcnJheXNdIFRoZSBhcnJheXMgdG8gaW5zcGVjdC5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbaXRlcmF0ZWU9Xy5pZGVudGl0eV0gVGhlIGl0ZXJhdGVlIGludm9rZWQgcGVyIGVsZW1lbnQuXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBuZXcgYXJyYXkgb2YgY29tYmluZWQgdmFsdWVzLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLnVuaW9uQnkoWzIuMV0sIFsxLjIsIDIuM10sIE1hdGguZmxvb3IpO1xuICAgICAqIC8vID0+IFsyLjEsIDEuMl1cbiAgICAgKlxuICAgICAqIC8vIFRoZSBgXy5wcm9wZXJ0eWAgaXRlcmF0ZWUgc2hvcnRoYW5kLlxuICAgICAqIF8udW5pb25CeShbeyAneCc6IDEgfV0sIFt7ICd4JzogMiB9LCB7ICd4JzogMSB9XSwgJ3gnKTtcbiAgICAgKiAvLyA9PiBbeyAneCc6IDEgfSwgeyAneCc6IDIgfV1cbiAgICAgKi9cbiAgICB2YXIgdW5pb25CeSA9IGJhc2VSZXN0KGZ1bmN0aW9uKGFycmF5cykge1xuICAgICAgdmFyIGl0ZXJhdGVlID0gbGFzdChhcnJheXMpO1xuICAgICAgaWYgKGlzQXJyYXlMaWtlT2JqZWN0KGl0ZXJhdGVlKSkge1xuICAgICAgICBpdGVyYXRlZSA9IHVuZGVmaW5lZDtcbiAgICAgIH1cbiAgICAgIHJldHVybiBiYXNlVW5pcShiYXNlRmxhdHRlbihhcnJheXMsIDEsIGlzQXJyYXlMaWtlT2JqZWN0LCB0cnVlKSwgZ2V0SXRlcmF0ZWUoaXRlcmF0ZWUsIDIpKTtcbiAgICB9KTtcblxuICAgIC8qKlxuICAgICAqIFRoaXMgbWV0aG9kIGlzIGxpa2UgYF8udW5pb25gIGV4Y2VwdCB0aGF0IGl0IGFjY2VwdHMgYGNvbXBhcmF0b3JgIHdoaWNoXG4gICAgICogaXMgaW52b2tlZCB0byBjb21wYXJlIGVsZW1lbnRzIG9mIGBhcnJheXNgLiBSZXN1bHQgdmFsdWVzIGFyZSBjaG9zZW4gZnJvbVxuICAgICAqIHRoZSBmaXJzdCBhcnJheSBpbiB3aGljaCB0aGUgdmFsdWUgb2NjdXJzLiBUaGUgY29tcGFyYXRvciBpcyBpbnZva2VkXG4gICAgICogd2l0aCB0d28gYXJndW1lbnRzOiAoYXJyVmFsLCBvdGhWYWwpLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMC4wXG4gICAgICogQGNhdGVnb3J5IEFycmF5XG4gICAgICogQHBhcmFtIHsuLi5BcnJheX0gW2FycmF5c10gVGhlIGFycmF5cyB0byBpbnNwZWN0LlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtjb21wYXJhdG9yXSBUaGUgY29tcGFyYXRvciBpbnZva2VkIHBlciBlbGVtZW50LlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgbmV3IGFycmF5IG9mIGNvbWJpbmVkIHZhbHVlcy5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIG9iamVjdHMgPSBbeyAneCc6IDEsICd5JzogMiB9LCB7ICd4JzogMiwgJ3knOiAxIH1dO1xuICAgICAqIHZhciBvdGhlcnMgPSBbeyAneCc6IDEsICd5JzogMSB9LCB7ICd4JzogMSwgJ3knOiAyIH1dO1xuICAgICAqXG4gICAgICogXy51bmlvbldpdGgob2JqZWN0cywgb3RoZXJzLCBfLmlzRXF1YWwpO1xuICAgICAqIC8vID0+IFt7ICd4JzogMSwgJ3knOiAyIH0sIHsgJ3gnOiAyLCAneSc6IDEgfSwgeyAneCc6IDEsICd5JzogMSB9XVxuICAgICAqL1xuICAgIHZhciB1bmlvbldpdGggPSBiYXNlUmVzdChmdW5jdGlvbihhcnJheXMpIHtcbiAgICAgIHZhciBjb21wYXJhdG9yID0gbGFzdChhcnJheXMpO1xuICAgICAgY29tcGFyYXRvciA9IHR5cGVvZiBjb21wYXJhdG9yID09ICdmdW5jdGlvbicgPyBjb21wYXJhdG9yIDogdW5kZWZpbmVkO1xuICAgICAgcmV0dXJuIGJhc2VVbmlxKGJhc2VGbGF0dGVuKGFycmF5cywgMSwgaXNBcnJheUxpa2VPYmplY3QsIHRydWUpLCB1bmRlZmluZWQsIGNvbXBhcmF0b3IpO1xuICAgIH0pO1xuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIGR1cGxpY2F0ZS1mcmVlIHZlcnNpb24gb2YgYW4gYXJyYXksIHVzaW5nXG4gICAgICogW2BTYW1lVmFsdWVaZXJvYF0oaHR0cDovL2VjbWEtaW50ZXJuYXRpb25hbC5vcmcvZWNtYS0yNjIvNy4wLyNzZWMtc2FtZXZhbHVlemVybylcbiAgICAgKiBmb3IgZXF1YWxpdHkgY29tcGFyaXNvbnMsIGluIHdoaWNoIG9ubHkgdGhlIGZpcnN0IG9jY3VycmVuY2Ugb2YgZWFjaCBlbGVtZW50XG4gICAgICogaXMga2VwdC4gVGhlIG9yZGVyIG9mIHJlc3VsdCB2YWx1ZXMgaXMgZGV0ZXJtaW5lZCBieSB0aGUgb3JkZXIgdGhleSBvY2N1clxuICAgICAqIGluIHRoZSBhcnJheS5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAwLjEuMFxuICAgICAqIEBjYXRlZ29yeSBBcnJheVxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBpbnNwZWN0LlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgbmV3IGR1cGxpY2F0ZSBmcmVlIGFycmF5LlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLnVuaXEoWzIsIDEsIDJdKTtcbiAgICAgKiAvLyA9PiBbMiwgMV1cbiAgICAgKi9cbiAgICBmdW5jdGlvbiB1bmlxKGFycmF5KSB7XG4gICAgICByZXR1cm4gKGFycmF5ICYmIGFycmF5Lmxlbmd0aCkgPyBiYXNlVW5pcShhcnJheSkgOiBbXTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGlzIG1ldGhvZCBpcyBsaWtlIGBfLnVuaXFgIGV4Y2VwdCB0aGF0IGl0IGFjY2VwdHMgYGl0ZXJhdGVlYCB3aGljaCBpc1xuICAgICAqIGludm9rZWQgZm9yIGVhY2ggZWxlbWVudCBpbiBgYXJyYXlgIHRvIGdlbmVyYXRlIHRoZSBjcml0ZXJpb24gYnkgd2hpY2hcbiAgICAgKiB1bmlxdWVuZXNzIGlzIGNvbXB1dGVkLiBUaGUgb3JkZXIgb2YgcmVzdWx0IHZhbHVlcyBpcyBkZXRlcm1pbmVkIGJ5IHRoZVxuICAgICAqIG9yZGVyIHRoZXkgb2NjdXIgaW4gdGhlIGFycmF5LiBUaGUgaXRlcmF0ZWUgaXMgaW52b2tlZCB3aXRoIG9uZSBhcmd1bWVudDpcbiAgICAgKiAodmFsdWUpLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMC4wXG4gICAgICogQGNhdGVnb3J5IEFycmF5XG4gICAgICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIGluc3BlY3QuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gW2l0ZXJhdGVlPV8uaWRlbnRpdHldIFRoZSBpdGVyYXRlZSBpbnZva2VkIHBlciBlbGVtZW50LlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgbmV3IGR1cGxpY2F0ZSBmcmVlIGFycmF5LlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLnVuaXFCeShbMi4xLCAxLjIsIDIuM10sIE1hdGguZmxvb3IpO1xuICAgICAqIC8vID0+IFsyLjEsIDEuMl1cbiAgICAgKlxuICAgICAqIC8vIFRoZSBgXy5wcm9wZXJ0eWAgaXRlcmF0ZWUgc2hvcnRoYW5kLlxuICAgICAqIF8udW5pcUJ5KFt7ICd4JzogMSB9LCB7ICd4JzogMiB9LCB7ICd4JzogMSB9XSwgJ3gnKTtcbiAgICAgKiAvLyA9PiBbeyAneCc6IDEgfSwgeyAneCc6IDIgfV1cbiAgICAgKi9cbiAgICBmdW5jdGlvbiB1bmlxQnkoYXJyYXksIGl0ZXJhdGVlKSB7XG4gICAgICByZXR1cm4gKGFycmF5ICYmIGFycmF5Lmxlbmd0aCkgPyBiYXNlVW5pcShhcnJheSwgZ2V0SXRlcmF0ZWUoaXRlcmF0ZWUsIDIpKSA6IFtdO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoaXMgbWV0aG9kIGlzIGxpa2UgYF8udW5pcWAgZXhjZXB0IHRoYXQgaXQgYWNjZXB0cyBgY29tcGFyYXRvcmAgd2hpY2hcbiAgICAgKiBpcyBpbnZva2VkIHRvIGNvbXBhcmUgZWxlbWVudHMgb2YgYGFycmF5YC4gVGhlIG9yZGVyIG9mIHJlc3VsdCB2YWx1ZXMgaXNcbiAgICAgKiBkZXRlcm1pbmVkIGJ5IHRoZSBvcmRlciB0aGV5IG9jY3VyIGluIHRoZSBhcnJheS5UaGUgY29tcGFyYXRvciBpcyBpbnZva2VkXG4gICAgICogd2l0aCB0d28gYXJndW1lbnRzOiAoYXJyVmFsLCBvdGhWYWwpLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMC4wXG4gICAgICogQGNhdGVnb3J5IEFycmF5XG4gICAgICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIGluc3BlY3QuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gW2NvbXBhcmF0b3JdIFRoZSBjb21wYXJhdG9yIGludm9rZWQgcGVyIGVsZW1lbnQuXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBuZXcgZHVwbGljYXRlIGZyZWUgYXJyYXkuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciBvYmplY3RzID0gW3sgJ3gnOiAxLCAneSc6IDIgfSwgeyAneCc6IDIsICd5JzogMSB9LCB7ICd4JzogMSwgJ3knOiAyIH1dO1xuICAgICAqXG4gICAgICogXy51bmlxV2l0aChvYmplY3RzLCBfLmlzRXF1YWwpO1xuICAgICAqIC8vID0+IFt7ICd4JzogMSwgJ3knOiAyIH0sIHsgJ3gnOiAyLCAneSc6IDEgfV1cbiAgICAgKi9cbiAgICBmdW5jdGlvbiB1bmlxV2l0aChhcnJheSwgY29tcGFyYXRvcikge1xuICAgICAgY29tcGFyYXRvciA9IHR5cGVvZiBjb21wYXJhdG9yID09ICdmdW5jdGlvbicgPyBjb21wYXJhdG9yIDogdW5kZWZpbmVkO1xuICAgICAgcmV0dXJuIChhcnJheSAmJiBhcnJheS5sZW5ndGgpID8gYmFzZVVuaXEoYXJyYXksIHVuZGVmaW5lZCwgY29tcGFyYXRvcikgOiBbXTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGlzIG1ldGhvZCBpcyBsaWtlIGBfLnppcGAgZXhjZXB0IHRoYXQgaXQgYWNjZXB0cyBhbiBhcnJheSBvZiBncm91cGVkXG4gICAgICogZWxlbWVudHMgYW5kIGNyZWF0ZXMgYW4gYXJyYXkgcmVncm91cGluZyB0aGUgZWxlbWVudHMgdG8gdGhlaXIgcHJlLXppcFxuICAgICAqIGNvbmZpZ3VyYXRpb24uXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMS4yLjBcbiAgICAgKiBAY2F0ZWdvcnkgQXJyYXlcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgb2YgZ3JvdXBlZCBlbGVtZW50cyB0byBwcm9jZXNzLlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgbmV3IGFycmF5IG9mIHJlZ3JvdXBlZCBlbGVtZW50cy5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIHppcHBlZCA9IF8uemlwKFsnYScsICdiJ10sIFsxLCAyXSwgW3RydWUsIGZhbHNlXSk7XG4gICAgICogLy8gPT4gW1snYScsIDEsIHRydWVdLCBbJ2InLCAyLCBmYWxzZV1dXG4gICAgICpcbiAgICAgKiBfLnVuemlwKHppcHBlZCk7XG4gICAgICogLy8gPT4gW1snYScsICdiJ10sIFsxLCAyXSwgW3RydWUsIGZhbHNlXV1cbiAgICAgKi9cbiAgICBmdW5jdGlvbiB1bnppcChhcnJheSkge1xuICAgICAgaWYgKCEoYXJyYXkgJiYgYXJyYXkubGVuZ3RoKSkge1xuICAgICAgICByZXR1cm4gW107XG4gICAgICB9XG4gICAgICB2YXIgbGVuZ3RoID0gMDtcbiAgICAgIGFycmF5ID0gYXJyYXlGaWx0ZXIoYXJyYXksIGZ1bmN0aW9uKGdyb3VwKSB7XG4gICAgICAgIGlmIChpc0FycmF5TGlrZU9iamVjdChncm91cCkpIHtcbiAgICAgICAgICBsZW5ndGggPSBuYXRpdmVNYXgoZ3JvdXAubGVuZ3RoLCBsZW5ndGgpO1xuICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICAgIHJldHVybiBiYXNlVGltZXMobGVuZ3RoLCBmdW5jdGlvbihpbmRleCkge1xuICAgICAgICByZXR1cm4gYXJyYXlNYXAoYXJyYXksIGJhc2VQcm9wZXJ0eShpbmRleCkpO1xuICAgICAgfSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhpcyBtZXRob2QgaXMgbGlrZSBgXy51bnppcGAgZXhjZXB0IHRoYXQgaXQgYWNjZXB0cyBgaXRlcmF0ZWVgIHRvIHNwZWNpZnlcbiAgICAgKiBob3cgcmVncm91cGVkIHZhbHVlcyBzaG91bGQgYmUgY29tYmluZWQuIFRoZSBpdGVyYXRlZSBpcyBpbnZva2VkIHdpdGggdGhlXG4gICAgICogZWxlbWVudHMgb2YgZWFjaCBncm91cDogKC4uLmdyb3VwKS5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAzLjguMFxuICAgICAqIEBjYXRlZ29yeSBBcnJheVxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSBvZiBncm91cGVkIGVsZW1lbnRzIHRvIHByb2Nlc3MuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gW2l0ZXJhdGVlPV8uaWRlbnRpdHldIFRoZSBmdW5jdGlvbiB0byBjb21iaW5lXG4gICAgICogIHJlZ3JvdXBlZCB2YWx1ZXMuXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBuZXcgYXJyYXkgb2YgcmVncm91cGVkIGVsZW1lbnRzLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgemlwcGVkID0gXy56aXAoWzEsIDJdLCBbMTAsIDIwXSwgWzEwMCwgMjAwXSk7XG4gICAgICogLy8gPT4gW1sxLCAxMCwgMTAwXSwgWzIsIDIwLCAyMDBdXVxuICAgICAqXG4gICAgICogXy51bnppcFdpdGgoemlwcGVkLCBfLmFkZCk7XG4gICAgICogLy8gPT4gWzMsIDMwLCAzMDBdXG4gICAgICovXG4gICAgZnVuY3Rpb24gdW56aXBXaXRoKGFycmF5LCBpdGVyYXRlZSkge1xuICAgICAgaWYgKCEoYXJyYXkgJiYgYXJyYXkubGVuZ3RoKSkge1xuICAgICAgICByZXR1cm4gW107XG4gICAgICB9XG4gICAgICB2YXIgcmVzdWx0ID0gdW56aXAoYXJyYXkpO1xuICAgICAgaWYgKGl0ZXJhdGVlID09IG51bGwpIHtcbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICAgIH1cbiAgICAgIHJldHVybiBhcnJheU1hcChyZXN1bHQsIGZ1bmN0aW9uKGdyb3VwKSB7XG4gICAgICAgIHJldHVybiBhcHBseShpdGVyYXRlZSwgdW5kZWZpbmVkLCBncm91cCk7XG4gICAgICB9KTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGFuIGFycmF5IGV4Y2x1ZGluZyBhbGwgZ2l2ZW4gdmFsdWVzIHVzaW5nXG4gICAgICogW2BTYW1lVmFsdWVaZXJvYF0oaHR0cDovL2VjbWEtaW50ZXJuYXRpb25hbC5vcmcvZWNtYS0yNjIvNy4wLyNzZWMtc2FtZXZhbHVlemVybylcbiAgICAgKiBmb3IgZXF1YWxpdHkgY29tcGFyaXNvbnMuXG4gICAgICpcbiAgICAgKiAqKk5vdGU6KiogVW5saWtlIGBfLnB1bGxgLCB0aGlzIG1ldGhvZCByZXR1cm5zIGEgbmV3IGFycmF5LlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDAuMS4wXG4gICAgICogQGNhdGVnb3J5IEFycmF5XG4gICAgICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIGluc3BlY3QuXG4gICAgICogQHBhcmFtIHsuLi4qfSBbdmFsdWVzXSBUaGUgdmFsdWVzIHRvIGV4Y2x1ZGUuXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBuZXcgYXJyYXkgb2YgZmlsdGVyZWQgdmFsdWVzLlxuICAgICAqIEBzZWUgXy5kaWZmZXJlbmNlLCBfLnhvclxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLndpdGhvdXQoWzIsIDEsIDIsIDNdLCAxLCAyKTtcbiAgICAgKiAvLyA9PiBbM11cbiAgICAgKi9cbiAgICB2YXIgd2l0aG91dCA9IGJhc2VSZXN0KGZ1bmN0aW9uKGFycmF5LCB2YWx1ZXMpIHtcbiAgICAgIHJldHVybiBpc0FycmF5TGlrZU9iamVjdChhcnJheSlcbiAgICAgICAgPyBiYXNlRGlmZmVyZW5jZShhcnJheSwgdmFsdWVzKVxuICAgICAgICA6IFtdO1xuICAgIH0pO1xuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhbiBhcnJheSBvZiB1bmlxdWUgdmFsdWVzIHRoYXQgaXMgdGhlXG4gICAgICogW3N5bW1ldHJpYyBkaWZmZXJlbmNlXShodHRwczovL2VuLndpa2lwZWRpYS5vcmcvd2lraS9TeW1tZXRyaWNfZGlmZmVyZW5jZSlcbiAgICAgKiBvZiB0aGUgZ2l2ZW4gYXJyYXlzLiBUaGUgb3JkZXIgb2YgcmVzdWx0IHZhbHVlcyBpcyBkZXRlcm1pbmVkIGJ5IHRoZSBvcmRlclxuICAgICAqIHRoZXkgb2NjdXIgaW4gdGhlIGFycmF5cy5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAyLjQuMFxuICAgICAqIEBjYXRlZ29yeSBBcnJheVxuICAgICAqIEBwYXJhbSB7Li4uQXJyYXl9IFthcnJheXNdIFRoZSBhcnJheXMgdG8gaW5zcGVjdC5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIG5ldyBhcnJheSBvZiBmaWx0ZXJlZCB2YWx1ZXMuXG4gICAgICogQHNlZSBfLmRpZmZlcmVuY2UsIF8ud2l0aG91dFxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLnhvcihbMiwgMV0sIFsyLCAzXSk7XG4gICAgICogLy8gPT4gWzEsIDNdXG4gICAgICovXG4gICAgdmFyIHhvciA9IGJhc2VSZXN0KGZ1bmN0aW9uKGFycmF5cykge1xuICAgICAgcmV0dXJuIGJhc2VYb3IoYXJyYXlGaWx0ZXIoYXJyYXlzLCBpc0FycmF5TGlrZU9iamVjdCkpO1xuICAgIH0pO1xuXG4gICAgLyoqXG4gICAgICogVGhpcyBtZXRob2QgaXMgbGlrZSBgXy54b3JgIGV4Y2VwdCB0aGF0IGl0IGFjY2VwdHMgYGl0ZXJhdGVlYCB3aGljaCBpc1xuICAgICAqIGludm9rZWQgZm9yIGVhY2ggZWxlbWVudCBvZiBlYWNoIGBhcnJheXNgIHRvIGdlbmVyYXRlIHRoZSBjcml0ZXJpb24gYnlcbiAgICAgKiB3aGljaCBieSB3aGljaCB0aGV5J3JlIGNvbXBhcmVkLiBUaGUgb3JkZXIgb2YgcmVzdWx0IHZhbHVlcyBpcyBkZXRlcm1pbmVkXG4gICAgICogYnkgdGhlIG9yZGVyIHRoZXkgb2NjdXIgaW4gdGhlIGFycmF5cy4gVGhlIGl0ZXJhdGVlIGlzIGludm9rZWQgd2l0aCBvbmVcbiAgICAgKiBhcmd1bWVudDogKHZhbHVlKS5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjAuMFxuICAgICAqIEBjYXRlZ29yeSBBcnJheVxuICAgICAqIEBwYXJhbSB7Li4uQXJyYXl9IFthcnJheXNdIFRoZSBhcnJheXMgdG8gaW5zcGVjdC5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbaXRlcmF0ZWU9Xy5pZGVudGl0eV0gVGhlIGl0ZXJhdGVlIGludm9rZWQgcGVyIGVsZW1lbnQuXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBuZXcgYXJyYXkgb2YgZmlsdGVyZWQgdmFsdWVzLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLnhvckJ5KFsyLjEsIDEuMl0sIFsyLjMsIDMuNF0sIE1hdGguZmxvb3IpO1xuICAgICAqIC8vID0+IFsxLjIsIDMuNF1cbiAgICAgKlxuICAgICAqIC8vIFRoZSBgXy5wcm9wZXJ0eWAgaXRlcmF0ZWUgc2hvcnRoYW5kLlxuICAgICAqIF8ueG9yQnkoW3sgJ3gnOiAxIH1dLCBbeyAneCc6IDIgfSwgeyAneCc6IDEgfV0sICd4Jyk7XG4gICAgICogLy8gPT4gW3sgJ3gnOiAyIH1dXG4gICAgICovXG4gICAgdmFyIHhvckJ5ID0gYmFzZVJlc3QoZnVuY3Rpb24oYXJyYXlzKSB7XG4gICAgICB2YXIgaXRlcmF0ZWUgPSBsYXN0KGFycmF5cyk7XG4gICAgICBpZiAoaXNBcnJheUxpa2VPYmplY3QoaXRlcmF0ZWUpKSB7XG4gICAgICAgIGl0ZXJhdGVlID0gdW5kZWZpbmVkO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGJhc2VYb3IoYXJyYXlGaWx0ZXIoYXJyYXlzLCBpc0FycmF5TGlrZU9iamVjdCksIGdldEl0ZXJhdGVlKGl0ZXJhdGVlLCAyKSk7XG4gICAgfSk7XG5cbiAgICAvKipcbiAgICAgKiBUaGlzIG1ldGhvZCBpcyBsaWtlIGBfLnhvcmAgZXhjZXB0IHRoYXQgaXQgYWNjZXB0cyBgY29tcGFyYXRvcmAgd2hpY2ggaXNcbiAgICAgKiBpbnZva2VkIHRvIGNvbXBhcmUgZWxlbWVudHMgb2YgYGFycmF5c2AuIFRoZSBvcmRlciBvZiByZXN1bHQgdmFsdWVzIGlzXG4gICAgICogZGV0ZXJtaW5lZCBieSB0aGUgb3JkZXIgdGhleSBvY2N1ciBpbiB0aGUgYXJyYXlzLiBUaGUgY29tcGFyYXRvciBpcyBpbnZva2VkXG4gICAgICogd2l0aCB0d28gYXJndW1lbnRzOiAoYXJyVmFsLCBvdGhWYWwpLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMC4wXG4gICAgICogQGNhdGVnb3J5IEFycmF5XG4gICAgICogQHBhcmFtIHsuLi5BcnJheX0gW2FycmF5c10gVGhlIGFycmF5cyB0byBpbnNwZWN0LlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtjb21wYXJhdG9yXSBUaGUgY29tcGFyYXRvciBpbnZva2VkIHBlciBlbGVtZW50LlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgbmV3IGFycmF5IG9mIGZpbHRlcmVkIHZhbHVlcy5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIG9iamVjdHMgPSBbeyAneCc6IDEsICd5JzogMiB9LCB7ICd4JzogMiwgJ3knOiAxIH1dO1xuICAgICAqIHZhciBvdGhlcnMgPSBbeyAneCc6IDEsICd5JzogMSB9LCB7ICd4JzogMSwgJ3knOiAyIH1dO1xuICAgICAqXG4gICAgICogXy54b3JXaXRoKG9iamVjdHMsIG90aGVycywgXy5pc0VxdWFsKTtcbiAgICAgKiAvLyA9PiBbeyAneCc6IDIsICd5JzogMSB9LCB7ICd4JzogMSwgJ3knOiAxIH1dXG4gICAgICovXG4gICAgdmFyIHhvcldpdGggPSBiYXNlUmVzdChmdW5jdGlvbihhcnJheXMpIHtcbiAgICAgIHZhciBjb21wYXJhdG9yID0gbGFzdChhcnJheXMpO1xuICAgICAgY29tcGFyYXRvciA9IHR5cGVvZiBjb21wYXJhdG9yID09ICdmdW5jdGlvbicgPyBjb21wYXJhdG9yIDogdW5kZWZpbmVkO1xuICAgICAgcmV0dXJuIGJhc2VYb3IoYXJyYXlGaWx0ZXIoYXJyYXlzLCBpc0FycmF5TGlrZU9iamVjdCksIHVuZGVmaW5lZCwgY29tcGFyYXRvcik7XG4gICAgfSk7XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGFuIGFycmF5IG9mIGdyb3VwZWQgZWxlbWVudHMsIHRoZSBmaXJzdCBvZiB3aGljaCBjb250YWlucyB0aGVcbiAgICAgKiBmaXJzdCBlbGVtZW50cyBvZiB0aGUgZ2l2ZW4gYXJyYXlzLCB0aGUgc2Vjb25kIG9mIHdoaWNoIGNvbnRhaW5zIHRoZVxuICAgICAqIHNlY29uZCBlbGVtZW50cyBvZiB0aGUgZ2l2ZW4gYXJyYXlzLCBhbmQgc28gb24uXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMC4xLjBcbiAgICAgKiBAY2F0ZWdvcnkgQXJyYXlcbiAgICAgKiBAcGFyYW0gey4uLkFycmF5fSBbYXJyYXlzXSBUaGUgYXJyYXlzIHRvIHByb2Nlc3MuXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBuZXcgYXJyYXkgb2YgZ3JvdXBlZCBlbGVtZW50cy5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy56aXAoWydhJywgJ2InXSwgWzEsIDJdLCBbdHJ1ZSwgZmFsc2VdKTtcbiAgICAgKiAvLyA9PiBbWydhJywgMSwgdHJ1ZV0sIFsnYicsIDIsIGZhbHNlXV1cbiAgICAgKi9cbiAgICB2YXIgemlwID0gYmFzZVJlc3QodW56aXApO1xuXG4gICAgLyoqXG4gICAgICogVGhpcyBtZXRob2QgaXMgbGlrZSBgXy5mcm9tUGFpcnNgIGV4Y2VwdCB0aGF0IGl0IGFjY2VwdHMgdHdvIGFycmF5cyxcbiAgICAgKiBvbmUgb2YgcHJvcGVydHkgaWRlbnRpZmllcnMgYW5kIG9uZSBvZiBjb3JyZXNwb25kaW5nIHZhbHVlcy5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAwLjQuMFxuICAgICAqIEBjYXRlZ29yeSBBcnJheVxuICAgICAqIEBwYXJhbSB7QXJyYXl9IFtwcm9wcz1bXV0gVGhlIHByb3BlcnR5IGlkZW50aWZpZXJzLlxuICAgICAqIEBwYXJhbSB7QXJyYXl9IFt2YWx1ZXM9W11dIFRoZSBwcm9wZXJ0eSB2YWx1ZXMuXG4gICAgICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyB0aGUgbmV3IG9iamVjdC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy56aXBPYmplY3QoWydhJywgJ2InXSwgWzEsIDJdKTtcbiAgICAgKiAvLyA9PiB7ICdhJzogMSwgJ2InOiAyIH1cbiAgICAgKi9cbiAgICBmdW5jdGlvbiB6aXBPYmplY3QocHJvcHMsIHZhbHVlcykge1xuICAgICAgcmV0dXJuIGJhc2VaaXBPYmplY3QocHJvcHMgfHwgW10sIHZhbHVlcyB8fCBbXSwgYXNzaWduVmFsdWUpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoaXMgbWV0aG9kIGlzIGxpa2UgYF8uemlwT2JqZWN0YCBleGNlcHQgdGhhdCBpdCBzdXBwb3J0cyBwcm9wZXJ0eSBwYXRocy5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjEuMFxuICAgICAqIEBjYXRlZ29yeSBBcnJheVxuICAgICAqIEBwYXJhbSB7QXJyYXl9IFtwcm9wcz1bXV0gVGhlIHByb3BlcnR5IGlkZW50aWZpZXJzLlxuICAgICAqIEBwYXJhbSB7QXJyYXl9IFt2YWx1ZXM9W11dIFRoZSBwcm9wZXJ0eSB2YWx1ZXMuXG4gICAgICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyB0aGUgbmV3IG9iamVjdC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy56aXBPYmplY3REZWVwKFsnYS5iWzBdLmMnLCAnYS5iWzFdLmQnXSwgWzEsIDJdKTtcbiAgICAgKiAvLyA9PiB7ICdhJzogeyAnYic6IFt7ICdjJzogMSB9LCB7ICdkJzogMiB9XSB9IH1cbiAgICAgKi9cbiAgICBmdW5jdGlvbiB6aXBPYmplY3REZWVwKHByb3BzLCB2YWx1ZXMpIHtcbiAgICAgIHJldHVybiBiYXNlWmlwT2JqZWN0KHByb3BzIHx8IFtdLCB2YWx1ZXMgfHwgW10sIGJhc2VTZXQpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoaXMgbWV0aG9kIGlzIGxpa2UgYF8uemlwYCBleGNlcHQgdGhhdCBpdCBhY2NlcHRzIGBpdGVyYXRlZWAgdG8gc3BlY2lmeVxuICAgICAqIGhvdyBncm91cGVkIHZhbHVlcyBzaG91bGQgYmUgY29tYmluZWQuIFRoZSBpdGVyYXRlZSBpcyBpbnZva2VkIHdpdGggdGhlXG4gICAgICogZWxlbWVudHMgb2YgZWFjaCBncm91cDogKC4uLmdyb3VwKS5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAzLjguMFxuICAgICAqIEBjYXRlZ29yeSBBcnJheVxuICAgICAqIEBwYXJhbSB7Li4uQXJyYXl9IFthcnJheXNdIFRoZSBhcnJheXMgdG8gcHJvY2Vzcy5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbaXRlcmF0ZWU9Xy5pZGVudGl0eV0gVGhlIGZ1bmN0aW9uIHRvIGNvbWJpbmVcbiAgICAgKiAgZ3JvdXBlZCB2YWx1ZXMuXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBuZXcgYXJyYXkgb2YgZ3JvdXBlZCBlbGVtZW50cy5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy56aXBXaXRoKFsxLCAyXSwgWzEwLCAyMF0sIFsxMDAsIDIwMF0sIGZ1bmN0aW9uKGEsIGIsIGMpIHtcbiAgICAgKiAgIHJldHVybiBhICsgYiArIGM7XG4gICAgICogfSk7XG4gICAgICogLy8gPT4gWzExMSwgMjIyXVxuICAgICAqL1xuICAgIHZhciB6aXBXaXRoID0gYmFzZVJlc3QoZnVuY3Rpb24oYXJyYXlzKSB7XG4gICAgICB2YXIgbGVuZ3RoID0gYXJyYXlzLmxlbmd0aCxcbiAgICAgICAgICBpdGVyYXRlZSA9IGxlbmd0aCA+IDEgPyBhcnJheXNbbGVuZ3RoIC0gMV0gOiB1bmRlZmluZWQ7XG5cbiAgICAgIGl0ZXJhdGVlID0gdHlwZW9mIGl0ZXJhdGVlID09ICdmdW5jdGlvbicgPyAoYXJyYXlzLnBvcCgpLCBpdGVyYXRlZSkgOiB1bmRlZmluZWQ7XG4gICAgICByZXR1cm4gdW56aXBXaXRoKGFycmF5cywgaXRlcmF0ZWUpO1xuICAgIH0pO1xuXG4gICAgLyotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0qL1xuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIGBsb2Rhc2hgIHdyYXBwZXIgaW5zdGFuY2UgdGhhdCB3cmFwcyBgdmFsdWVgIHdpdGggZXhwbGljaXQgbWV0aG9kXG4gICAgICogY2hhaW4gc2VxdWVuY2VzIGVuYWJsZWQuIFRoZSByZXN1bHQgb2Ygc3VjaCBzZXF1ZW5jZXMgbXVzdCBiZSB1bndyYXBwZWRcbiAgICAgKiB3aXRoIGBfI3ZhbHVlYC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAxLjMuMFxuICAgICAqIEBjYXRlZ29yeSBTZXFcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byB3cmFwLlxuICAgICAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgdGhlIG5ldyBgbG9kYXNoYCB3cmFwcGVyIGluc3RhbmNlLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgdXNlcnMgPSBbXG4gICAgICogICB7ICd1c2VyJzogJ2Jhcm5leScsICAnYWdlJzogMzYgfSxcbiAgICAgKiAgIHsgJ3VzZXInOiAnZnJlZCcsICAgICdhZ2UnOiA0MCB9LFxuICAgICAqICAgeyAndXNlcic6ICdwZWJibGVzJywgJ2FnZSc6IDEgfVxuICAgICAqIF07XG4gICAgICpcbiAgICAgKiB2YXIgeW91bmdlc3QgPSBfXG4gICAgICogICAuY2hhaW4odXNlcnMpXG4gICAgICogICAuc29ydEJ5KCdhZ2UnKVxuICAgICAqICAgLm1hcChmdW5jdGlvbihvKSB7XG4gICAgICogICAgIHJldHVybiBvLnVzZXIgKyAnIGlzICcgKyBvLmFnZTtcbiAgICAgKiAgIH0pXG4gICAgICogICAuaGVhZCgpXG4gICAgICogICAudmFsdWUoKTtcbiAgICAgKiAvLyA9PiAncGViYmxlcyBpcyAxJ1xuICAgICAqL1xuICAgIGZ1bmN0aW9uIGNoYWluKHZhbHVlKSB7XG4gICAgICB2YXIgcmVzdWx0ID0gbG9kYXNoKHZhbHVlKTtcbiAgICAgIHJlc3VsdC5fX2NoYWluX18gPSB0cnVlO1xuICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGlzIG1ldGhvZCBpbnZva2VzIGBpbnRlcmNlcHRvcmAgYW5kIHJldHVybnMgYHZhbHVlYC4gVGhlIGludGVyY2VwdG9yXG4gICAgICogaXMgaW52b2tlZCB3aXRoIG9uZSBhcmd1bWVudDsgKHZhbHVlKS4gVGhlIHB1cnBvc2Ugb2YgdGhpcyBtZXRob2QgaXMgdG9cbiAgICAgKiBcInRhcCBpbnRvXCIgYSBtZXRob2QgY2hhaW4gc2VxdWVuY2UgaW4gb3JkZXIgdG8gbW9kaWZ5IGludGVybWVkaWF0ZSByZXN1bHRzLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDAuMS4wXG4gICAgICogQGNhdGVnb3J5IFNlcVxuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIHByb3ZpZGUgdG8gYGludGVyY2VwdG9yYC5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBpbnRlcmNlcHRvciBUaGUgZnVuY3Rpb24gdG8gaW52b2tlLlxuICAgICAqIEByZXR1cm5zIHsqfSBSZXR1cm5zIGB2YWx1ZWAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8oWzEsIDIsIDNdKVxuICAgICAqICAudGFwKGZ1bmN0aW9uKGFycmF5KSB7XG4gICAgICogICAgLy8gTXV0YXRlIGlucHV0IGFycmF5LlxuICAgICAqICAgIGFycmF5LnBvcCgpO1xuICAgICAqICB9KVxuICAgICAqICAucmV2ZXJzZSgpXG4gICAgICogIC52YWx1ZSgpO1xuICAgICAqIC8vID0+IFsyLCAxXVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHRhcCh2YWx1ZSwgaW50ZXJjZXB0b3IpIHtcbiAgICAgIGludGVyY2VwdG9yKHZhbHVlKTtcbiAgICAgIHJldHVybiB2YWx1ZTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGlzIG1ldGhvZCBpcyBsaWtlIGBfLnRhcGAgZXhjZXB0IHRoYXQgaXQgcmV0dXJucyB0aGUgcmVzdWx0IG9mIGBpbnRlcmNlcHRvcmAuXG4gICAgICogVGhlIHB1cnBvc2Ugb2YgdGhpcyBtZXRob2QgaXMgdG8gXCJwYXNzIHRocnVcIiB2YWx1ZXMgcmVwbGFjaW5nIGludGVybWVkaWF0ZVxuICAgICAqIHJlc3VsdHMgaW4gYSBtZXRob2QgY2hhaW4gc2VxdWVuY2UuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMy4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgU2VxXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gcHJvdmlkZSB0byBgaW50ZXJjZXB0b3JgLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGludGVyY2VwdG9yIFRoZSBmdW5jdGlvbiB0byBpbnZva2UuXG4gICAgICogQHJldHVybnMgeyp9IFJldHVybnMgdGhlIHJlc3VsdCBvZiBgaW50ZXJjZXB0b3JgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfKCcgIGFiYyAgJylcbiAgICAgKiAgLmNoYWluKClcbiAgICAgKiAgLnRyaW0oKVxuICAgICAqICAudGhydShmdW5jdGlvbih2YWx1ZSkge1xuICAgICAqICAgIHJldHVybiBbdmFsdWVdO1xuICAgICAqICB9KVxuICAgICAqICAudmFsdWUoKTtcbiAgICAgKiAvLyA9PiBbJ2FiYyddXG4gICAgICovXG4gICAgZnVuY3Rpb24gdGhydSh2YWx1ZSwgaW50ZXJjZXB0b3IpIHtcbiAgICAgIHJldHVybiBpbnRlcmNlcHRvcih2YWx1ZSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhpcyBtZXRob2QgaXMgdGhlIHdyYXBwZXIgdmVyc2lvbiBvZiBgXy5hdGAuXG4gICAgICpcbiAgICAgKiBAbmFtZSBhdFxuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDEuMC4wXG4gICAgICogQGNhdGVnb3J5IFNlcVxuICAgICAqIEBwYXJhbSB7Li4uKHN0cmluZ3xzdHJpbmdbXSl9IFtwYXRoc10gVGhlIHByb3BlcnR5IHBhdGhzIHRvIHBpY2suXG4gICAgICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyB0aGUgbmV3IGBsb2Rhc2hgIHdyYXBwZXIgaW5zdGFuY2UuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciBvYmplY3QgPSB7ICdhJzogW3sgJ2InOiB7ICdjJzogMyB9IH0sIDRdIH07XG4gICAgICpcbiAgICAgKiBfKG9iamVjdCkuYXQoWydhWzBdLmIuYycsICdhWzFdJ10pLnZhbHVlKCk7XG4gICAgICogLy8gPT4gWzMsIDRdXG4gICAgICovXG4gICAgdmFyIHdyYXBwZXJBdCA9IGZsYXRSZXN0KGZ1bmN0aW9uKHBhdGhzKSB7XG4gICAgICB2YXIgbGVuZ3RoID0gcGF0aHMubGVuZ3RoLFxuICAgICAgICAgIHN0YXJ0ID0gbGVuZ3RoID8gcGF0aHNbMF0gOiAwLFxuICAgICAgICAgIHZhbHVlID0gdGhpcy5fX3dyYXBwZWRfXyxcbiAgICAgICAgICBpbnRlcmNlcHRvciA9IGZ1bmN0aW9uKG9iamVjdCkgeyByZXR1cm4gYmFzZUF0KG9iamVjdCwgcGF0aHMpOyB9O1xuXG4gICAgICBpZiAobGVuZ3RoID4gMSB8fCB0aGlzLl9fYWN0aW9uc19fLmxlbmd0aCB8fFxuICAgICAgICAgICEodmFsdWUgaW5zdGFuY2VvZiBMYXp5V3JhcHBlcikgfHwgIWlzSW5kZXgoc3RhcnQpKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnRocnUoaW50ZXJjZXB0b3IpO1xuICAgICAgfVxuICAgICAgdmFsdWUgPSB2YWx1ZS5zbGljZShzdGFydCwgK3N0YXJ0ICsgKGxlbmd0aCA/IDEgOiAwKSk7XG4gICAgICB2YWx1ZS5fX2FjdGlvbnNfXy5wdXNoKHtcbiAgICAgICAgJ2Z1bmMnOiB0aHJ1LFxuICAgICAgICAnYXJncyc6IFtpbnRlcmNlcHRvcl0sXG4gICAgICAgICd0aGlzQXJnJzogdW5kZWZpbmVkXG4gICAgICB9KTtcbiAgICAgIHJldHVybiBuZXcgTG9kYXNoV3JhcHBlcih2YWx1ZSwgdGhpcy5fX2NoYWluX18pLnRocnUoZnVuY3Rpb24oYXJyYXkpIHtcbiAgICAgICAgaWYgKGxlbmd0aCAmJiAhYXJyYXkubGVuZ3RoKSB7XG4gICAgICAgICAgYXJyYXkucHVzaCh1bmRlZmluZWQpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBhcnJheTtcbiAgICAgIH0pO1xuICAgIH0pO1xuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIGBsb2Rhc2hgIHdyYXBwZXIgaW5zdGFuY2Ugd2l0aCBleHBsaWNpdCBtZXRob2QgY2hhaW4gc2VxdWVuY2VzIGVuYWJsZWQuXG4gICAgICpcbiAgICAgKiBAbmFtZSBjaGFpblxuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDAuMS4wXG4gICAgICogQGNhdGVnb3J5IFNlcVxuICAgICAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgdGhlIG5ldyBgbG9kYXNoYCB3cmFwcGVyIGluc3RhbmNlLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgdXNlcnMgPSBbXG4gICAgICogICB7ICd1c2VyJzogJ2Jhcm5leScsICdhZ2UnOiAzNiB9LFxuICAgICAqICAgeyAndXNlcic6ICdmcmVkJywgICAnYWdlJzogNDAgfVxuICAgICAqIF07XG4gICAgICpcbiAgICAgKiAvLyBBIHNlcXVlbmNlIHdpdGhvdXQgZXhwbGljaXQgY2hhaW5pbmcuXG4gICAgICogXyh1c2VycykuaGVhZCgpO1xuICAgICAqIC8vID0+IHsgJ3VzZXInOiAnYmFybmV5JywgJ2FnZSc6IDM2IH1cbiAgICAgKlxuICAgICAqIC8vIEEgc2VxdWVuY2Ugd2l0aCBleHBsaWNpdCBjaGFpbmluZy5cbiAgICAgKiBfKHVzZXJzKVxuICAgICAqICAgLmNoYWluKClcbiAgICAgKiAgIC5oZWFkKClcbiAgICAgKiAgIC5waWNrKCd1c2VyJylcbiAgICAgKiAgIC52YWx1ZSgpO1xuICAgICAqIC8vID0+IHsgJ3VzZXInOiAnYmFybmV5JyB9XG4gICAgICovXG4gICAgZnVuY3Rpb24gd3JhcHBlckNoYWluKCkge1xuICAgICAgcmV0dXJuIGNoYWluKHRoaXMpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEV4ZWN1dGVzIHRoZSBjaGFpbiBzZXF1ZW5jZSBhbmQgcmV0dXJucyB0aGUgd3JhcHBlZCByZXN1bHQuXG4gICAgICpcbiAgICAgKiBAbmFtZSBjb21taXRcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAzLjIuMFxuICAgICAqIEBjYXRlZ29yeSBTZXFcbiAgICAgKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIHRoZSBuZXcgYGxvZGFzaGAgd3JhcHBlciBpbnN0YW5jZS5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIGFycmF5ID0gWzEsIDJdO1xuICAgICAqIHZhciB3cmFwcGVkID0gXyhhcnJheSkucHVzaCgzKTtcbiAgICAgKlxuICAgICAqIGNvbnNvbGUubG9nKGFycmF5KTtcbiAgICAgKiAvLyA9PiBbMSwgMl1cbiAgICAgKlxuICAgICAqIHdyYXBwZWQgPSB3cmFwcGVkLmNvbW1pdCgpO1xuICAgICAqIGNvbnNvbGUubG9nKGFycmF5KTtcbiAgICAgKiAvLyA9PiBbMSwgMiwgM11cbiAgICAgKlxuICAgICAqIHdyYXBwZWQubGFzdCgpO1xuICAgICAqIC8vID0+IDNcbiAgICAgKlxuICAgICAqIGNvbnNvbGUubG9nKGFycmF5KTtcbiAgICAgKiAvLyA9PiBbMSwgMiwgM11cbiAgICAgKi9cbiAgICBmdW5jdGlvbiB3cmFwcGVyQ29tbWl0KCkge1xuICAgICAgcmV0dXJuIG5ldyBMb2Rhc2hXcmFwcGVyKHRoaXMudmFsdWUoKSwgdGhpcy5fX2NoYWluX18pO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEdldHMgdGhlIG5leHQgdmFsdWUgb24gYSB3cmFwcGVkIG9iamVjdCBmb2xsb3dpbmcgdGhlXG4gICAgICogW2l0ZXJhdG9yIHByb3RvY29sXShodHRwczovL21kbi5pby9pdGVyYXRpb25fcHJvdG9jb2xzI2l0ZXJhdG9yKS5cbiAgICAgKlxuICAgICAqIEBuYW1lIG5leHRcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjAuMFxuICAgICAqIEBjYXRlZ29yeSBTZXFcbiAgICAgKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIHRoZSBuZXh0IGl0ZXJhdG9yIHZhbHVlLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgd3JhcHBlZCA9IF8oWzEsIDJdKTtcbiAgICAgKlxuICAgICAqIHdyYXBwZWQubmV4dCgpO1xuICAgICAqIC8vID0+IHsgJ2RvbmUnOiBmYWxzZSwgJ3ZhbHVlJzogMSB9XG4gICAgICpcbiAgICAgKiB3cmFwcGVkLm5leHQoKTtcbiAgICAgKiAvLyA9PiB7ICdkb25lJzogZmFsc2UsICd2YWx1ZSc6IDIgfVxuICAgICAqXG4gICAgICogd3JhcHBlZC5uZXh0KCk7XG4gICAgICogLy8gPT4geyAnZG9uZSc6IHRydWUsICd2YWx1ZSc6IHVuZGVmaW5lZCB9XG4gICAgICovXG4gICAgZnVuY3Rpb24gd3JhcHBlck5leHQoKSB7XG4gICAgICBpZiAodGhpcy5fX3ZhbHVlc19fID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgdGhpcy5fX3ZhbHVlc19fID0gdG9BcnJheSh0aGlzLnZhbHVlKCkpO1xuICAgICAgfVxuICAgICAgdmFyIGRvbmUgPSB0aGlzLl9faW5kZXhfXyA+PSB0aGlzLl9fdmFsdWVzX18ubGVuZ3RoLFxuICAgICAgICAgIHZhbHVlID0gZG9uZSA/IHVuZGVmaW5lZCA6IHRoaXMuX192YWx1ZXNfX1t0aGlzLl9faW5kZXhfXysrXTtcblxuICAgICAgcmV0dXJuIHsgJ2RvbmUnOiBkb25lLCAndmFsdWUnOiB2YWx1ZSB9O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEVuYWJsZXMgdGhlIHdyYXBwZXIgdG8gYmUgaXRlcmFibGUuXG4gICAgICpcbiAgICAgKiBAbmFtZSBTeW1ib2wuaXRlcmF0b3JcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjAuMFxuICAgICAqIEBjYXRlZ29yeSBTZXFcbiAgICAgKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIHRoZSB3cmFwcGVyIG9iamVjdC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIHdyYXBwZWQgPSBfKFsxLCAyXSk7XG4gICAgICpcbiAgICAgKiB3cmFwcGVkW1N5bWJvbC5pdGVyYXRvcl0oKSA9PT0gd3JhcHBlZDtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICpcbiAgICAgKiBBcnJheS5mcm9tKHdyYXBwZWQpO1xuICAgICAqIC8vID0+IFsxLCAyXVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHdyYXBwZXJUb0l0ZXJhdG9yKCkge1xuICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIGNsb25lIG9mIHRoZSBjaGFpbiBzZXF1ZW5jZSBwbGFudGluZyBgdmFsdWVgIGFzIHRoZSB3cmFwcGVkIHZhbHVlLlxuICAgICAqXG4gICAgICogQG5hbWUgcGxhbnRcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAzLjIuMFxuICAgICAqIEBjYXRlZ29yeSBTZXFcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBwbGFudC5cbiAgICAgKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIHRoZSBuZXcgYGxvZGFzaGAgd3JhcHBlciBpbnN0YW5jZS5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogZnVuY3Rpb24gc3F1YXJlKG4pIHtcbiAgICAgKiAgIHJldHVybiBuICogbjtcbiAgICAgKiB9XG4gICAgICpcbiAgICAgKiB2YXIgd3JhcHBlZCA9IF8oWzEsIDJdKS5tYXAoc3F1YXJlKTtcbiAgICAgKiB2YXIgb3RoZXIgPSB3cmFwcGVkLnBsYW50KFszLCA0XSk7XG4gICAgICpcbiAgICAgKiBvdGhlci52YWx1ZSgpO1xuICAgICAqIC8vID0+IFs5LCAxNl1cbiAgICAgKlxuICAgICAqIHdyYXBwZWQudmFsdWUoKTtcbiAgICAgKiAvLyA9PiBbMSwgNF1cbiAgICAgKi9cbiAgICBmdW5jdGlvbiB3cmFwcGVyUGxhbnQodmFsdWUpIHtcbiAgICAgIHZhciByZXN1bHQsXG4gICAgICAgICAgcGFyZW50ID0gdGhpcztcblxuICAgICAgd2hpbGUgKHBhcmVudCBpbnN0YW5jZW9mIGJhc2VMb2Rhc2gpIHtcbiAgICAgICAgdmFyIGNsb25lID0gd3JhcHBlckNsb25lKHBhcmVudCk7XG4gICAgICAgIGNsb25lLl9faW5kZXhfXyA9IDA7XG4gICAgICAgIGNsb25lLl9fdmFsdWVzX18gPSB1bmRlZmluZWQ7XG4gICAgICAgIGlmIChyZXN1bHQpIHtcbiAgICAgICAgICBwcmV2aW91cy5fX3dyYXBwZWRfXyA9IGNsb25lO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHJlc3VsdCA9IGNsb25lO1xuICAgICAgICB9XG4gICAgICAgIHZhciBwcmV2aW91cyA9IGNsb25lO1xuICAgICAgICBwYXJlbnQgPSBwYXJlbnQuX193cmFwcGVkX187XG4gICAgICB9XG4gICAgICBwcmV2aW91cy5fX3dyYXBwZWRfXyA9IHZhbHVlO1xuICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGlzIG1ldGhvZCBpcyB0aGUgd3JhcHBlciB2ZXJzaW9uIG9mIGBfLnJldmVyc2VgLlxuICAgICAqXG4gICAgICogKipOb3RlOioqIFRoaXMgbWV0aG9kIG11dGF0ZXMgdGhlIHdyYXBwZWQgYXJyYXkuXG4gICAgICpcbiAgICAgKiBAbmFtZSByZXZlcnNlXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMC4xLjBcbiAgICAgKiBAY2F0ZWdvcnkgU2VxXG4gICAgICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyB0aGUgbmV3IGBsb2Rhc2hgIHdyYXBwZXIgaW5zdGFuY2UuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciBhcnJheSA9IFsxLCAyLCAzXTtcbiAgICAgKlxuICAgICAqIF8oYXJyYXkpLnJldmVyc2UoKS52YWx1ZSgpXG4gICAgICogLy8gPT4gWzMsIDIsIDFdXG4gICAgICpcbiAgICAgKiBjb25zb2xlLmxvZyhhcnJheSk7XG4gICAgICogLy8gPT4gWzMsIDIsIDFdXG4gICAgICovXG4gICAgZnVuY3Rpb24gd3JhcHBlclJldmVyc2UoKSB7XG4gICAgICB2YXIgdmFsdWUgPSB0aGlzLl9fd3JhcHBlZF9fO1xuICAgICAgaWYgKHZhbHVlIGluc3RhbmNlb2YgTGF6eVdyYXBwZXIpIHtcbiAgICAgICAgdmFyIHdyYXBwZWQgPSB2YWx1ZTtcbiAgICAgICAgaWYgKHRoaXMuX19hY3Rpb25zX18ubGVuZ3RoKSB7XG4gICAgICAgICAgd3JhcHBlZCA9IG5ldyBMYXp5V3JhcHBlcih0aGlzKTtcbiAgICAgICAgfVxuICAgICAgICB3cmFwcGVkID0gd3JhcHBlZC5yZXZlcnNlKCk7XG4gICAgICAgIHdyYXBwZWQuX19hY3Rpb25zX18ucHVzaCh7XG4gICAgICAgICAgJ2Z1bmMnOiB0aHJ1LFxuICAgICAgICAgICdhcmdzJzogW3JldmVyc2VdLFxuICAgICAgICAgICd0aGlzQXJnJzogdW5kZWZpbmVkXG4gICAgICAgIH0pO1xuICAgICAgICByZXR1cm4gbmV3IExvZGFzaFdyYXBwZXIod3JhcHBlZCwgdGhpcy5fX2NoYWluX18pO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHRoaXMudGhydShyZXZlcnNlKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBFeGVjdXRlcyB0aGUgY2hhaW4gc2VxdWVuY2UgdG8gcmVzb2x2ZSB0aGUgdW53cmFwcGVkIHZhbHVlLlxuICAgICAqXG4gICAgICogQG5hbWUgdmFsdWVcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAwLjEuMFxuICAgICAqIEBhbGlhcyB0b0pTT04sIHZhbHVlT2ZcbiAgICAgKiBAY2F0ZWdvcnkgU2VxXG4gICAgICogQHJldHVybnMgeyp9IFJldHVybnMgdGhlIHJlc29sdmVkIHVud3JhcHBlZCB2YWx1ZS5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXyhbMSwgMiwgM10pLnZhbHVlKCk7XG4gICAgICogLy8gPT4gWzEsIDIsIDNdXG4gICAgICovXG4gICAgZnVuY3Rpb24gd3JhcHBlclZhbHVlKCkge1xuICAgICAgcmV0dXJuIGJhc2VXcmFwcGVyVmFsdWUodGhpcy5fX3dyYXBwZWRfXywgdGhpcy5fX2FjdGlvbnNfXyk7XG4gICAgfVxuXG4gICAgLyotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0qL1xuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhbiBvYmplY3QgY29tcG9zZWQgb2Yga2V5cyBnZW5lcmF0ZWQgZnJvbSB0aGUgcmVzdWx0cyBvZiBydW5uaW5nXG4gICAgICogZWFjaCBlbGVtZW50IG9mIGBjb2xsZWN0aW9uYCB0aHJ1IGBpdGVyYXRlZWAuIFRoZSBjb3JyZXNwb25kaW5nIHZhbHVlIG9mXG4gICAgICogZWFjaCBrZXkgaXMgdGhlIG51bWJlciBvZiB0aW1lcyB0aGUga2V5IHdhcyByZXR1cm5lZCBieSBgaXRlcmF0ZWVgLiBUaGVcbiAgICAgKiBpdGVyYXRlZSBpcyBpbnZva2VkIHdpdGggb25lIGFyZ3VtZW50OiAodmFsdWUpLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDAuNS4wXG4gICAgICogQGNhdGVnb3J5IENvbGxlY3Rpb25cbiAgICAgKiBAcGFyYW0ge0FycmF5fE9iamVjdH0gY29sbGVjdGlvbiBUaGUgY29sbGVjdGlvbiB0byBpdGVyYXRlIG92ZXIuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gW2l0ZXJhdGVlPV8uaWRlbnRpdHldIFRoZSBpdGVyYXRlZSB0byB0cmFuc2Zvcm0ga2V5cy5cbiAgICAgKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIHRoZSBjb21wb3NlZCBhZ2dyZWdhdGUgb2JqZWN0LlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLmNvdW50QnkoWzYuMSwgNC4yLCA2LjNdLCBNYXRoLmZsb29yKTtcbiAgICAgKiAvLyA9PiB7ICc0JzogMSwgJzYnOiAyIH1cbiAgICAgKlxuICAgICAqIC8vIFRoZSBgXy5wcm9wZXJ0eWAgaXRlcmF0ZWUgc2hvcnRoYW5kLlxuICAgICAqIF8uY291bnRCeShbJ29uZScsICd0d28nLCAndGhyZWUnXSwgJ2xlbmd0aCcpO1xuICAgICAqIC8vID0+IHsgJzMnOiAyLCAnNSc6IDEgfVxuICAgICAqL1xuICAgIHZhciBjb3VudEJ5ID0gY3JlYXRlQWdncmVnYXRvcihmdW5jdGlvbihyZXN1bHQsIHZhbHVlLCBrZXkpIHtcbiAgICAgIGlmIChoYXNPd25Qcm9wZXJ0eS5jYWxsKHJlc3VsdCwga2V5KSkge1xuICAgICAgICArK3Jlc3VsdFtrZXldO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgYmFzZUFzc2lnblZhbHVlKHJlc3VsdCwga2V5LCAxKTtcbiAgICAgIH1cbiAgICB9KTtcblxuICAgIC8qKlxuICAgICAqIENoZWNrcyBpZiBgcHJlZGljYXRlYCByZXR1cm5zIHRydXRoeSBmb3IgKiphbGwqKiBlbGVtZW50cyBvZiBgY29sbGVjdGlvbmAuXG4gICAgICogSXRlcmF0aW9uIGlzIHN0b3BwZWQgb25jZSBgcHJlZGljYXRlYCByZXR1cm5zIGZhbHNleS4gVGhlIHByZWRpY2F0ZSBpc1xuICAgICAqIGludm9rZWQgd2l0aCB0aHJlZSBhcmd1bWVudHM6ICh2YWx1ZSwgaW5kZXh8a2V5LCBjb2xsZWN0aW9uKS5cbiAgICAgKlxuICAgICAqICoqTm90ZToqKiBUaGlzIG1ldGhvZCByZXR1cm5zIGB0cnVlYCBmb3JcbiAgICAgKiBbZW1wdHkgY29sbGVjdGlvbnNdKGh0dHBzOi8vZW4ud2lraXBlZGlhLm9yZy93aWtpL0VtcHR5X3NldCkgYmVjYXVzZVxuICAgICAqIFtldmVyeXRoaW5nIGlzIHRydWVdKGh0dHBzOi8vZW4ud2lraXBlZGlhLm9yZy93aWtpL1ZhY3VvdXNfdHJ1dGgpIG9mXG4gICAgICogZWxlbWVudHMgb2YgZW1wdHkgY29sbGVjdGlvbnMuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMC4xLjBcbiAgICAgKiBAY2F0ZWdvcnkgQ29sbGVjdGlvblxuICAgICAqIEBwYXJhbSB7QXJyYXl8T2JqZWN0fSBjb2xsZWN0aW9uIFRoZSBjb2xsZWN0aW9uIHRvIGl0ZXJhdGUgb3Zlci5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbcHJlZGljYXRlPV8uaWRlbnRpdHldIFRoZSBmdW5jdGlvbiBpbnZva2VkIHBlciBpdGVyYXRpb24uXG4gICAgICogQHBhcmFtLSB7T2JqZWN0fSBbZ3VhcmRdIEVuYWJsZXMgdXNlIGFzIGFuIGl0ZXJhdGVlIGZvciBtZXRob2RzIGxpa2UgYF8ubWFwYC5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYWxsIGVsZW1lbnRzIHBhc3MgdGhlIHByZWRpY2F0ZSBjaGVjayxcbiAgICAgKiAgZWxzZSBgZmFsc2VgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLmV2ZXJ5KFt0cnVlLCAxLCBudWxsLCAneWVzJ10sIEJvb2xlYW4pO1xuICAgICAqIC8vID0+IGZhbHNlXG4gICAgICpcbiAgICAgKiB2YXIgdXNlcnMgPSBbXG4gICAgICogICB7ICd1c2VyJzogJ2Jhcm5leScsICdhZ2UnOiAzNiwgJ2FjdGl2ZSc6IGZhbHNlIH0sXG4gICAgICogICB7ICd1c2VyJzogJ2ZyZWQnLCAgICdhZ2UnOiA0MCwgJ2FjdGl2ZSc6IGZhbHNlIH1cbiAgICAgKiBdO1xuICAgICAqXG4gICAgICogLy8gVGhlIGBfLm1hdGNoZXNgIGl0ZXJhdGVlIHNob3J0aGFuZC5cbiAgICAgKiBfLmV2ZXJ5KHVzZXJzLCB7ICd1c2VyJzogJ2Jhcm5leScsICdhY3RpdmUnOiBmYWxzZSB9KTtcbiAgICAgKiAvLyA9PiBmYWxzZVxuICAgICAqXG4gICAgICogLy8gVGhlIGBfLm1hdGNoZXNQcm9wZXJ0eWAgaXRlcmF0ZWUgc2hvcnRoYW5kLlxuICAgICAqIF8uZXZlcnkodXNlcnMsIFsnYWN0aXZlJywgZmFsc2VdKTtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICpcbiAgICAgKiAvLyBUaGUgYF8ucHJvcGVydHlgIGl0ZXJhdGVlIHNob3J0aGFuZC5cbiAgICAgKiBfLmV2ZXJ5KHVzZXJzLCAnYWN0aXZlJyk7XG4gICAgICogLy8gPT4gZmFsc2VcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBldmVyeShjb2xsZWN0aW9uLCBwcmVkaWNhdGUsIGd1YXJkKSB7XG4gICAgICB2YXIgZnVuYyA9IGlzQXJyYXkoY29sbGVjdGlvbikgPyBhcnJheUV2ZXJ5IDogYmFzZUV2ZXJ5O1xuICAgICAgaWYgKGd1YXJkICYmIGlzSXRlcmF0ZWVDYWxsKGNvbGxlY3Rpb24sIHByZWRpY2F0ZSwgZ3VhcmQpKSB7XG4gICAgICAgIHByZWRpY2F0ZSA9IHVuZGVmaW5lZDtcbiAgICAgIH1cbiAgICAgIHJldHVybiBmdW5jKGNvbGxlY3Rpb24sIGdldEl0ZXJhdGVlKHByZWRpY2F0ZSwgMykpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEl0ZXJhdGVzIG92ZXIgZWxlbWVudHMgb2YgYGNvbGxlY3Rpb25gLCByZXR1cm5pbmcgYW4gYXJyYXkgb2YgYWxsIGVsZW1lbnRzXG4gICAgICogYHByZWRpY2F0ZWAgcmV0dXJucyB0cnV0aHkgZm9yLiBUaGUgcHJlZGljYXRlIGlzIGludm9rZWQgd2l0aCB0aHJlZVxuICAgICAqIGFyZ3VtZW50czogKHZhbHVlLCBpbmRleHxrZXksIGNvbGxlY3Rpb24pLlxuICAgICAqXG4gICAgICogKipOb3RlOioqIFVubGlrZSBgXy5yZW1vdmVgLCB0aGlzIG1ldGhvZCByZXR1cm5zIGEgbmV3IGFycmF5LlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDAuMS4wXG4gICAgICogQGNhdGVnb3J5IENvbGxlY3Rpb25cbiAgICAgKiBAcGFyYW0ge0FycmF5fE9iamVjdH0gY29sbGVjdGlvbiBUaGUgY29sbGVjdGlvbiB0byBpdGVyYXRlIG92ZXIuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gW3ByZWRpY2F0ZT1fLmlkZW50aXR5XSBUaGUgZnVuY3Rpb24gaW52b2tlZCBwZXIgaXRlcmF0aW9uLlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgbmV3IGZpbHRlcmVkIGFycmF5LlxuICAgICAqIEBzZWUgXy5yZWplY3RcbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIHVzZXJzID0gW1xuICAgICAqICAgeyAndXNlcic6ICdiYXJuZXknLCAnYWdlJzogMzYsICdhY3RpdmUnOiB0cnVlIH0sXG4gICAgICogICB7ICd1c2VyJzogJ2ZyZWQnLCAgICdhZ2UnOiA0MCwgJ2FjdGl2ZSc6IGZhbHNlIH1cbiAgICAgKiBdO1xuICAgICAqXG4gICAgICogXy5maWx0ZXIodXNlcnMsIGZ1bmN0aW9uKG8pIHsgcmV0dXJuICFvLmFjdGl2ZTsgfSk7XG4gICAgICogLy8gPT4gb2JqZWN0cyBmb3IgWydmcmVkJ11cbiAgICAgKlxuICAgICAqIC8vIFRoZSBgXy5tYXRjaGVzYCBpdGVyYXRlZSBzaG9ydGhhbmQuXG4gICAgICogXy5maWx0ZXIodXNlcnMsIHsgJ2FnZSc6IDM2LCAnYWN0aXZlJzogdHJ1ZSB9KTtcbiAgICAgKiAvLyA9PiBvYmplY3RzIGZvciBbJ2Jhcm5leSddXG4gICAgICpcbiAgICAgKiAvLyBUaGUgYF8ubWF0Y2hlc1Byb3BlcnR5YCBpdGVyYXRlZSBzaG9ydGhhbmQuXG4gICAgICogXy5maWx0ZXIodXNlcnMsIFsnYWN0aXZlJywgZmFsc2VdKTtcbiAgICAgKiAvLyA9PiBvYmplY3RzIGZvciBbJ2ZyZWQnXVxuICAgICAqXG4gICAgICogLy8gVGhlIGBfLnByb3BlcnR5YCBpdGVyYXRlZSBzaG9ydGhhbmQuXG4gICAgICogXy5maWx0ZXIodXNlcnMsICdhY3RpdmUnKTtcbiAgICAgKiAvLyA9PiBvYmplY3RzIGZvciBbJ2Jhcm5leSddXG4gICAgICpcbiAgICAgKiAvLyBDb21iaW5pbmcgc2V2ZXJhbCBwcmVkaWNhdGVzIHVzaW5nIGBfLm92ZXJFdmVyeWAgb3IgYF8ub3ZlclNvbWVgLlxuICAgICAqIF8uZmlsdGVyKHVzZXJzLCBfLm92ZXJTb21lKFt7ICdhZ2UnOiAzNiB9LCBbJ2FnZScsIDQwXV0pKTtcbiAgICAgKiAvLyA9PiBvYmplY3RzIGZvciBbJ2ZyZWQnLCAnYmFybmV5J11cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBmaWx0ZXIoY29sbGVjdGlvbiwgcHJlZGljYXRlKSB7XG4gICAgICB2YXIgZnVuYyA9IGlzQXJyYXkoY29sbGVjdGlvbikgPyBhcnJheUZpbHRlciA6IGJhc2VGaWx0ZXI7XG4gICAgICByZXR1cm4gZnVuYyhjb2xsZWN0aW9uLCBnZXRJdGVyYXRlZShwcmVkaWNhdGUsIDMpKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBJdGVyYXRlcyBvdmVyIGVsZW1lbnRzIG9mIGBjb2xsZWN0aW9uYCwgcmV0dXJuaW5nIHRoZSBmaXJzdCBlbGVtZW50XG4gICAgICogYHByZWRpY2F0ZWAgcmV0dXJucyB0cnV0aHkgZm9yLiBUaGUgcHJlZGljYXRlIGlzIGludm9rZWQgd2l0aCB0aHJlZVxuICAgICAqIGFyZ3VtZW50czogKHZhbHVlLCBpbmRleHxrZXksIGNvbGxlY3Rpb24pLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDAuMS4wXG4gICAgICogQGNhdGVnb3J5IENvbGxlY3Rpb25cbiAgICAgKiBAcGFyYW0ge0FycmF5fE9iamVjdH0gY29sbGVjdGlvbiBUaGUgY29sbGVjdGlvbiB0byBpbnNwZWN0LlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtwcmVkaWNhdGU9Xy5pZGVudGl0eV0gVGhlIGZ1bmN0aW9uIGludm9rZWQgcGVyIGl0ZXJhdGlvbi5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gW2Zyb21JbmRleD0wXSBUaGUgaW5kZXggdG8gc2VhcmNoIGZyb20uXG4gICAgICogQHJldHVybnMgeyp9IFJldHVybnMgdGhlIG1hdGNoZWQgZWxlbWVudCwgZWxzZSBgdW5kZWZpbmVkYC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIHVzZXJzID0gW1xuICAgICAqICAgeyAndXNlcic6ICdiYXJuZXknLCAgJ2FnZSc6IDM2LCAnYWN0aXZlJzogdHJ1ZSB9LFxuICAgICAqICAgeyAndXNlcic6ICdmcmVkJywgICAgJ2FnZSc6IDQwLCAnYWN0aXZlJzogZmFsc2UgfSxcbiAgICAgKiAgIHsgJ3VzZXInOiAncGViYmxlcycsICdhZ2UnOiAxLCAgJ2FjdGl2ZSc6IHRydWUgfVxuICAgICAqIF07XG4gICAgICpcbiAgICAgKiBfLmZpbmQodXNlcnMsIGZ1bmN0aW9uKG8pIHsgcmV0dXJuIG8uYWdlIDwgNDA7IH0pO1xuICAgICAqIC8vID0+IG9iamVjdCBmb3IgJ2Jhcm5leSdcbiAgICAgKlxuICAgICAqIC8vIFRoZSBgXy5tYXRjaGVzYCBpdGVyYXRlZSBzaG9ydGhhbmQuXG4gICAgICogXy5maW5kKHVzZXJzLCB7ICdhZ2UnOiAxLCAnYWN0aXZlJzogdHJ1ZSB9KTtcbiAgICAgKiAvLyA9PiBvYmplY3QgZm9yICdwZWJibGVzJ1xuICAgICAqXG4gICAgICogLy8gVGhlIGBfLm1hdGNoZXNQcm9wZXJ0eWAgaXRlcmF0ZWUgc2hvcnRoYW5kLlxuICAgICAqIF8uZmluZCh1c2VycywgWydhY3RpdmUnLCBmYWxzZV0pO1xuICAgICAqIC8vID0+IG9iamVjdCBmb3IgJ2ZyZWQnXG4gICAgICpcbiAgICAgKiAvLyBUaGUgYF8ucHJvcGVydHlgIGl0ZXJhdGVlIHNob3J0aGFuZC5cbiAgICAgKiBfLmZpbmQodXNlcnMsICdhY3RpdmUnKTtcbiAgICAgKiAvLyA9PiBvYmplY3QgZm9yICdiYXJuZXknXG4gICAgICovXG4gICAgdmFyIGZpbmQgPSBjcmVhdGVGaW5kKGZpbmRJbmRleCk7XG5cbiAgICAvKipcbiAgICAgKiBUaGlzIG1ldGhvZCBpcyBsaWtlIGBfLmZpbmRgIGV4Y2VwdCB0aGF0IGl0IGl0ZXJhdGVzIG92ZXIgZWxlbWVudHMgb2ZcbiAgICAgKiBgY29sbGVjdGlvbmAgZnJvbSByaWdodCB0byBsZWZ0LlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDIuMC4wXG4gICAgICogQGNhdGVnb3J5IENvbGxlY3Rpb25cbiAgICAgKiBAcGFyYW0ge0FycmF5fE9iamVjdH0gY29sbGVjdGlvbiBUaGUgY29sbGVjdGlvbiB0byBpbnNwZWN0LlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtwcmVkaWNhdGU9Xy5pZGVudGl0eV0gVGhlIGZ1bmN0aW9uIGludm9rZWQgcGVyIGl0ZXJhdGlvbi5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gW2Zyb21JbmRleD1jb2xsZWN0aW9uLmxlbmd0aC0xXSBUaGUgaW5kZXggdG8gc2VhcmNoIGZyb20uXG4gICAgICogQHJldHVybnMgeyp9IFJldHVybnMgdGhlIG1hdGNoZWQgZWxlbWVudCwgZWxzZSBgdW5kZWZpbmVkYC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5maW5kTGFzdChbMSwgMiwgMywgNF0sIGZ1bmN0aW9uKG4pIHtcbiAgICAgKiAgIHJldHVybiBuICUgMiA9PSAxO1xuICAgICAqIH0pO1xuICAgICAqIC8vID0+IDNcbiAgICAgKi9cbiAgICB2YXIgZmluZExhc3QgPSBjcmVhdGVGaW5kKGZpbmRMYXN0SW5kZXgpO1xuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIGZsYXR0ZW5lZCBhcnJheSBvZiB2YWx1ZXMgYnkgcnVubmluZyBlYWNoIGVsZW1lbnQgaW4gYGNvbGxlY3Rpb25gXG4gICAgICogdGhydSBgaXRlcmF0ZWVgIGFuZCBmbGF0dGVuaW5nIHRoZSBtYXBwZWQgcmVzdWx0cy4gVGhlIGl0ZXJhdGVlIGlzIGludm9rZWRcbiAgICAgKiB3aXRoIHRocmVlIGFyZ3VtZW50czogKHZhbHVlLCBpbmRleHxrZXksIGNvbGxlY3Rpb24pLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMC4wXG4gICAgICogQGNhdGVnb3J5IENvbGxlY3Rpb25cbiAgICAgKiBAcGFyYW0ge0FycmF5fE9iamVjdH0gY29sbGVjdGlvbiBUaGUgY29sbGVjdGlvbiB0byBpdGVyYXRlIG92ZXIuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gW2l0ZXJhdGVlPV8uaWRlbnRpdHldIFRoZSBmdW5jdGlvbiBpbnZva2VkIHBlciBpdGVyYXRpb24uXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBuZXcgZmxhdHRlbmVkIGFycmF5LlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBmdW5jdGlvbiBkdXBsaWNhdGUobikge1xuICAgICAqICAgcmV0dXJuIFtuLCBuXTtcbiAgICAgKiB9XG4gICAgICpcbiAgICAgKiBfLmZsYXRNYXAoWzEsIDJdLCBkdXBsaWNhdGUpO1xuICAgICAqIC8vID0+IFsxLCAxLCAyLCAyXVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGZsYXRNYXAoY29sbGVjdGlvbiwgaXRlcmF0ZWUpIHtcbiAgICAgIHJldHVybiBiYXNlRmxhdHRlbihtYXAoY29sbGVjdGlvbiwgaXRlcmF0ZWUpLCAxKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGlzIG1ldGhvZCBpcyBsaWtlIGBfLmZsYXRNYXBgIGV4Y2VwdCB0aGF0IGl0IHJlY3Vyc2l2ZWx5IGZsYXR0ZW5zIHRoZVxuICAgICAqIG1hcHBlZCByZXN1bHRzLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuNy4wXG4gICAgICogQGNhdGVnb3J5IENvbGxlY3Rpb25cbiAgICAgKiBAcGFyYW0ge0FycmF5fE9iamVjdH0gY29sbGVjdGlvbiBUaGUgY29sbGVjdGlvbiB0byBpdGVyYXRlIG92ZXIuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gW2l0ZXJhdGVlPV8uaWRlbnRpdHldIFRoZSBmdW5jdGlvbiBpbnZva2VkIHBlciBpdGVyYXRpb24uXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBuZXcgZmxhdHRlbmVkIGFycmF5LlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBmdW5jdGlvbiBkdXBsaWNhdGUobikge1xuICAgICAqICAgcmV0dXJuIFtbW24sIG5dXV07XG4gICAgICogfVxuICAgICAqXG4gICAgICogXy5mbGF0TWFwRGVlcChbMSwgMl0sIGR1cGxpY2F0ZSk7XG4gICAgICogLy8gPT4gWzEsIDEsIDIsIDJdXG4gICAgICovXG4gICAgZnVuY3Rpb24gZmxhdE1hcERlZXAoY29sbGVjdGlvbiwgaXRlcmF0ZWUpIHtcbiAgICAgIHJldHVybiBiYXNlRmxhdHRlbihtYXAoY29sbGVjdGlvbiwgaXRlcmF0ZWUpLCBJTkZJTklUWSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhpcyBtZXRob2QgaXMgbGlrZSBgXy5mbGF0TWFwYCBleGNlcHQgdGhhdCBpdCByZWN1cnNpdmVseSBmbGF0dGVucyB0aGVcbiAgICAgKiBtYXBwZWQgcmVzdWx0cyB1cCB0byBgZGVwdGhgIHRpbWVzLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuNy4wXG4gICAgICogQGNhdGVnb3J5IENvbGxlY3Rpb25cbiAgICAgKiBAcGFyYW0ge0FycmF5fE9iamVjdH0gY29sbGVjdGlvbiBUaGUgY29sbGVjdGlvbiB0byBpdGVyYXRlIG92ZXIuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gW2l0ZXJhdGVlPV8uaWRlbnRpdHldIFRoZSBmdW5jdGlvbiBpbnZva2VkIHBlciBpdGVyYXRpb24uXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IFtkZXB0aD0xXSBUaGUgbWF4aW11bSByZWN1cnNpb24gZGVwdGguXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBuZXcgZmxhdHRlbmVkIGFycmF5LlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBmdW5jdGlvbiBkdXBsaWNhdGUobikge1xuICAgICAqICAgcmV0dXJuIFtbW24sIG5dXV07XG4gICAgICogfVxuICAgICAqXG4gICAgICogXy5mbGF0TWFwRGVwdGgoWzEsIDJdLCBkdXBsaWNhdGUsIDIpO1xuICAgICAqIC8vID0+IFtbMSwgMV0sIFsyLCAyXV1cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBmbGF0TWFwRGVwdGgoY29sbGVjdGlvbiwgaXRlcmF0ZWUsIGRlcHRoKSB7XG4gICAgICBkZXB0aCA9IGRlcHRoID09PSB1bmRlZmluZWQgPyAxIDogdG9JbnRlZ2VyKGRlcHRoKTtcbiAgICAgIHJldHVybiBiYXNlRmxhdHRlbihtYXAoY29sbGVjdGlvbiwgaXRlcmF0ZWUpLCBkZXB0aCk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogSXRlcmF0ZXMgb3ZlciBlbGVtZW50cyBvZiBgY29sbGVjdGlvbmAgYW5kIGludm9rZXMgYGl0ZXJhdGVlYCBmb3IgZWFjaCBlbGVtZW50LlxuICAgICAqIFRoZSBpdGVyYXRlZSBpcyBpbnZva2VkIHdpdGggdGhyZWUgYXJndW1lbnRzOiAodmFsdWUsIGluZGV4fGtleSwgY29sbGVjdGlvbikuXG4gICAgICogSXRlcmF0ZWUgZnVuY3Rpb25zIG1heSBleGl0IGl0ZXJhdGlvbiBlYXJseSBieSBleHBsaWNpdGx5IHJldHVybmluZyBgZmFsc2VgLlxuICAgICAqXG4gICAgICogKipOb3RlOioqIEFzIHdpdGggb3RoZXIgXCJDb2xsZWN0aW9uc1wiIG1ldGhvZHMsIG9iamVjdHMgd2l0aCBhIFwibGVuZ3RoXCJcbiAgICAgKiBwcm9wZXJ0eSBhcmUgaXRlcmF0ZWQgbGlrZSBhcnJheXMuIFRvIGF2b2lkIHRoaXMgYmVoYXZpb3IgdXNlIGBfLmZvckluYFxuICAgICAqIG9yIGBfLmZvck93bmAgZm9yIG9iamVjdCBpdGVyYXRpb24uXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMC4xLjBcbiAgICAgKiBAYWxpYXMgZWFjaFxuICAgICAqIEBjYXRlZ29yeSBDb2xsZWN0aW9uXG4gICAgICogQHBhcmFtIHtBcnJheXxPYmplY3R9IGNvbGxlY3Rpb24gVGhlIGNvbGxlY3Rpb24gdG8gaXRlcmF0ZSBvdmVyLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtpdGVyYXRlZT1fLmlkZW50aXR5XSBUaGUgZnVuY3Rpb24gaW52b2tlZCBwZXIgaXRlcmF0aW9uLlxuICAgICAqIEByZXR1cm5zIHtBcnJheXxPYmplY3R9IFJldHVybnMgYGNvbGxlY3Rpb25gLlxuICAgICAqIEBzZWUgXy5mb3JFYWNoUmlnaHRcbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5mb3JFYWNoKFsxLCAyXSwgZnVuY3Rpb24odmFsdWUpIHtcbiAgICAgKiAgIGNvbnNvbGUubG9nKHZhbHVlKTtcbiAgICAgKiB9KTtcbiAgICAgKiAvLyA9PiBMb2dzIGAxYCB0aGVuIGAyYC5cbiAgICAgKlxuICAgICAqIF8uZm9yRWFjaCh7ICdhJzogMSwgJ2InOiAyIH0sIGZ1bmN0aW9uKHZhbHVlLCBrZXkpIHtcbiAgICAgKiAgIGNvbnNvbGUubG9nKGtleSk7XG4gICAgICogfSk7XG4gICAgICogLy8gPT4gTG9ncyAnYScgdGhlbiAnYicgKGl0ZXJhdGlvbiBvcmRlciBpcyBub3QgZ3VhcmFudGVlZCkuXG4gICAgICovXG4gICAgZnVuY3Rpb24gZm9yRWFjaChjb2xsZWN0aW9uLCBpdGVyYXRlZSkge1xuICAgICAgdmFyIGZ1bmMgPSBpc0FycmF5KGNvbGxlY3Rpb24pID8gYXJyYXlFYWNoIDogYmFzZUVhY2g7XG4gICAgICByZXR1cm4gZnVuYyhjb2xsZWN0aW9uLCBnZXRJdGVyYXRlZShpdGVyYXRlZSwgMykpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoaXMgbWV0aG9kIGlzIGxpa2UgYF8uZm9yRWFjaGAgZXhjZXB0IHRoYXQgaXQgaXRlcmF0ZXMgb3ZlciBlbGVtZW50cyBvZlxuICAgICAqIGBjb2xsZWN0aW9uYCBmcm9tIHJpZ2h0IHRvIGxlZnQuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMi4wLjBcbiAgICAgKiBAYWxpYXMgZWFjaFJpZ2h0XG4gICAgICogQGNhdGVnb3J5IENvbGxlY3Rpb25cbiAgICAgKiBAcGFyYW0ge0FycmF5fE9iamVjdH0gY29sbGVjdGlvbiBUaGUgY29sbGVjdGlvbiB0byBpdGVyYXRlIG92ZXIuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gW2l0ZXJhdGVlPV8uaWRlbnRpdHldIFRoZSBmdW5jdGlvbiBpbnZva2VkIHBlciBpdGVyYXRpb24uXG4gICAgICogQHJldHVybnMge0FycmF5fE9iamVjdH0gUmV0dXJucyBgY29sbGVjdGlvbmAuXG4gICAgICogQHNlZSBfLmZvckVhY2hcbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5mb3JFYWNoUmlnaHQoWzEsIDJdLCBmdW5jdGlvbih2YWx1ZSkge1xuICAgICAqICAgY29uc29sZS5sb2codmFsdWUpO1xuICAgICAqIH0pO1xuICAgICAqIC8vID0+IExvZ3MgYDJgIHRoZW4gYDFgLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGZvckVhY2hSaWdodChjb2xsZWN0aW9uLCBpdGVyYXRlZSkge1xuICAgICAgdmFyIGZ1bmMgPSBpc0FycmF5KGNvbGxlY3Rpb24pID8gYXJyYXlFYWNoUmlnaHQgOiBiYXNlRWFjaFJpZ2h0O1xuICAgICAgcmV0dXJuIGZ1bmMoY29sbGVjdGlvbiwgZ2V0SXRlcmF0ZWUoaXRlcmF0ZWUsIDMpKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGFuIG9iamVjdCBjb21wb3NlZCBvZiBrZXlzIGdlbmVyYXRlZCBmcm9tIHRoZSByZXN1bHRzIG9mIHJ1bm5pbmdcbiAgICAgKiBlYWNoIGVsZW1lbnQgb2YgYGNvbGxlY3Rpb25gIHRocnUgYGl0ZXJhdGVlYC4gVGhlIG9yZGVyIG9mIGdyb3VwZWQgdmFsdWVzXG4gICAgICogaXMgZGV0ZXJtaW5lZCBieSB0aGUgb3JkZXIgdGhleSBvY2N1ciBpbiBgY29sbGVjdGlvbmAuIFRoZSBjb3JyZXNwb25kaW5nXG4gICAgICogdmFsdWUgb2YgZWFjaCBrZXkgaXMgYW4gYXJyYXkgb2YgZWxlbWVudHMgcmVzcG9uc2libGUgZm9yIGdlbmVyYXRpbmcgdGhlXG4gICAgICoga2V5LiBUaGUgaXRlcmF0ZWUgaXMgaW52b2tlZCB3aXRoIG9uZSBhcmd1bWVudDogKHZhbHVlKS5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAwLjEuMFxuICAgICAqIEBjYXRlZ29yeSBDb2xsZWN0aW9uXG4gICAgICogQHBhcmFtIHtBcnJheXxPYmplY3R9IGNvbGxlY3Rpb24gVGhlIGNvbGxlY3Rpb24gdG8gaXRlcmF0ZSBvdmVyLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtpdGVyYXRlZT1fLmlkZW50aXR5XSBUaGUgaXRlcmF0ZWUgdG8gdHJhbnNmb3JtIGtleXMuXG4gICAgICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyB0aGUgY29tcG9zZWQgYWdncmVnYXRlIG9iamVjdC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5ncm91cEJ5KFs2LjEsIDQuMiwgNi4zXSwgTWF0aC5mbG9vcik7XG4gICAgICogLy8gPT4geyAnNCc6IFs0LjJdLCAnNic6IFs2LjEsIDYuM10gfVxuICAgICAqXG4gICAgICogLy8gVGhlIGBfLnByb3BlcnR5YCBpdGVyYXRlZSBzaG9ydGhhbmQuXG4gICAgICogXy5ncm91cEJ5KFsnb25lJywgJ3R3bycsICd0aHJlZSddLCAnbGVuZ3RoJyk7XG4gICAgICogLy8gPT4geyAnMyc6IFsnb25lJywgJ3R3byddLCAnNSc6IFsndGhyZWUnXSB9XG4gICAgICovXG4gICAgdmFyIGdyb3VwQnkgPSBjcmVhdGVBZ2dyZWdhdG9yKGZ1bmN0aW9uKHJlc3VsdCwgdmFsdWUsIGtleSkge1xuICAgICAgaWYgKGhhc093blByb3BlcnR5LmNhbGwocmVzdWx0LCBrZXkpKSB7XG4gICAgICAgIHJlc3VsdFtrZXldLnB1c2godmFsdWUpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgYmFzZUFzc2lnblZhbHVlKHJlc3VsdCwga2V5LCBbdmFsdWVdKTtcbiAgICAgIH1cbiAgICB9KTtcblxuICAgIC8qKlxuICAgICAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIGluIGBjb2xsZWN0aW9uYC4gSWYgYGNvbGxlY3Rpb25gIGlzIGEgc3RyaW5nLCBpdCdzXG4gICAgICogY2hlY2tlZCBmb3IgYSBzdWJzdHJpbmcgb2YgYHZhbHVlYCwgb3RoZXJ3aXNlXG4gICAgICogW2BTYW1lVmFsdWVaZXJvYF0oaHR0cDovL2VjbWEtaW50ZXJuYXRpb25hbC5vcmcvZWNtYS0yNjIvNy4wLyNzZWMtc2FtZXZhbHVlemVybylcbiAgICAgKiBpcyB1c2VkIGZvciBlcXVhbGl0eSBjb21wYXJpc29ucy4gSWYgYGZyb21JbmRleGAgaXMgbmVnYXRpdmUsIGl0J3MgdXNlZCBhc1xuICAgICAqIHRoZSBvZmZzZXQgZnJvbSB0aGUgZW5kIG9mIGBjb2xsZWN0aW9uYC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAwLjEuMFxuICAgICAqIEBjYXRlZ29yeSBDb2xsZWN0aW9uXG4gICAgICogQHBhcmFtIHtBcnJheXxPYmplY3R8c3RyaW5nfSBjb2xsZWN0aW9uIFRoZSBjb2xsZWN0aW9uIHRvIGluc3BlY3QuXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gc2VhcmNoIGZvci5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gW2Zyb21JbmRleD0wXSBUaGUgaW5kZXggdG8gc2VhcmNoIGZyb20uXG4gICAgICogQHBhcmFtLSB7T2JqZWN0fSBbZ3VhcmRdIEVuYWJsZXMgdXNlIGFzIGFuIGl0ZXJhdGVlIGZvciBtZXRob2RzIGxpa2UgYF8ucmVkdWNlYC5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBmb3VuZCwgZWxzZSBgZmFsc2VgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLmluY2x1ZGVzKFsxLCAyLCAzXSwgMSk7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqXG4gICAgICogXy5pbmNsdWRlcyhbMSwgMiwgM10sIDEsIDIpO1xuICAgICAqIC8vID0+IGZhbHNlXG4gICAgICpcbiAgICAgKiBfLmluY2x1ZGVzKHsgJ2EnOiAxLCAnYic6IDIgfSwgMSk7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqXG4gICAgICogXy5pbmNsdWRlcygnYWJjZCcsICdiYycpO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBpbmNsdWRlcyhjb2xsZWN0aW9uLCB2YWx1ZSwgZnJvbUluZGV4LCBndWFyZCkge1xuICAgICAgY29sbGVjdGlvbiA9IGlzQXJyYXlMaWtlKGNvbGxlY3Rpb24pID8gY29sbGVjdGlvbiA6IHZhbHVlcyhjb2xsZWN0aW9uKTtcbiAgICAgIGZyb21JbmRleCA9IChmcm9tSW5kZXggJiYgIWd1YXJkKSA/IHRvSW50ZWdlcihmcm9tSW5kZXgpIDogMDtcblxuICAgICAgdmFyIGxlbmd0aCA9IGNvbGxlY3Rpb24ubGVuZ3RoO1xuICAgICAgaWYgKGZyb21JbmRleCA8IDApIHtcbiAgICAgICAgZnJvbUluZGV4ID0gbmF0aXZlTWF4KGxlbmd0aCArIGZyb21JbmRleCwgMCk7XG4gICAgICB9XG4gICAgICByZXR1cm4gaXNTdHJpbmcoY29sbGVjdGlvbilcbiAgICAgICAgPyAoZnJvbUluZGV4IDw9IGxlbmd0aCAmJiBjb2xsZWN0aW9uLmluZGV4T2YodmFsdWUsIGZyb21JbmRleCkgPiAtMSlcbiAgICAgICAgOiAoISFsZW5ndGggJiYgYmFzZUluZGV4T2YoY29sbGVjdGlvbiwgdmFsdWUsIGZyb21JbmRleCkgPiAtMSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogSW52b2tlcyB0aGUgbWV0aG9kIGF0IGBwYXRoYCBvZiBlYWNoIGVsZW1lbnQgaW4gYGNvbGxlY3Rpb25gLCByZXR1cm5pbmdcbiAgICAgKiBhbiBhcnJheSBvZiB0aGUgcmVzdWx0cyBvZiBlYWNoIGludm9rZWQgbWV0aG9kLiBBbnkgYWRkaXRpb25hbCBhcmd1bWVudHNcbiAgICAgKiBhcmUgcHJvdmlkZWQgdG8gZWFjaCBpbnZva2VkIG1ldGhvZC4gSWYgYHBhdGhgIGlzIGEgZnVuY3Rpb24sIGl0J3MgaW52b2tlZFxuICAgICAqIGZvciwgYW5kIGB0aGlzYCBib3VuZCB0bywgZWFjaCBlbGVtZW50IGluIGBjb2xsZWN0aW9uYC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjAuMFxuICAgICAqIEBjYXRlZ29yeSBDb2xsZWN0aW9uXG4gICAgICogQHBhcmFtIHtBcnJheXxPYmplY3R9IGNvbGxlY3Rpb24gVGhlIGNvbGxlY3Rpb24gdG8gaXRlcmF0ZSBvdmVyLlxuICAgICAqIEBwYXJhbSB7QXJyYXl8RnVuY3Rpb258c3RyaW5nfSBwYXRoIFRoZSBwYXRoIG9mIHRoZSBtZXRob2QgdG8gaW52b2tlIG9yXG4gICAgICogIHRoZSBmdW5jdGlvbiBpbnZva2VkIHBlciBpdGVyYXRpb24uXG4gICAgICogQHBhcmFtIHsuLi4qfSBbYXJnc10gVGhlIGFyZ3VtZW50cyB0byBpbnZva2UgZWFjaCBtZXRob2Qgd2l0aC5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIGFycmF5IG9mIHJlc3VsdHMuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uaW52b2tlTWFwKFtbNSwgMSwgN10sIFszLCAyLCAxXV0sICdzb3J0Jyk7XG4gICAgICogLy8gPT4gW1sxLCA1LCA3XSwgWzEsIDIsIDNdXVxuICAgICAqXG4gICAgICogXy5pbnZva2VNYXAoWzEyMywgNDU2XSwgU3RyaW5nLnByb3RvdHlwZS5zcGxpdCwgJycpO1xuICAgICAqIC8vID0+IFtbJzEnLCAnMicsICczJ10sIFsnNCcsICc1JywgJzYnXV1cbiAgICAgKi9cbiAgICB2YXIgaW52b2tlTWFwID0gYmFzZVJlc3QoZnVuY3Rpb24oY29sbGVjdGlvbiwgcGF0aCwgYXJncykge1xuICAgICAgdmFyIGluZGV4ID0gLTEsXG4gICAgICAgICAgaXNGdW5jID0gdHlwZW9mIHBhdGggPT0gJ2Z1bmN0aW9uJyxcbiAgICAgICAgICByZXN1bHQgPSBpc0FycmF5TGlrZShjb2xsZWN0aW9uKSA/IEFycmF5KGNvbGxlY3Rpb24ubGVuZ3RoKSA6IFtdO1xuXG4gICAgICBiYXNlRWFjaChjb2xsZWN0aW9uLCBmdW5jdGlvbih2YWx1ZSkge1xuICAgICAgICByZXN1bHRbKytpbmRleF0gPSBpc0Z1bmMgPyBhcHBseShwYXRoLCB2YWx1ZSwgYXJncykgOiBiYXNlSW52b2tlKHZhbHVlLCBwYXRoLCBhcmdzKTtcbiAgICAgIH0pO1xuICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9KTtcblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYW4gb2JqZWN0IGNvbXBvc2VkIG9mIGtleXMgZ2VuZXJhdGVkIGZyb20gdGhlIHJlc3VsdHMgb2YgcnVubmluZ1xuICAgICAqIGVhY2ggZWxlbWVudCBvZiBgY29sbGVjdGlvbmAgdGhydSBgaXRlcmF0ZWVgLiBUaGUgY29ycmVzcG9uZGluZyB2YWx1ZSBvZlxuICAgICAqIGVhY2gga2V5IGlzIHRoZSBsYXN0IGVsZW1lbnQgcmVzcG9uc2libGUgZm9yIGdlbmVyYXRpbmcgdGhlIGtleS4gVGhlXG4gICAgICogaXRlcmF0ZWUgaXMgaW52b2tlZCB3aXRoIG9uZSBhcmd1bWVudDogKHZhbHVlKS5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjAuMFxuICAgICAqIEBjYXRlZ29yeSBDb2xsZWN0aW9uXG4gICAgICogQHBhcmFtIHtBcnJheXxPYmplY3R9IGNvbGxlY3Rpb24gVGhlIGNvbGxlY3Rpb24gdG8gaXRlcmF0ZSBvdmVyLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtpdGVyYXRlZT1fLmlkZW50aXR5XSBUaGUgaXRlcmF0ZWUgdG8gdHJhbnNmb3JtIGtleXMuXG4gICAgICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyB0aGUgY29tcG9zZWQgYWdncmVnYXRlIG9iamVjdC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIGFycmF5ID0gW1xuICAgICAqICAgeyAnZGlyJzogJ2xlZnQnLCAnY29kZSc6IDk3IH0sXG4gICAgICogICB7ICdkaXInOiAncmlnaHQnLCAnY29kZSc6IDEwMCB9XG4gICAgICogXTtcbiAgICAgKlxuICAgICAqIF8ua2V5QnkoYXJyYXksIGZ1bmN0aW9uKG8pIHtcbiAgICAgKiAgIHJldHVybiBTdHJpbmcuZnJvbUNoYXJDb2RlKG8uY29kZSk7XG4gICAgICogfSk7XG4gICAgICogLy8gPT4geyAnYSc6IHsgJ2Rpcic6ICdsZWZ0JywgJ2NvZGUnOiA5NyB9LCAnZCc6IHsgJ2Rpcic6ICdyaWdodCcsICdjb2RlJzogMTAwIH0gfVxuICAgICAqXG4gICAgICogXy5rZXlCeShhcnJheSwgJ2RpcicpO1xuICAgICAqIC8vID0+IHsgJ2xlZnQnOiB7ICdkaXInOiAnbGVmdCcsICdjb2RlJzogOTcgfSwgJ3JpZ2h0JzogeyAnZGlyJzogJ3JpZ2h0JywgJ2NvZGUnOiAxMDAgfSB9XG4gICAgICovXG4gICAgdmFyIGtleUJ5ID0gY3JlYXRlQWdncmVnYXRvcihmdW5jdGlvbihyZXN1bHQsIHZhbHVlLCBrZXkpIHtcbiAgICAgIGJhc2VBc3NpZ25WYWx1ZShyZXN1bHQsIGtleSwgdmFsdWUpO1xuICAgIH0pO1xuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhbiBhcnJheSBvZiB2YWx1ZXMgYnkgcnVubmluZyBlYWNoIGVsZW1lbnQgaW4gYGNvbGxlY3Rpb25gIHRocnVcbiAgICAgKiBgaXRlcmF0ZWVgLiBUaGUgaXRlcmF0ZWUgaXMgaW52b2tlZCB3aXRoIHRocmVlIGFyZ3VtZW50czpcbiAgICAgKiAodmFsdWUsIGluZGV4fGtleSwgY29sbGVjdGlvbikuXG4gICAgICpcbiAgICAgKiBNYW55IGxvZGFzaCBtZXRob2RzIGFyZSBndWFyZGVkIHRvIHdvcmsgYXMgaXRlcmF0ZWVzIGZvciBtZXRob2RzIGxpa2VcbiAgICAgKiBgXy5ldmVyeWAsIGBfLmZpbHRlcmAsIGBfLm1hcGAsIGBfLm1hcFZhbHVlc2AsIGBfLnJlamVjdGAsIGFuZCBgXy5zb21lYC5cbiAgICAgKlxuICAgICAqIFRoZSBndWFyZGVkIG1ldGhvZHMgYXJlOlxuICAgICAqIGBhcnlgLCBgY2h1bmtgLCBgY3VycnlgLCBgY3VycnlSaWdodGAsIGBkcm9wYCwgYGRyb3BSaWdodGAsIGBldmVyeWAsXG4gICAgICogYGZpbGxgLCBgaW52ZXJ0YCwgYHBhcnNlSW50YCwgYHJhbmRvbWAsIGByYW5nZWAsIGByYW5nZVJpZ2h0YCwgYHJlcGVhdGAsXG4gICAgICogYHNhbXBsZVNpemVgLCBgc2xpY2VgLCBgc29tZWAsIGBzb3J0QnlgLCBgc3BsaXRgLCBgdGFrZWAsIGB0YWtlUmlnaHRgLFxuICAgICAqIGB0ZW1wbGF0ZWAsIGB0cmltYCwgYHRyaW1FbmRgLCBgdHJpbVN0YXJ0YCwgYW5kIGB3b3Jkc2BcbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAwLjEuMFxuICAgICAqIEBjYXRlZ29yeSBDb2xsZWN0aW9uXG4gICAgICogQHBhcmFtIHtBcnJheXxPYmplY3R9IGNvbGxlY3Rpb24gVGhlIGNvbGxlY3Rpb24gdG8gaXRlcmF0ZSBvdmVyLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtpdGVyYXRlZT1fLmlkZW50aXR5XSBUaGUgZnVuY3Rpb24gaW52b2tlZCBwZXIgaXRlcmF0aW9uLlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgbmV3IG1hcHBlZCBhcnJheS5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogZnVuY3Rpb24gc3F1YXJlKG4pIHtcbiAgICAgKiAgIHJldHVybiBuICogbjtcbiAgICAgKiB9XG4gICAgICpcbiAgICAgKiBfLm1hcChbNCwgOF0sIHNxdWFyZSk7XG4gICAgICogLy8gPT4gWzE2LCA2NF1cbiAgICAgKlxuICAgICAqIF8ubWFwKHsgJ2EnOiA0LCAnYic6IDggfSwgc3F1YXJlKTtcbiAgICAgKiAvLyA9PiBbMTYsIDY0XSAoaXRlcmF0aW9uIG9yZGVyIGlzIG5vdCBndWFyYW50ZWVkKVxuICAgICAqXG4gICAgICogdmFyIHVzZXJzID0gW1xuICAgICAqICAgeyAndXNlcic6ICdiYXJuZXknIH0sXG4gICAgICogICB7ICd1c2VyJzogJ2ZyZWQnIH1cbiAgICAgKiBdO1xuICAgICAqXG4gICAgICogLy8gVGhlIGBfLnByb3BlcnR5YCBpdGVyYXRlZSBzaG9ydGhhbmQuXG4gICAgICogXy5tYXAodXNlcnMsICd1c2VyJyk7XG4gICAgICogLy8gPT4gWydiYXJuZXknLCAnZnJlZCddXG4gICAgICovXG4gICAgZnVuY3Rpb24gbWFwKGNvbGxlY3Rpb24sIGl0ZXJhdGVlKSB7XG4gICAgICB2YXIgZnVuYyA9IGlzQXJyYXkoY29sbGVjdGlvbikgPyBhcnJheU1hcCA6IGJhc2VNYXA7XG4gICAgICByZXR1cm4gZnVuYyhjb2xsZWN0aW9uLCBnZXRJdGVyYXRlZShpdGVyYXRlZSwgMykpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoaXMgbWV0aG9kIGlzIGxpa2UgYF8uc29ydEJ5YCBleGNlcHQgdGhhdCBpdCBhbGxvd3Mgc3BlY2lmeWluZyB0aGUgc29ydFxuICAgICAqIG9yZGVycyBvZiB0aGUgaXRlcmF0ZWVzIHRvIHNvcnQgYnkuIElmIGBvcmRlcnNgIGlzIHVuc3BlY2lmaWVkLCBhbGwgdmFsdWVzXG4gICAgICogYXJlIHNvcnRlZCBpbiBhc2NlbmRpbmcgb3JkZXIuIE90aGVyd2lzZSwgc3BlY2lmeSBhbiBvcmRlciBvZiBcImRlc2NcIiBmb3JcbiAgICAgKiBkZXNjZW5kaW5nIG9yIFwiYXNjXCIgZm9yIGFzY2VuZGluZyBzb3J0IG9yZGVyIG9mIGNvcnJlc3BvbmRpbmcgdmFsdWVzLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMC4wXG4gICAgICogQGNhdGVnb3J5IENvbGxlY3Rpb25cbiAgICAgKiBAcGFyYW0ge0FycmF5fE9iamVjdH0gY29sbGVjdGlvbiBUaGUgY29sbGVjdGlvbiB0byBpdGVyYXRlIG92ZXIuXG4gICAgICogQHBhcmFtIHtBcnJheVtdfEZ1bmN0aW9uW118T2JqZWN0W118c3RyaW5nW119IFtpdGVyYXRlZXM9W18uaWRlbnRpdHldXVxuICAgICAqICBUaGUgaXRlcmF0ZWVzIHRvIHNvcnQgYnkuXG4gICAgICogQHBhcmFtIHtzdHJpbmdbXX0gW29yZGVyc10gVGhlIHNvcnQgb3JkZXJzIG9mIGBpdGVyYXRlZXNgLlxuICAgICAqIEBwYXJhbS0ge09iamVjdH0gW2d1YXJkXSBFbmFibGVzIHVzZSBhcyBhbiBpdGVyYXRlZSBmb3IgbWV0aG9kcyBsaWtlIGBfLnJlZHVjZWAuXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBuZXcgc29ydGVkIGFycmF5LlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgdXNlcnMgPSBbXG4gICAgICogICB7ICd1c2VyJzogJ2ZyZWQnLCAgICdhZ2UnOiA0OCB9LFxuICAgICAqICAgeyAndXNlcic6ICdiYXJuZXknLCAnYWdlJzogMzQgfSxcbiAgICAgKiAgIHsgJ3VzZXInOiAnZnJlZCcsICAgJ2FnZSc6IDQwIH0sXG4gICAgICogICB7ICd1c2VyJzogJ2Jhcm5leScsICdhZ2UnOiAzNiB9XG4gICAgICogXTtcbiAgICAgKlxuICAgICAqIC8vIFNvcnQgYnkgYHVzZXJgIGluIGFzY2VuZGluZyBvcmRlciBhbmQgYnkgYGFnZWAgaW4gZGVzY2VuZGluZyBvcmRlci5cbiAgICAgKiBfLm9yZGVyQnkodXNlcnMsIFsndXNlcicsICdhZ2UnXSwgWydhc2MnLCAnZGVzYyddKTtcbiAgICAgKiAvLyA9PiBvYmplY3RzIGZvciBbWydiYXJuZXknLCAzNl0sIFsnYmFybmV5JywgMzRdLCBbJ2ZyZWQnLCA0OF0sIFsnZnJlZCcsIDQwXV1cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBvcmRlckJ5KGNvbGxlY3Rpb24sIGl0ZXJhdGVlcywgb3JkZXJzLCBndWFyZCkge1xuICAgICAgaWYgKGNvbGxlY3Rpb24gPT0gbnVsbCkge1xuICAgICAgICByZXR1cm4gW107XG4gICAgICB9XG4gICAgICBpZiAoIWlzQXJyYXkoaXRlcmF0ZWVzKSkge1xuICAgICAgICBpdGVyYXRlZXMgPSBpdGVyYXRlZXMgPT0gbnVsbCA/IFtdIDogW2l0ZXJhdGVlc107XG4gICAgICB9XG4gICAgICBvcmRlcnMgPSBndWFyZCA/IHVuZGVmaW5lZCA6IG9yZGVycztcbiAgICAgIGlmICghaXNBcnJheShvcmRlcnMpKSB7XG4gICAgICAgIG9yZGVycyA9IG9yZGVycyA9PSBudWxsID8gW10gOiBbb3JkZXJzXTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBiYXNlT3JkZXJCeShjb2xsZWN0aW9uLCBpdGVyYXRlZXMsIG9yZGVycyk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhbiBhcnJheSBvZiBlbGVtZW50cyBzcGxpdCBpbnRvIHR3byBncm91cHMsIHRoZSBmaXJzdCBvZiB3aGljaFxuICAgICAqIGNvbnRhaW5zIGVsZW1lbnRzIGBwcmVkaWNhdGVgIHJldHVybnMgdHJ1dGh5IGZvciwgdGhlIHNlY29uZCBvZiB3aGljaFxuICAgICAqIGNvbnRhaW5zIGVsZW1lbnRzIGBwcmVkaWNhdGVgIHJldHVybnMgZmFsc2V5IGZvci4gVGhlIHByZWRpY2F0ZSBpc1xuICAgICAqIGludm9rZWQgd2l0aCBvbmUgYXJndW1lbnQ6ICh2YWx1ZSkuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMy4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgQ29sbGVjdGlvblxuICAgICAqIEBwYXJhbSB7QXJyYXl8T2JqZWN0fSBjb2xsZWN0aW9uIFRoZSBjb2xsZWN0aW9uIHRvIGl0ZXJhdGUgb3Zlci5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbcHJlZGljYXRlPV8uaWRlbnRpdHldIFRoZSBmdW5jdGlvbiBpbnZva2VkIHBlciBpdGVyYXRpb24uXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBhcnJheSBvZiBncm91cGVkIGVsZW1lbnRzLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgdXNlcnMgPSBbXG4gICAgICogICB7ICd1c2VyJzogJ2Jhcm5leScsICAnYWdlJzogMzYsICdhY3RpdmUnOiBmYWxzZSB9LFxuICAgICAqICAgeyAndXNlcic6ICdmcmVkJywgICAgJ2FnZSc6IDQwLCAnYWN0aXZlJzogdHJ1ZSB9LFxuICAgICAqICAgeyAndXNlcic6ICdwZWJibGVzJywgJ2FnZSc6IDEsICAnYWN0aXZlJzogZmFsc2UgfVxuICAgICAqIF07XG4gICAgICpcbiAgICAgKiBfLnBhcnRpdGlvbih1c2VycywgZnVuY3Rpb24obykgeyByZXR1cm4gby5hY3RpdmU7IH0pO1xuICAgICAqIC8vID0+IG9iamVjdHMgZm9yIFtbJ2ZyZWQnXSwgWydiYXJuZXknLCAncGViYmxlcyddXVxuICAgICAqXG4gICAgICogLy8gVGhlIGBfLm1hdGNoZXNgIGl0ZXJhdGVlIHNob3J0aGFuZC5cbiAgICAgKiBfLnBhcnRpdGlvbih1c2VycywgeyAnYWdlJzogMSwgJ2FjdGl2ZSc6IGZhbHNlIH0pO1xuICAgICAqIC8vID0+IG9iamVjdHMgZm9yIFtbJ3BlYmJsZXMnXSwgWydiYXJuZXknLCAnZnJlZCddXVxuICAgICAqXG4gICAgICogLy8gVGhlIGBfLm1hdGNoZXNQcm9wZXJ0eWAgaXRlcmF0ZWUgc2hvcnRoYW5kLlxuICAgICAqIF8ucGFydGl0aW9uKHVzZXJzLCBbJ2FjdGl2ZScsIGZhbHNlXSk7XG4gICAgICogLy8gPT4gb2JqZWN0cyBmb3IgW1snYmFybmV5JywgJ3BlYmJsZXMnXSwgWydmcmVkJ11dXG4gICAgICpcbiAgICAgKiAvLyBUaGUgYF8ucHJvcGVydHlgIGl0ZXJhdGVlIHNob3J0aGFuZC5cbiAgICAgKiBfLnBhcnRpdGlvbih1c2VycywgJ2FjdGl2ZScpO1xuICAgICAqIC8vID0+IG9iamVjdHMgZm9yIFtbJ2ZyZWQnXSwgWydiYXJuZXknLCAncGViYmxlcyddXVxuICAgICAqL1xuICAgIHZhciBwYXJ0aXRpb24gPSBjcmVhdGVBZ2dyZWdhdG9yKGZ1bmN0aW9uKHJlc3VsdCwgdmFsdWUsIGtleSkge1xuICAgICAgcmVzdWx0W2tleSA/IDAgOiAxXS5wdXNoKHZhbHVlKTtcbiAgICB9LCBmdW5jdGlvbigpIHsgcmV0dXJuIFtbXSwgW11dOyB9KTtcblxuICAgIC8qKlxuICAgICAqIFJlZHVjZXMgYGNvbGxlY3Rpb25gIHRvIGEgdmFsdWUgd2hpY2ggaXMgdGhlIGFjY3VtdWxhdGVkIHJlc3VsdCBvZiBydW5uaW5nXG4gICAgICogZWFjaCBlbGVtZW50IGluIGBjb2xsZWN0aW9uYCB0aHJ1IGBpdGVyYXRlZWAsIHdoZXJlIGVhY2ggc3VjY2Vzc2l2ZVxuICAgICAqIGludm9jYXRpb24gaXMgc3VwcGxpZWQgdGhlIHJldHVybiB2YWx1ZSBvZiB0aGUgcHJldmlvdXMuIElmIGBhY2N1bXVsYXRvcmBcbiAgICAgKiBpcyBub3QgZ2l2ZW4sIHRoZSBmaXJzdCBlbGVtZW50IG9mIGBjb2xsZWN0aW9uYCBpcyB1c2VkIGFzIHRoZSBpbml0aWFsXG4gICAgICogdmFsdWUuIFRoZSBpdGVyYXRlZSBpcyBpbnZva2VkIHdpdGggZm91ciBhcmd1bWVudHM6XG4gICAgICogKGFjY3VtdWxhdG9yLCB2YWx1ZSwgaW5kZXh8a2V5LCBjb2xsZWN0aW9uKS5cbiAgICAgKlxuICAgICAqIE1hbnkgbG9kYXNoIG1ldGhvZHMgYXJlIGd1YXJkZWQgdG8gd29yayBhcyBpdGVyYXRlZXMgZm9yIG1ldGhvZHMgbGlrZVxuICAgICAqIGBfLnJlZHVjZWAsIGBfLnJlZHVjZVJpZ2h0YCwgYW5kIGBfLnRyYW5zZm9ybWAuXG4gICAgICpcbiAgICAgKiBUaGUgZ3VhcmRlZCBtZXRob2RzIGFyZTpcbiAgICAgKiBgYXNzaWduYCwgYGRlZmF1bHRzYCwgYGRlZmF1bHRzRGVlcGAsIGBpbmNsdWRlc2AsIGBtZXJnZWAsIGBvcmRlckJ5YCxcbiAgICAgKiBhbmQgYHNvcnRCeWBcbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAwLjEuMFxuICAgICAqIEBjYXRlZ29yeSBDb2xsZWN0aW9uXG4gICAgICogQHBhcmFtIHtBcnJheXxPYmplY3R9IGNvbGxlY3Rpb24gVGhlIGNvbGxlY3Rpb24gdG8gaXRlcmF0ZSBvdmVyLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtpdGVyYXRlZT1fLmlkZW50aXR5XSBUaGUgZnVuY3Rpb24gaW52b2tlZCBwZXIgaXRlcmF0aW9uLlxuICAgICAqIEBwYXJhbSB7Kn0gW2FjY3VtdWxhdG9yXSBUaGUgaW5pdGlhbCB2YWx1ZS5cbiAgICAgKiBAcmV0dXJucyB7Kn0gUmV0dXJucyB0aGUgYWNjdW11bGF0ZWQgdmFsdWUuXG4gICAgICogQHNlZSBfLnJlZHVjZVJpZ2h0XG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8ucmVkdWNlKFsxLCAyXSwgZnVuY3Rpb24oc3VtLCBuKSB7XG4gICAgICogICByZXR1cm4gc3VtICsgbjtcbiAgICAgKiB9LCAwKTtcbiAgICAgKiAvLyA9PiAzXG4gICAgICpcbiAgICAgKiBfLnJlZHVjZSh7ICdhJzogMSwgJ2InOiAyLCAnYyc6IDEgfSwgZnVuY3Rpb24ocmVzdWx0LCB2YWx1ZSwga2V5KSB7XG4gICAgICogICAocmVzdWx0W3ZhbHVlXSB8fCAocmVzdWx0W3ZhbHVlXSA9IFtdKSkucHVzaChrZXkpO1xuICAgICAqICAgcmV0dXJuIHJlc3VsdDtcbiAgICAgKiB9LCB7fSk7XG4gICAgICogLy8gPT4geyAnMSc6IFsnYScsICdjJ10sICcyJzogWydiJ10gfSAoaXRlcmF0aW9uIG9yZGVyIGlzIG5vdCBndWFyYW50ZWVkKVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHJlZHVjZShjb2xsZWN0aW9uLCBpdGVyYXRlZSwgYWNjdW11bGF0b3IpIHtcbiAgICAgIHZhciBmdW5jID0gaXNBcnJheShjb2xsZWN0aW9uKSA/IGFycmF5UmVkdWNlIDogYmFzZVJlZHVjZSxcbiAgICAgICAgICBpbml0QWNjdW0gPSBhcmd1bWVudHMubGVuZ3RoIDwgMztcblxuICAgICAgcmV0dXJuIGZ1bmMoY29sbGVjdGlvbiwgZ2V0SXRlcmF0ZWUoaXRlcmF0ZWUsIDQpLCBhY2N1bXVsYXRvciwgaW5pdEFjY3VtLCBiYXNlRWFjaCk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhpcyBtZXRob2QgaXMgbGlrZSBgXy5yZWR1Y2VgIGV4Y2VwdCB0aGF0IGl0IGl0ZXJhdGVzIG92ZXIgZWxlbWVudHMgb2ZcbiAgICAgKiBgY29sbGVjdGlvbmAgZnJvbSByaWdodCB0byBsZWZ0LlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDAuMS4wXG4gICAgICogQGNhdGVnb3J5IENvbGxlY3Rpb25cbiAgICAgKiBAcGFyYW0ge0FycmF5fE9iamVjdH0gY29sbGVjdGlvbiBUaGUgY29sbGVjdGlvbiB0byBpdGVyYXRlIG92ZXIuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gW2l0ZXJhdGVlPV8uaWRlbnRpdHldIFRoZSBmdW5jdGlvbiBpbnZva2VkIHBlciBpdGVyYXRpb24uXG4gICAgICogQHBhcmFtIHsqfSBbYWNjdW11bGF0b3JdIFRoZSBpbml0aWFsIHZhbHVlLlxuICAgICAqIEByZXR1cm5zIHsqfSBSZXR1cm5zIHRoZSBhY2N1bXVsYXRlZCB2YWx1ZS5cbiAgICAgKiBAc2VlIF8ucmVkdWNlXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciBhcnJheSA9IFtbMCwgMV0sIFsyLCAzXSwgWzQsIDVdXTtcbiAgICAgKlxuICAgICAqIF8ucmVkdWNlUmlnaHQoYXJyYXksIGZ1bmN0aW9uKGZsYXR0ZW5lZCwgb3RoZXIpIHtcbiAgICAgKiAgIHJldHVybiBmbGF0dGVuZWQuY29uY2F0KG90aGVyKTtcbiAgICAgKiB9LCBbXSk7XG4gICAgICogLy8gPT4gWzQsIDUsIDIsIDMsIDAsIDFdXG4gICAgICovXG4gICAgZnVuY3Rpb24gcmVkdWNlUmlnaHQoY29sbGVjdGlvbiwgaXRlcmF0ZWUsIGFjY3VtdWxhdG9yKSB7XG4gICAgICB2YXIgZnVuYyA9IGlzQXJyYXkoY29sbGVjdGlvbikgPyBhcnJheVJlZHVjZVJpZ2h0IDogYmFzZVJlZHVjZSxcbiAgICAgICAgICBpbml0QWNjdW0gPSBhcmd1bWVudHMubGVuZ3RoIDwgMztcblxuICAgICAgcmV0dXJuIGZ1bmMoY29sbGVjdGlvbiwgZ2V0SXRlcmF0ZWUoaXRlcmF0ZWUsIDQpLCBhY2N1bXVsYXRvciwgaW5pdEFjY3VtLCBiYXNlRWFjaFJpZ2h0KTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGUgb3Bwb3NpdGUgb2YgYF8uZmlsdGVyYDsgdGhpcyBtZXRob2QgcmV0dXJucyB0aGUgZWxlbWVudHMgb2YgYGNvbGxlY3Rpb25gXG4gICAgICogdGhhdCBgcHJlZGljYXRlYCBkb2VzICoqbm90KiogcmV0dXJuIHRydXRoeSBmb3IuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMC4xLjBcbiAgICAgKiBAY2F0ZWdvcnkgQ29sbGVjdGlvblxuICAgICAqIEBwYXJhbSB7QXJyYXl8T2JqZWN0fSBjb2xsZWN0aW9uIFRoZSBjb2xsZWN0aW9uIHRvIGl0ZXJhdGUgb3Zlci5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbcHJlZGljYXRlPV8uaWRlbnRpdHldIFRoZSBmdW5jdGlvbiBpbnZva2VkIHBlciBpdGVyYXRpb24uXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBuZXcgZmlsdGVyZWQgYXJyYXkuXG4gICAgICogQHNlZSBfLmZpbHRlclxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgdXNlcnMgPSBbXG4gICAgICogICB7ICd1c2VyJzogJ2Jhcm5leScsICdhZ2UnOiAzNiwgJ2FjdGl2ZSc6IGZhbHNlIH0sXG4gICAgICogICB7ICd1c2VyJzogJ2ZyZWQnLCAgICdhZ2UnOiA0MCwgJ2FjdGl2ZSc6IHRydWUgfVxuICAgICAqIF07XG4gICAgICpcbiAgICAgKiBfLnJlamVjdCh1c2VycywgZnVuY3Rpb24obykgeyByZXR1cm4gIW8uYWN0aXZlOyB9KTtcbiAgICAgKiAvLyA9PiBvYmplY3RzIGZvciBbJ2ZyZWQnXVxuICAgICAqXG4gICAgICogLy8gVGhlIGBfLm1hdGNoZXNgIGl0ZXJhdGVlIHNob3J0aGFuZC5cbiAgICAgKiBfLnJlamVjdCh1c2VycywgeyAnYWdlJzogNDAsICdhY3RpdmUnOiB0cnVlIH0pO1xuICAgICAqIC8vID0+IG9iamVjdHMgZm9yIFsnYmFybmV5J11cbiAgICAgKlxuICAgICAqIC8vIFRoZSBgXy5tYXRjaGVzUHJvcGVydHlgIGl0ZXJhdGVlIHNob3J0aGFuZC5cbiAgICAgKiBfLnJlamVjdCh1c2VycywgWydhY3RpdmUnLCBmYWxzZV0pO1xuICAgICAqIC8vID0+IG9iamVjdHMgZm9yIFsnZnJlZCddXG4gICAgICpcbiAgICAgKiAvLyBUaGUgYF8ucHJvcGVydHlgIGl0ZXJhdGVlIHNob3J0aGFuZC5cbiAgICAgKiBfLnJlamVjdCh1c2VycywgJ2FjdGl2ZScpO1xuICAgICAqIC8vID0+IG9iamVjdHMgZm9yIFsnYmFybmV5J11cbiAgICAgKi9cbiAgICBmdW5jdGlvbiByZWplY3QoY29sbGVjdGlvbiwgcHJlZGljYXRlKSB7XG4gICAgICB2YXIgZnVuYyA9IGlzQXJyYXkoY29sbGVjdGlvbikgPyBhcnJheUZpbHRlciA6IGJhc2VGaWx0ZXI7XG4gICAgICByZXR1cm4gZnVuYyhjb2xsZWN0aW9uLCBuZWdhdGUoZ2V0SXRlcmF0ZWUocHJlZGljYXRlLCAzKSkpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEdldHMgYSByYW5kb20gZWxlbWVudCBmcm9tIGBjb2xsZWN0aW9uYC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAyLjAuMFxuICAgICAqIEBjYXRlZ29yeSBDb2xsZWN0aW9uXG4gICAgICogQHBhcmFtIHtBcnJheXxPYmplY3R9IGNvbGxlY3Rpb24gVGhlIGNvbGxlY3Rpb24gdG8gc2FtcGxlLlxuICAgICAqIEByZXR1cm5zIHsqfSBSZXR1cm5zIHRoZSByYW5kb20gZWxlbWVudC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5zYW1wbGUoWzEsIDIsIDMsIDRdKTtcbiAgICAgKiAvLyA9PiAyXG4gICAgICovXG4gICAgZnVuY3Rpb24gc2FtcGxlKGNvbGxlY3Rpb24pIHtcbiAgICAgIHZhciBmdW5jID0gaXNBcnJheShjb2xsZWN0aW9uKSA/IGFycmF5U2FtcGxlIDogYmFzZVNhbXBsZTtcbiAgICAgIHJldHVybiBmdW5jKGNvbGxlY3Rpb24pO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEdldHMgYG5gIHJhbmRvbSBlbGVtZW50cyBhdCB1bmlxdWUga2V5cyBmcm9tIGBjb2xsZWN0aW9uYCB1cCB0byB0aGVcbiAgICAgKiBzaXplIG9mIGBjb2xsZWN0aW9uYC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjAuMFxuICAgICAqIEBjYXRlZ29yeSBDb2xsZWN0aW9uXG4gICAgICogQHBhcmFtIHtBcnJheXxPYmplY3R9IGNvbGxlY3Rpb24gVGhlIGNvbGxlY3Rpb24gdG8gc2FtcGxlLlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBbbj0xXSBUaGUgbnVtYmVyIG9mIGVsZW1lbnRzIHRvIHNhbXBsZS5cbiAgICAgKiBAcGFyYW0tIHtPYmplY3R9IFtndWFyZF0gRW5hYmxlcyB1c2UgYXMgYW4gaXRlcmF0ZWUgZm9yIG1ldGhvZHMgbGlrZSBgXy5tYXBgLlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgcmFuZG9tIGVsZW1lbnRzLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLnNhbXBsZVNpemUoWzEsIDIsIDNdLCAyKTtcbiAgICAgKiAvLyA9PiBbMywgMV1cbiAgICAgKlxuICAgICAqIF8uc2FtcGxlU2l6ZShbMSwgMiwgM10sIDQpO1xuICAgICAqIC8vID0+IFsyLCAzLCAxXVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHNhbXBsZVNpemUoY29sbGVjdGlvbiwgbiwgZ3VhcmQpIHtcbiAgICAgIGlmICgoZ3VhcmQgPyBpc0l0ZXJhdGVlQ2FsbChjb2xsZWN0aW9uLCBuLCBndWFyZCkgOiBuID09PSB1bmRlZmluZWQpKSB7XG4gICAgICAgIG4gPSAxO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgbiA9IHRvSW50ZWdlcihuKTtcbiAgICAgIH1cbiAgICAgIHZhciBmdW5jID0gaXNBcnJheShjb2xsZWN0aW9uKSA/IGFycmF5U2FtcGxlU2l6ZSA6IGJhc2VTYW1wbGVTaXplO1xuICAgICAgcmV0dXJuIGZ1bmMoY29sbGVjdGlvbiwgbik7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhbiBhcnJheSBvZiBzaHVmZmxlZCB2YWx1ZXMsIHVzaW5nIGEgdmVyc2lvbiBvZiB0aGVcbiAgICAgKiBbRmlzaGVyLVlhdGVzIHNodWZmbGVdKGh0dHBzOi8vZW4ud2lraXBlZGlhLm9yZy93aWtpL0Zpc2hlci1ZYXRlc19zaHVmZmxlKS5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAwLjEuMFxuICAgICAqIEBjYXRlZ29yeSBDb2xsZWN0aW9uXG4gICAgICogQHBhcmFtIHtBcnJheXxPYmplY3R9IGNvbGxlY3Rpb24gVGhlIGNvbGxlY3Rpb24gdG8gc2h1ZmZsZS5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIG5ldyBzaHVmZmxlZCBhcnJheS5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5zaHVmZmxlKFsxLCAyLCAzLCA0XSk7XG4gICAgICogLy8gPT4gWzQsIDEsIDMsIDJdXG4gICAgICovXG4gICAgZnVuY3Rpb24gc2h1ZmZsZShjb2xsZWN0aW9uKSB7XG4gICAgICB2YXIgZnVuYyA9IGlzQXJyYXkoY29sbGVjdGlvbikgPyBhcnJheVNodWZmbGUgOiBiYXNlU2h1ZmZsZTtcbiAgICAgIHJldHVybiBmdW5jKGNvbGxlY3Rpb24pO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEdldHMgdGhlIHNpemUgb2YgYGNvbGxlY3Rpb25gIGJ5IHJldHVybmluZyBpdHMgbGVuZ3RoIGZvciBhcnJheS1saWtlXG4gICAgICogdmFsdWVzIG9yIHRoZSBudW1iZXIgb2Ygb3duIGVudW1lcmFibGUgc3RyaW5nIGtleWVkIHByb3BlcnRpZXMgZm9yIG9iamVjdHMuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMC4xLjBcbiAgICAgKiBAY2F0ZWdvcnkgQ29sbGVjdGlvblxuICAgICAqIEBwYXJhbSB7QXJyYXl8T2JqZWN0fHN0cmluZ30gY29sbGVjdGlvbiBUaGUgY29sbGVjdGlvbiB0byBpbnNwZWN0LlxuICAgICAqIEByZXR1cm5zIHtudW1iZXJ9IFJldHVybnMgdGhlIGNvbGxlY3Rpb24gc2l6ZS5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5zaXplKFsxLCAyLCAzXSk7XG4gICAgICogLy8gPT4gM1xuICAgICAqXG4gICAgICogXy5zaXplKHsgJ2EnOiAxLCAnYic6IDIgfSk7XG4gICAgICogLy8gPT4gMlxuICAgICAqXG4gICAgICogXy5zaXplKCdwZWJibGVzJyk7XG4gICAgICogLy8gPT4gN1xuICAgICAqL1xuICAgIGZ1bmN0aW9uIHNpemUoY29sbGVjdGlvbikge1xuICAgICAgaWYgKGNvbGxlY3Rpb24gPT0gbnVsbCkge1xuICAgICAgICByZXR1cm4gMDtcbiAgICAgIH1cbiAgICAgIGlmIChpc0FycmF5TGlrZShjb2xsZWN0aW9uKSkge1xuICAgICAgICByZXR1cm4gaXNTdHJpbmcoY29sbGVjdGlvbikgPyBzdHJpbmdTaXplKGNvbGxlY3Rpb24pIDogY29sbGVjdGlvbi5sZW5ndGg7XG4gICAgICB9XG4gICAgICB2YXIgdGFnID0gZ2V0VGFnKGNvbGxlY3Rpb24pO1xuICAgICAgaWYgKHRhZyA9PSBtYXBUYWcgfHwgdGFnID09IHNldFRhZykge1xuICAgICAgICByZXR1cm4gY29sbGVjdGlvbi5zaXplO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGJhc2VLZXlzKGNvbGxlY3Rpb24pLmxlbmd0aDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDaGVja3MgaWYgYHByZWRpY2F0ZWAgcmV0dXJucyB0cnV0aHkgZm9yICoqYW55KiogZWxlbWVudCBvZiBgY29sbGVjdGlvbmAuXG4gICAgICogSXRlcmF0aW9uIGlzIHN0b3BwZWQgb25jZSBgcHJlZGljYXRlYCByZXR1cm5zIHRydXRoeS4gVGhlIHByZWRpY2F0ZSBpc1xuICAgICAqIGludm9rZWQgd2l0aCB0aHJlZSBhcmd1bWVudHM6ICh2YWx1ZSwgaW5kZXh8a2V5LCBjb2xsZWN0aW9uKS5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAwLjEuMFxuICAgICAqIEBjYXRlZ29yeSBDb2xsZWN0aW9uXG4gICAgICogQHBhcmFtIHtBcnJheXxPYmplY3R9IGNvbGxlY3Rpb24gVGhlIGNvbGxlY3Rpb24gdG8gaXRlcmF0ZSBvdmVyLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtwcmVkaWNhdGU9Xy5pZGVudGl0eV0gVGhlIGZ1bmN0aW9uIGludm9rZWQgcGVyIGl0ZXJhdGlvbi5cbiAgICAgKiBAcGFyYW0tIHtPYmplY3R9IFtndWFyZF0gRW5hYmxlcyB1c2UgYXMgYW4gaXRlcmF0ZWUgZm9yIG1ldGhvZHMgbGlrZSBgXy5tYXBgLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBhbnkgZWxlbWVudCBwYXNzZXMgdGhlIHByZWRpY2F0ZSBjaGVjayxcbiAgICAgKiAgZWxzZSBgZmFsc2VgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLnNvbWUoW251bGwsIDAsICd5ZXMnLCBmYWxzZV0sIEJvb2xlYW4pO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKlxuICAgICAqIHZhciB1c2VycyA9IFtcbiAgICAgKiAgIHsgJ3VzZXInOiAnYmFybmV5JywgJ2FjdGl2ZSc6IHRydWUgfSxcbiAgICAgKiAgIHsgJ3VzZXInOiAnZnJlZCcsICAgJ2FjdGl2ZSc6IGZhbHNlIH1cbiAgICAgKiBdO1xuICAgICAqXG4gICAgICogLy8gVGhlIGBfLm1hdGNoZXNgIGl0ZXJhdGVlIHNob3J0aGFuZC5cbiAgICAgKiBfLnNvbWUodXNlcnMsIHsgJ3VzZXInOiAnYmFybmV5JywgJ2FjdGl2ZSc6IGZhbHNlIH0pO1xuICAgICAqIC8vID0+IGZhbHNlXG4gICAgICpcbiAgICAgKiAvLyBUaGUgYF8ubWF0Y2hlc1Byb3BlcnR5YCBpdGVyYXRlZSBzaG9ydGhhbmQuXG4gICAgICogXy5zb21lKHVzZXJzLCBbJ2FjdGl2ZScsIGZhbHNlXSk7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqXG4gICAgICogLy8gVGhlIGBfLnByb3BlcnR5YCBpdGVyYXRlZSBzaG9ydGhhbmQuXG4gICAgICogXy5zb21lKHVzZXJzLCAnYWN0aXZlJyk7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHNvbWUoY29sbGVjdGlvbiwgcHJlZGljYXRlLCBndWFyZCkge1xuICAgICAgdmFyIGZ1bmMgPSBpc0FycmF5KGNvbGxlY3Rpb24pID8gYXJyYXlTb21lIDogYmFzZVNvbWU7XG4gICAgICBpZiAoZ3VhcmQgJiYgaXNJdGVyYXRlZUNhbGwoY29sbGVjdGlvbiwgcHJlZGljYXRlLCBndWFyZCkpIHtcbiAgICAgICAgcHJlZGljYXRlID0gdW5kZWZpbmVkO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGZ1bmMoY29sbGVjdGlvbiwgZ2V0SXRlcmF0ZWUocHJlZGljYXRlLCAzKSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhbiBhcnJheSBvZiBlbGVtZW50cywgc29ydGVkIGluIGFzY2VuZGluZyBvcmRlciBieSB0aGUgcmVzdWx0cyBvZlxuICAgICAqIHJ1bm5pbmcgZWFjaCBlbGVtZW50IGluIGEgY29sbGVjdGlvbiB0aHJ1IGVhY2ggaXRlcmF0ZWUuIFRoaXMgbWV0aG9kXG4gICAgICogcGVyZm9ybXMgYSBzdGFibGUgc29ydCwgdGhhdCBpcywgaXQgcHJlc2VydmVzIHRoZSBvcmlnaW5hbCBzb3J0IG9yZGVyIG9mXG4gICAgICogZXF1YWwgZWxlbWVudHMuIFRoZSBpdGVyYXRlZXMgYXJlIGludm9rZWQgd2l0aCBvbmUgYXJndW1lbnQ6ICh2YWx1ZSkuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMC4xLjBcbiAgICAgKiBAY2F0ZWdvcnkgQ29sbGVjdGlvblxuICAgICAqIEBwYXJhbSB7QXJyYXl8T2JqZWN0fSBjb2xsZWN0aW9uIFRoZSBjb2xsZWN0aW9uIHRvIGl0ZXJhdGUgb3Zlci5cbiAgICAgKiBAcGFyYW0gey4uLihGdW5jdGlvbnxGdW5jdGlvbltdKX0gW2l0ZXJhdGVlcz1bXy5pZGVudGl0eV1dXG4gICAgICogIFRoZSBpdGVyYXRlZXMgdG8gc29ydCBieS5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIG5ldyBzb3J0ZWQgYXJyYXkuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciB1c2VycyA9IFtcbiAgICAgKiAgIHsgJ3VzZXInOiAnZnJlZCcsICAgJ2FnZSc6IDQ4IH0sXG4gICAgICogICB7ICd1c2VyJzogJ2Jhcm5leScsICdhZ2UnOiAzNiB9LFxuICAgICAqICAgeyAndXNlcic6ICdmcmVkJywgICAnYWdlJzogMzAgfSxcbiAgICAgKiAgIHsgJ3VzZXInOiAnYmFybmV5JywgJ2FnZSc6IDM0IH1cbiAgICAgKiBdO1xuICAgICAqXG4gICAgICogXy5zb3J0QnkodXNlcnMsIFtmdW5jdGlvbihvKSB7IHJldHVybiBvLnVzZXI7IH1dKTtcbiAgICAgKiAvLyA9PiBvYmplY3RzIGZvciBbWydiYXJuZXknLCAzNl0sIFsnYmFybmV5JywgMzRdLCBbJ2ZyZWQnLCA0OF0sIFsnZnJlZCcsIDMwXV1cbiAgICAgKlxuICAgICAqIF8uc29ydEJ5KHVzZXJzLCBbJ3VzZXInLCAnYWdlJ10pO1xuICAgICAqIC8vID0+IG9iamVjdHMgZm9yIFtbJ2Jhcm5leScsIDM0XSwgWydiYXJuZXknLCAzNl0sIFsnZnJlZCcsIDMwXSwgWydmcmVkJywgNDhdXVxuICAgICAqL1xuICAgIHZhciBzb3J0QnkgPSBiYXNlUmVzdChmdW5jdGlvbihjb2xsZWN0aW9uLCBpdGVyYXRlZXMpIHtcbiAgICAgIGlmIChjb2xsZWN0aW9uID09IG51bGwpIHtcbiAgICAgICAgcmV0dXJuIFtdO1xuICAgICAgfVxuICAgICAgdmFyIGxlbmd0aCA9IGl0ZXJhdGVlcy5sZW5ndGg7XG4gICAgICBpZiAobGVuZ3RoID4gMSAmJiBpc0l0ZXJhdGVlQ2FsbChjb2xsZWN0aW9uLCBpdGVyYXRlZXNbMF0sIGl0ZXJhdGVlc1sxXSkpIHtcbiAgICAgICAgaXRlcmF0ZWVzID0gW107XG4gICAgICB9IGVsc2UgaWYgKGxlbmd0aCA+IDIgJiYgaXNJdGVyYXRlZUNhbGwoaXRlcmF0ZWVzWzBdLCBpdGVyYXRlZXNbMV0sIGl0ZXJhdGVlc1syXSkpIHtcbiAgICAgICAgaXRlcmF0ZWVzID0gW2l0ZXJhdGVlc1swXV07XG4gICAgICB9XG4gICAgICByZXR1cm4gYmFzZU9yZGVyQnkoY29sbGVjdGlvbiwgYmFzZUZsYXR0ZW4oaXRlcmF0ZWVzLCAxKSwgW10pO1xuICAgIH0pO1xuXG4gICAgLyotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0qL1xuXG4gICAgLyoqXG4gICAgICogR2V0cyB0aGUgdGltZXN0YW1wIG9mIHRoZSBudW1iZXIgb2YgbWlsbGlzZWNvbmRzIHRoYXQgaGF2ZSBlbGFwc2VkIHNpbmNlXG4gICAgICogdGhlIFVuaXggZXBvY2ggKDEgSmFudWFyeSAxOTcwIDAwOjAwOjAwIFVUQykuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMi40LjBcbiAgICAgKiBAY2F0ZWdvcnkgRGF0ZVxuICAgICAqIEByZXR1cm5zIHtudW1iZXJ9IFJldHVybnMgdGhlIHRpbWVzdGFtcC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5kZWZlcihmdW5jdGlvbihzdGFtcCkge1xuICAgICAqICAgY29uc29sZS5sb2coXy5ub3coKSAtIHN0YW1wKTtcbiAgICAgKiB9LCBfLm5vdygpKTtcbiAgICAgKiAvLyA9PiBMb2dzIHRoZSBudW1iZXIgb2YgbWlsbGlzZWNvbmRzIGl0IHRvb2sgZm9yIHRoZSBkZWZlcnJlZCBpbnZvY2F0aW9uLlxuICAgICAqL1xuICAgIHZhciBub3cgPSBjdHhOb3cgfHwgZnVuY3Rpb24oKSB7XG4gICAgICByZXR1cm4gcm9vdC5EYXRlLm5vdygpO1xuICAgIH07XG5cbiAgICAvKi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSovXG5cbiAgICAvKipcbiAgICAgKiBUaGUgb3Bwb3NpdGUgb2YgYF8uYmVmb3JlYDsgdGhpcyBtZXRob2QgY3JlYXRlcyBhIGZ1bmN0aW9uIHRoYXQgaW52b2tlc1xuICAgICAqIGBmdW5jYCBvbmNlIGl0J3MgY2FsbGVkIGBuYCBvciBtb3JlIHRpbWVzLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDAuMS4wXG4gICAgICogQGNhdGVnb3J5IEZ1bmN0aW9uXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IG4gVGhlIG51bWJlciBvZiBjYWxscyBiZWZvcmUgYGZ1bmNgIGlzIGludm9rZWQuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gZnVuYyBUaGUgZnVuY3Rpb24gdG8gcmVzdHJpY3QuXG4gICAgICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgcmVzdHJpY3RlZCBmdW5jdGlvbi5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIHNhdmVzID0gWydwcm9maWxlJywgJ3NldHRpbmdzJ107XG4gICAgICpcbiAgICAgKiB2YXIgZG9uZSA9IF8uYWZ0ZXIoc2F2ZXMubGVuZ3RoLCBmdW5jdGlvbigpIHtcbiAgICAgKiAgIGNvbnNvbGUubG9nKCdkb25lIHNhdmluZyEnKTtcbiAgICAgKiB9KTtcbiAgICAgKlxuICAgICAqIF8uZm9yRWFjaChzYXZlcywgZnVuY3Rpb24odHlwZSkge1xuICAgICAqICAgYXN5bmNTYXZlKHsgJ3R5cGUnOiB0eXBlLCAnY29tcGxldGUnOiBkb25lIH0pO1xuICAgICAqIH0pO1xuICAgICAqIC8vID0+IExvZ3MgJ2RvbmUgc2F2aW5nIScgYWZ0ZXIgdGhlIHR3byBhc3luYyBzYXZlcyBoYXZlIGNvbXBsZXRlZC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBhZnRlcihuLCBmdW5jKSB7XG4gICAgICBpZiAodHlwZW9mIGZ1bmMgIT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKEZVTkNfRVJST1JfVEVYVCk7XG4gICAgICB9XG4gICAgICBuID0gdG9JbnRlZ2VyKG4pO1xuICAgICAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgICAgICBpZiAoLS1uIDwgMSkge1xuICAgICAgICAgIHJldHVybiBmdW5jLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG4gICAgICAgIH1cbiAgICAgIH07XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIGZ1bmN0aW9uIHRoYXQgaW52b2tlcyBgZnVuY2AsIHdpdGggdXAgdG8gYG5gIGFyZ3VtZW50cyxcbiAgICAgKiBpZ25vcmluZyBhbnkgYWRkaXRpb25hbCBhcmd1bWVudHMuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMy4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgRnVuY3Rpb25cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBmdW5jIFRoZSBmdW5jdGlvbiB0byBjYXAgYXJndW1lbnRzIGZvci5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gW249ZnVuYy5sZW5ndGhdIFRoZSBhcml0eSBjYXAuXG4gICAgICogQHBhcmFtLSB7T2JqZWN0fSBbZ3VhcmRdIEVuYWJsZXMgdXNlIGFzIGFuIGl0ZXJhdGVlIGZvciBtZXRob2RzIGxpa2UgYF8ubWFwYC5cbiAgICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyBjYXBwZWQgZnVuY3Rpb24uXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8ubWFwKFsnNicsICc4JywgJzEwJ10sIF8uYXJ5KHBhcnNlSW50LCAxKSk7XG4gICAgICogLy8gPT4gWzYsIDgsIDEwXVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGFyeShmdW5jLCBuLCBndWFyZCkge1xuICAgICAgbiA9IGd1YXJkID8gdW5kZWZpbmVkIDogbjtcbiAgICAgIG4gPSAoZnVuYyAmJiBuID09IG51bGwpID8gZnVuYy5sZW5ndGggOiBuO1xuICAgICAgcmV0dXJuIGNyZWF0ZVdyYXAoZnVuYywgV1JBUF9BUllfRkxBRywgdW5kZWZpbmVkLCB1bmRlZmluZWQsIHVuZGVmaW5lZCwgdW5kZWZpbmVkLCBuKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgZnVuY3Rpb24gdGhhdCBpbnZva2VzIGBmdW5jYCwgd2l0aCB0aGUgYHRoaXNgIGJpbmRpbmcgYW5kIGFyZ3VtZW50c1xuICAgICAqIG9mIHRoZSBjcmVhdGVkIGZ1bmN0aW9uLCB3aGlsZSBpdCdzIGNhbGxlZCBsZXNzIHRoYW4gYG5gIHRpbWVzLiBTdWJzZXF1ZW50XG4gICAgICogY2FsbHMgdG8gdGhlIGNyZWF0ZWQgZnVuY3Rpb24gcmV0dXJuIHRoZSByZXN1bHQgb2YgdGhlIGxhc3QgYGZ1bmNgIGludm9jYXRpb24uXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMy4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgRnVuY3Rpb25cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gbiBUaGUgbnVtYmVyIG9mIGNhbGxzIGF0IHdoaWNoIGBmdW5jYCBpcyBubyBsb25nZXIgaW52b2tlZC5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBmdW5jIFRoZSBmdW5jdGlvbiB0byByZXN0cmljdC5cbiAgICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyByZXN0cmljdGVkIGZ1bmN0aW9uLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBqUXVlcnkoZWxlbWVudCkub24oJ2NsaWNrJywgXy5iZWZvcmUoNSwgYWRkQ29udGFjdFRvTGlzdCkpO1xuICAgICAqIC8vID0+IEFsbG93cyBhZGRpbmcgdXAgdG8gNCBjb250YWN0cyB0byB0aGUgbGlzdC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBiZWZvcmUobiwgZnVuYykge1xuICAgICAgdmFyIHJlc3VsdDtcbiAgICAgIGlmICh0eXBlb2YgZnVuYyAhPSAnZnVuY3Rpb24nKSB7XG4gICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoRlVOQ19FUlJPUl9URVhUKTtcbiAgICAgIH1cbiAgICAgIG4gPSB0b0ludGVnZXIobik7XG4gICAgICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgICAgIGlmICgtLW4gPiAwKSB7XG4gICAgICAgICAgcmVzdWx0ID0gZnVuYy5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChuIDw9IDEpIHtcbiAgICAgICAgICBmdW5jID0gdW5kZWZpbmVkO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgICB9O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBmdW5jdGlvbiB0aGF0IGludm9rZXMgYGZ1bmNgIHdpdGggdGhlIGB0aGlzYCBiaW5kaW5nIG9mIGB0aGlzQXJnYFxuICAgICAqIGFuZCBgcGFydGlhbHNgIHByZXBlbmRlZCB0byB0aGUgYXJndW1lbnRzIGl0IHJlY2VpdmVzLlxuICAgICAqXG4gICAgICogVGhlIGBfLmJpbmQucGxhY2Vob2xkZXJgIHZhbHVlLCB3aGljaCBkZWZhdWx0cyB0byBgX2AgaW4gbW9ub2xpdGhpYyBidWlsZHMsXG4gICAgICogbWF5IGJlIHVzZWQgYXMgYSBwbGFjZWhvbGRlciBmb3IgcGFydGlhbGx5IGFwcGxpZWQgYXJndW1lbnRzLlxuICAgICAqXG4gICAgICogKipOb3RlOioqIFVubGlrZSBuYXRpdmUgYEZ1bmN0aW9uI2JpbmRgLCB0aGlzIG1ldGhvZCBkb2Vzbid0IHNldCB0aGUgXCJsZW5ndGhcIlxuICAgICAqIHByb3BlcnR5IG9mIGJvdW5kIGZ1bmN0aW9ucy5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAwLjEuMFxuICAgICAqIEBjYXRlZ29yeSBGdW5jdGlvblxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGZ1bmMgVGhlIGZ1bmN0aW9uIHRvIGJpbmQuXG4gICAgICogQHBhcmFtIHsqfSB0aGlzQXJnIFRoZSBgdGhpc2AgYmluZGluZyBvZiBgZnVuY2AuXG4gICAgICogQHBhcmFtIHsuLi4qfSBbcGFydGlhbHNdIFRoZSBhcmd1bWVudHMgdG8gYmUgcGFydGlhbGx5IGFwcGxpZWQuXG4gICAgICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgYm91bmQgZnVuY3Rpb24uXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIGZ1bmN0aW9uIGdyZWV0KGdyZWV0aW5nLCBwdW5jdHVhdGlvbikge1xuICAgICAqICAgcmV0dXJuIGdyZWV0aW5nICsgJyAnICsgdGhpcy51c2VyICsgcHVuY3R1YXRpb247XG4gICAgICogfVxuICAgICAqXG4gICAgICogdmFyIG9iamVjdCA9IHsgJ3VzZXInOiAnZnJlZCcgfTtcbiAgICAgKlxuICAgICAqIHZhciBib3VuZCA9IF8uYmluZChncmVldCwgb2JqZWN0LCAnaGknKTtcbiAgICAgKiBib3VuZCgnIScpO1xuICAgICAqIC8vID0+ICdoaSBmcmVkISdcbiAgICAgKlxuICAgICAqIC8vIEJvdW5kIHdpdGggcGxhY2Vob2xkZXJzLlxuICAgICAqIHZhciBib3VuZCA9IF8uYmluZChncmVldCwgb2JqZWN0LCBfLCAnIScpO1xuICAgICAqIGJvdW5kKCdoaScpO1xuICAgICAqIC8vID0+ICdoaSBmcmVkISdcbiAgICAgKi9cbiAgICB2YXIgYmluZCA9IGJhc2VSZXN0KGZ1bmN0aW9uKGZ1bmMsIHRoaXNBcmcsIHBhcnRpYWxzKSB7XG4gICAgICB2YXIgYml0bWFzayA9IFdSQVBfQklORF9GTEFHO1xuICAgICAgaWYgKHBhcnRpYWxzLmxlbmd0aCkge1xuICAgICAgICB2YXIgaG9sZGVycyA9IHJlcGxhY2VIb2xkZXJzKHBhcnRpYWxzLCBnZXRIb2xkZXIoYmluZCkpO1xuICAgICAgICBiaXRtYXNrIHw9IFdSQVBfUEFSVElBTF9GTEFHO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGNyZWF0ZVdyYXAoZnVuYywgYml0bWFzaywgdGhpc0FyZywgcGFydGlhbHMsIGhvbGRlcnMpO1xuICAgIH0pO1xuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIGZ1bmN0aW9uIHRoYXQgaW52b2tlcyB0aGUgbWV0aG9kIGF0IGBvYmplY3Rba2V5XWAgd2l0aCBgcGFydGlhbHNgXG4gICAgICogcHJlcGVuZGVkIHRvIHRoZSBhcmd1bWVudHMgaXQgcmVjZWl2ZXMuXG4gICAgICpcbiAgICAgKiBUaGlzIG1ldGhvZCBkaWZmZXJzIGZyb20gYF8uYmluZGAgYnkgYWxsb3dpbmcgYm91bmQgZnVuY3Rpb25zIHRvIHJlZmVyZW5jZVxuICAgICAqIG1ldGhvZHMgdGhhdCBtYXkgYmUgcmVkZWZpbmVkIG9yIGRvbid0IHlldCBleGlzdC4gU2VlXG4gICAgICogW1BldGVyIE1pY2hhdXgncyBhcnRpY2xlXShodHRwOi8vcGV0ZXIubWljaGF1eC5jYS9hcnRpY2xlcy9sYXp5LWZ1bmN0aW9uLWRlZmluaXRpb24tcGF0dGVybilcbiAgICAgKiBmb3IgbW9yZSBkZXRhaWxzLlxuICAgICAqXG4gICAgICogVGhlIGBfLmJpbmRLZXkucGxhY2Vob2xkZXJgIHZhbHVlLCB3aGljaCBkZWZhdWx0cyB0byBgX2AgaW4gbW9ub2xpdGhpY1xuICAgICAqIGJ1aWxkcywgbWF5IGJlIHVzZWQgYXMgYSBwbGFjZWhvbGRlciBmb3IgcGFydGlhbGx5IGFwcGxpZWQgYXJndW1lbnRzLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDAuMTAuMFxuICAgICAqIEBjYXRlZ29yeSBGdW5jdGlvblxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBpbnZva2UgdGhlIG1ldGhvZCBvbi5cbiAgICAgKiBAcGFyYW0ge3N0cmluZ30ga2V5IFRoZSBrZXkgb2YgdGhlIG1ldGhvZC5cbiAgICAgKiBAcGFyYW0gey4uLip9IFtwYXJ0aWFsc10gVGhlIGFyZ3VtZW50cyB0byBiZSBwYXJ0aWFsbHkgYXBwbGllZC5cbiAgICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyBib3VuZCBmdW5jdGlvbi5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIG9iamVjdCA9IHtcbiAgICAgKiAgICd1c2VyJzogJ2ZyZWQnLFxuICAgICAqICAgJ2dyZWV0JzogZnVuY3Rpb24oZ3JlZXRpbmcsIHB1bmN0dWF0aW9uKSB7XG4gICAgICogICAgIHJldHVybiBncmVldGluZyArICcgJyArIHRoaXMudXNlciArIHB1bmN0dWF0aW9uO1xuICAgICAqICAgfVxuICAgICAqIH07XG4gICAgICpcbiAgICAgKiB2YXIgYm91bmQgPSBfLmJpbmRLZXkob2JqZWN0LCAnZ3JlZXQnLCAnaGknKTtcbiAgICAgKiBib3VuZCgnIScpO1xuICAgICAqIC8vID0+ICdoaSBmcmVkISdcbiAgICAgKlxuICAgICAqIG9iamVjdC5ncmVldCA9IGZ1bmN0aW9uKGdyZWV0aW5nLCBwdW5jdHVhdGlvbikge1xuICAgICAqICAgcmV0dXJuIGdyZWV0aW5nICsgJ3lhICcgKyB0aGlzLnVzZXIgKyBwdW5jdHVhdGlvbjtcbiAgICAgKiB9O1xuICAgICAqXG4gICAgICogYm91bmQoJyEnKTtcbiAgICAgKiAvLyA9PiAnaGl5YSBmcmVkISdcbiAgICAgKlxuICAgICAqIC8vIEJvdW5kIHdpdGggcGxhY2Vob2xkZXJzLlxuICAgICAqIHZhciBib3VuZCA9IF8uYmluZEtleShvYmplY3QsICdncmVldCcsIF8sICchJyk7XG4gICAgICogYm91bmQoJ2hpJyk7XG4gICAgICogLy8gPT4gJ2hpeWEgZnJlZCEnXG4gICAgICovXG4gICAgdmFyIGJpbmRLZXkgPSBiYXNlUmVzdChmdW5jdGlvbihvYmplY3QsIGtleSwgcGFydGlhbHMpIHtcbiAgICAgIHZhciBiaXRtYXNrID0gV1JBUF9CSU5EX0ZMQUcgfCBXUkFQX0JJTkRfS0VZX0ZMQUc7XG4gICAgICBpZiAocGFydGlhbHMubGVuZ3RoKSB7XG4gICAgICAgIHZhciBob2xkZXJzID0gcmVwbGFjZUhvbGRlcnMocGFydGlhbHMsIGdldEhvbGRlcihiaW5kS2V5KSk7XG4gICAgICAgIGJpdG1hc2sgfD0gV1JBUF9QQVJUSUFMX0ZMQUc7XG4gICAgICB9XG4gICAgICByZXR1cm4gY3JlYXRlV3JhcChrZXksIGJpdG1hc2ssIG9iamVjdCwgcGFydGlhbHMsIGhvbGRlcnMpO1xuICAgIH0pO1xuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIGZ1bmN0aW9uIHRoYXQgYWNjZXB0cyBhcmd1bWVudHMgb2YgYGZ1bmNgIGFuZCBlaXRoZXIgaW52b2tlc1xuICAgICAqIGBmdW5jYCByZXR1cm5pbmcgaXRzIHJlc3VsdCwgaWYgYXQgbGVhc3QgYGFyaXR5YCBudW1iZXIgb2YgYXJndW1lbnRzIGhhdmVcbiAgICAgKiBiZWVuIHByb3ZpZGVkLCBvciByZXR1cm5zIGEgZnVuY3Rpb24gdGhhdCBhY2NlcHRzIHRoZSByZW1haW5pbmcgYGZ1bmNgXG4gICAgICogYXJndW1lbnRzLCBhbmQgc28gb24uIFRoZSBhcml0eSBvZiBgZnVuY2AgbWF5IGJlIHNwZWNpZmllZCBpZiBgZnVuYy5sZW5ndGhgXG4gICAgICogaXMgbm90IHN1ZmZpY2llbnQuXG4gICAgICpcbiAgICAgKiBUaGUgYF8uY3VycnkucGxhY2Vob2xkZXJgIHZhbHVlLCB3aGljaCBkZWZhdWx0cyB0byBgX2AgaW4gbW9ub2xpdGhpYyBidWlsZHMsXG4gICAgICogbWF5IGJlIHVzZWQgYXMgYSBwbGFjZWhvbGRlciBmb3IgcHJvdmlkZWQgYXJndW1lbnRzLlxuICAgICAqXG4gICAgICogKipOb3RlOioqIFRoaXMgbWV0aG9kIGRvZXNuJ3Qgc2V0IHRoZSBcImxlbmd0aFwiIHByb3BlcnR5IG9mIGN1cnJpZWQgZnVuY3Rpb25zLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDIuMC4wXG4gICAgICogQGNhdGVnb3J5IEZ1bmN0aW9uXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gZnVuYyBUaGUgZnVuY3Rpb24gdG8gY3VycnkuXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IFthcml0eT1mdW5jLmxlbmd0aF0gVGhlIGFyaXR5IG9mIGBmdW5jYC5cbiAgICAgKiBAcGFyYW0tIHtPYmplY3R9IFtndWFyZF0gRW5hYmxlcyB1c2UgYXMgYW4gaXRlcmF0ZWUgZm9yIG1ldGhvZHMgbGlrZSBgXy5tYXBgLlxuICAgICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IGN1cnJpZWQgZnVuY3Rpb24uXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciBhYmMgPSBmdW5jdGlvbihhLCBiLCBjKSB7XG4gICAgICogICByZXR1cm4gW2EsIGIsIGNdO1xuICAgICAqIH07XG4gICAgICpcbiAgICAgKiB2YXIgY3VycmllZCA9IF8uY3VycnkoYWJjKTtcbiAgICAgKlxuICAgICAqIGN1cnJpZWQoMSkoMikoMyk7XG4gICAgICogLy8gPT4gWzEsIDIsIDNdXG4gICAgICpcbiAgICAgKiBjdXJyaWVkKDEsIDIpKDMpO1xuICAgICAqIC8vID0+IFsxLCAyLCAzXVxuICAgICAqXG4gICAgICogY3VycmllZCgxLCAyLCAzKTtcbiAgICAgKiAvLyA9PiBbMSwgMiwgM11cbiAgICAgKlxuICAgICAqIC8vIEN1cnJpZWQgd2l0aCBwbGFjZWhvbGRlcnMuXG4gICAgICogY3VycmllZCgxKShfLCAzKSgyKTtcbiAgICAgKiAvLyA9PiBbMSwgMiwgM11cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBjdXJyeShmdW5jLCBhcml0eSwgZ3VhcmQpIHtcbiAgICAgIGFyaXR5ID0gZ3VhcmQgPyB1bmRlZmluZWQgOiBhcml0eTtcbiAgICAgIHZhciByZXN1bHQgPSBjcmVhdGVXcmFwKGZ1bmMsIFdSQVBfQ1VSUllfRkxBRywgdW5kZWZpbmVkLCB1bmRlZmluZWQsIHVuZGVmaW5lZCwgdW5kZWZpbmVkLCB1bmRlZmluZWQsIGFyaXR5KTtcbiAgICAgIHJlc3VsdC5wbGFjZWhvbGRlciA9IGN1cnJ5LnBsYWNlaG9sZGVyO1xuICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGlzIG1ldGhvZCBpcyBsaWtlIGBfLmN1cnJ5YCBleGNlcHQgdGhhdCBhcmd1bWVudHMgYXJlIGFwcGxpZWQgdG8gYGZ1bmNgXG4gICAgICogaW4gdGhlIG1hbm5lciBvZiBgXy5wYXJ0aWFsUmlnaHRgIGluc3RlYWQgb2YgYF8ucGFydGlhbGAuXG4gICAgICpcbiAgICAgKiBUaGUgYF8uY3VycnlSaWdodC5wbGFjZWhvbGRlcmAgdmFsdWUsIHdoaWNoIGRlZmF1bHRzIHRvIGBfYCBpbiBtb25vbGl0aGljXG4gICAgICogYnVpbGRzLCBtYXkgYmUgdXNlZCBhcyBhIHBsYWNlaG9sZGVyIGZvciBwcm92aWRlZCBhcmd1bWVudHMuXG4gICAgICpcbiAgICAgKiAqKk5vdGU6KiogVGhpcyBtZXRob2QgZG9lc24ndCBzZXQgdGhlIFwibGVuZ3RoXCIgcHJvcGVydHkgb2YgY3VycmllZCBmdW5jdGlvbnMuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMy4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgRnVuY3Rpb25cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBmdW5jIFRoZSBmdW5jdGlvbiB0byBjdXJyeS5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gW2FyaXR5PWZ1bmMubGVuZ3RoXSBUaGUgYXJpdHkgb2YgYGZ1bmNgLlxuICAgICAqIEBwYXJhbS0ge09iamVjdH0gW2d1YXJkXSBFbmFibGVzIHVzZSBhcyBhbiBpdGVyYXRlZSBmb3IgbWV0aG9kcyBsaWtlIGBfLm1hcGAuXG4gICAgICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgY3VycmllZCBmdW5jdGlvbi5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIGFiYyA9IGZ1bmN0aW9uKGEsIGIsIGMpIHtcbiAgICAgKiAgIHJldHVybiBbYSwgYiwgY107XG4gICAgICogfTtcbiAgICAgKlxuICAgICAqIHZhciBjdXJyaWVkID0gXy5jdXJyeVJpZ2h0KGFiYyk7XG4gICAgICpcbiAgICAgKiBjdXJyaWVkKDMpKDIpKDEpO1xuICAgICAqIC8vID0+IFsxLCAyLCAzXVxuICAgICAqXG4gICAgICogY3VycmllZCgyLCAzKSgxKTtcbiAgICAgKiAvLyA9PiBbMSwgMiwgM11cbiAgICAgKlxuICAgICAqIGN1cnJpZWQoMSwgMiwgMyk7XG4gICAgICogLy8gPT4gWzEsIDIsIDNdXG4gICAgICpcbiAgICAgKiAvLyBDdXJyaWVkIHdpdGggcGxhY2Vob2xkZXJzLlxuICAgICAqIGN1cnJpZWQoMykoMSwgXykoMik7XG4gICAgICogLy8gPT4gWzEsIDIsIDNdXG4gICAgICovXG4gICAgZnVuY3Rpb24gY3VycnlSaWdodChmdW5jLCBhcml0eSwgZ3VhcmQpIHtcbiAgICAgIGFyaXR5ID0gZ3VhcmQgPyB1bmRlZmluZWQgOiBhcml0eTtcbiAgICAgIHZhciByZXN1bHQgPSBjcmVhdGVXcmFwKGZ1bmMsIFdSQVBfQ1VSUllfUklHSFRfRkxBRywgdW5kZWZpbmVkLCB1bmRlZmluZWQsIHVuZGVmaW5lZCwgdW5kZWZpbmVkLCB1bmRlZmluZWQsIGFyaXR5KTtcbiAgICAgIHJlc3VsdC5wbGFjZWhvbGRlciA9IGN1cnJ5UmlnaHQucGxhY2Vob2xkZXI7XG4gICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBkZWJvdW5jZWQgZnVuY3Rpb24gdGhhdCBkZWxheXMgaW52b2tpbmcgYGZ1bmNgIHVudGlsIGFmdGVyIGB3YWl0YFxuICAgICAqIG1pbGxpc2Vjb25kcyBoYXZlIGVsYXBzZWQgc2luY2UgdGhlIGxhc3QgdGltZSB0aGUgZGVib3VuY2VkIGZ1bmN0aW9uIHdhc1xuICAgICAqIGludm9rZWQuIFRoZSBkZWJvdW5jZWQgZnVuY3Rpb24gY29tZXMgd2l0aCBhIGBjYW5jZWxgIG1ldGhvZCB0byBjYW5jZWxcbiAgICAgKiBkZWxheWVkIGBmdW5jYCBpbnZvY2F0aW9ucyBhbmQgYSBgZmx1c2hgIG1ldGhvZCB0byBpbW1lZGlhdGVseSBpbnZva2UgdGhlbS5cbiAgICAgKiBQcm92aWRlIGBvcHRpb25zYCB0byBpbmRpY2F0ZSB3aGV0aGVyIGBmdW5jYCBzaG91bGQgYmUgaW52b2tlZCBvbiB0aGVcbiAgICAgKiBsZWFkaW5nIGFuZC9vciB0cmFpbGluZyBlZGdlIG9mIHRoZSBgd2FpdGAgdGltZW91dC4gVGhlIGBmdW5jYCBpcyBpbnZva2VkXG4gICAgICogd2l0aCB0aGUgbGFzdCBhcmd1bWVudHMgcHJvdmlkZWQgdG8gdGhlIGRlYm91bmNlZCBmdW5jdGlvbi4gU3Vic2VxdWVudFxuICAgICAqIGNhbGxzIHRvIHRoZSBkZWJvdW5jZWQgZnVuY3Rpb24gcmV0dXJuIHRoZSByZXN1bHQgb2YgdGhlIGxhc3QgYGZ1bmNgXG4gICAgICogaW52b2NhdGlvbi5cbiAgICAgKlxuICAgICAqICoqTm90ZToqKiBJZiBgbGVhZGluZ2AgYW5kIGB0cmFpbGluZ2Agb3B0aW9ucyBhcmUgYHRydWVgLCBgZnVuY2AgaXNcbiAgICAgKiBpbnZva2VkIG9uIHRoZSB0cmFpbGluZyBlZGdlIG9mIHRoZSB0aW1lb3V0IG9ubHkgaWYgdGhlIGRlYm91bmNlZCBmdW5jdGlvblxuICAgICAqIGlzIGludm9rZWQgbW9yZSB0aGFuIG9uY2UgZHVyaW5nIHRoZSBgd2FpdGAgdGltZW91dC5cbiAgICAgKlxuICAgICAqIElmIGB3YWl0YCBpcyBgMGAgYW5kIGBsZWFkaW5nYCBpcyBgZmFsc2VgLCBgZnVuY2AgaW52b2NhdGlvbiBpcyBkZWZlcnJlZFxuICAgICAqIHVudGlsIHRvIHRoZSBuZXh0IHRpY2ssIHNpbWlsYXIgdG8gYHNldFRpbWVvdXRgIHdpdGggYSB0aW1lb3V0IG9mIGAwYC5cbiAgICAgKlxuICAgICAqIFNlZSBbRGF2aWQgQ29yYmFjaG8ncyBhcnRpY2xlXShodHRwczovL2Nzcy10cmlja3MuY29tL2RlYm91bmNpbmctdGhyb3R0bGluZy1leHBsYWluZWQtZXhhbXBsZXMvKVxuICAgICAqIGZvciBkZXRhaWxzIG92ZXIgdGhlIGRpZmZlcmVuY2VzIGJldHdlZW4gYF8uZGVib3VuY2VgIGFuZCBgXy50aHJvdHRsZWAuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMC4xLjBcbiAgICAgKiBAY2F0ZWdvcnkgRnVuY3Rpb25cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBmdW5jIFRoZSBmdW5jdGlvbiB0byBkZWJvdW5jZS5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gW3dhaXQ9MF0gVGhlIG51bWJlciBvZiBtaWxsaXNlY29uZHMgdG8gZGVsYXkuXG4gICAgICogQHBhcmFtIHtPYmplY3R9IFtvcHRpb25zPXt9XSBUaGUgb3B0aW9ucyBvYmplY3QuXG4gICAgICogQHBhcmFtIHtib29sZWFufSBbb3B0aW9ucy5sZWFkaW5nPWZhbHNlXVxuICAgICAqICBTcGVjaWZ5IGludm9raW5nIG9uIHRoZSBsZWFkaW5nIGVkZ2Ugb2YgdGhlIHRpbWVvdXQuXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IFtvcHRpb25zLm1heFdhaXRdXG4gICAgICogIFRoZSBtYXhpbXVtIHRpbWUgYGZ1bmNgIGlzIGFsbG93ZWQgdG8gYmUgZGVsYXllZCBiZWZvcmUgaXQncyBpbnZva2VkLlxuICAgICAqIEBwYXJhbSB7Ym9vbGVhbn0gW29wdGlvbnMudHJhaWxpbmc9dHJ1ZV1cbiAgICAgKiAgU3BlY2lmeSBpbnZva2luZyBvbiB0aGUgdHJhaWxpbmcgZWRnZSBvZiB0aGUgdGltZW91dC5cbiAgICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyBkZWJvdW5jZWQgZnVuY3Rpb24uXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIC8vIEF2b2lkIGNvc3RseSBjYWxjdWxhdGlvbnMgd2hpbGUgdGhlIHdpbmRvdyBzaXplIGlzIGluIGZsdXguXG4gICAgICogalF1ZXJ5KHdpbmRvdykub24oJ3Jlc2l6ZScsIF8uZGVib3VuY2UoY2FsY3VsYXRlTGF5b3V0LCAxNTApKTtcbiAgICAgKlxuICAgICAqIC8vIEludm9rZSBgc2VuZE1haWxgIHdoZW4gY2xpY2tlZCwgZGVib3VuY2luZyBzdWJzZXF1ZW50IGNhbGxzLlxuICAgICAqIGpRdWVyeShlbGVtZW50KS5vbignY2xpY2snLCBfLmRlYm91bmNlKHNlbmRNYWlsLCAzMDAsIHtcbiAgICAgKiAgICdsZWFkaW5nJzogdHJ1ZSxcbiAgICAgKiAgICd0cmFpbGluZyc6IGZhbHNlXG4gICAgICogfSkpO1xuICAgICAqXG4gICAgICogLy8gRW5zdXJlIGBiYXRjaExvZ2AgaXMgaW52b2tlZCBvbmNlIGFmdGVyIDEgc2Vjb25kIG9mIGRlYm91bmNlZCBjYWxscy5cbiAgICAgKiB2YXIgZGVib3VuY2VkID0gXy5kZWJvdW5jZShiYXRjaExvZywgMjUwLCB7ICdtYXhXYWl0JzogMTAwMCB9KTtcbiAgICAgKiB2YXIgc291cmNlID0gbmV3IEV2ZW50U291cmNlKCcvc3RyZWFtJyk7XG4gICAgICogalF1ZXJ5KHNvdXJjZSkub24oJ21lc3NhZ2UnLCBkZWJvdW5jZWQpO1xuICAgICAqXG4gICAgICogLy8gQ2FuY2VsIHRoZSB0cmFpbGluZyBkZWJvdW5jZWQgaW52b2NhdGlvbi5cbiAgICAgKiBqUXVlcnkod2luZG93KS5vbigncG9wc3RhdGUnLCBkZWJvdW5jZWQuY2FuY2VsKTtcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBkZWJvdW5jZShmdW5jLCB3YWl0LCBvcHRpb25zKSB7XG4gICAgICB2YXIgbGFzdEFyZ3MsXG4gICAgICAgICAgbGFzdFRoaXMsXG4gICAgICAgICAgbWF4V2FpdCxcbiAgICAgICAgICByZXN1bHQsXG4gICAgICAgICAgdGltZXJJZCxcbiAgICAgICAgICBsYXN0Q2FsbFRpbWUsXG4gICAgICAgICAgbGFzdEludm9rZVRpbWUgPSAwLFxuICAgICAgICAgIGxlYWRpbmcgPSBmYWxzZSxcbiAgICAgICAgICBtYXhpbmcgPSBmYWxzZSxcbiAgICAgICAgICB0cmFpbGluZyA9IHRydWU7XG5cbiAgICAgIGlmICh0eXBlb2YgZnVuYyAhPSAnZnVuY3Rpb24nKSB7XG4gICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoRlVOQ19FUlJPUl9URVhUKTtcbiAgICAgIH1cbiAgICAgIHdhaXQgPSB0b051bWJlcih3YWl0KSB8fCAwO1xuICAgICAgaWYgKGlzT2JqZWN0KG9wdGlvbnMpKSB7XG4gICAgICAgIGxlYWRpbmcgPSAhIW9wdGlvbnMubGVhZGluZztcbiAgICAgICAgbWF4aW5nID0gJ21heFdhaXQnIGluIG9wdGlvbnM7XG4gICAgICAgIG1heFdhaXQgPSBtYXhpbmcgPyBuYXRpdmVNYXgodG9OdW1iZXIob3B0aW9ucy5tYXhXYWl0KSB8fCAwLCB3YWl0KSA6IG1heFdhaXQ7XG4gICAgICAgIHRyYWlsaW5nID0gJ3RyYWlsaW5nJyBpbiBvcHRpb25zID8gISFvcHRpb25zLnRyYWlsaW5nIDogdHJhaWxpbmc7XG4gICAgICB9XG5cbiAgICAgIGZ1bmN0aW9uIGludm9rZUZ1bmModGltZSkge1xuICAgICAgICB2YXIgYXJncyA9IGxhc3RBcmdzLFxuICAgICAgICAgICAgdGhpc0FyZyA9IGxhc3RUaGlzO1xuXG4gICAgICAgIGxhc3RBcmdzID0gbGFzdFRoaXMgPSB1bmRlZmluZWQ7XG4gICAgICAgIGxhc3RJbnZva2VUaW1lID0gdGltZTtcbiAgICAgICAgcmVzdWx0ID0gZnVuYy5hcHBseSh0aGlzQXJnLCBhcmdzKTtcbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICAgIH1cblxuICAgICAgZnVuY3Rpb24gbGVhZGluZ0VkZ2UodGltZSkge1xuICAgICAgICAvLyBSZXNldCBhbnkgYG1heFdhaXRgIHRpbWVyLlxuICAgICAgICBsYXN0SW52b2tlVGltZSA9IHRpbWU7XG4gICAgICAgIC8vIFN0YXJ0IHRoZSB0aW1lciBmb3IgdGhlIHRyYWlsaW5nIGVkZ2UuXG4gICAgICAgIHRpbWVySWQgPSBzZXRUaW1lb3V0KHRpbWVyRXhwaXJlZCwgd2FpdCk7XG4gICAgICAgIC8vIEludm9rZSB0aGUgbGVhZGluZyBlZGdlLlxuICAgICAgICByZXR1cm4gbGVhZGluZyA/IGludm9rZUZ1bmModGltZSkgOiByZXN1bHQ7XG4gICAgICB9XG5cbiAgICAgIGZ1bmN0aW9uIHJlbWFpbmluZ1dhaXQodGltZSkge1xuICAgICAgICB2YXIgdGltZVNpbmNlTGFzdENhbGwgPSB0aW1lIC0gbGFzdENhbGxUaW1lLFxuICAgICAgICAgICAgdGltZVNpbmNlTGFzdEludm9rZSA9IHRpbWUgLSBsYXN0SW52b2tlVGltZSxcbiAgICAgICAgICAgIHRpbWVXYWl0aW5nID0gd2FpdCAtIHRpbWVTaW5jZUxhc3RDYWxsO1xuXG4gICAgICAgIHJldHVybiBtYXhpbmdcbiAgICAgICAgICA/IG5hdGl2ZU1pbih0aW1lV2FpdGluZywgbWF4V2FpdCAtIHRpbWVTaW5jZUxhc3RJbnZva2UpXG4gICAgICAgICAgOiB0aW1lV2FpdGluZztcbiAgICAgIH1cblxuICAgICAgZnVuY3Rpb24gc2hvdWxkSW52b2tlKHRpbWUpIHtcbiAgICAgICAgdmFyIHRpbWVTaW5jZUxhc3RDYWxsID0gdGltZSAtIGxhc3RDYWxsVGltZSxcbiAgICAgICAgICAgIHRpbWVTaW5jZUxhc3RJbnZva2UgPSB0aW1lIC0gbGFzdEludm9rZVRpbWU7XG5cbiAgICAgICAgLy8gRWl0aGVyIHRoaXMgaXMgdGhlIGZpcnN0IGNhbGwsIGFjdGl2aXR5IGhhcyBzdG9wcGVkIGFuZCB3ZSdyZSBhdCB0aGVcbiAgICAgICAgLy8gdHJhaWxpbmcgZWRnZSwgdGhlIHN5c3RlbSB0aW1lIGhhcyBnb25lIGJhY2t3YXJkcyBhbmQgd2UncmUgdHJlYXRpbmdcbiAgICAgICAgLy8gaXQgYXMgdGhlIHRyYWlsaW5nIGVkZ2UsIG9yIHdlJ3ZlIGhpdCB0aGUgYG1heFdhaXRgIGxpbWl0LlxuICAgICAgICByZXR1cm4gKGxhc3RDYWxsVGltZSA9PT0gdW5kZWZpbmVkIHx8ICh0aW1lU2luY2VMYXN0Q2FsbCA+PSB3YWl0KSB8fFxuICAgICAgICAgICh0aW1lU2luY2VMYXN0Q2FsbCA8IDApIHx8IChtYXhpbmcgJiYgdGltZVNpbmNlTGFzdEludm9rZSA+PSBtYXhXYWl0KSk7XG4gICAgICB9XG5cbiAgICAgIGZ1bmN0aW9uIHRpbWVyRXhwaXJlZCgpIHtcbiAgICAgICAgdmFyIHRpbWUgPSBub3coKTtcbiAgICAgICAgaWYgKHNob3VsZEludm9rZSh0aW1lKSkge1xuICAgICAgICAgIHJldHVybiB0cmFpbGluZ0VkZ2UodGltZSk7XG4gICAgICAgIH1cbiAgICAgICAgLy8gUmVzdGFydCB0aGUgdGltZXIuXG4gICAgICAgIHRpbWVySWQgPSBzZXRUaW1lb3V0KHRpbWVyRXhwaXJlZCwgcmVtYWluaW5nV2FpdCh0aW1lKSk7XG4gICAgICB9XG5cbiAgICAgIGZ1bmN0aW9uIHRyYWlsaW5nRWRnZSh0aW1lKSB7XG4gICAgICAgIHRpbWVySWQgPSB1bmRlZmluZWQ7XG5cbiAgICAgICAgLy8gT25seSBpbnZva2UgaWYgd2UgaGF2ZSBgbGFzdEFyZ3NgIHdoaWNoIG1lYW5zIGBmdW5jYCBoYXMgYmVlblxuICAgICAgICAvLyBkZWJvdW5jZWQgYXQgbGVhc3Qgb25jZS5cbiAgICAgICAgaWYgKHRyYWlsaW5nICYmIGxhc3RBcmdzKSB7XG4gICAgICAgICAgcmV0dXJuIGludm9rZUZ1bmModGltZSk7XG4gICAgICAgIH1cbiAgICAgICAgbGFzdEFyZ3MgPSBsYXN0VGhpcyA9IHVuZGVmaW5lZDtcbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICAgIH1cblxuICAgICAgZnVuY3Rpb24gY2FuY2VsKCkge1xuICAgICAgICBpZiAodGltZXJJZCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgY2xlYXJUaW1lb3V0KHRpbWVySWQpO1xuICAgICAgICB9XG4gICAgICAgIGxhc3RJbnZva2VUaW1lID0gMDtcbiAgICAgICAgbGFzdEFyZ3MgPSBsYXN0Q2FsbFRpbWUgPSBsYXN0VGhpcyA9IHRpbWVySWQgPSB1bmRlZmluZWQ7XG4gICAgICB9XG5cbiAgICAgIGZ1bmN0aW9uIGZsdXNoKCkge1xuICAgICAgICByZXR1cm4gdGltZXJJZCA9PT0gdW5kZWZpbmVkID8gcmVzdWx0IDogdHJhaWxpbmdFZGdlKG5vdygpKTtcbiAgICAgIH1cblxuICAgICAgZnVuY3Rpb24gZGVib3VuY2VkKCkge1xuICAgICAgICB2YXIgdGltZSA9IG5vdygpLFxuICAgICAgICAgICAgaXNJbnZva2luZyA9IHNob3VsZEludm9rZSh0aW1lKTtcblxuICAgICAgICBsYXN0QXJncyA9IGFyZ3VtZW50cztcbiAgICAgICAgbGFzdFRoaXMgPSB0aGlzO1xuICAgICAgICBsYXN0Q2FsbFRpbWUgPSB0aW1lO1xuXG4gICAgICAgIGlmIChpc0ludm9raW5nKSB7XG4gICAgICAgICAgaWYgKHRpbWVySWQgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgcmV0dXJuIGxlYWRpbmdFZGdlKGxhc3RDYWxsVGltZSk7XG4gICAgICAgICAgfVxuICAgICAgICAgIGlmIChtYXhpbmcpIHtcbiAgICAgICAgICAgIC8vIEhhbmRsZSBpbnZvY2F0aW9ucyBpbiBhIHRpZ2h0IGxvb3AuXG4gICAgICAgICAgICBjbGVhclRpbWVvdXQodGltZXJJZCk7XG4gICAgICAgICAgICB0aW1lcklkID0gc2V0VGltZW91dCh0aW1lckV4cGlyZWQsIHdhaXQpO1xuICAgICAgICAgICAgcmV0dXJuIGludm9rZUZ1bmMobGFzdENhbGxUaW1lKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHRpbWVySWQgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgIHRpbWVySWQgPSBzZXRUaW1lb3V0KHRpbWVyRXhwaXJlZCwgd2FpdCk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICAgIH1cbiAgICAgIGRlYm91bmNlZC5jYW5jZWwgPSBjYW5jZWw7XG4gICAgICBkZWJvdW5jZWQuZmx1c2ggPSBmbHVzaDtcbiAgICAgIHJldHVybiBkZWJvdW5jZWQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogRGVmZXJzIGludm9raW5nIHRoZSBgZnVuY2AgdW50aWwgdGhlIGN1cnJlbnQgY2FsbCBzdGFjayBoYXMgY2xlYXJlZC4gQW55XG4gICAgICogYWRkaXRpb25hbCBhcmd1bWVudHMgYXJlIHByb3ZpZGVkIHRvIGBmdW5jYCB3aGVuIGl0J3MgaW52b2tlZC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAwLjEuMFxuICAgICAqIEBjYXRlZ29yeSBGdW5jdGlvblxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGZ1bmMgVGhlIGZ1bmN0aW9uIHRvIGRlZmVyLlxuICAgICAqIEBwYXJhbSB7Li4uKn0gW2FyZ3NdIFRoZSBhcmd1bWVudHMgdG8gaW52b2tlIGBmdW5jYCB3aXRoLlxuICAgICAqIEByZXR1cm5zIHtudW1iZXJ9IFJldHVybnMgdGhlIHRpbWVyIGlkLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLmRlZmVyKGZ1bmN0aW9uKHRleHQpIHtcbiAgICAgKiAgIGNvbnNvbGUubG9nKHRleHQpO1xuICAgICAqIH0sICdkZWZlcnJlZCcpO1xuICAgICAqIC8vID0+IExvZ3MgJ2RlZmVycmVkJyBhZnRlciBvbmUgbWlsbGlzZWNvbmQuXG4gICAgICovXG4gICAgdmFyIGRlZmVyID0gYmFzZVJlc3QoZnVuY3Rpb24oZnVuYywgYXJncykge1xuICAgICAgcmV0dXJuIGJhc2VEZWxheShmdW5jLCAxLCBhcmdzKTtcbiAgICB9KTtcblxuICAgIC8qKlxuICAgICAqIEludm9rZXMgYGZ1bmNgIGFmdGVyIGB3YWl0YCBtaWxsaXNlY29uZHMuIEFueSBhZGRpdGlvbmFsIGFyZ3VtZW50cyBhcmVcbiAgICAgKiBwcm92aWRlZCB0byBgZnVuY2Agd2hlbiBpdCdzIGludm9rZWQuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMC4xLjBcbiAgICAgKiBAY2F0ZWdvcnkgRnVuY3Rpb25cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBmdW5jIFRoZSBmdW5jdGlvbiB0byBkZWxheS5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gd2FpdCBUaGUgbnVtYmVyIG9mIG1pbGxpc2Vjb25kcyB0byBkZWxheSBpbnZvY2F0aW9uLlxuICAgICAqIEBwYXJhbSB7Li4uKn0gW2FyZ3NdIFRoZSBhcmd1bWVudHMgdG8gaW52b2tlIGBmdW5jYCB3aXRoLlxuICAgICAqIEByZXR1cm5zIHtudW1iZXJ9IFJldHVybnMgdGhlIHRpbWVyIGlkLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLmRlbGF5KGZ1bmN0aW9uKHRleHQpIHtcbiAgICAgKiAgIGNvbnNvbGUubG9nKHRleHQpO1xuICAgICAqIH0sIDEwMDAsICdsYXRlcicpO1xuICAgICAqIC8vID0+IExvZ3MgJ2xhdGVyJyBhZnRlciBvbmUgc2Vjb25kLlxuICAgICAqL1xuICAgIHZhciBkZWxheSA9IGJhc2VSZXN0KGZ1bmN0aW9uKGZ1bmMsIHdhaXQsIGFyZ3MpIHtcbiAgICAgIHJldHVybiBiYXNlRGVsYXkoZnVuYywgdG9OdW1iZXIod2FpdCkgfHwgMCwgYXJncyk7XG4gICAgfSk7XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgZnVuY3Rpb24gdGhhdCBpbnZva2VzIGBmdW5jYCB3aXRoIGFyZ3VtZW50cyByZXZlcnNlZC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjAuMFxuICAgICAqIEBjYXRlZ29yeSBGdW5jdGlvblxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGZ1bmMgVGhlIGZ1bmN0aW9uIHRvIGZsaXAgYXJndW1lbnRzIGZvci5cbiAgICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyBmbGlwcGVkIGZ1bmN0aW9uLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgZmxpcHBlZCA9IF8uZmxpcChmdW5jdGlvbigpIHtcbiAgICAgKiAgIHJldHVybiBfLnRvQXJyYXkoYXJndW1lbnRzKTtcbiAgICAgKiB9KTtcbiAgICAgKlxuICAgICAqIGZsaXBwZWQoJ2EnLCAnYicsICdjJywgJ2QnKTtcbiAgICAgKiAvLyA9PiBbJ2QnLCAnYycsICdiJywgJ2EnXVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGZsaXAoZnVuYykge1xuICAgICAgcmV0dXJuIGNyZWF0ZVdyYXAoZnVuYywgV1JBUF9GTElQX0ZMQUcpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBmdW5jdGlvbiB0aGF0IG1lbW9pemVzIHRoZSByZXN1bHQgb2YgYGZ1bmNgLiBJZiBgcmVzb2x2ZXJgIGlzXG4gICAgICogcHJvdmlkZWQsIGl0IGRldGVybWluZXMgdGhlIGNhY2hlIGtleSBmb3Igc3RvcmluZyB0aGUgcmVzdWx0IGJhc2VkIG9uIHRoZVxuICAgICAqIGFyZ3VtZW50cyBwcm92aWRlZCB0byB0aGUgbWVtb2l6ZWQgZnVuY3Rpb24uIEJ5IGRlZmF1bHQsIHRoZSBmaXJzdCBhcmd1bWVudFxuICAgICAqIHByb3ZpZGVkIHRvIHRoZSBtZW1vaXplZCBmdW5jdGlvbiBpcyB1c2VkIGFzIHRoZSBtYXAgY2FjaGUga2V5LiBUaGUgYGZ1bmNgXG4gICAgICogaXMgaW52b2tlZCB3aXRoIHRoZSBgdGhpc2AgYmluZGluZyBvZiB0aGUgbWVtb2l6ZWQgZnVuY3Rpb24uXG4gICAgICpcbiAgICAgKiAqKk5vdGU6KiogVGhlIGNhY2hlIGlzIGV4cG9zZWQgYXMgdGhlIGBjYWNoZWAgcHJvcGVydHkgb24gdGhlIG1lbW9pemVkXG4gICAgICogZnVuY3Rpb24uIEl0cyBjcmVhdGlvbiBtYXkgYmUgY3VzdG9taXplZCBieSByZXBsYWNpbmcgdGhlIGBfLm1lbW9pemUuQ2FjaGVgXG4gICAgICogY29uc3RydWN0b3Igd2l0aCBvbmUgd2hvc2UgaW5zdGFuY2VzIGltcGxlbWVudCB0aGVcbiAgICAgKiBbYE1hcGBdKGh0dHA6Ly9lY21hLWludGVybmF0aW9uYWwub3JnL2VjbWEtMjYyLzcuMC8jc2VjLXByb3BlcnRpZXMtb2YtdGhlLW1hcC1wcm90b3R5cGUtb2JqZWN0KVxuICAgICAqIG1ldGhvZCBpbnRlcmZhY2Ugb2YgYGNsZWFyYCwgYGRlbGV0ZWAsIGBnZXRgLCBgaGFzYCwgYW5kIGBzZXRgLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDAuMS4wXG4gICAgICogQGNhdGVnb3J5IEZ1bmN0aW9uXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gZnVuYyBUaGUgZnVuY3Rpb24gdG8gaGF2ZSBpdHMgb3V0cHV0IG1lbW9pemVkLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtyZXNvbHZlcl0gVGhlIGZ1bmN0aW9uIHRvIHJlc29sdmUgdGhlIGNhY2hlIGtleS5cbiAgICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyBtZW1vaXplZCBmdW5jdGlvbi5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIG9iamVjdCA9IHsgJ2EnOiAxLCAnYic6IDIgfTtcbiAgICAgKiB2YXIgb3RoZXIgPSB7ICdjJzogMywgJ2QnOiA0IH07XG4gICAgICpcbiAgICAgKiB2YXIgdmFsdWVzID0gXy5tZW1vaXplKF8udmFsdWVzKTtcbiAgICAgKiB2YWx1ZXMob2JqZWN0KTtcbiAgICAgKiAvLyA9PiBbMSwgMl1cbiAgICAgKlxuICAgICAqIHZhbHVlcyhvdGhlcik7XG4gICAgICogLy8gPT4gWzMsIDRdXG4gICAgICpcbiAgICAgKiBvYmplY3QuYSA9IDI7XG4gICAgICogdmFsdWVzKG9iamVjdCk7XG4gICAgICogLy8gPT4gWzEsIDJdXG4gICAgICpcbiAgICAgKiAvLyBNb2RpZnkgdGhlIHJlc3VsdCBjYWNoZS5cbiAgICAgKiB2YWx1ZXMuY2FjaGUuc2V0KG9iamVjdCwgWydhJywgJ2InXSk7XG4gICAgICogdmFsdWVzKG9iamVjdCk7XG4gICAgICogLy8gPT4gWydhJywgJ2InXVxuICAgICAqXG4gICAgICogLy8gUmVwbGFjZSBgXy5tZW1vaXplLkNhY2hlYC5cbiAgICAgKiBfLm1lbW9pemUuQ2FjaGUgPSBXZWFrTWFwO1xuICAgICAqL1xuICAgIGZ1bmN0aW9uIG1lbW9pemUoZnVuYywgcmVzb2x2ZXIpIHtcbiAgICAgIGlmICh0eXBlb2YgZnVuYyAhPSAnZnVuY3Rpb24nIHx8IChyZXNvbHZlciAhPSBudWxsICYmIHR5cGVvZiByZXNvbHZlciAhPSAnZnVuY3Rpb24nKSkge1xuICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKEZVTkNfRVJST1JfVEVYVCk7XG4gICAgICB9XG4gICAgICB2YXIgbWVtb2l6ZWQgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgdmFyIGFyZ3MgPSBhcmd1bWVudHMsXG4gICAgICAgICAgICBrZXkgPSByZXNvbHZlciA/IHJlc29sdmVyLmFwcGx5KHRoaXMsIGFyZ3MpIDogYXJnc1swXSxcbiAgICAgICAgICAgIGNhY2hlID0gbWVtb2l6ZWQuY2FjaGU7XG5cbiAgICAgICAgaWYgKGNhY2hlLmhhcyhrZXkpKSB7XG4gICAgICAgICAgcmV0dXJuIGNhY2hlLmdldChrZXkpO1xuICAgICAgICB9XG4gICAgICAgIHZhciByZXN1bHQgPSBmdW5jLmFwcGx5KHRoaXMsIGFyZ3MpO1xuICAgICAgICBtZW1vaXplZC5jYWNoZSA9IGNhY2hlLnNldChrZXksIHJlc3VsdCkgfHwgY2FjaGU7XG4gICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgICB9O1xuICAgICAgbWVtb2l6ZWQuY2FjaGUgPSBuZXcgKG1lbW9pemUuQ2FjaGUgfHwgTWFwQ2FjaGUpO1xuICAgICAgcmV0dXJuIG1lbW9pemVkO1xuICAgIH1cblxuICAgIC8vIEV4cG9zZSBgTWFwQ2FjaGVgLlxuICAgIG1lbW9pemUuQ2FjaGUgPSBNYXBDYWNoZTtcblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBmdW5jdGlvbiB0aGF0IG5lZ2F0ZXMgdGhlIHJlc3VsdCBvZiB0aGUgcHJlZGljYXRlIGBmdW5jYC4gVGhlXG4gICAgICogYGZ1bmNgIHByZWRpY2F0ZSBpcyBpbnZva2VkIHdpdGggdGhlIGB0aGlzYCBiaW5kaW5nIGFuZCBhcmd1bWVudHMgb2YgdGhlXG4gICAgICogY3JlYXRlZCBmdW5jdGlvbi5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAzLjAuMFxuICAgICAqIEBjYXRlZ29yeSBGdW5jdGlvblxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IHByZWRpY2F0ZSBUaGUgcHJlZGljYXRlIHRvIG5lZ2F0ZS5cbiAgICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyBuZWdhdGVkIGZ1bmN0aW9uLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBmdW5jdGlvbiBpc0V2ZW4obikge1xuICAgICAqICAgcmV0dXJuIG4gJSAyID09IDA7XG4gICAgICogfVxuICAgICAqXG4gICAgICogXy5maWx0ZXIoWzEsIDIsIDMsIDQsIDUsIDZdLCBfLm5lZ2F0ZShpc0V2ZW4pKTtcbiAgICAgKiAvLyA9PiBbMSwgMywgNV1cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBuZWdhdGUocHJlZGljYXRlKSB7XG4gICAgICBpZiAodHlwZW9mIHByZWRpY2F0ZSAhPSAnZnVuY3Rpb24nKSB7XG4gICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoRlVOQ19FUlJPUl9URVhUKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICAgICAgdmFyIGFyZ3MgPSBhcmd1bWVudHM7XG4gICAgICAgIHN3aXRjaCAoYXJncy5sZW5ndGgpIHtcbiAgICAgICAgICBjYXNlIDA6IHJldHVybiAhcHJlZGljYXRlLmNhbGwodGhpcyk7XG4gICAgICAgICAgY2FzZSAxOiByZXR1cm4gIXByZWRpY2F0ZS5jYWxsKHRoaXMsIGFyZ3NbMF0pO1xuICAgICAgICAgIGNhc2UgMjogcmV0dXJuICFwcmVkaWNhdGUuY2FsbCh0aGlzLCBhcmdzWzBdLCBhcmdzWzFdKTtcbiAgICAgICAgICBjYXNlIDM6IHJldHVybiAhcHJlZGljYXRlLmNhbGwodGhpcywgYXJnc1swXSwgYXJnc1sxXSwgYXJnc1syXSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuICFwcmVkaWNhdGUuYXBwbHkodGhpcywgYXJncyk7XG4gICAgICB9O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBmdW5jdGlvbiB0aGF0IGlzIHJlc3RyaWN0ZWQgdG8gaW52b2tpbmcgYGZ1bmNgIG9uY2UuIFJlcGVhdCBjYWxsc1xuICAgICAqIHRvIHRoZSBmdW5jdGlvbiByZXR1cm4gdGhlIHZhbHVlIG9mIHRoZSBmaXJzdCBpbnZvY2F0aW9uLiBUaGUgYGZ1bmNgIGlzXG4gICAgICogaW52b2tlZCB3aXRoIHRoZSBgdGhpc2AgYmluZGluZyBhbmQgYXJndW1lbnRzIG9mIHRoZSBjcmVhdGVkIGZ1bmN0aW9uLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDAuMS4wXG4gICAgICogQGNhdGVnb3J5IEZ1bmN0aW9uXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gZnVuYyBUaGUgZnVuY3Rpb24gdG8gcmVzdHJpY3QuXG4gICAgICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgcmVzdHJpY3RlZCBmdW5jdGlvbi5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIGluaXRpYWxpemUgPSBfLm9uY2UoY3JlYXRlQXBwbGljYXRpb24pO1xuICAgICAqIGluaXRpYWxpemUoKTtcbiAgICAgKiBpbml0aWFsaXplKCk7XG4gICAgICogLy8gPT4gYGNyZWF0ZUFwcGxpY2F0aW9uYCBpcyBpbnZva2VkIG9uY2VcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBvbmNlKGZ1bmMpIHtcbiAgICAgIHJldHVybiBiZWZvcmUoMiwgZnVuYyk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIGZ1bmN0aW9uIHRoYXQgaW52b2tlcyBgZnVuY2Agd2l0aCBpdHMgYXJndW1lbnRzIHRyYW5zZm9ybWVkLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBzaW5jZSA0LjAuMFxuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQGNhdGVnb3J5IEZ1bmN0aW9uXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gZnVuYyBUaGUgZnVuY3Rpb24gdG8gd3JhcC5cbiAgICAgKiBAcGFyYW0gey4uLihGdW5jdGlvbnxGdW5jdGlvbltdKX0gW3RyYW5zZm9ybXM9W18uaWRlbnRpdHldXVxuICAgICAqICBUaGUgYXJndW1lbnQgdHJhbnNmb3Jtcy5cbiAgICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyBmdW5jdGlvbi5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogZnVuY3Rpb24gZG91YmxlZChuKSB7XG4gICAgICogICByZXR1cm4gbiAqIDI7XG4gICAgICogfVxuICAgICAqXG4gICAgICogZnVuY3Rpb24gc3F1YXJlKG4pIHtcbiAgICAgKiAgIHJldHVybiBuICogbjtcbiAgICAgKiB9XG4gICAgICpcbiAgICAgKiB2YXIgZnVuYyA9IF8ub3ZlckFyZ3MoZnVuY3Rpb24oeCwgeSkge1xuICAgICAqICAgcmV0dXJuIFt4LCB5XTtcbiAgICAgKiB9LCBbc3F1YXJlLCBkb3VibGVkXSk7XG4gICAgICpcbiAgICAgKiBmdW5jKDksIDMpO1xuICAgICAqIC8vID0+IFs4MSwgNl1cbiAgICAgKlxuICAgICAqIGZ1bmMoMTAsIDUpO1xuICAgICAqIC8vID0+IFsxMDAsIDEwXVxuICAgICAqL1xuICAgIHZhciBvdmVyQXJncyA9IGNhc3RSZXN0KGZ1bmN0aW9uKGZ1bmMsIHRyYW5zZm9ybXMpIHtcbiAgICAgIHRyYW5zZm9ybXMgPSAodHJhbnNmb3Jtcy5sZW5ndGggPT0gMSAmJiBpc0FycmF5KHRyYW5zZm9ybXNbMF0pKVxuICAgICAgICA/IGFycmF5TWFwKHRyYW5zZm9ybXNbMF0sIGJhc2VVbmFyeShnZXRJdGVyYXRlZSgpKSlcbiAgICAgICAgOiBhcnJheU1hcChiYXNlRmxhdHRlbih0cmFuc2Zvcm1zLCAxKSwgYmFzZVVuYXJ5KGdldEl0ZXJhdGVlKCkpKTtcblxuICAgICAgdmFyIGZ1bmNzTGVuZ3RoID0gdHJhbnNmb3Jtcy5sZW5ndGg7XG4gICAgICByZXR1cm4gYmFzZVJlc3QoZnVuY3Rpb24oYXJncykge1xuICAgICAgICB2YXIgaW5kZXggPSAtMSxcbiAgICAgICAgICAgIGxlbmd0aCA9IG5hdGl2ZU1pbihhcmdzLmxlbmd0aCwgZnVuY3NMZW5ndGgpO1xuXG4gICAgICAgIHdoaWxlICgrK2luZGV4IDwgbGVuZ3RoKSB7XG4gICAgICAgICAgYXJnc1tpbmRleF0gPSB0cmFuc2Zvcm1zW2luZGV4XS5jYWxsKHRoaXMsIGFyZ3NbaW5kZXhdKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gYXBwbHkoZnVuYywgdGhpcywgYXJncyk7XG4gICAgICB9KTtcbiAgICB9KTtcblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBmdW5jdGlvbiB0aGF0IGludm9rZXMgYGZ1bmNgIHdpdGggYHBhcnRpYWxzYCBwcmVwZW5kZWQgdG8gdGhlXG4gICAgICogYXJndW1lbnRzIGl0IHJlY2VpdmVzLiBUaGlzIG1ldGhvZCBpcyBsaWtlIGBfLmJpbmRgIGV4Y2VwdCBpdCBkb2VzICoqbm90KipcbiAgICAgKiBhbHRlciB0aGUgYHRoaXNgIGJpbmRpbmcuXG4gICAgICpcbiAgICAgKiBUaGUgYF8ucGFydGlhbC5wbGFjZWhvbGRlcmAgdmFsdWUsIHdoaWNoIGRlZmF1bHRzIHRvIGBfYCBpbiBtb25vbGl0aGljXG4gICAgICogYnVpbGRzLCBtYXkgYmUgdXNlZCBhcyBhIHBsYWNlaG9sZGVyIGZvciBwYXJ0aWFsbHkgYXBwbGllZCBhcmd1bWVudHMuXG4gICAgICpcbiAgICAgKiAqKk5vdGU6KiogVGhpcyBtZXRob2QgZG9lc24ndCBzZXQgdGhlIFwibGVuZ3RoXCIgcHJvcGVydHkgb2YgcGFydGlhbGx5XG4gICAgICogYXBwbGllZCBmdW5jdGlvbnMuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMC4yLjBcbiAgICAgKiBAY2F0ZWdvcnkgRnVuY3Rpb25cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBmdW5jIFRoZSBmdW5jdGlvbiB0byBwYXJ0aWFsbHkgYXBwbHkgYXJndW1lbnRzIHRvLlxuICAgICAqIEBwYXJhbSB7Li4uKn0gW3BhcnRpYWxzXSBUaGUgYXJndW1lbnRzIHRvIGJlIHBhcnRpYWxseSBhcHBsaWVkLlxuICAgICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IHBhcnRpYWxseSBhcHBsaWVkIGZ1bmN0aW9uLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBmdW5jdGlvbiBncmVldChncmVldGluZywgbmFtZSkge1xuICAgICAqICAgcmV0dXJuIGdyZWV0aW5nICsgJyAnICsgbmFtZTtcbiAgICAgKiB9XG4gICAgICpcbiAgICAgKiB2YXIgc2F5SGVsbG9UbyA9IF8ucGFydGlhbChncmVldCwgJ2hlbGxvJyk7XG4gICAgICogc2F5SGVsbG9UbygnZnJlZCcpO1xuICAgICAqIC8vID0+ICdoZWxsbyBmcmVkJ1xuICAgICAqXG4gICAgICogLy8gUGFydGlhbGx5IGFwcGxpZWQgd2l0aCBwbGFjZWhvbGRlcnMuXG4gICAgICogdmFyIGdyZWV0RnJlZCA9IF8ucGFydGlhbChncmVldCwgXywgJ2ZyZWQnKTtcbiAgICAgKiBncmVldEZyZWQoJ2hpJyk7XG4gICAgICogLy8gPT4gJ2hpIGZyZWQnXG4gICAgICovXG4gICAgdmFyIHBhcnRpYWwgPSBiYXNlUmVzdChmdW5jdGlvbihmdW5jLCBwYXJ0aWFscykge1xuICAgICAgdmFyIGhvbGRlcnMgPSByZXBsYWNlSG9sZGVycyhwYXJ0aWFscywgZ2V0SG9sZGVyKHBhcnRpYWwpKTtcbiAgICAgIHJldHVybiBjcmVhdGVXcmFwKGZ1bmMsIFdSQVBfUEFSVElBTF9GTEFHLCB1bmRlZmluZWQsIHBhcnRpYWxzLCBob2xkZXJzKTtcbiAgICB9KTtcblxuICAgIC8qKlxuICAgICAqIFRoaXMgbWV0aG9kIGlzIGxpa2UgYF8ucGFydGlhbGAgZXhjZXB0IHRoYXQgcGFydGlhbGx5IGFwcGxpZWQgYXJndW1lbnRzXG4gICAgICogYXJlIGFwcGVuZGVkIHRvIHRoZSBhcmd1bWVudHMgaXQgcmVjZWl2ZXMuXG4gICAgICpcbiAgICAgKiBUaGUgYF8ucGFydGlhbFJpZ2h0LnBsYWNlaG9sZGVyYCB2YWx1ZSwgd2hpY2ggZGVmYXVsdHMgdG8gYF9gIGluIG1vbm9saXRoaWNcbiAgICAgKiBidWlsZHMsIG1heSBiZSB1c2VkIGFzIGEgcGxhY2Vob2xkZXIgZm9yIHBhcnRpYWxseSBhcHBsaWVkIGFyZ3VtZW50cy5cbiAgICAgKlxuICAgICAqICoqTm90ZToqKiBUaGlzIG1ldGhvZCBkb2Vzbid0IHNldCB0aGUgXCJsZW5ndGhcIiBwcm9wZXJ0eSBvZiBwYXJ0aWFsbHlcbiAgICAgKiBhcHBsaWVkIGZ1bmN0aW9ucy5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAxLjAuMFxuICAgICAqIEBjYXRlZ29yeSBGdW5jdGlvblxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGZ1bmMgVGhlIGZ1bmN0aW9uIHRvIHBhcnRpYWxseSBhcHBseSBhcmd1bWVudHMgdG8uXG4gICAgICogQHBhcmFtIHsuLi4qfSBbcGFydGlhbHNdIFRoZSBhcmd1bWVudHMgdG8gYmUgcGFydGlhbGx5IGFwcGxpZWQuXG4gICAgICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgcGFydGlhbGx5IGFwcGxpZWQgZnVuY3Rpb24uXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIGZ1bmN0aW9uIGdyZWV0KGdyZWV0aW5nLCBuYW1lKSB7XG4gICAgICogICByZXR1cm4gZ3JlZXRpbmcgKyAnICcgKyBuYW1lO1xuICAgICAqIH1cbiAgICAgKlxuICAgICAqIHZhciBncmVldEZyZWQgPSBfLnBhcnRpYWxSaWdodChncmVldCwgJ2ZyZWQnKTtcbiAgICAgKiBncmVldEZyZWQoJ2hpJyk7XG4gICAgICogLy8gPT4gJ2hpIGZyZWQnXG4gICAgICpcbiAgICAgKiAvLyBQYXJ0aWFsbHkgYXBwbGllZCB3aXRoIHBsYWNlaG9sZGVycy5cbiAgICAgKiB2YXIgc2F5SGVsbG9UbyA9IF8ucGFydGlhbFJpZ2h0KGdyZWV0LCAnaGVsbG8nLCBfKTtcbiAgICAgKiBzYXlIZWxsb1RvKCdmcmVkJyk7XG4gICAgICogLy8gPT4gJ2hlbGxvIGZyZWQnXG4gICAgICovXG4gICAgdmFyIHBhcnRpYWxSaWdodCA9IGJhc2VSZXN0KGZ1bmN0aW9uKGZ1bmMsIHBhcnRpYWxzKSB7XG4gICAgICB2YXIgaG9sZGVycyA9IHJlcGxhY2VIb2xkZXJzKHBhcnRpYWxzLCBnZXRIb2xkZXIocGFydGlhbFJpZ2h0KSk7XG4gICAgICByZXR1cm4gY3JlYXRlV3JhcChmdW5jLCBXUkFQX1BBUlRJQUxfUklHSFRfRkxBRywgdW5kZWZpbmVkLCBwYXJ0aWFscywgaG9sZGVycyk7XG4gICAgfSk7XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgZnVuY3Rpb24gdGhhdCBpbnZva2VzIGBmdW5jYCB3aXRoIGFyZ3VtZW50cyBhcnJhbmdlZCBhY2NvcmRpbmdcbiAgICAgKiB0byB0aGUgc3BlY2lmaWVkIGBpbmRleGVzYCB3aGVyZSB0aGUgYXJndW1lbnQgdmFsdWUgYXQgdGhlIGZpcnN0IGluZGV4IGlzXG4gICAgICogcHJvdmlkZWQgYXMgdGhlIGZpcnN0IGFyZ3VtZW50LCB0aGUgYXJndW1lbnQgdmFsdWUgYXQgdGhlIHNlY29uZCBpbmRleCBpc1xuICAgICAqIHByb3ZpZGVkIGFzIHRoZSBzZWNvbmQgYXJndW1lbnQsIGFuZCBzbyBvbi5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAzLjAuMFxuICAgICAqIEBjYXRlZ29yeSBGdW5jdGlvblxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGZ1bmMgVGhlIGZ1bmN0aW9uIHRvIHJlYXJyYW5nZSBhcmd1bWVudHMgZm9yLlxuICAgICAqIEBwYXJhbSB7Li4uKG51bWJlcnxudW1iZXJbXSl9IGluZGV4ZXMgVGhlIGFycmFuZ2VkIGFyZ3VtZW50IGluZGV4ZXMuXG4gICAgICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgZnVuY3Rpb24uXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciByZWFyZ2VkID0gXy5yZWFyZyhmdW5jdGlvbihhLCBiLCBjKSB7XG4gICAgICogICByZXR1cm4gW2EsIGIsIGNdO1xuICAgICAqIH0sIFsyLCAwLCAxXSk7XG4gICAgICpcbiAgICAgKiByZWFyZ2VkKCdiJywgJ2MnLCAnYScpXG4gICAgICogLy8gPT4gWydhJywgJ2InLCAnYyddXG4gICAgICovXG4gICAgdmFyIHJlYXJnID0gZmxhdFJlc3QoZnVuY3Rpb24oZnVuYywgaW5kZXhlcykge1xuICAgICAgcmV0dXJuIGNyZWF0ZVdyYXAoZnVuYywgV1JBUF9SRUFSR19GTEFHLCB1bmRlZmluZWQsIHVuZGVmaW5lZCwgdW5kZWZpbmVkLCBpbmRleGVzKTtcbiAgICB9KTtcblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBmdW5jdGlvbiB0aGF0IGludm9rZXMgYGZ1bmNgIHdpdGggdGhlIGB0aGlzYCBiaW5kaW5nIG9mIHRoZVxuICAgICAqIGNyZWF0ZWQgZnVuY3Rpb24gYW5kIGFyZ3VtZW50cyBmcm9tIGBzdGFydGAgYW5kIGJleW9uZCBwcm92aWRlZCBhc1xuICAgICAqIGFuIGFycmF5LlxuICAgICAqXG4gICAgICogKipOb3RlOioqIFRoaXMgbWV0aG9kIGlzIGJhc2VkIG9uIHRoZVxuICAgICAqIFtyZXN0IHBhcmFtZXRlcl0oaHR0cHM6Ly9tZG4uaW8vcmVzdF9wYXJhbWV0ZXJzKS5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjAuMFxuICAgICAqIEBjYXRlZ29yeSBGdW5jdGlvblxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGZ1bmMgVGhlIGZ1bmN0aW9uIHRvIGFwcGx5IGEgcmVzdCBwYXJhbWV0ZXIgdG8uXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IFtzdGFydD1mdW5jLmxlbmd0aC0xXSBUaGUgc3RhcnQgcG9zaXRpb24gb2YgdGhlIHJlc3QgcGFyYW1ldGVyLlxuICAgICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IGZ1bmN0aW9uLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgc2F5ID0gXy5yZXN0KGZ1bmN0aW9uKHdoYXQsIG5hbWVzKSB7XG4gICAgICogICByZXR1cm4gd2hhdCArICcgJyArIF8uaW5pdGlhbChuYW1lcykuam9pbignLCAnKSArXG4gICAgICogICAgIChfLnNpemUobmFtZXMpID4gMSA/ICcsICYgJyA6ICcnKSArIF8ubGFzdChuYW1lcyk7XG4gICAgICogfSk7XG4gICAgICpcbiAgICAgKiBzYXkoJ2hlbGxvJywgJ2ZyZWQnLCAnYmFybmV5JywgJ3BlYmJsZXMnKTtcbiAgICAgKiAvLyA9PiAnaGVsbG8gZnJlZCwgYmFybmV5LCAmIHBlYmJsZXMnXG4gICAgICovXG4gICAgZnVuY3Rpb24gcmVzdChmdW5jLCBzdGFydCkge1xuICAgICAgaWYgKHR5cGVvZiBmdW5jICE9ICdmdW5jdGlvbicpIHtcbiAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcihGVU5DX0VSUk9SX1RFWFQpO1xuICAgICAgfVxuICAgICAgc3RhcnQgPSBzdGFydCA9PT0gdW5kZWZpbmVkID8gc3RhcnQgOiB0b0ludGVnZXIoc3RhcnQpO1xuICAgICAgcmV0dXJuIGJhc2VSZXN0KGZ1bmMsIHN0YXJ0KTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgZnVuY3Rpb24gdGhhdCBpbnZva2VzIGBmdW5jYCB3aXRoIHRoZSBgdGhpc2AgYmluZGluZyBvZiB0aGVcbiAgICAgKiBjcmVhdGUgZnVuY3Rpb24gYW5kIGFuIGFycmF5IG9mIGFyZ3VtZW50cyBtdWNoIGxpa2VcbiAgICAgKiBbYEZ1bmN0aW9uI2FwcGx5YF0oaHR0cDovL3d3dy5lY21hLWludGVybmF0aW9uYWwub3JnL2VjbWEtMjYyLzcuMC8jc2VjLWZ1bmN0aW9uLnByb3RvdHlwZS5hcHBseSkuXG4gICAgICpcbiAgICAgKiAqKk5vdGU6KiogVGhpcyBtZXRob2QgaXMgYmFzZWQgb24gdGhlXG4gICAgICogW3NwcmVhZCBvcGVyYXRvcl0oaHR0cHM6Ly9tZG4uaW8vc3ByZWFkX29wZXJhdG9yKS5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAzLjIuMFxuICAgICAqIEBjYXRlZ29yeSBGdW5jdGlvblxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGZ1bmMgVGhlIGZ1bmN0aW9uIHRvIHNwcmVhZCBhcmd1bWVudHMgb3Zlci5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gW3N0YXJ0PTBdIFRoZSBzdGFydCBwb3NpdGlvbiBvZiB0aGUgc3ByZWFkLlxuICAgICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IGZ1bmN0aW9uLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgc2F5ID0gXy5zcHJlYWQoZnVuY3Rpb24od2hvLCB3aGF0KSB7XG4gICAgICogICByZXR1cm4gd2hvICsgJyBzYXlzICcgKyB3aGF0O1xuICAgICAqIH0pO1xuICAgICAqXG4gICAgICogc2F5KFsnZnJlZCcsICdoZWxsbyddKTtcbiAgICAgKiAvLyA9PiAnZnJlZCBzYXlzIGhlbGxvJ1xuICAgICAqXG4gICAgICogdmFyIG51bWJlcnMgPSBQcm9taXNlLmFsbChbXG4gICAgICogICBQcm9taXNlLnJlc29sdmUoNDApLFxuICAgICAqICAgUHJvbWlzZS5yZXNvbHZlKDM2KVxuICAgICAqIF0pO1xuICAgICAqXG4gICAgICogbnVtYmVycy50aGVuKF8uc3ByZWFkKGZ1bmN0aW9uKHgsIHkpIHtcbiAgICAgKiAgIHJldHVybiB4ICsgeTtcbiAgICAgKiB9KSk7XG4gICAgICogLy8gPT4gYSBQcm9taXNlIG9mIDc2XG4gICAgICovXG4gICAgZnVuY3Rpb24gc3ByZWFkKGZ1bmMsIHN0YXJ0KSB7XG4gICAgICBpZiAodHlwZW9mIGZ1bmMgIT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKEZVTkNfRVJST1JfVEVYVCk7XG4gICAgICB9XG4gICAgICBzdGFydCA9IHN0YXJ0ID09IG51bGwgPyAwIDogbmF0aXZlTWF4KHRvSW50ZWdlcihzdGFydCksIDApO1xuICAgICAgcmV0dXJuIGJhc2VSZXN0KGZ1bmN0aW9uKGFyZ3MpIHtcbiAgICAgICAgdmFyIGFycmF5ID0gYXJnc1tzdGFydF0sXG4gICAgICAgICAgICBvdGhlckFyZ3MgPSBjYXN0U2xpY2UoYXJncywgMCwgc3RhcnQpO1xuXG4gICAgICAgIGlmIChhcnJheSkge1xuICAgICAgICAgIGFycmF5UHVzaChvdGhlckFyZ3MsIGFycmF5KTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gYXBwbHkoZnVuYywgdGhpcywgb3RoZXJBcmdzKTtcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSB0aHJvdHRsZWQgZnVuY3Rpb24gdGhhdCBvbmx5IGludm9rZXMgYGZ1bmNgIGF0IG1vc3Qgb25jZSBwZXJcbiAgICAgKiBldmVyeSBgd2FpdGAgbWlsbGlzZWNvbmRzLiBUaGUgdGhyb3R0bGVkIGZ1bmN0aW9uIGNvbWVzIHdpdGggYSBgY2FuY2VsYFxuICAgICAqIG1ldGhvZCB0byBjYW5jZWwgZGVsYXllZCBgZnVuY2AgaW52b2NhdGlvbnMgYW5kIGEgYGZsdXNoYCBtZXRob2QgdG9cbiAgICAgKiBpbW1lZGlhdGVseSBpbnZva2UgdGhlbS4gUHJvdmlkZSBgb3B0aW9uc2AgdG8gaW5kaWNhdGUgd2hldGhlciBgZnVuY2BcbiAgICAgKiBzaG91bGQgYmUgaW52b2tlZCBvbiB0aGUgbGVhZGluZyBhbmQvb3IgdHJhaWxpbmcgZWRnZSBvZiB0aGUgYHdhaXRgXG4gICAgICogdGltZW91dC4gVGhlIGBmdW5jYCBpcyBpbnZva2VkIHdpdGggdGhlIGxhc3QgYXJndW1lbnRzIHByb3ZpZGVkIHRvIHRoZVxuICAgICAqIHRocm90dGxlZCBmdW5jdGlvbi4gU3Vic2VxdWVudCBjYWxscyB0byB0aGUgdGhyb3R0bGVkIGZ1bmN0aW9uIHJldHVybiB0aGVcbiAgICAgKiByZXN1bHQgb2YgdGhlIGxhc3QgYGZ1bmNgIGludm9jYXRpb24uXG4gICAgICpcbiAgICAgKiAqKk5vdGU6KiogSWYgYGxlYWRpbmdgIGFuZCBgdHJhaWxpbmdgIG9wdGlvbnMgYXJlIGB0cnVlYCwgYGZ1bmNgIGlzXG4gICAgICogaW52b2tlZCBvbiB0aGUgdHJhaWxpbmcgZWRnZSBvZiB0aGUgdGltZW91dCBvbmx5IGlmIHRoZSB0aHJvdHRsZWQgZnVuY3Rpb25cbiAgICAgKiBpcyBpbnZva2VkIG1vcmUgdGhhbiBvbmNlIGR1cmluZyB0aGUgYHdhaXRgIHRpbWVvdXQuXG4gICAgICpcbiAgICAgKiBJZiBgd2FpdGAgaXMgYDBgIGFuZCBgbGVhZGluZ2AgaXMgYGZhbHNlYCwgYGZ1bmNgIGludm9jYXRpb24gaXMgZGVmZXJyZWRcbiAgICAgKiB1bnRpbCB0byB0aGUgbmV4dCB0aWNrLCBzaW1pbGFyIHRvIGBzZXRUaW1lb3V0YCB3aXRoIGEgdGltZW91dCBvZiBgMGAuXG4gICAgICpcbiAgICAgKiBTZWUgW0RhdmlkIENvcmJhY2hvJ3MgYXJ0aWNsZV0oaHR0cHM6Ly9jc3MtdHJpY2tzLmNvbS9kZWJvdW5jaW5nLXRocm90dGxpbmctZXhwbGFpbmVkLWV4YW1wbGVzLylcbiAgICAgKiBmb3IgZGV0YWlscyBvdmVyIHRoZSBkaWZmZXJlbmNlcyBiZXR3ZWVuIGBfLnRocm90dGxlYCBhbmQgYF8uZGVib3VuY2VgLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDAuMS4wXG4gICAgICogQGNhdGVnb3J5IEZ1bmN0aW9uXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gZnVuYyBUaGUgZnVuY3Rpb24gdG8gdGhyb3R0bGUuXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IFt3YWl0PTBdIFRoZSBudW1iZXIgb2YgbWlsbGlzZWNvbmRzIHRvIHRocm90dGxlIGludm9jYXRpb25zIHRvLlxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBbb3B0aW9ucz17fV0gVGhlIG9wdGlvbnMgb2JqZWN0LlxuICAgICAqIEBwYXJhbSB7Ym9vbGVhbn0gW29wdGlvbnMubGVhZGluZz10cnVlXVxuICAgICAqICBTcGVjaWZ5IGludm9raW5nIG9uIHRoZSBsZWFkaW5nIGVkZ2Ugb2YgdGhlIHRpbWVvdXQuXG4gICAgICogQHBhcmFtIHtib29sZWFufSBbb3B0aW9ucy50cmFpbGluZz10cnVlXVxuICAgICAqICBTcGVjaWZ5IGludm9raW5nIG9uIHRoZSB0cmFpbGluZyBlZGdlIG9mIHRoZSB0aW1lb3V0LlxuICAgICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IHRocm90dGxlZCBmdW5jdGlvbi5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogLy8gQXZvaWQgZXhjZXNzaXZlbHkgdXBkYXRpbmcgdGhlIHBvc2l0aW9uIHdoaWxlIHNjcm9sbGluZy5cbiAgICAgKiBqUXVlcnkod2luZG93KS5vbignc2Nyb2xsJywgXy50aHJvdHRsZSh1cGRhdGVQb3NpdGlvbiwgMTAwKSk7XG4gICAgICpcbiAgICAgKiAvLyBJbnZva2UgYHJlbmV3VG9rZW5gIHdoZW4gdGhlIGNsaWNrIGV2ZW50IGlzIGZpcmVkLCBidXQgbm90IG1vcmUgdGhhbiBvbmNlIGV2ZXJ5IDUgbWludXRlcy5cbiAgICAgKiB2YXIgdGhyb3R0bGVkID0gXy50aHJvdHRsZShyZW5ld1Rva2VuLCAzMDAwMDAsIHsgJ3RyYWlsaW5nJzogZmFsc2UgfSk7XG4gICAgICogalF1ZXJ5KGVsZW1lbnQpLm9uKCdjbGljaycsIHRocm90dGxlZCk7XG4gICAgICpcbiAgICAgKiAvLyBDYW5jZWwgdGhlIHRyYWlsaW5nIHRocm90dGxlZCBpbnZvY2F0aW9uLlxuICAgICAqIGpRdWVyeSh3aW5kb3cpLm9uKCdwb3BzdGF0ZScsIHRocm90dGxlZC5jYW5jZWwpO1xuICAgICAqL1xuICAgIGZ1bmN0aW9uIHRocm90dGxlKGZ1bmMsIHdhaXQsIG9wdGlvbnMpIHtcbiAgICAgIHZhciBsZWFkaW5nID0gdHJ1ZSxcbiAgICAgICAgICB0cmFpbGluZyA9IHRydWU7XG5cbiAgICAgIGlmICh0eXBlb2YgZnVuYyAhPSAnZnVuY3Rpb24nKSB7XG4gICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoRlVOQ19FUlJPUl9URVhUKTtcbiAgICAgIH1cbiAgICAgIGlmIChpc09iamVjdChvcHRpb25zKSkge1xuICAgICAgICBsZWFkaW5nID0gJ2xlYWRpbmcnIGluIG9wdGlvbnMgPyAhIW9wdGlvbnMubGVhZGluZyA6IGxlYWRpbmc7XG4gICAgICAgIHRyYWlsaW5nID0gJ3RyYWlsaW5nJyBpbiBvcHRpb25zID8gISFvcHRpb25zLnRyYWlsaW5nIDogdHJhaWxpbmc7XG4gICAgICB9XG4gICAgICByZXR1cm4gZGVib3VuY2UoZnVuYywgd2FpdCwge1xuICAgICAgICAnbGVhZGluZyc6IGxlYWRpbmcsXG4gICAgICAgICdtYXhXYWl0Jzogd2FpdCxcbiAgICAgICAgJ3RyYWlsaW5nJzogdHJhaWxpbmdcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBmdW5jdGlvbiB0aGF0IGFjY2VwdHMgdXAgdG8gb25lIGFyZ3VtZW50LCBpZ25vcmluZyBhbnlcbiAgICAgKiBhZGRpdGlvbmFsIGFyZ3VtZW50cy5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjAuMFxuICAgICAqIEBjYXRlZ29yeSBGdW5jdGlvblxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGZ1bmMgVGhlIGZ1bmN0aW9uIHRvIGNhcCBhcmd1bWVudHMgZm9yLlxuICAgICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IGNhcHBlZCBmdW5jdGlvbi5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5tYXAoWyc2JywgJzgnLCAnMTAnXSwgXy51bmFyeShwYXJzZUludCkpO1xuICAgICAqIC8vID0+IFs2LCA4LCAxMF1cbiAgICAgKi9cbiAgICBmdW5jdGlvbiB1bmFyeShmdW5jKSB7XG4gICAgICByZXR1cm4gYXJ5KGZ1bmMsIDEpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBmdW5jdGlvbiB0aGF0IHByb3ZpZGVzIGB2YWx1ZWAgdG8gYHdyYXBwZXJgIGFzIGl0cyBmaXJzdFxuICAgICAqIGFyZ3VtZW50LiBBbnkgYWRkaXRpb25hbCBhcmd1bWVudHMgcHJvdmlkZWQgdG8gdGhlIGZ1bmN0aW9uIGFyZSBhcHBlbmRlZFxuICAgICAqIHRvIHRob3NlIHByb3ZpZGVkIHRvIHRoZSBgd3JhcHBlcmAuIFRoZSB3cmFwcGVyIGlzIGludm9rZWQgd2l0aCB0aGUgYHRoaXNgXG4gICAgICogYmluZGluZyBvZiB0aGUgY3JlYXRlZCBmdW5jdGlvbi5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAwLjEuMFxuICAgICAqIEBjYXRlZ29yeSBGdW5jdGlvblxuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIHdyYXAuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gW3dyYXBwZXI9aWRlbnRpdHldIFRoZSB3cmFwcGVyIGZ1bmN0aW9uLlxuICAgICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IGZ1bmN0aW9uLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgcCA9IF8ud3JhcChfLmVzY2FwZSwgZnVuY3Rpb24oZnVuYywgdGV4dCkge1xuICAgICAqICAgcmV0dXJuICc8cD4nICsgZnVuYyh0ZXh0KSArICc8L3A+JztcbiAgICAgKiB9KTtcbiAgICAgKlxuICAgICAqIHAoJ2ZyZWQsIGJhcm5leSwgJiBwZWJibGVzJyk7XG4gICAgICogLy8gPT4gJzxwPmZyZWQsIGJhcm5leSwgJmFtcDsgcGViYmxlczwvcD4nXG4gICAgICovXG4gICAgZnVuY3Rpb24gd3JhcCh2YWx1ZSwgd3JhcHBlcikge1xuICAgICAgcmV0dXJuIHBhcnRpYWwoY2FzdEZ1bmN0aW9uKHdyYXBwZXIpLCB2YWx1ZSk7XG4gICAgfVxuXG4gICAgLyotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0qL1xuXG4gICAgLyoqXG4gICAgICogQ2FzdHMgYHZhbHVlYCBhcyBhbiBhcnJheSBpZiBpdCdzIG5vdCBvbmUuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC40LjBcbiAgICAgKiBAY2F0ZWdvcnkgTGFuZ1xuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGluc3BlY3QuXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBjYXN0IGFycmF5LlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLmNhc3RBcnJheSgxKTtcbiAgICAgKiAvLyA9PiBbMV1cbiAgICAgKlxuICAgICAqIF8uY2FzdEFycmF5KHsgJ2EnOiAxIH0pO1xuICAgICAqIC8vID0+IFt7ICdhJzogMSB9XVxuICAgICAqXG4gICAgICogXy5jYXN0QXJyYXkoJ2FiYycpO1xuICAgICAqIC8vID0+IFsnYWJjJ11cbiAgICAgKlxuICAgICAqIF8uY2FzdEFycmF5KG51bGwpO1xuICAgICAqIC8vID0+IFtudWxsXVxuICAgICAqXG4gICAgICogXy5jYXN0QXJyYXkodW5kZWZpbmVkKTtcbiAgICAgKiAvLyA9PiBbdW5kZWZpbmVkXVxuICAgICAqXG4gICAgICogXy5jYXN0QXJyYXkoKTtcbiAgICAgKiAvLyA9PiBbXVxuICAgICAqXG4gICAgICogdmFyIGFycmF5ID0gWzEsIDIsIDNdO1xuICAgICAqIGNvbnNvbGUubG9nKF8uY2FzdEFycmF5KGFycmF5KSA9PT0gYXJyYXkpO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBjYXN0QXJyYXkoKSB7XG4gICAgICBpZiAoIWFyZ3VtZW50cy5sZW5ndGgpIHtcbiAgICAgICAgcmV0dXJuIFtdO1xuICAgICAgfVxuICAgICAgdmFyIHZhbHVlID0gYXJndW1lbnRzWzBdO1xuICAgICAgcmV0dXJuIGlzQXJyYXkodmFsdWUpID8gdmFsdWUgOiBbdmFsdWVdO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBzaGFsbG93IGNsb25lIG9mIGB2YWx1ZWAuXG4gICAgICpcbiAgICAgKiAqKk5vdGU6KiogVGhpcyBtZXRob2QgaXMgbG9vc2VseSBiYXNlZCBvbiB0aGVcbiAgICAgKiBbc3RydWN0dXJlZCBjbG9uZSBhbGdvcml0aG1dKGh0dHBzOi8vbWRuLmlvL1N0cnVjdHVyZWRfY2xvbmVfYWxnb3JpdGhtKVxuICAgICAqIGFuZCBzdXBwb3J0cyBjbG9uaW5nIGFycmF5cywgYXJyYXkgYnVmZmVycywgYm9vbGVhbnMsIGRhdGUgb2JqZWN0cywgbWFwcyxcbiAgICAgKiBudW1iZXJzLCBgT2JqZWN0YCBvYmplY3RzLCByZWdleGVzLCBzZXRzLCBzdHJpbmdzLCBzeW1ib2xzLCBhbmQgdHlwZWRcbiAgICAgKiBhcnJheXMuIFRoZSBvd24gZW51bWVyYWJsZSBwcm9wZXJ0aWVzIG9mIGBhcmd1bWVudHNgIG9iamVjdHMgYXJlIGNsb25lZFxuICAgICAqIGFzIHBsYWluIG9iamVjdHMuIEFuIGVtcHR5IG9iamVjdCBpcyByZXR1cm5lZCBmb3IgdW5jbG9uZWFibGUgdmFsdWVzIHN1Y2hcbiAgICAgKiBhcyBlcnJvciBvYmplY3RzLCBmdW5jdGlvbnMsIERPTSBub2RlcywgYW5kIFdlYWtNYXBzLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDAuMS4wXG4gICAgICogQGNhdGVnb3J5IExhbmdcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjbG9uZS5cbiAgICAgKiBAcmV0dXJucyB7Kn0gUmV0dXJucyB0aGUgY2xvbmVkIHZhbHVlLlxuICAgICAqIEBzZWUgXy5jbG9uZURlZXBcbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIG9iamVjdHMgPSBbeyAnYSc6IDEgfSwgeyAnYic6IDIgfV07XG4gICAgICpcbiAgICAgKiB2YXIgc2hhbGxvdyA9IF8uY2xvbmUob2JqZWN0cyk7XG4gICAgICogY29uc29sZS5sb2coc2hhbGxvd1swXSA9PT0gb2JqZWN0c1swXSk7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGNsb25lKHZhbHVlKSB7XG4gICAgICByZXR1cm4gYmFzZUNsb25lKHZhbHVlLCBDTE9ORV9TWU1CT0xTX0ZMQUcpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoaXMgbWV0aG9kIGlzIGxpa2UgYF8uY2xvbmVgIGV4Y2VwdCB0aGF0IGl0IGFjY2VwdHMgYGN1c3RvbWl6ZXJgIHdoaWNoXG4gICAgICogaXMgaW52b2tlZCB0byBwcm9kdWNlIHRoZSBjbG9uZWQgdmFsdWUuIElmIGBjdXN0b21pemVyYCByZXR1cm5zIGB1bmRlZmluZWRgLFxuICAgICAqIGNsb25pbmcgaXMgaGFuZGxlZCBieSB0aGUgbWV0aG9kIGluc3RlYWQuIFRoZSBgY3VzdG9taXplcmAgaXMgaW52b2tlZCB3aXRoXG4gICAgICogdXAgdG8gZm91ciBhcmd1bWVudHM7ICh2YWx1ZSBbLCBpbmRleHxrZXksIG9iamVjdCwgc3RhY2tdKS5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjAuMFxuICAgICAqIEBjYXRlZ29yeSBMYW5nXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2xvbmUuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gW2N1c3RvbWl6ZXJdIFRoZSBmdW5jdGlvbiB0byBjdXN0b21pemUgY2xvbmluZy5cbiAgICAgKiBAcmV0dXJucyB7Kn0gUmV0dXJucyB0aGUgY2xvbmVkIHZhbHVlLlxuICAgICAqIEBzZWUgXy5jbG9uZURlZXBXaXRoXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIGZ1bmN0aW9uIGN1c3RvbWl6ZXIodmFsdWUpIHtcbiAgICAgKiAgIGlmIChfLmlzRWxlbWVudCh2YWx1ZSkpIHtcbiAgICAgKiAgICAgcmV0dXJuIHZhbHVlLmNsb25lTm9kZShmYWxzZSk7XG4gICAgICogICB9XG4gICAgICogfVxuICAgICAqXG4gICAgICogdmFyIGVsID0gXy5jbG9uZVdpdGgoZG9jdW1lbnQuYm9keSwgY3VzdG9taXplcik7XG4gICAgICpcbiAgICAgKiBjb25zb2xlLmxvZyhlbCA9PT0gZG9jdW1lbnQuYm9keSk7XG4gICAgICogLy8gPT4gZmFsc2VcbiAgICAgKiBjb25zb2xlLmxvZyhlbC5ub2RlTmFtZSk7XG4gICAgICogLy8gPT4gJ0JPRFknXG4gICAgICogY29uc29sZS5sb2coZWwuY2hpbGROb2Rlcy5sZW5ndGgpO1xuICAgICAqIC8vID0+IDBcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBjbG9uZVdpdGgodmFsdWUsIGN1c3RvbWl6ZXIpIHtcbiAgICAgIGN1c3RvbWl6ZXIgPSB0eXBlb2YgY3VzdG9taXplciA9PSAnZnVuY3Rpb24nID8gY3VzdG9taXplciA6IHVuZGVmaW5lZDtcbiAgICAgIHJldHVybiBiYXNlQ2xvbmUodmFsdWUsIENMT05FX1NZTUJPTFNfRkxBRywgY3VzdG9taXplcik7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhpcyBtZXRob2QgaXMgbGlrZSBgXy5jbG9uZWAgZXhjZXB0IHRoYXQgaXQgcmVjdXJzaXZlbHkgY2xvbmVzIGB2YWx1ZWAuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMS4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgTGFuZ1xuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIHJlY3Vyc2l2ZWx5IGNsb25lLlxuICAgICAqIEByZXR1cm5zIHsqfSBSZXR1cm5zIHRoZSBkZWVwIGNsb25lZCB2YWx1ZS5cbiAgICAgKiBAc2VlIF8uY2xvbmVcbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIG9iamVjdHMgPSBbeyAnYSc6IDEgfSwgeyAnYic6IDIgfV07XG4gICAgICpcbiAgICAgKiB2YXIgZGVlcCA9IF8uY2xvbmVEZWVwKG9iamVjdHMpO1xuICAgICAqIGNvbnNvbGUubG9nKGRlZXBbMF0gPT09IG9iamVjdHNbMF0pO1xuICAgICAqIC8vID0+IGZhbHNlXG4gICAgICovXG4gICAgZnVuY3Rpb24gY2xvbmVEZWVwKHZhbHVlKSB7XG4gICAgICByZXR1cm4gYmFzZUNsb25lKHZhbHVlLCBDTE9ORV9ERUVQX0ZMQUcgfCBDTE9ORV9TWU1CT0xTX0ZMQUcpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoaXMgbWV0aG9kIGlzIGxpa2UgYF8uY2xvbmVXaXRoYCBleGNlcHQgdGhhdCBpdCByZWN1cnNpdmVseSBjbG9uZXMgYHZhbHVlYC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjAuMFxuICAgICAqIEBjYXRlZ29yeSBMYW5nXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gcmVjdXJzaXZlbHkgY2xvbmUuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gW2N1c3RvbWl6ZXJdIFRoZSBmdW5jdGlvbiB0byBjdXN0b21pemUgY2xvbmluZy5cbiAgICAgKiBAcmV0dXJucyB7Kn0gUmV0dXJucyB0aGUgZGVlcCBjbG9uZWQgdmFsdWUuXG4gICAgICogQHNlZSBfLmNsb25lV2l0aFxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBmdW5jdGlvbiBjdXN0b21pemVyKHZhbHVlKSB7XG4gICAgICogICBpZiAoXy5pc0VsZW1lbnQodmFsdWUpKSB7XG4gICAgICogICAgIHJldHVybiB2YWx1ZS5jbG9uZU5vZGUodHJ1ZSk7XG4gICAgICogICB9XG4gICAgICogfVxuICAgICAqXG4gICAgICogdmFyIGVsID0gXy5jbG9uZURlZXBXaXRoKGRvY3VtZW50LmJvZHksIGN1c3RvbWl6ZXIpO1xuICAgICAqXG4gICAgICogY29uc29sZS5sb2coZWwgPT09IGRvY3VtZW50LmJvZHkpO1xuICAgICAqIC8vID0+IGZhbHNlXG4gICAgICogY29uc29sZS5sb2coZWwubm9kZU5hbWUpO1xuICAgICAqIC8vID0+ICdCT0RZJ1xuICAgICAqIGNvbnNvbGUubG9nKGVsLmNoaWxkTm9kZXMubGVuZ3RoKTtcbiAgICAgKiAvLyA9PiAyMFxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGNsb25lRGVlcFdpdGgodmFsdWUsIGN1c3RvbWl6ZXIpIHtcbiAgICAgIGN1c3RvbWl6ZXIgPSB0eXBlb2YgY3VzdG9taXplciA9PSAnZnVuY3Rpb24nID8gY3VzdG9taXplciA6IHVuZGVmaW5lZDtcbiAgICAgIHJldHVybiBiYXNlQ2xvbmUodmFsdWUsIENMT05FX0RFRVBfRkxBRyB8IENMT05FX1NZTUJPTFNfRkxBRywgY3VzdG9taXplcik7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ2hlY2tzIGlmIGBvYmplY3RgIGNvbmZvcm1zIHRvIGBzb3VyY2VgIGJ5IGludm9raW5nIHRoZSBwcmVkaWNhdGVcbiAgICAgKiBwcm9wZXJ0aWVzIG9mIGBzb3VyY2VgIHdpdGggdGhlIGNvcnJlc3BvbmRpbmcgcHJvcGVydHkgdmFsdWVzIG9mIGBvYmplY3RgLlxuICAgICAqXG4gICAgICogKipOb3RlOioqIFRoaXMgbWV0aG9kIGlzIGVxdWl2YWxlbnQgdG8gYF8uY29uZm9ybXNgIHdoZW4gYHNvdXJjZWAgaXNcbiAgICAgKiBwYXJ0aWFsbHkgYXBwbGllZC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjE0LjBcbiAgICAgKiBAY2F0ZWdvcnkgTGFuZ1xuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBpbnNwZWN0LlxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBzb3VyY2UgVGhlIG9iamVjdCBvZiBwcm9wZXJ0eSBwcmVkaWNhdGVzIHRvIGNvbmZvcm0gdG8uXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGBvYmplY3RgIGNvbmZvcm1zLCBlbHNlIGBmYWxzZWAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciBvYmplY3QgPSB7ICdhJzogMSwgJ2InOiAyIH07XG4gICAgICpcbiAgICAgKiBfLmNvbmZvcm1zVG8ob2JqZWN0LCB7ICdiJzogZnVuY3Rpb24obikgeyByZXR1cm4gbiA+IDE7IH0gfSk7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqXG4gICAgICogXy5jb25mb3Jtc1RvKG9iamVjdCwgeyAnYic6IGZ1bmN0aW9uKG4pIHsgcmV0dXJuIG4gPiAyOyB9IH0pO1xuICAgICAqIC8vID0+IGZhbHNlXG4gICAgICovXG4gICAgZnVuY3Rpb24gY29uZm9ybXNUbyhvYmplY3QsIHNvdXJjZSkge1xuICAgICAgcmV0dXJuIHNvdXJjZSA9PSBudWxsIHx8IGJhc2VDb25mb3Jtc1RvKG9iamVjdCwgc291cmNlLCBrZXlzKHNvdXJjZSkpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFBlcmZvcm1zIGFcbiAgICAgKiBbYFNhbWVWYWx1ZVplcm9gXShodHRwOi8vZWNtYS1pbnRlcm5hdGlvbmFsLm9yZy9lY21hLTI2Mi83LjAvI3NlYy1zYW1ldmFsdWV6ZXJvKVxuICAgICAqIGNvbXBhcmlzb24gYmV0d2VlbiB0d28gdmFsdWVzIHRvIGRldGVybWluZSBpZiB0aGV5IGFyZSBlcXVpdmFsZW50LlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMC4wXG4gICAgICogQGNhdGVnb3J5IExhbmdcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjb21wYXJlLlxuICAgICAqIEBwYXJhbSB7Kn0gb3RoZXIgVGhlIG90aGVyIHZhbHVlIHRvIGNvbXBhcmUuXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIHRoZSB2YWx1ZXMgYXJlIGVxdWl2YWxlbnQsIGVsc2UgYGZhbHNlYC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIG9iamVjdCA9IHsgJ2EnOiAxIH07XG4gICAgICogdmFyIG90aGVyID0geyAnYSc6IDEgfTtcbiAgICAgKlxuICAgICAqIF8uZXEob2JqZWN0LCBvYmplY3QpO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKlxuICAgICAqIF8uZXEob2JqZWN0LCBvdGhlcik7XG4gICAgICogLy8gPT4gZmFsc2VcbiAgICAgKlxuICAgICAqIF8uZXEoJ2EnLCAnYScpO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKlxuICAgICAqIF8uZXEoJ2EnLCBPYmplY3QoJ2EnKSk7XG4gICAgICogLy8gPT4gZmFsc2VcbiAgICAgKlxuICAgICAqIF8uZXEoTmFOLCBOYU4pO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBlcSh2YWx1ZSwgb3RoZXIpIHtcbiAgICAgIHJldHVybiB2YWx1ZSA9PT0gb3RoZXIgfHwgKHZhbHVlICE9PSB2YWx1ZSAmJiBvdGhlciAhPT0gb3RoZXIpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIGdyZWF0ZXIgdGhhbiBgb3RoZXJgLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDMuOS4wXG4gICAgICogQGNhdGVnb3J5IExhbmdcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjb21wYXJlLlxuICAgICAqIEBwYXJhbSB7Kn0gb3RoZXIgVGhlIG90aGVyIHZhbHVlIHRvIGNvbXBhcmUuXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgZ3JlYXRlciB0aGFuIGBvdGhlcmAsXG4gICAgICogIGVsc2UgYGZhbHNlYC5cbiAgICAgKiBAc2VlIF8ubHRcbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5ndCgzLCAxKTtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICpcbiAgICAgKiBfLmd0KDMsIDMpO1xuICAgICAqIC8vID0+IGZhbHNlXG4gICAgICpcbiAgICAgKiBfLmd0KDEsIDMpO1xuICAgICAqIC8vID0+IGZhbHNlXG4gICAgICovXG4gICAgdmFyIGd0ID0gY3JlYXRlUmVsYXRpb25hbE9wZXJhdGlvbihiYXNlR3QpO1xuXG4gICAgLyoqXG4gICAgICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgZ3JlYXRlciB0aGFuIG9yIGVxdWFsIHRvIGBvdGhlcmAuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMy45LjBcbiAgICAgKiBAY2F0ZWdvcnkgTGFuZ1xuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNvbXBhcmUuXG4gICAgICogQHBhcmFtIHsqfSBvdGhlciBUaGUgb3RoZXIgdmFsdWUgdG8gY29tcGFyZS5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBncmVhdGVyIHRoYW4gb3IgZXF1YWwgdG9cbiAgICAgKiAgYG90aGVyYCwgZWxzZSBgZmFsc2VgLlxuICAgICAqIEBzZWUgXy5sdGVcbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5ndGUoMywgMSk7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqXG4gICAgICogXy5ndGUoMywgMyk7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqXG4gICAgICogXy5ndGUoMSwgMyk7XG4gICAgICogLy8gPT4gZmFsc2VcbiAgICAgKi9cbiAgICB2YXIgZ3RlID0gY3JlYXRlUmVsYXRpb25hbE9wZXJhdGlvbihmdW5jdGlvbih2YWx1ZSwgb3RoZXIpIHtcbiAgICAgIHJldHVybiB2YWx1ZSA+PSBvdGhlcjtcbiAgICB9KTtcblxuICAgIC8qKlxuICAgICAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIGxpa2VseSBhbiBgYXJndW1lbnRzYCBvYmplY3QuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMC4xLjBcbiAgICAgKiBAY2F0ZWdvcnkgTGFuZ1xuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGFuIGBhcmd1bWVudHNgIG9iamVjdCxcbiAgICAgKiAgZWxzZSBgZmFsc2VgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLmlzQXJndW1lbnRzKGZ1bmN0aW9uKCkgeyByZXR1cm4gYXJndW1lbnRzOyB9KCkpO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKlxuICAgICAqIF8uaXNBcmd1bWVudHMoWzEsIDIsIDNdKTtcbiAgICAgKiAvLyA9PiBmYWxzZVxuICAgICAqL1xuICAgIHZhciBpc0FyZ3VtZW50cyA9IGJhc2VJc0FyZ3VtZW50cyhmdW5jdGlvbigpIHsgcmV0dXJuIGFyZ3VtZW50czsgfSgpKSA/IGJhc2VJc0FyZ3VtZW50cyA6IGZ1bmN0aW9uKHZhbHVlKSB7XG4gICAgICByZXR1cm4gaXNPYmplY3RMaWtlKHZhbHVlKSAmJiBoYXNPd25Qcm9wZXJ0eS5jYWxsKHZhbHVlLCAnY2FsbGVlJykgJiZcbiAgICAgICAgIXByb3BlcnR5SXNFbnVtZXJhYmxlLmNhbGwodmFsdWUsICdjYWxsZWUnKTtcbiAgICB9O1xuXG4gICAgLyoqXG4gICAgICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgY2xhc3NpZmllZCBhcyBhbiBgQXJyYXlgIG9iamVjdC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAwLjEuMFxuICAgICAqIEBjYXRlZ29yeSBMYW5nXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgYW4gYXJyYXksIGVsc2UgYGZhbHNlYC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5pc0FycmF5KFsxLCAyLCAzXSk7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqXG4gICAgICogXy5pc0FycmF5KGRvY3VtZW50LmJvZHkuY2hpbGRyZW4pO1xuICAgICAqIC8vID0+IGZhbHNlXG4gICAgICpcbiAgICAgKiBfLmlzQXJyYXkoJ2FiYycpO1xuICAgICAqIC8vID0+IGZhbHNlXG4gICAgICpcbiAgICAgKiBfLmlzQXJyYXkoXy5ub29wKTtcbiAgICAgKiAvLyA9PiBmYWxzZVxuICAgICAqL1xuICAgIHZhciBpc0FycmF5ID0gQXJyYXkuaXNBcnJheTtcblxuICAgIC8qKlxuICAgICAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIGNsYXNzaWZpZWQgYXMgYW4gYEFycmF5QnVmZmVyYCBvYmplY3QuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4zLjBcbiAgICAgKiBAY2F0ZWdvcnkgTGFuZ1xuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGFuIGFycmF5IGJ1ZmZlciwgZWxzZSBgZmFsc2VgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLmlzQXJyYXlCdWZmZXIobmV3IEFycmF5QnVmZmVyKDIpKTtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICpcbiAgICAgKiBfLmlzQXJyYXlCdWZmZXIobmV3IEFycmF5KDIpKTtcbiAgICAgKiAvLyA9PiBmYWxzZVxuICAgICAqL1xuICAgIHZhciBpc0FycmF5QnVmZmVyID0gbm9kZUlzQXJyYXlCdWZmZXIgPyBiYXNlVW5hcnkobm9kZUlzQXJyYXlCdWZmZXIpIDogYmFzZUlzQXJyYXlCdWZmZXI7XG5cbiAgICAvKipcbiAgICAgKiBDaGVja3MgaWYgYHZhbHVlYCBpcyBhcnJheS1saWtlLiBBIHZhbHVlIGlzIGNvbnNpZGVyZWQgYXJyYXktbGlrZSBpZiBpdCdzXG4gICAgICogbm90IGEgZnVuY3Rpb24gYW5kIGhhcyBhIGB2YWx1ZS5sZW5ndGhgIHRoYXQncyBhbiBpbnRlZ2VyIGdyZWF0ZXIgdGhhbiBvclxuICAgICAqIGVxdWFsIHRvIGAwYCBhbmQgbGVzcyB0aGFuIG9yIGVxdWFsIHRvIGBOdW1iZXIuTUFYX1NBRkVfSU5URUdFUmAuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgTGFuZ1xuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGFycmF5LWxpa2UsIGVsc2UgYGZhbHNlYC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5pc0FycmF5TGlrZShbMSwgMiwgM10pO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKlxuICAgICAqIF8uaXNBcnJheUxpa2UoZG9jdW1lbnQuYm9keS5jaGlsZHJlbik7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqXG4gICAgICogXy5pc0FycmF5TGlrZSgnYWJjJyk7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqXG4gICAgICogXy5pc0FycmF5TGlrZShfLm5vb3ApO1xuICAgICAqIC8vID0+IGZhbHNlXG4gICAgICovXG4gICAgZnVuY3Rpb24gaXNBcnJheUxpa2UodmFsdWUpIHtcbiAgICAgIHJldHVybiB2YWx1ZSAhPSBudWxsICYmIGlzTGVuZ3RoKHZhbHVlLmxlbmd0aCkgJiYgIWlzRnVuY3Rpb24odmFsdWUpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoaXMgbWV0aG9kIGlzIGxpa2UgYF8uaXNBcnJheUxpa2VgIGV4Y2VwdCB0aGF0IGl0IGFsc28gY2hlY2tzIGlmIGB2YWx1ZWBcbiAgICAgKiBpcyBhbiBvYmplY3QuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgTGFuZ1xuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGFuIGFycmF5LWxpa2Ugb2JqZWN0LFxuICAgICAqICBlbHNlIGBmYWxzZWAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uaXNBcnJheUxpa2VPYmplY3QoWzEsIDIsIDNdKTtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICpcbiAgICAgKiBfLmlzQXJyYXlMaWtlT2JqZWN0KGRvY3VtZW50LmJvZHkuY2hpbGRyZW4pO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKlxuICAgICAqIF8uaXNBcnJheUxpa2VPYmplY3QoJ2FiYycpO1xuICAgICAqIC8vID0+IGZhbHNlXG4gICAgICpcbiAgICAgKiBfLmlzQXJyYXlMaWtlT2JqZWN0KF8ubm9vcCk7XG4gICAgICogLy8gPT4gZmFsc2VcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBpc0FycmF5TGlrZU9iamVjdCh2YWx1ZSkge1xuICAgICAgcmV0dXJuIGlzT2JqZWN0TGlrZSh2YWx1ZSkgJiYgaXNBcnJheUxpa2UodmFsdWUpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIGNsYXNzaWZpZWQgYXMgYSBib29sZWFuIHByaW1pdGl2ZSBvciBvYmplY3QuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMC4xLjBcbiAgICAgKiBAY2F0ZWdvcnkgTGFuZ1xuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGEgYm9vbGVhbiwgZWxzZSBgZmFsc2VgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLmlzQm9vbGVhbihmYWxzZSk7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqXG4gICAgICogXy5pc0Jvb2xlYW4obnVsbCk7XG4gICAgICogLy8gPT4gZmFsc2VcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBpc0Jvb2xlYW4odmFsdWUpIHtcbiAgICAgIHJldHVybiB2YWx1ZSA9PT0gdHJ1ZSB8fCB2YWx1ZSA9PT0gZmFsc2UgfHxcbiAgICAgICAgKGlzT2JqZWN0TGlrZSh2YWx1ZSkgJiYgYmFzZUdldFRhZyh2YWx1ZSkgPT0gYm9vbFRhZyk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgYSBidWZmZXIuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4zLjBcbiAgICAgKiBAY2F0ZWdvcnkgTGFuZ1xuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGEgYnVmZmVyLCBlbHNlIGBmYWxzZWAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uaXNCdWZmZXIobmV3IEJ1ZmZlcigyKSk7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqXG4gICAgICogXy5pc0J1ZmZlcihuZXcgVWludDhBcnJheSgyKSk7XG4gICAgICogLy8gPT4gZmFsc2VcbiAgICAgKi9cbiAgICB2YXIgaXNCdWZmZXIgPSBuYXRpdmVJc0J1ZmZlciB8fCBzdHViRmFsc2U7XG5cbiAgICAvKipcbiAgICAgKiBDaGVja3MgaWYgYHZhbHVlYCBpcyBjbGFzc2lmaWVkIGFzIGEgYERhdGVgIG9iamVjdC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAwLjEuMFxuICAgICAqIEBjYXRlZ29yeSBMYW5nXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgYSBkYXRlIG9iamVjdCwgZWxzZSBgZmFsc2VgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLmlzRGF0ZShuZXcgRGF0ZSk7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqXG4gICAgICogXy5pc0RhdGUoJ01vbiBBcHJpbCAyMyAyMDEyJyk7XG4gICAgICogLy8gPT4gZmFsc2VcbiAgICAgKi9cbiAgICB2YXIgaXNEYXRlID0gbm9kZUlzRGF0ZSA/IGJhc2VVbmFyeShub2RlSXNEYXRlKSA6IGJhc2VJc0RhdGU7XG5cbiAgICAvKipcbiAgICAgKiBDaGVja3MgaWYgYHZhbHVlYCBpcyBsaWtlbHkgYSBET00gZWxlbWVudC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAwLjEuMFxuICAgICAqIEBjYXRlZ29yeSBMYW5nXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgYSBET00gZWxlbWVudCwgZWxzZSBgZmFsc2VgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLmlzRWxlbWVudChkb2N1bWVudC5ib2R5KTtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICpcbiAgICAgKiBfLmlzRWxlbWVudCgnPGJvZHk+Jyk7XG4gICAgICogLy8gPT4gZmFsc2VcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBpc0VsZW1lbnQodmFsdWUpIHtcbiAgICAgIHJldHVybiBpc09iamVjdExpa2UodmFsdWUpICYmIHZhbHVlLm5vZGVUeXBlID09PSAxICYmICFpc1BsYWluT2JqZWN0KHZhbHVlKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDaGVja3MgaWYgYHZhbHVlYCBpcyBhbiBlbXB0eSBvYmplY3QsIGNvbGxlY3Rpb24sIG1hcCwgb3Igc2V0LlxuICAgICAqXG4gICAgICogT2JqZWN0cyBhcmUgY29uc2lkZXJlZCBlbXB0eSBpZiB0aGV5IGhhdmUgbm8gb3duIGVudW1lcmFibGUgc3RyaW5nIGtleWVkXG4gICAgICogcHJvcGVydGllcy5cbiAgICAgKlxuICAgICAqIEFycmF5LWxpa2UgdmFsdWVzIHN1Y2ggYXMgYGFyZ3VtZW50c2Agb2JqZWN0cywgYXJyYXlzLCBidWZmZXJzLCBzdHJpbmdzLCBvclxuICAgICAqIGpRdWVyeS1saWtlIGNvbGxlY3Rpb25zIGFyZSBjb25zaWRlcmVkIGVtcHR5IGlmIHRoZXkgaGF2ZSBhIGBsZW5ndGhgIG9mIGAwYC5cbiAgICAgKiBTaW1pbGFybHksIG1hcHMgYW5kIHNldHMgYXJlIGNvbnNpZGVyZWQgZW1wdHkgaWYgdGhleSBoYXZlIGEgYHNpemVgIG9mIGAwYC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAwLjEuMFxuICAgICAqIEBjYXRlZ29yeSBMYW5nXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgZW1wdHksIGVsc2UgYGZhbHNlYC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5pc0VtcHR5KG51bGwpO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKlxuICAgICAqIF8uaXNFbXB0eSh0cnVlKTtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICpcbiAgICAgKiBfLmlzRW1wdHkoMSk7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqXG4gICAgICogXy5pc0VtcHR5KFsxLCAyLCAzXSk7XG4gICAgICogLy8gPT4gZmFsc2VcbiAgICAgKlxuICAgICAqIF8uaXNFbXB0eSh7ICdhJzogMSB9KTtcbiAgICAgKiAvLyA9PiBmYWxzZVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGlzRW1wdHkodmFsdWUpIHtcbiAgICAgIGlmICh2YWx1ZSA9PSBudWxsKSB7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgfVxuICAgICAgaWYgKGlzQXJyYXlMaWtlKHZhbHVlKSAmJlxuICAgICAgICAgIChpc0FycmF5KHZhbHVlKSB8fCB0eXBlb2YgdmFsdWUgPT0gJ3N0cmluZycgfHwgdHlwZW9mIHZhbHVlLnNwbGljZSA9PSAnZnVuY3Rpb24nIHx8XG4gICAgICAgICAgICBpc0J1ZmZlcih2YWx1ZSkgfHwgaXNUeXBlZEFycmF5KHZhbHVlKSB8fCBpc0FyZ3VtZW50cyh2YWx1ZSkpKSB7XG4gICAgICAgIHJldHVybiAhdmFsdWUubGVuZ3RoO1xuICAgICAgfVxuICAgICAgdmFyIHRhZyA9IGdldFRhZyh2YWx1ZSk7XG4gICAgICBpZiAodGFnID09IG1hcFRhZyB8fCB0YWcgPT0gc2V0VGFnKSB7XG4gICAgICAgIHJldHVybiAhdmFsdWUuc2l6ZTtcbiAgICAgIH1cbiAgICAgIGlmIChpc1Byb3RvdHlwZSh2YWx1ZSkpIHtcbiAgICAgICAgcmV0dXJuICFiYXNlS2V5cyh2YWx1ZSkubGVuZ3RoO1xuICAgICAgfVxuICAgICAgZm9yICh2YXIga2V5IGluIHZhbHVlKSB7XG4gICAgICAgIGlmIChoYXNPd25Qcm9wZXJ0eS5jYWxsKHZhbHVlLCBrZXkpKSB7XG4gICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBQZXJmb3JtcyBhIGRlZXAgY29tcGFyaXNvbiBiZXR3ZWVuIHR3byB2YWx1ZXMgdG8gZGV0ZXJtaW5lIGlmIHRoZXkgYXJlXG4gICAgICogZXF1aXZhbGVudC5cbiAgICAgKlxuICAgICAqICoqTm90ZToqKiBUaGlzIG1ldGhvZCBzdXBwb3J0cyBjb21wYXJpbmcgYXJyYXlzLCBhcnJheSBidWZmZXJzLCBib29sZWFucyxcbiAgICAgKiBkYXRlIG9iamVjdHMsIGVycm9yIG9iamVjdHMsIG1hcHMsIG51bWJlcnMsIGBPYmplY3RgIG9iamVjdHMsIHJlZ2V4ZXMsXG4gICAgICogc2V0cywgc3RyaW5ncywgc3ltYm9scywgYW5kIHR5cGVkIGFycmF5cy4gYE9iamVjdGAgb2JqZWN0cyBhcmUgY29tcGFyZWRcbiAgICAgKiBieSB0aGVpciBvd24sIG5vdCBpbmhlcml0ZWQsIGVudW1lcmFibGUgcHJvcGVydGllcy4gRnVuY3Rpb25zIGFuZCBET01cbiAgICAgKiBub2RlcyBhcmUgY29tcGFyZWQgYnkgc3RyaWN0IGVxdWFsaXR5LCBpLmUuIGA9PT1gLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDAuMS4wXG4gICAgICogQGNhdGVnb3J5IExhbmdcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjb21wYXJlLlxuICAgICAqIEBwYXJhbSB7Kn0gb3RoZXIgVGhlIG90aGVyIHZhbHVlIHRvIGNvbXBhcmUuXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIHRoZSB2YWx1ZXMgYXJlIGVxdWl2YWxlbnQsIGVsc2UgYGZhbHNlYC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIG9iamVjdCA9IHsgJ2EnOiAxIH07XG4gICAgICogdmFyIG90aGVyID0geyAnYSc6IDEgfTtcbiAgICAgKlxuICAgICAqIF8uaXNFcXVhbChvYmplY3QsIG90aGVyKTtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICpcbiAgICAgKiBvYmplY3QgPT09IG90aGVyO1xuICAgICAqIC8vID0+IGZhbHNlXG4gICAgICovXG4gICAgZnVuY3Rpb24gaXNFcXVhbCh2YWx1ZSwgb3RoZXIpIHtcbiAgICAgIHJldHVybiBiYXNlSXNFcXVhbCh2YWx1ZSwgb3RoZXIpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoaXMgbWV0aG9kIGlzIGxpa2UgYF8uaXNFcXVhbGAgZXhjZXB0IHRoYXQgaXQgYWNjZXB0cyBgY3VzdG9taXplcmAgd2hpY2hcbiAgICAgKiBpcyBpbnZva2VkIHRvIGNvbXBhcmUgdmFsdWVzLiBJZiBgY3VzdG9taXplcmAgcmV0dXJucyBgdW5kZWZpbmVkYCwgY29tcGFyaXNvbnNcbiAgICAgKiBhcmUgaGFuZGxlZCBieSB0aGUgbWV0aG9kIGluc3RlYWQuIFRoZSBgY3VzdG9taXplcmAgaXMgaW52b2tlZCB3aXRoIHVwIHRvXG4gICAgICogc2l4IGFyZ3VtZW50czogKG9ialZhbHVlLCBvdGhWYWx1ZSBbLCBpbmRleHxrZXksIG9iamVjdCwgb3RoZXIsIHN0YWNrXSkuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgTGFuZ1xuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNvbXBhcmUuXG4gICAgICogQHBhcmFtIHsqfSBvdGhlciBUaGUgb3RoZXIgdmFsdWUgdG8gY29tcGFyZS5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbY3VzdG9taXplcl0gVGhlIGZ1bmN0aW9uIHRvIGN1c3RvbWl6ZSBjb21wYXJpc29ucy5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgdGhlIHZhbHVlcyBhcmUgZXF1aXZhbGVudCwgZWxzZSBgZmFsc2VgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBmdW5jdGlvbiBpc0dyZWV0aW5nKHZhbHVlKSB7XG4gICAgICogICByZXR1cm4gL15oKD86aXxlbGxvKSQvLnRlc3QodmFsdWUpO1xuICAgICAqIH1cbiAgICAgKlxuICAgICAqIGZ1bmN0aW9uIGN1c3RvbWl6ZXIob2JqVmFsdWUsIG90aFZhbHVlKSB7XG4gICAgICogICBpZiAoaXNHcmVldGluZyhvYmpWYWx1ZSkgJiYgaXNHcmVldGluZyhvdGhWYWx1ZSkpIHtcbiAgICAgKiAgICAgcmV0dXJuIHRydWU7XG4gICAgICogICB9XG4gICAgICogfVxuICAgICAqXG4gICAgICogdmFyIGFycmF5ID0gWydoZWxsbycsICdnb29kYnllJ107XG4gICAgICogdmFyIG90aGVyID0gWydoaScsICdnb29kYnllJ107XG4gICAgICpcbiAgICAgKiBfLmlzRXF1YWxXaXRoKGFycmF5LCBvdGhlciwgY3VzdG9taXplcik7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGlzRXF1YWxXaXRoKHZhbHVlLCBvdGhlciwgY3VzdG9taXplcikge1xuICAgICAgY3VzdG9taXplciA9IHR5cGVvZiBjdXN0b21pemVyID09ICdmdW5jdGlvbicgPyBjdXN0b21pemVyIDogdW5kZWZpbmVkO1xuICAgICAgdmFyIHJlc3VsdCA9IGN1c3RvbWl6ZXIgPyBjdXN0b21pemVyKHZhbHVlLCBvdGhlcikgOiB1bmRlZmluZWQ7XG4gICAgICByZXR1cm4gcmVzdWx0ID09PSB1bmRlZmluZWQgPyBiYXNlSXNFcXVhbCh2YWx1ZSwgb3RoZXIsIHVuZGVmaW5lZCwgY3VzdG9taXplcikgOiAhIXJlc3VsdDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDaGVja3MgaWYgYHZhbHVlYCBpcyBhbiBgRXJyb3JgLCBgRXZhbEVycm9yYCwgYFJhbmdlRXJyb3JgLCBgUmVmZXJlbmNlRXJyb3JgLFxuICAgICAqIGBTeW50YXhFcnJvcmAsIGBUeXBlRXJyb3JgLCBvciBgVVJJRXJyb3JgIG9iamVjdC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAzLjAuMFxuICAgICAqIEBjYXRlZ29yeSBMYW5nXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgYW4gZXJyb3Igb2JqZWN0LCBlbHNlIGBmYWxzZWAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uaXNFcnJvcihuZXcgRXJyb3IpO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKlxuICAgICAqIF8uaXNFcnJvcihFcnJvcik7XG4gICAgICogLy8gPT4gZmFsc2VcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBpc0Vycm9yKHZhbHVlKSB7XG4gICAgICBpZiAoIWlzT2JqZWN0TGlrZSh2YWx1ZSkpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgfVxuICAgICAgdmFyIHRhZyA9IGJhc2VHZXRUYWcodmFsdWUpO1xuICAgICAgcmV0dXJuIHRhZyA9PSBlcnJvclRhZyB8fCB0YWcgPT0gZG9tRXhjVGFnIHx8XG4gICAgICAgICh0eXBlb2YgdmFsdWUubWVzc2FnZSA9PSAnc3RyaW5nJyAmJiB0eXBlb2YgdmFsdWUubmFtZSA9PSAnc3RyaW5nJyAmJiAhaXNQbGFpbk9iamVjdCh2YWx1ZSkpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIGEgZmluaXRlIHByaW1pdGl2ZSBudW1iZXIuXG4gICAgICpcbiAgICAgKiAqKk5vdGU6KiogVGhpcyBtZXRob2QgaXMgYmFzZWQgb25cbiAgICAgKiBbYE51bWJlci5pc0Zpbml0ZWBdKGh0dHBzOi8vbWRuLmlvL051bWJlci9pc0Zpbml0ZSkuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMC4xLjBcbiAgICAgKiBAY2F0ZWdvcnkgTGFuZ1xuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGEgZmluaXRlIG51bWJlciwgZWxzZSBgZmFsc2VgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLmlzRmluaXRlKDMpO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKlxuICAgICAqIF8uaXNGaW5pdGUoTnVtYmVyLk1JTl9WQUxVRSk7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqXG4gICAgICogXy5pc0Zpbml0ZShJbmZpbml0eSk7XG4gICAgICogLy8gPT4gZmFsc2VcbiAgICAgKlxuICAgICAqIF8uaXNGaW5pdGUoJzMnKTtcbiAgICAgKiAvLyA9PiBmYWxzZVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGlzRmluaXRlKHZhbHVlKSB7XG4gICAgICByZXR1cm4gdHlwZW9mIHZhbHVlID09ICdudW1iZXInICYmIG5hdGl2ZUlzRmluaXRlKHZhbHVlKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDaGVja3MgaWYgYHZhbHVlYCBpcyBjbGFzc2lmaWVkIGFzIGEgYEZ1bmN0aW9uYCBvYmplY3QuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMC4xLjBcbiAgICAgKiBAY2F0ZWdvcnkgTGFuZ1xuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGEgZnVuY3Rpb24sIGVsc2UgYGZhbHNlYC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5pc0Z1bmN0aW9uKF8pO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKlxuICAgICAqIF8uaXNGdW5jdGlvbigvYWJjLyk7XG4gICAgICogLy8gPT4gZmFsc2VcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBpc0Z1bmN0aW9uKHZhbHVlKSB7XG4gICAgICBpZiAoIWlzT2JqZWN0KHZhbHVlKSkge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICB9XG4gICAgICAvLyBUaGUgdXNlIG9mIGBPYmplY3QjdG9TdHJpbmdgIGF2b2lkcyBpc3N1ZXMgd2l0aCB0aGUgYHR5cGVvZmAgb3BlcmF0b3JcbiAgICAgIC8vIGluIFNhZmFyaSA5IHdoaWNoIHJldHVybnMgJ29iamVjdCcgZm9yIHR5cGVkIGFycmF5cyBhbmQgb3RoZXIgY29uc3RydWN0b3JzLlxuICAgICAgdmFyIHRhZyA9IGJhc2VHZXRUYWcodmFsdWUpO1xuICAgICAgcmV0dXJuIHRhZyA9PSBmdW5jVGFnIHx8IHRhZyA9PSBnZW5UYWcgfHwgdGFnID09IGFzeW5jVGFnIHx8IHRhZyA9PSBwcm94eVRhZztcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDaGVja3MgaWYgYHZhbHVlYCBpcyBhbiBpbnRlZ2VyLlxuICAgICAqXG4gICAgICogKipOb3RlOioqIFRoaXMgbWV0aG9kIGlzIGJhc2VkIG9uXG4gICAgICogW2BOdW1iZXIuaXNJbnRlZ2VyYF0oaHR0cHM6Ly9tZG4uaW8vTnVtYmVyL2lzSW50ZWdlcikuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgTGFuZ1xuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGFuIGludGVnZXIsIGVsc2UgYGZhbHNlYC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5pc0ludGVnZXIoMyk7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqXG4gICAgICogXy5pc0ludGVnZXIoTnVtYmVyLk1JTl9WQUxVRSk7XG4gICAgICogLy8gPT4gZmFsc2VcbiAgICAgKlxuICAgICAqIF8uaXNJbnRlZ2VyKEluZmluaXR5KTtcbiAgICAgKiAvLyA9PiBmYWxzZVxuICAgICAqXG4gICAgICogXy5pc0ludGVnZXIoJzMnKTtcbiAgICAgKiAvLyA9PiBmYWxzZVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGlzSW50ZWdlcih2YWx1ZSkge1xuICAgICAgcmV0dXJuIHR5cGVvZiB2YWx1ZSA9PSAnbnVtYmVyJyAmJiB2YWx1ZSA9PSB0b0ludGVnZXIodmFsdWUpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIGEgdmFsaWQgYXJyYXktbGlrZSBsZW5ndGguXG4gICAgICpcbiAgICAgKiAqKk5vdGU6KiogVGhpcyBtZXRob2QgaXMgbG9vc2VseSBiYXNlZCBvblxuICAgICAqIFtgVG9MZW5ndGhgXShodHRwOi8vZWNtYS1pbnRlcm5hdGlvbmFsLm9yZy9lY21hLTI2Mi83LjAvI3NlYy10b2xlbmd0aCkuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgTGFuZ1xuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGEgdmFsaWQgbGVuZ3RoLCBlbHNlIGBmYWxzZWAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uaXNMZW5ndGgoMyk7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqXG4gICAgICogXy5pc0xlbmd0aChOdW1iZXIuTUlOX1ZBTFVFKTtcbiAgICAgKiAvLyA9PiBmYWxzZVxuICAgICAqXG4gICAgICogXy5pc0xlbmd0aChJbmZpbml0eSk7XG4gICAgICogLy8gPT4gZmFsc2VcbiAgICAgKlxuICAgICAqIF8uaXNMZW5ndGgoJzMnKTtcbiAgICAgKiAvLyA9PiBmYWxzZVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGlzTGVuZ3RoKHZhbHVlKSB7XG4gICAgICByZXR1cm4gdHlwZW9mIHZhbHVlID09ICdudW1iZXInICYmXG4gICAgICAgIHZhbHVlID4gLTEgJiYgdmFsdWUgJSAxID09IDAgJiYgdmFsdWUgPD0gTUFYX1NBRkVfSU5URUdFUjtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDaGVja3MgaWYgYHZhbHVlYCBpcyB0aGVcbiAgICAgKiBbbGFuZ3VhZ2UgdHlwZV0oaHR0cDovL3d3dy5lY21hLWludGVybmF0aW9uYWwub3JnL2VjbWEtMjYyLzcuMC8jc2VjLWVjbWFzY3JpcHQtbGFuZ3VhZ2UtdHlwZXMpXG4gICAgICogb2YgYE9iamVjdGAuIChlLmcuIGFycmF5cywgZnVuY3Rpb25zLCBvYmplY3RzLCByZWdleGVzLCBgbmV3IE51bWJlcigwKWAsIGFuZCBgbmV3IFN0cmluZygnJylgKVxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDAuMS4wXG4gICAgICogQGNhdGVnb3J5IExhbmdcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBhbiBvYmplY3QsIGVsc2UgYGZhbHNlYC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5pc09iamVjdCh7fSk7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqXG4gICAgICogXy5pc09iamVjdChbMSwgMiwgM10pO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKlxuICAgICAqIF8uaXNPYmplY3QoXy5ub29wKTtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICpcbiAgICAgKiBfLmlzT2JqZWN0KG51bGwpO1xuICAgICAqIC8vID0+IGZhbHNlXG4gICAgICovXG4gICAgZnVuY3Rpb24gaXNPYmplY3QodmFsdWUpIHtcbiAgICAgIHZhciB0eXBlID0gdHlwZW9mIHZhbHVlO1xuICAgICAgcmV0dXJuIHZhbHVlICE9IG51bGwgJiYgKHR5cGUgPT0gJ29iamVjdCcgfHwgdHlwZSA9PSAnZnVuY3Rpb24nKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDaGVja3MgaWYgYHZhbHVlYCBpcyBvYmplY3QtbGlrZS4gQSB2YWx1ZSBpcyBvYmplY3QtbGlrZSBpZiBpdCdzIG5vdCBgbnVsbGBcbiAgICAgKiBhbmQgaGFzIGEgYHR5cGVvZmAgcmVzdWx0IG9mIFwib2JqZWN0XCIuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgTGFuZ1xuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIG9iamVjdC1saWtlLCBlbHNlIGBmYWxzZWAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uaXNPYmplY3RMaWtlKHt9KTtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICpcbiAgICAgKiBfLmlzT2JqZWN0TGlrZShbMSwgMiwgM10pO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKlxuICAgICAqIF8uaXNPYmplY3RMaWtlKF8ubm9vcCk7XG4gICAgICogLy8gPT4gZmFsc2VcbiAgICAgKlxuICAgICAqIF8uaXNPYmplY3RMaWtlKG51bGwpO1xuICAgICAqIC8vID0+IGZhbHNlXG4gICAgICovXG4gICAgZnVuY3Rpb24gaXNPYmplY3RMaWtlKHZhbHVlKSB7XG4gICAgICByZXR1cm4gdmFsdWUgIT0gbnVsbCAmJiB0eXBlb2YgdmFsdWUgPT0gJ29iamVjdCc7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgY2xhc3NpZmllZCBhcyBhIGBNYXBgIG9iamVjdC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjMuMFxuICAgICAqIEBjYXRlZ29yeSBMYW5nXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgYSBtYXAsIGVsc2UgYGZhbHNlYC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5pc01hcChuZXcgTWFwKTtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICpcbiAgICAgKiBfLmlzTWFwKG5ldyBXZWFrTWFwKTtcbiAgICAgKiAvLyA9PiBmYWxzZVxuICAgICAqL1xuICAgIHZhciBpc01hcCA9IG5vZGVJc01hcCA/IGJhc2VVbmFyeShub2RlSXNNYXApIDogYmFzZUlzTWFwO1xuXG4gICAgLyoqXG4gICAgICogUGVyZm9ybXMgYSBwYXJ0aWFsIGRlZXAgY29tcGFyaXNvbiBiZXR3ZWVuIGBvYmplY3RgIGFuZCBgc291cmNlYCB0b1xuICAgICAqIGRldGVybWluZSBpZiBgb2JqZWN0YCBjb250YWlucyBlcXVpdmFsZW50IHByb3BlcnR5IHZhbHVlcy5cbiAgICAgKlxuICAgICAqICoqTm90ZToqKiBUaGlzIG1ldGhvZCBpcyBlcXVpdmFsZW50IHRvIGBfLm1hdGNoZXNgIHdoZW4gYHNvdXJjZWAgaXNcbiAgICAgKiBwYXJ0aWFsbHkgYXBwbGllZC5cbiAgICAgKlxuICAgICAqIFBhcnRpYWwgY29tcGFyaXNvbnMgd2lsbCBtYXRjaCBlbXB0eSBhcnJheSBhbmQgZW1wdHkgb2JqZWN0IGBzb3VyY2VgXG4gICAgICogdmFsdWVzIGFnYWluc3QgYW55IGFycmF5IG9yIG9iamVjdCB2YWx1ZSwgcmVzcGVjdGl2ZWx5LiBTZWUgYF8uaXNFcXVhbGBcbiAgICAgKiBmb3IgYSBsaXN0IG9mIHN1cHBvcnRlZCB2YWx1ZSBjb21wYXJpc29ucy5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAzLjAuMFxuICAgICAqIEBjYXRlZ29yeSBMYW5nXG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIGluc3BlY3QuXG4gICAgICogQHBhcmFtIHtPYmplY3R9IHNvdXJjZSBUaGUgb2JqZWN0IG9mIHByb3BlcnR5IHZhbHVlcyB0byBtYXRjaC5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYG9iamVjdGAgaXMgYSBtYXRjaCwgZWxzZSBgZmFsc2VgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgb2JqZWN0ID0geyAnYSc6IDEsICdiJzogMiB9O1xuICAgICAqXG4gICAgICogXy5pc01hdGNoKG9iamVjdCwgeyAnYic6IDIgfSk7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqXG4gICAgICogXy5pc01hdGNoKG9iamVjdCwgeyAnYic6IDEgfSk7XG4gICAgICogLy8gPT4gZmFsc2VcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBpc01hdGNoKG9iamVjdCwgc291cmNlKSB7XG4gICAgICByZXR1cm4gb2JqZWN0ID09PSBzb3VyY2UgfHwgYmFzZUlzTWF0Y2gob2JqZWN0LCBzb3VyY2UsIGdldE1hdGNoRGF0YShzb3VyY2UpKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGlzIG1ldGhvZCBpcyBsaWtlIGBfLmlzTWF0Y2hgIGV4Y2VwdCB0aGF0IGl0IGFjY2VwdHMgYGN1c3RvbWl6ZXJgIHdoaWNoXG4gICAgICogaXMgaW52b2tlZCB0byBjb21wYXJlIHZhbHVlcy4gSWYgYGN1c3RvbWl6ZXJgIHJldHVybnMgYHVuZGVmaW5lZGAsIGNvbXBhcmlzb25zXG4gICAgICogYXJlIGhhbmRsZWQgYnkgdGhlIG1ldGhvZCBpbnN0ZWFkLiBUaGUgYGN1c3RvbWl6ZXJgIGlzIGludm9rZWQgd2l0aCBmaXZlXG4gICAgICogYXJndW1lbnRzOiAob2JqVmFsdWUsIHNyY1ZhbHVlLCBpbmRleHxrZXksIG9iamVjdCwgc291cmNlKS5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjAuMFxuICAgICAqIEBjYXRlZ29yeSBMYW5nXG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIGluc3BlY3QuXG4gICAgICogQHBhcmFtIHtPYmplY3R9IHNvdXJjZSBUaGUgb2JqZWN0IG9mIHByb3BlcnR5IHZhbHVlcyB0byBtYXRjaC5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbY3VzdG9taXplcl0gVGhlIGZ1bmN0aW9uIHRvIGN1c3RvbWl6ZSBjb21wYXJpc29ucy5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYG9iamVjdGAgaXMgYSBtYXRjaCwgZWxzZSBgZmFsc2VgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBmdW5jdGlvbiBpc0dyZWV0aW5nKHZhbHVlKSB7XG4gICAgICogICByZXR1cm4gL15oKD86aXxlbGxvKSQvLnRlc3QodmFsdWUpO1xuICAgICAqIH1cbiAgICAgKlxuICAgICAqIGZ1bmN0aW9uIGN1c3RvbWl6ZXIob2JqVmFsdWUsIHNyY1ZhbHVlKSB7XG4gICAgICogICBpZiAoaXNHcmVldGluZyhvYmpWYWx1ZSkgJiYgaXNHcmVldGluZyhzcmNWYWx1ZSkpIHtcbiAgICAgKiAgICAgcmV0dXJuIHRydWU7XG4gICAgICogICB9XG4gICAgICogfVxuICAgICAqXG4gICAgICogdmFyIG9iamVjdCA9IHsgJ2dyZWV0aW5nJzogJ2hlbGxvJyB9O1xuICAgICAqIHZhciBzb3VyY2UgPSB7ICdncmVldGluZyc6ICdoaScgfTtcbiAgICAgKlxuICAgICAqIF8uaXNNYXRjaFdpdGgob2JqZWN0LCBzb3VyY2UsIGN1c3RvbWl6ZXIpO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBpc01hdGNoV2l0aChvYmplY3QsIHNvdXJjZSwgY3VzdG9taXplcikge1xuICAgICAgY3VzdG9taXplciA9IHR5cGVvZiBjdXN0b21pemVyID09ICdmdW5jdGlvbicgPyBjdXN0b21pemVyIDogdW5kZWZpbmVkO1xuICAgICAgcmV0dXJuIGJhc2VJc01hdGNoKG9iamVjdCwgc291cmNlLCBnZXRNYXRjaERhdGEoc291cmNlKSwgY3VzdG9taXplcik7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgYE5hTmAuXG4gICAgICpcbiAgICAgKiAqKk5vdGU6KiogVGhpcyBtZXRob2QgaXMgYmFzZWQgb25cbiAgICAgKiBbYE51bWJlci5pc05hTmBdKGh0dHBzOi8vbWRuLmlvL051bWJlci9pc05hTikgYW5kIGlzIG5vdCB0aGUgc2FtZSBhc1xuICAgICAqIGdsb2JhbCBbYGlzTmFOYF0oaHR0cHM6Ly9tZG4uaW8vaXNOYU4pIHdoaWNoIHJldHVybnMgYHRydWVgIGZvclxuICAgICAqIGB1bmRlZmluZWRgIGFuZCBvdGhlciBub24tbnVtYmVyIHZhbHVlcy5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAwLjEuMFxuICAgICAqIEBjYXRlZ29yeSBMYW5nXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgYE5hTmAsIGVsc2UgYGZhbHNlYC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5pc05hTihOYU4pO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKlxuICAgICAqIF8uaXNOYU4obmV3IE51bWJlcihOYU4pKTtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICpcbiAgICAgKiBpc05hTih1bmRlZmluZWQpO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKlxuICAgICAqIF8uaXNOYU4odW5kZWZpbmVkKTtcbiAgICAgKiAvLyA9PiBmYWxzZVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGlzTmFOKHZhbHVlKSB7XG4gICAgICAvLyBBbiBgTmFOYCBwcmltaXRpdmUgaXMgdGhlIG9ubHkgdmFsdWUgdGhhdCBpcyBub3QgZXF1YWwgdG8gaXRzZWxmLlxuICAgICAgLy8gUGVyZm9ybSB0aGUgYHRvU3RyaW5nVGFnYCBjaGVjayBmaXJzdCB0byBhdm9pZCBlcnJvcnMgd2l0aCBzb21lXG4gICAgICAvLyBBY3RpdmVYIG9iamVjdHMgaW4gSUUuXG4gICAgICByZXR1cm4gaXNOdW1iZXIodmFsdWUpICYmIHZhbHVlICE9ICt2YWx1ZTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDaGVja3MgaWYgYHZhbHVlYCBpcyBhIHByaXN0aW5lIG5hdGl2ZSBmdW5jdGlvbi5cbiAgICAgKlxuICAgICAqICoqTm90ZToqKiBUaGlzIG1ldGhvZCBjYW4ndCByZWxpYWJseSBkZXRlY3QgbmF0aXZlIGZ1bmN0aW9ucyBpbiB0aGUgcHJlc2VuY2VcbiAgICAgKiBvZiB0aGUgY29yZS1qcyBwYWNrYWdlIGJlY2F1c2UgY29yZS1qcyBjaXJjdW12ZW50cyB0aGlzIGtpbmQgb2YgZGV0ZWN0aW9uLlxuICAgICAqIERlc3BpdGUgbXVsdGlwbGUgcmVxdWVzdHMsIHRoZSBjb3JlLWpzIG1haW50YWluZXIgaGFzIG1hZGUgaXQgY2xlYXI6IGFueVxuICAgICAqIGF0dGVtcHQgdG8gZml4IHRoZSBkZXRlY3Rpb24gd2lsbCBiZSBvYnN0cnVjdGVkLiBBcyBhIHJlc3VsdCwgd2UncmUgbGVmdFxuICAgICAqIHdpdGggbGl0dGxlIGNob2ljZSBidXQgdG8gdGhyb3cgYW4gZXJyb3IuIFVuZm9ydHVuYXRlbHksIHRoaXMgYWxzbyBhZmZlY3RzXG4gICAgICogcGFja2FnZXMsIGxpa2UgW2JhYmVsLXBvbHlmaWxsXShodHRwczovL3d3dy5ucG1qcy5jb20vcGFja2FnZS9iYWJlbC1wb2x5ZmlsbCksXG4gICAgICogd2hpY2ggcmVseSBvbiBjb3JlLWpzLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDMuMC4wXG4gICAgICogQGNhdGVnb3J5IExhbmdcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBhIG5hdGl2ZSBmdW5jdGlvbixcbiAgICAgKiAgZWxzZSBgZmFsc2VgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLmlzTmF0aXZlKEFycmF5LnByb3RvdHlwZS5wdXNoKTtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICpcbiAgICAgKiBfLmlzTmF0aXZlKF8pO1xuICAgICAqIC8vID0+IGZhbHNlXG4gICAgICovXG4gICAgZnVuY3Rpb24gaXNOYXRpdmUodmFsdWUpIHtcbiAgICAgIGlmIChpc01hc2thYmxlKHZhbHVlKSkge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoQ09SRV9FUlJPUl9URVhUKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBiYXNlSXNOYXRpdmUodmFsdWUpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIGBudWxsYC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAwLjEuMFxuICAgICAqIEBjYXRlZ29yeSBMYW5nXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgYG51bGxgLCBlbHNlIGBmYWxzZWAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uaXNOdWxsKG51bGwpO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKlxuICAgICAqIF8uaXNOdWxsKHZvaWQgMCk7XG4gICAgICogLy8gPT4gZmFsc2VcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBpc051bGwodmFsdWUpIHtcbiAgICAgIHJldHVybiB2YWx1ZSA9PT0gbnVsbDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDaGVja3MgaWYgYHZhbHVlYCBpcyBgbnVsbGAgb3IgYHVuZGVmaW5lZGAuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgTGFuZ1xuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIG51bGxpc2gsIGVsc2UgYGZhbHNlYC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5pc05pbChudWxsKTtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICpcbiAgICAgKiBfLmlzTmlsKHZvaWQgMCk7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqXG4gICAgICogXy5pc05pbChOYU4pO1xuICAgICAqIC8vID0+IGZhbHNlXG4gICAgICovXG4gICAgZnVuY3Rpb24gaXNOaWwodmFsdWUpIHtcbiAgICAgIHJldHVybiB2YWx1ZSA9PSBudWxsO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIGNsYXNzaWZpZWQgYXMgYSBgTnVtYmVyYCBwcmltaXRpdmUgb3Igb2JqZWN0LlxuICAgICAqXG4gICAgICogKipOb3RlOioqIFRvIGV4Y2x1ZGUgYEluZmluaXR5YCwgYC1JbmZpbml0eWAsIGFuZCBgTmFOYCwgd2hpY2ggYXJlXG4gICAgICogY2xhc3NpZmllZCBhcyBudW1iZXJzLCB1c2UgdGhlIGBfLmlzRmluaXRlYCBtZXRob2QuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMC4xLjBcbiAgICAgKiBAY2F0ZWdvcnkgTGFuZ1xuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGEgbnVtYmVyLCBlbHNlIGBmYWxzZWAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uaXNOdW1iZXIoMyk7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqXG4gICAgICogXy5pc051bWJlcihOdW1iZXIuTUlOX1ZBTFVFKTtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICpcbiAgICAgKiBfLmlzTnVtYmVyKEluZmluaXR5KTtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICpcbiAgICAgKiBfLmlzTnVtYmVyKCczJyk7XG4gICAgICogLy8gPT4gZmFsc2VcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBpc051bWJlcih2YWx1ZSkge1xuICAgICAgcmV0dXJuIHR5cGVvZiB2YWx1ZSA9PSAnbnVtYmVyJyB8fFxuICAgICAgICAoaXNPYmplY3RMaWtlKHZhbHVlKSAmJiBiYXNlR2V0VGFnKHZhbHVlKSA9PSBudW1iZXJUYWcpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIGEgcGxhaW4gb2JqZWN0LCB0aGF0IGlzLCBhbiBvYmplY3QgY3JlYXRlZCBieSB0aGVcbiAgICAgKiBgT2JqZWN0YCBjb25zdHJ1Y3RvciBvciBvbmUgd2l0aCBhIGBbW1Byb3RvdHlwZV1dYCBvZiBgbnVsbGAuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMC44LjBcbiAgICAgKiBAY2F0ZWdvcnkgTGFuZ1xuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGEgcGxhaW4gb2JqZWN0LCBlbHNlIGBmYWxzZWAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIGZ1bmN0aW9uIEZvbygpIHtcbiAgICAgKiAgIHRoaXMuYSA9IDE7XG4gICAgICogfVxuICAgICAqXG4gICAgICogXy5pc1BsYWluT2JqZWN0KG5ldyBGb28pO1xuICAgICAqIC8vID0+IGZhbHNlXG4gICAgICpcbiAgICAgKiBfLmlzUGxhaW5PYmplY3QoWzEsIDIsIDNdKTtcbiAgICAgKiAvLyA9PiBmYWxzZVxuICAgICAqXG4gICAgICogXy5pc1BsYWluT2JqZWN0KHsgJ3gnOiAwLCAneSc6IDAgfSk7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqXG4gICAgICogXy5pc1BsYWluT2JqZWN0KE9iamVjdC5jcmVhdGUobnVsbCkpO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBpc1BsYWluT2JqZWN0KHZhbHVlKSB7XG4gICAgICBpZiAoIWlzT2JqZWN0TGlrZSh2YWx1ZSkgfHwgYmFzZUdldFRhZyh2YWx1ZSkgIT0gb2JqZWN0VGFnKSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgIH1cbiAgICAgIHZhciBwcm90byA9IGdldFByb3RvdHlwZSh2YWx1ZSk7XG4gICAgICBpZiAocHJvdG8gPT09IG51bGwpIHtcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICB9XG4gICAgICB2YXIgQ3RvciA9IGhhc093blByb3BlcnR5LmNhbGwocHJvdG8sICdjb25zdHJ1Y3RvcicpICYmIHByb3RvLmNvbnN0cnVjdG9yO1xuICAgICAgcmV0dXJuIHR5cGVvZiBDdG9yID09ICdmdW5jdGlvbicgJiYgQ3RvciBpbnN0YW5jZW9mIEN0b3IgJiZcbiAgICAgICAgZnVuY1RvU3RyaW5nLmNhbGwoQ3RvcikgPT0gb2JqZWN0Q3RvclN0cmluZztcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDaGVja3MgaWYgYHZhbHVlYCBpcyBjbGFzc2lmaWVkIGFzIGEgYFJlZ0V4cGAgb2JqZWN0LlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDAuMS4wXG4gICAgICogQGNhdGVnb3J5IExhbmdcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBhIHJlZ2V4cCwgZWxzZSBgZmFsc2VgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLmlzUmVnRXhwKC9hYmMvKTtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICpcbiAgICAgKiBfLmlzUmVnRXhwKCcvYWJjLycpO1xuICAgICAqIC8vID0+IGZhbHNlXG4gICAgICovXG4gICAgdmFyIGlzUmVnRXhwID0gbm9kZUlzUmVnRXhwID8gYmFzZVVuYXJ5KG5vZGVJc1JlZ0V4cCkgOiBiYXNlSXNSZWdFeHA7XG5cbiAgICAvKipcbiAgICAgKiBDaGVja3MgaWYgYHZhbHVlYCBpcyBhIHNhZmUgaW50ZWdlci4gQW4gaW50ZWdlciBpcyBzYWZlIGlmIGl0J3MgYW4gSUVFRS03NTRcbiAgICAgKiBkb3VibGUgcHJlY2lzaW9uIG51bWJlciB3aGljaCBpc24ndCB0aGUgcmVzdWx0IG9mIGEgcm91bmRlZCB1bnNhZmUgaW50ZWdlci5cbiAgICAgKlxuICAgICAqICoqTm90ZToqKiBUaGlzIG1ldGhvZCBpcyBiYXNlZCBvblxuICAgICAqIFtgTnVtYmVyLmlzU2FmZUludGVnZXJgXShodHRwczovL21kbi5pby9OdW1iZXIvaXNTYWZlSW50ZWdlcikuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgTGFuZ1xuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGEgc2FmZSBpbnRlZ2VyLCBlbHNlIGBmYWxzZWAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uaXNTYWZlSW50ZWdlcigzKTtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICpcbiAgICAgKiBfLmlzU2FmZUludGVnZXIoTnVtYmVyLk1JTl9WQUxVRSk7XG4gICAgICogLy8gPT4gZmFsc2VcbiAgICAgKlxuICAgICAqIF8uaXNTYWZlSW50ZWdlcihJbmZpbml0eSk7XG4gICAgICogLy8gPT4gZmFsc2VcbiAgICAgKlxuICAgICAqIF8uaXNTYWZlSW50ZWdlcignMycpO1xuICAgICAqIC8vID0+IGZhbHNlXG4gICAgICovXG4gICAgZnVuY3Rpb24gaXNTYWZlSW50ZWdlcih2YWx1ZSkge1xuICAgICAgcmV0dXJuIGlzSW50ZWdlcih2YWx1ZSkgJiYgdmFsdWUgPj0gLU1BWF9TQUZFX0lOVEVHRVIgJiYgdmFsdWUgPD0gTUFYX1NBRkVfSU5URUdFUjtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDaGVja3MgaWYgYHZhbHVlYCBpcyBjbGFzc2lmaWVkIGFzIGEgYFNldGAgb2JqZWN0LlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMy4wXG4gICAgICogQGNhdGVnb3J5IExhbmdcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBhIHNldCwgZWxzZSBgZmFsc2VgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLmlzU2V0KG5ldyBTZXQpO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKlxuICAgICAqIF8uaXNTZXQobmV3IFdlYWtTZXQpO1xuICAgICAqIC8vID0+IGZhbHNlXG4gICAgICovXG4gICAgdmFyIGlzU2V0ID0gbm9kZUlzU2V0ID8gYmFzZVVuYXJ5KG5vZGVJc1NldCkgOiBiYXNlSXNTZXQ7XG5cbiAgICAvKipcbiAgICAgKiBDaGVja3MgaWYgYHZhbHVlYCBpcyBjbGFzc2lmaWVkIGFzIGEgYFN0cmluZ2AgcHJpbWl0aXZlIG9yIG9iamVjdC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAc2luY2UgMC4xLjBcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBjYXRlZ29yeSBMYW5nXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgYSBzdHJpbmcsIGVsc2UgYGZhbHNlYC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5pc1N0cmluZygnYWJjJyk7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqXG4gICAgICogXy5pc1N0cmluZygxKTtcbiAgICAgKiAvLyA9PiBmYWxzZVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGlzU3RyaW5nKHZhbHVlKSB7XG4gICAgICByZXR1cm4gdHlwZW9mIHZhbHVlID09ICdzdHJpbmcnIHx8XG4gICAgICAgICghaXNBcnJheSh2YWx1ZSkgJiYgaXNPYmplY3RMaWtlKHZhbHVlKSAmJiBiYXNlR2V0VGFnKHZhbHVlKSA9PSBzdHJpbmdUYWcpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIGNsYXNzaWZpZWQgYXMgYSBgU3ltYm9sYCBwcmltaXRpdmUgb3Igb2JqZWN0LlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMC4wXG4gICAgICogQGNhdGVnb3J5IExhbmdcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBhIHN5bWJvbCwgZWxzZSBgZmFsc2VgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLmlzU3ltYm9sKFN5bWJvbC5pdGVyYXRvcik7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqXG4gICAgICogXy5pc1N5bWJvbCgnYWJjJyk7XG4gICAgICogLy8gPT4gZmFsc2VcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBpc1N5bWJvbCh2YWx1ZSkge1xuICAgICAgcmV0dXJuIHR5cGVvZiB2YWx1ZSA9PSAnc3ltYm9sJyB8fFxuICAgICAgICAoaXNPYmplY3RMaWtlKHZhbHVlKSAmJiBiYXNlR2V0VGFnKHZhbHVlKSA9PSBzeW1ib2xUYWcpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIGNsYXNzaWZpZWQgYXMgYSB0eXBlZCBhcnJheS5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAzLjAuMFxuICAgICAqIEBjYXRlZ29yeSBMYW5nXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgYSB0eXBlZCBhcnJheSwgZWxzZSBgZmFsc2VgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLmlzVHlwZWRBcnJheShuZXcgVWludDhBcnJheSk7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqXG4gICAgICogXy5pc1R5cGVkQXJyYXkoW10pO1xuICAgICAqIC8vID0+IGZhbHNlXG4gICAgICovXG4gICAgdmFyIGlzVHlwZWRBcnJheSA9IG5vZGVJc1R5cGVkQXJyYXkgPyBiYXNlVW5hcnkobm9kZUlzVHlwZWRBcnJheSkgOiBiYXNlSXNUeXBlZEFycmF5O1xuXG4gICAgLyoqXG4gICAgICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgYHVuZGVmaW5lZGAuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQHNpbmNlIDAuMS4wXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAY2F0ZWdvcnkgTGFuZ1xuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGB1bmRlZmluZWRgLCBlbHNlIGBmYWxzZWAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uaXNVbmRlZmluZWQodm9pZCAwKTtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICpcbiAgICAgKiBfLmlzVW5kZWZpbmVkKG51bGwpO1xuICAgICAqIC8vID0+IGZhbHNlXG4gICAgICovXG4gICAgZnVuY3Rpb24gaXNVbmRlZmluZWQodmFsdWUpIHtcbiAgICAgIHJldHVybiB2YWx1ZSA9PT0gdW5kZWZpbmVkO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIGNsYXNzaWZpZWQgYXMgYSBgV2Vha01hcGAgb2JqZWN0LlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMy4wXG4gICAgICogQGNhdGVnb3J5IExhbmdcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBhIHdlYWsgbWFwLCBlbHNlIGBmYWxzZWAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uaXNXZWFrTWFwKG5ldyBXZWFrTWFwKTtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICpcbiAgICAgKiBfLmlzV2Vha01hcChuZXcgTWFwKTtcbiAgICAgKiAvLyA9PiBmYWxzZVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGlzV2Vha01hcCh2YWx1ZSkge1xuICAgICAgcmV0dXJuIGlzT2JqZWN0TGlrZSh2YWx1ZSkgJiYgZ2V0VGFnKHZhbHVlKSA9PSB3ZWFrTWFwVGFnO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIGNsYXNzaWZpZWQgYXMgYSBgV2Vha1NldGAgb2JqZWN0LlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMy4wXG4gICAgICogQGNhdGVnb3J5IExhbmdcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBhIHdlYWsgc2V0LCBlbHNlIGBmYWxzZWAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uaXNXZWFrU2V0KG5ldyBXZWFrU2V0KTtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICpcbiAgICAgKiBfLmlzV2Vha1NldChuZXcgU2V0KTtcbiAgICAgKiAvLyA9PiBmYWxzZVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGlzV2Vha1NldCh2YWx1ZSkge1xuICAgICAgcmV0dXJuIGlzT2JqZWN0TGlrZSh2YWx1ZSkgJiYgYmFzZUdldFRhZyh2YWx1ZSkgPT0gd2Vha1NldFRhZztcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDaGVja3MgaWYgYHZhbHVlYCBpcyBsZXNzIHRoYW4gYG90aGVyYC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAzLjkuMFxuICAgICAqIEBjYXRlZ29yeSBMYW5nXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY29tcGFyZS5cbiAgICAgKiBAcGFyYW0geyp9IG90aGVyIFRoZSBvdGhlciB2YWx1ZSB0byBjb21wYXJlLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGxlc3MgdGhhbiBgb3RoZXJgLFxuICAgICAqICBlbHNlIGBmYWxzZWAuXG4gICAgICogQHNlZSBfLmd0XG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8ubHQoMSwgMyk7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqXG4gICAgICogXy5sdCgzLCAzKTtcbiAgICAgKiAvLyA9PiBmYWxzZVxuICAgICAqXG4gICAgICogXy5sdCgzLCAxKTtcbiAgICAgKiAvLyA9PiBmYWxzZVxuICAgICAqL1xuICAgIHZhciBsdCA9IGNyZWF0ZVJlbGF0aW9uYWxPcGVyYXRpb24oYmFzZUx0KTtcblxuICAgIC8qKlxuICAgICAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIGxlc3MgdGhhbiBvciBlcXVhbCB0byBgb3RoZXJgLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDMuOS4wXG4gICAgICogQGNhdGVnb3J5IExhbmdcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjb21wYXJlLlxuICAgICAqIEBwYXJhbSB7Kn0gb3RoZXIgVGhlIG90aGVyIHZhbHVlIHRvIGNvbXBhcmUuXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgbGVzcyB0aGFuIG9yIGVxdWFsIHRvXG4gICAgICogIGBvdGhlcmAsIGVsc2UgYGZhbHNlYC5cbiAgICAgKiBAc2VlIF8uZ3RlXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8ubHRlKDEsIDMpO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKlxuICAgICAqIF8ubHRlKDMsIDMpO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKlxuICAgICAqIF8ubHRlKDMsIDEpO1xuICAgICAqIC8vID0+IGZhbHNlXG4gICAgICovXG4gICAgdmFyIGx0ZSA9IGNyZWF0ZVJlbGF0aW9uYWxPcGVyYXRpb24oZnVuY3Rpb24odmFsdWUsIG90aGVyKSB7XG4gICAgICByZXR1cm4gdmFsdWUgPD0gb3RoZXI7XG4gICAgfSk7XG5cbiAgICAvKipcbiAgICAgKiBDb252ZXJ0cyBgdmFsdWVgIHRvIGFuIGFycmF5LlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBzaW5jZSAwLjEuMFxuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQGNhdGVnb3J5IExhbmdcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjb252ZXJ0LlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgY29udmVydGVkIGFycmF5LlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLnRvQXJyYXkoeyAnYSc6IDEsICdiJzogMiB9KTtcbiAgICAgKiAvLyA9PiBbMSwgMl1cbiAgICAgKlxuICAgICAqIF8udG9BcnJheSgnYWJjJyk7XG4gICAgICogLy8gPT4gWydhJywgJ2InLCAnYyddXG4gICAgICpcbiAgICAgKiBfLnRvQXJyYXkoMSk7XG4gICAgICogLy8gPT4gW11cbiAgICAgKlxuICAgICAqIF8udG9BcnJheShudWxsKTtcbiAgICAgKiAvLyA9PiBbXVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHRvQXJyYXkodmFsdWUpIHtcbiAgICAgIGlmICghdmFsdWUpIHtcbiAgICAgICAgcmV0dXJuIFtdO1xuICAgICAgfVxuICAgICAgaWYgKGlzQXJyYXlMaWtlKHZhbHVlKSkge1xuICAgICAgICByZXR1cm4gaXNTdHJpbmcodmFsdWUpID8gc3RyaW5nVG9BcnJheSh2YWx1ZSkgOiBjb3B5QXJyYXkodmFsdWUpO1xuICAgICAgfVxuICAgICAgaWYgKHN5bUl0ZXJhdG9yICYmIHZhbHVlW3N5bUl0ZXJhdG9yXSkge1xuICAgICAgICByZXR1cm4gaXRlcmF0b3JUb0FycmF5KHZhbHVlW3N5bUl0ZXJhdG9yXSgpKTtcbiAgICAgIH1cbiAgICAgIHZhciB0YWcgPSBnZXRUYWcodmFsdWUpLFxuICAgICAgICAgIGZ1bmMgPSB0YWcgPT0gbWFwVGFnID8gbWFwVG9BcnJheSA6ICh0YWcgPT0gc2V0VGFnID8gc2V0VG9BcnJheSA6IHZhbHVlcyk7XG5cbiAgICAgIHJldHVybiBmdW5jKHZhbHVlKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDb252ZXJ0cyBgdmFsdWVgIHRvIGEgZmluaXRlIG51bWJlci5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjEyLjBcbiAgICAgKiBAY2F0ZWdvcnkgTGFuZ1xuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNvbnZlcnQuXG4gICAgICogQHJldHVybnMge251bWJlcn0gUmV0dXJucyB0aGUgY29udmVydGVkIG51bWJlci5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy50b0Zpbml0ZSgzLjIpO1xuICAgICAqIC8vID0+IDMuMlxuICAgICAqXG4gICAgICogXy50b0Zpbml0ZShOdW1iZXIuTUlOX1ZBTFVFKTtcbiAgICAgKiAvLyA9PiA1ZS0zMjRcbiAgICAgKlxuICAgICAqIF8udG9GaW5pdGUoSW5maW5pdHkpO1xuICAgICAqIC8vID0+IDEuNzk3NjkzMTM0ODYyMzE1N2UrMzA4XG4gICAgICpcbiAgICAgKiBfLnRvRmluaXRlKCczLjInKTtcbiAgICAgKiAvLyA9PiAzLjJcbiAgICAgKi9cbiAgICBmdW5jdGlvbiB0b0Zpbml0ZSh2YWx1ZSkge1xuICAgICAgaWYgKCF2YWx1ZSkge1xuICAgICAgICByZXR1cm4gdmFsdWUgPT09IDAgPyB2YWx1ZSA6IDA7XG4gICAgICB9XG4gICAgICB2YWx1ZSA9IHRvTnVtYmVyKHZhbHVlKTtcbiAgICAgIGlmICh2YWx1ZSA9PT0gSU5GSU5JVFkgfHwgdmFsdWUgPT09IC1JTkZJTklUWSkge1xuICAgICAgICB2YXIgc2lnbiA9ICh2YWx1ZSA8IDAgPyAtMSA6IDEpO1xuICAgICAgICByZXR1cm4gc2lnbiAqIE1BWF9JTlRFR0VSO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHZhbHVlID09PSB2YWx1ZSA/IHZhbHVlIDogMDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDb252ZXJ0cyBgdmFsdWVgIHRvIGFuIGludGVnZXIuXG4gICAgICpcbiAgICAgKiAqKk5vdGU6KiogVGhpcyBtZXRob2QgaXMgbG9vc2VseSBiYXNlZCBvblxuICAgICAqIFtgVG9JbnRlZ2VyYF0oaHR0cDovL3d3dy5lY21hLWludGVybmF0aW9uYWwub3JnL2VjbWEtMjYyLzcuMC8jc2VjLXRvaW50ZWdlcikuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgTGFuZ1xuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNvbnZlcnQuXG4gICAgICogQHJldHVybnMge251bWJlcn0gUmV0dXJucyB0aGUgY29udmVydGVkIGludGVnZXIuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8udG9JbnRlZ2VyKDMuMik7XG4gICAgICogLy8gPT4gM1xuICAgICAqXG4gICAgICogXy50b0ludGVnZXIoTnVtYmVyLk1JTl9WQUxVRSk7XG4gICAgICogLy8gPT4gMFxuICAgICAqXG4gICAgICogXy50b0ludGVnZXIoSW5maW5pdHkpO1xuICAgICAqIC8vID0+IDEuNzk3NjkzMTM0ODYyMzE1N2UrMzA4XG4gICAgICpcbiAgICAgKiBfLnRvSW50ZWdlcignMy4yJyk7XG4gICAgICogLy8gPT4gM1xuICAgICAqL1xuICAgIGZ1bmN0aW9uIHRvSW50ZWdlcih2YWx1ZSkge1xuICAgICAgdmFyIHJlc3VsdCA9IHRvRmluaXRlKHZhbHVlKSxcbiAgICAgICAgICByZW1haW5kZXIgPSByZXN1bHQgJSAxO1xuXG4gICAgICByZXR1cm4gcmVzdWx0ID09PSByZXN1bHQgPyAocmVtYWluZGVyID8gcmVzdWx0IC0gcmVtYWluZGVyIDogcmVzdWx0KSA6IDA7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ29udmVydHMgYHZhbHVlYCB0byBhbiBpbnRlZ2VyIHN1aXRhYmxlIGZvciB1c2UgYXMgdGhlIGxlbmd0aCBvZiBhblxuICAgICAqIGFycmF5LWxpa2Ugb2JqZWN0LlxuICAgICAqXG4gICAgICogKipOb3RlOioqIFRoaXMgbWV0aG9kIGlzIGJhc2VkIG9uXG4gICAgICogW2BUb0xlbmd0aGBdKGh0dHA6Ly9lY21hLWludGVybmF0aW9uYWwub3JnL2VjbWEtMjYyLzcuMC8jc2VjLXRvbGVuZ3RoKS5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjAuMFxuICAgICAqIEBjYXRlZ29yeSBMYW5nXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY29udmVydC5cbiAgICAgKiBAcmV0dXJucyB7bnVtYmVyfSBSZXR1cm5zIHRoZSBjb252ZXJ0ZWQgaW50ZWdlci5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy50b0xlbmd0aCgzLjIpO1xuICAgICAqIC8vID0+IDNcbiAgICAgKlxuICAgICAqIF8udG9MZW5ndGgoTnVtYmVyLk1JTl9WQUxVRSk7XG4gICAgICogLy8gPT4gMFxuICAgICAqXG4gICAgICogXy50b0xlbmd0aChJbmZpbml0eSk7XG4gICAgICogLy8gPT4gNDI5NDk2NzI5NVxuICAgICAqXG4gICAgICogXy50b0xlbmd0aCgnMy4yJyk7XG4gICAgICogLy8gPT4gM1xuICAgICAqL1xuICAgIGZ1bmN0aW9uIHRvTGVuZ3RoKHZhbHVlKSB7XG4gICAgICByZXR1cm4gdmFsdWUgPyBiYXNlQ2xhbXAodG9JbnRlZ2VyKHZhbHVlKSwgMCwgTUFYX0FSUkFZX0xFTkdUSCkgOiAwO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENvbnZlcnRzIGB2YWx1ZWAgdG8gYSBudW1iZXIuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgTGFuZ1xuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIHByb2Nlc3MuXG4gICAgICogQHJldHVybnMge251bWJlcn0gUmV0dXJucyB0aGUgbnVtYmVyLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLnRvTnVtYmVyKDMuMik7XG4gICAgICogLy8gPT4gMy4yXG4gICAgICpcbiAgICAgKiBfLnRvTnVtYmVyKE51bWJlci5NSU5fVkFMVUUpO1xuICAgICAqIC8vID0+IDVlLTMyNFxuICAgICAqXG4gICAgICogXy50b051bWJlcihJbmZpbml0eSk7XG4gICAgICogLy8gPT4gSW5maW5pdHlcbiAgICAgKlxuICAgICAqIF8udG9OdW1iZXIoJzMuMicpO1xuICAgICAqIC8vID0+IDMuMlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHRvTnVtYmVyKHZhbHVlKSB7XG4gICAgICBpZiAodHlwZW9mIHZhbHVlID09ICdudW1iZXInKSB7XG4gICAgICAgIHJldHVybiB2YWx1ZTtcbiAgICAgIH1cbiAgICAgIGlmIChpc1N5bWJvbCh2YWx1ZSkpIHtcbiAgICAgICAgcmV0dXJuIE5BTjtcbiAgICAgIH1cbiAgICAgIGlmIChpc09iamVjdCh2YWx1ZSkpIHtcbiAgICAgICAgdmFyIG90aGVyID0gdHlwZW9mIHZhbHVlLnZhbHVlT2YgPT0gJ2Z1bmN0aW9uJyA/IHZhbHVlLnZhbHVlT2YoKSA6IHZhbHVlO1xuICAgICAgICB2YWx1ZSA9IGlzT2JqZWN0KG90aGVyKSA/IChvdGhlciArICcnKSA6IG90aGVyO1xuICAgICAgfVxuICAgICAgaWYgKHR5cGVvZiB2YWx1ZSAhPSAnc3RyaW5nJykge1xuICAgICAgICByZXR1cm4gdmFsdWUgPT09IDAgPyB2YWx1ZSA6ICt2YWx1ZTtcbiAgICAgIH1cbiAgICAgIHZhbHVlID0gYmFzZVRyaW0odmFsdWUpO1xuICAgICAgdmFyIGlzQmluYXJ5ID0gcmVJc0JpbmFyeS50ZXN0KHZhbHVlKTtcbiAgICAgIHJldHVybiAoaXNCaW5hcnkgfHwgcmVJc09jdGFsLnRlc3QodmFsdWUpKVxuICAgICAgICA/IGZyZWVQYXJzZUludCh2YWx1ZS5zbGljZSgyKSwgaXNCaW5hcnkgPyAyIDogOClcbiAgICAgICAgOiAocmVJc0JhZEhleC50ZXN0KHZhbHVlKSA/IE5BTiA6ICt2YWx1ZSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ29udmVydHMgYHZhbHVlYCB0byBhIHBsYWluIG9iamVjdCBmbGF0dGVuaW5nIGluaGVyaXRlZCBlbnVtZXJhYmxlIHN0cmluZ1xuICAgICAqIGtleWVkIHByb3BlcnRpZXMgb2YgYHZhbHVlYCB0byBvd24gcHJvcGVydGllcyBvZiB0aGUgcGxhaW4gb2JqZWN0LlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDMuMC4wXG4gICAgICogQGNhdGVnb3J5IExhbmdcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjb252ZXJ0LlxuICAgICAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgdGhlIGNvbnZlcnRlZCBwbGFpbiBvYmplY3QuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIGZ1bmN0aW9uIEZvbygpIHtcbiAgICAgKiAgIHRoaXMuYiA9IDI7XG4gICAgICogfVxuICAgICAqXG4gICAgICogRm9vLnByb3RvdHlwZS5jID0gMztcbiAgICAgKlxuICAgICAqIF8uYXNzaWduKHsgJ2EnOiAxIH0sIG5ldyBGb28pO1xuICAgICAqIC8vID0+IHsgJ2EnOiAxLCAnYic6IDIgfVxuICAgICAqXG4gICAgICogXy5hc3NpZ24oeyAnYSc6IDEgfSwgXy50b1BsYWluT2JqZWN0KG5ldyBGb28pKTtcbiAgICAgKiAvLyA9PiB7ICdhJzogMSwgJ2InOiAyLCAnYyc6IDMgfVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHRvUGxhaW5PYmplY3QodmFsdWUpIHtcbiAgICAgIHJldHVybiBjb3B5T2JqZWN0KHZhbHVlLCBrZXlzSW4odmFsdWUpKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDb252ZXJ0cyBgdmFsdWVgIHRvIGEgc2FmZSBpbnRlZ2VyLiBBIHNhZmUgaW50ZWdlciBjYW4gYmUgY29tcGFyZWQgYW5kXG4gICAgICogcmVwcmVzZW50ZWQgY29ycmVjdGx5LlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMC4wXG4gICAgICogQGNhdGVnb3J5IExhbmdcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjb252ZXJ0LlxuICAgICAqIEByZXR1cm5zIHtudW1iZXJ9IFJldHVybnMgdGhlIGNvbnZlcnRlZCBpbnRlZ2VyLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLnRvU2FmZUludGVnZXIoMy4yKTtcbiAgICAgKiAvLyA9PiAzXG4gICAgICpcbiAgICAgKiBfLnRvU2FmZUludGVnZXIoTnVtYmVyLk1JTl9WQUxVRSk7XG4gICAgICogLy8gPT4gMFxuICAgICAqXG4gICAgICogXy50b1NhZmVJbnRlZ2VyKEluZmluaXR5KTtcbiAgICAgKiAvLyA9PiA5MDA3MTk5MjU0NzQwOTkxXG4gICAgICpcbiAgICAgKiBfLnRvU2FmZUludGVnZXIoJzMuMicpO1xuICAgICAqIC8vID0+IDNcbiAgICAgKi9cbiAgICBmdW5jdGlvbiB0b1NhZmVJbnRlZ2VyKHZhbHVlKSB7XG4gICAgICByZXR1cm4gdmFsdWVcbiAgICAgICAgPyBiYXNlQ2xhbXAodG9JbnRlZ2VyKHZhbHVlKSwgLU1BWF9TQUZFX0lOVEVHRVIsIE1BWF9TQUZFX0lOVEVHRVIpXG4gICAgICAgIDogKHZhbHVlID09PSAwID8gdmFsdWUgOiAwKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDb252ZXJ0cyBgdmFsdWVgIHRvIGEgc3RyaW5nLiBBbiBlbXB0eSBzdHJpbmcgaXMgcmV0dXJuZWQgZm9yIGBudWxsYFxuICAgICAqIGFuZCBgdW5kZWZpbmVkYCB2YWx1ZXMuIFRoZSBzaWduIG9mIGAtMGAgaXMgcHJlc2VydmVkLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMC4wXG4gICAgICogQGNhdGVnb3J5IExhbmdcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjb252ZXJ0LlxuICAgICAqIEByZXR1cm5zIHtzdHJpbmd9IFJldHVybnMgdGhlIGNvbnZlcnRlZCBzdHJpbmcuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8udG9TdHJpbmcobnVsbCk7XG4gICAgICogLy8gPT4gJydcbiAgICAgKlxuICAgICAqIF8udG9TdHJpbmcoLTApO1xuICAgICAqIC8vID0+ICctMCdcbiAgICAgKlxuICAgICAqIF8udG9TdHJpbmcoWzEsIDIsIDNdKTtcbiAgICAgKiAvLyA9PiAnMSwyLDMnXG4gICAgICovXG4gICAgZnVuY3Rpb24gdG9TdHJpbmcodmFsdWUpIHtcbiAgICAgIHJldHVybiB2YWx1ZSA9PSBudWxsID8gJycgOiBiYXNlVG9TdHJpbmcodmFsdWUpO1xuICAgIH1cblxuICAgIC8qLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tKi9cblxuICAgIC8qKlxuICAgICAqIEFzc2lnbnMgb3duIGVudW1lcmFibGUgc3RyaW5nIGtleWVkIHByb3BlcnRpZXMgb2Ygc291cmNlIG9iamVjdHMgdG8gdGhlXG4gICAgICogZGVzdGluYXRpb24gb2JqZWN0LiBTb3VyY2Ugb2JqZWN0cyBhcmUgYXBwbGllZCBmcm9tIGxlZnQgdG8gcmlnaHQuXG4gICAgICogU3Vic2VxdWVudCBzb3VyY2VzIG92ZXJ3cml0ZSBwcm9wZXJ0eSBhc3NpZ25tZW50cyBvZiBwcmV2aW91cyBzb3VyY2VzLlxuICAgICAqXG4gICAgICogKipOb3RlOioqIFRoaXMgbWV0aG9kIG11dGF0ZXMgYG9iamVjdGAgYW5kIGlzIGxvb3NlbHkgYmFzZWQgb25cbiAgICAgKiBbYE9iamVjdC5hc3NpZ25gXShodHRwczovL21kbi5pby9PYmplY3QvYXNzaWduKS5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAwLjEwLjBcbiAgICAgKiBAY2F0ZWdvcnkgT2JqZWN0XG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgZGVzdGluYXRpb24gb2JqZWN0LlxuICAgICAqIEBwYXJhbSB7Li4uT2JqZWN0fSBbc291cmNlc10gVGhlIHNvdXJjZSBvYmplY3RzLlxuICAgICAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgYG9iamVjdGAuXG4gICAgICogQHNlZSBfLmFzc2lnbkluXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIGZ1bmN0aW9uIEZvbygpIHtcbiAgICAgKiAgIHRoaXMuYSA9IDE7XG4gICAgICogfVxuICAgICAqXG4gICAgICogZnVuY3Rpb24gQmFyKCkge1xuICAgICAqICAgdGhpcy5jID0gMztcbiAgICAgKiB9XG4gICAgICpcbiAgICAgKiBGb28ucHJvdG90eXBlLmIgPSAyO1xuICAgICAqIEJhci5wcm90b3R5cGUuZCA9IDQ7XG4gICAgICpcbiAgICAgKiBfLmFzc2lnbih7ICdhJzogMCB9LCBuZXcgRm9vLCBuZXcgQmFyKTtcbiAgICAgKiAvLyA9PiB7ICdhJzogMSwgJ2MnOiAzIH1cbiAgICAgKi9cbiAgICB2YXIgYXNzaWduID0gY3JlYXRlQXNzaWduZXIoZnVuY3Rpb24ob2JqZWN0LCBzb3VyY2UpIHtcbiAgICAgIGlmIChpc1Byb3RvdHlwZShzb3VyY2UpIHx8IGlzQXJyYXlMaWtlKHNvdXJjZSkpIHtcbiAgICAgICAgY29weU9iamVjdChzb3VyY2UsIGtleXMoc291cmNlKSwgb2JqZWN0KTtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgZm9yICh2YXIga2V5IGluIHNvdXJjZSkge1xuICAgICAgICBpZiAoaGFzT3duUHJvcGVydHkuY2FsbChzb3VyY2UsIGtleSkpIHtcbiAgICAgICAgICBhc3NpZ25WYWx1ZShvYmplY3QsIGtleSwgc291cmNlW2tleV0pO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSk7XG5cbiAgICAvKipcbiAgICAgKiBUaGlzIG1ldGhvZCBpcyBsaWtlIGBfLmFzc2lnbmAgZXhjZXB0IHRoYXQgaXQgaXRlcmF0ZXMgb3ZlciBvd24gYW5kXG4gICAgICogaW5oZXJpdGVkIHNvdXJjZSBwcm9wZXJ0aWVzLlxuICAgICAqXG4gICAgICogKipOb3RlOioqIFRoaXMgbWV0aG9kIG11dGF0ZXMgYG9iamVjdGAuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4wLjBcbiAgICAgKiBAYWxpYXMgZXh0ZW5kXG4gICAgICogQGNhdGVnb3J5IE9iamVjdFxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIGRlc3RpbmF0aW9uIG9iamVjdC5cbiAgICAgKiBAcGFyYW0gey4uLk9iamVjdH0gW3NvdXJjZXNdIFRoZSBzb3VyY2Ugb2JqZWN0cy5cbiAgICAgKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIGBvYmplY3RgLlxuICAgICAqIEBzZWUgXy5hc3NpZ25cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogZnVuY3Rpb24gRm9vKCkge1xuICAgICAqICAgdGhpcy5hID0gMTtcbiAgICAgKiB9XG4gICAgICpcbiAgICAgKiBmdW5jdGlvbiBCYXIoKSB7XG4gICAgICogICB0aGlzLmMgPSAzO1xuICAgICAqIH1cbiAgICAgKlxuICAgICAqIEZvby5wcm90b3R5cGUuYiA9IDI7XG4gICAgICogQmFyLnByb3RvdHlwZS5kID0gNDtcbiAgICAgKlxuICAgICAqIF8uYXNzaWduSW4oeyAnYSc6IDAgfSwgbmV3IEZvbywgbmV3IEJhcik7XG4gICAgICogLy8gPT4geyAnYSc6IDEsICdiJzogMiwgJ2MnOiAzLCAnZCc6IDQgfVxuICAgICAqL1xuICAgIHZhciBhc3NpZ25JbiA9IGNyZWF0ZUFzc2lnbmVyKGZ1bmN0aW9uKG9iamVjdCwgc291cmNlKSB7XG4gICAgICBjb3B5T2JqZWN0KHNvdXJjZSwga2V5c0luKHNvdXJjZSksIG9iamVjdCk7XG4gICAgfSk7XG5cbiAgICAvKipcbiAgICAgKiBUaGlzIG1ldGhvZCBpcyBsaWtlIGBfLmFzc2lnbkluYCBleGNlcHQgdGhhdCBpdCBhY2NlcHRzIGBjdXN0b21pemVyYFxuICAgICAqIHdoaWNoIGlzIGludm9rZWQgdG8gcHJvZHVjZSB0aGUgYXNzaWduZWQgdmFsdWVzLiBJZiBgY3VzdG9taXplcmAgcmV0dXJuc1xuICAgICAqIGB1bmRlZmluZWRgLCBhc3NpZ25tZW50IGlzIGhhbmRsZWQgYnkgdGhlIG1ldGhvZCBpbnN0ZWFkLiBUaGUgYGN1c3RvbWl6ZXJgXG4gICAgICogaXMgaW52b2tlZCB3aXRoIGZpdmUgYXJndW1lbnRzOiAob2JqVmFsdWUsIHNyY1ZhbHVlLCBrZXksIG9iamVjdCwgc291cmNlKS5cbiAgICAgKlxuICAgICAqICoqTm90ZToqKiBUaGlzIG1ldGhvZCBtdXRhdGVzIGBvYmplY3RgLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMC4wXG4gICAgICogQGFsaWFzIGV4dGVuZFdpdGhcbiAgICAgKiBAY2F0ZWdvcnkgT2JqZWN0XG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgZGVzdGluYXRpb24gb2JqZWN0LlxuICAgICAqIEBwYXJhbSB7Li4uT2JqZWN0fSBzb3VyY2VzIFRoZSBzb3VyY2Ugb2JqZWN0cy5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbY3VzdG9taXplcl0gVGhlIGZ1bmN0aW9uIHRvIGN1c3RvbWl6ZSBhc3NpZ25lZCB2YWx1ZXMuXG4gICAgICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyBgb2JqZWN0YC5cbiAgICAgKiBAc2VlIF8uYXNzaWduV2l0aFxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBmdW5jdGlvbiBjdXN0b21pemVyKG9ialZhbHVlLCBzcmNWYWx1ZSkge1xuICAgICAqICAgcmV0dXJuIF8uaXNVbmRlZmluZWQob2JqVmFsdWUpID8gc3JjVmFsdWUgOiBvYmpWYWx1ZTtcbiAgICAgKiB9XG4gICAgICpcbiAgICAgKiB2YXIgZGVmYXVsdHMgPSBfLnBhcnRpYWxSaWdodChfLmFzc2lnbkluV2l0aCwgY3VzdG9taXplcik7XG4gICAgICpcbiAgICAgKiBkZWZhdWx0cyh7ICdhJzogMSB9LCB7ICdiJzogMiB9LCB7ICdhJzogMyB9KTtcbiAgICAgKiAvLyA9PiB7ICdhJzogMSwgJ2InOiAyIH1cbiAgICAgKi9cbiAgICB2YXIgYXNzaWduSW5XaXRoID0gY3JlYXRlQXNzaWduZXIoZnVuY3Rpb24ob2JqZWN0LCBzb3VyY2UsIHNyY0luZGV4LCBjdXN0b21pemVyKSB7XG4gICAgICBjb3B5T2JqZWN0KHNvdXJjZSwga2V5c0luKHNvdXJjZSksIG9iamVjdCwgY3VzdG9taXplcik7XG4gICAgfSk7XG5cbiAgICAvKipcbiAgICAgKiBUaGlzIG1ldGhvZCBpcyBsaWtlIGBfLmFzc2lnbmAgZXhjZXB0IHRoYXQgaXQgYWNjZXB0cyBgY3VzdG9taXplcmBcbiAgICAgKiB3aGljaCBpcyBpbnZva2VkIHRvIHByb2R1Y2UgdGhlIGFzc2lnbmVkIHZhbHVlcy4gSWYgYGN1c3RvbWl6ZXJgIHJldHVybnNcbiAgICAgKiBgdW5kZWZpbmVkYCwgYXNzaWdubWVudCBpcyBoYW5kbGVkIGJ5IHRoZSBtZXRob2QgaW5zdGVhZC4gVGhlIGBjdXN0b21pemVyYFxuICAgICAqIGlzIGludm9rZWQgd2l0aCBmaXZlIGFyZ3VtZW50czogKG9ialZhbHVlLCBzcmNWYWx1ZSwga2V5LCBvYmplY3QsIHNvdXJjZSkuXG4gICAgICpcbiAgICAgKiAqKk5vdGU6KiogVGhpcyBtZXRob2QgbXV0YXRlcyBgb2JqZWN0YC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjAuMFxuICAgICAqIEBjYXRlZ29yeSBPYmplY3RcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBkZXN0aW5hdGlvbiBvYmplY3QuXG4gICAgICogQHBhcmFtIHsuLi5PYmplY3R9IHNvdXJjZXMgVGhlIHNvdXJjZSBvYmplY3RzLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtjdXN0b21pemVyXSBUaGUgZnVuY3Rpb24gdG8gY3VzdG9taXplIGFzc2lnbmVkIHZhbHVlcy5cbiAgICAgKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIGBvYmplY3RgLlxuICAgICAqIEBzZWUgXy5hc3NpZ25JbldpdGhcbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogZnVuY3Rpb24gY3VzdG9taXplcihvYmpWYWx1ZSwgc3JjVmFsdWUpIHtcbiAgICAgKiAgIHJldHVybiBfLmlzVW5kZWZpbmVkKG9ialZhbHVlKSA/IHNyY1ZhbHVlIDogb2JqVmFsdWU7XG4gICAgICogfVxuICAgICAqXG4gICAgICogdmFyIGRlZmF1bHRzID0gXy5wYXJ0aWFsUmlnaHQoXy5hc3NpZ25XaXRoLCBjdXN0b21pemVyKTtcbiAgICAgKlxuICAgICAqIGRlZmF1bHRzKHsgJ2EnOiAxIH0sIHsgJ2InOiAyIH0sIHsgJ2EnOiAzIH0pO1xuICAgICAqIC8vID0+IHsgJ2EnOiAxLCAnYic6IDIgfVxuICAgICAqL1xuICAgIHZhciBhc3NpZ25XaXRoID0gY3JlYXRlQXNzaWduZXIoZnVuY3Rpb24ob2JqZWN0LCBzb3VyY2UsIHNyY0luZGV4LCBjdXN0b21pemVyKSB7XG4gICAgICBjb3B5T2JqZWN0KHNvdXJjZSwga2V5cyhzb3VyY2UpLCBvYmplY3QsIGN1c3RvbWl6ZXIpO1xuICAgIH0pO1xuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhbiBhcnJheSBvZiB2YWx1ZXMgY29ycmVzcG9uZGluZyB0byBgcGF0aHNgIG9mIGBvYmplY3RgLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDEuMC4wXG4gICAgICogQGNhdGVnb3J5IE9iamVjdFxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBpdGVyYXRlIG92ZXIuXG4gICAgICogQHBhcmFtIHsuLi4oc3RyaW5nfHN0cmluZ1tdKX0gW3BhdGhzXSBUaGUgcHJvcGVydHkgcGF0aHMgdG8gcGljay5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIHBpY2tlZCB2YWx1ZXMuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciBvYmplY3QgPSB7ICdhJzogW3sgJ2InOiB7ICdjJzogMyB9IH0sIDRdIH07XG4gICAgICpcbiAgICAgKiBfLmF0KG9iamVjdCwgWydhWzBdLmIuYycsICdhWzFdJ10pO1xuICAgICAqIC8vID0+IFszLCA0XVxuICAgICAqL1xuICAgIHZhciBhdCA9IGZsYXRSZXN0KGJhc2VBdCk7XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGFuIG9iamVjdCB0aGF0IGluaGVyaXRzIGZyb20gdGhlIGBwcm90b3R5cGVgIG9iamVjdC4gSWYgYVxuICAgICAqIGBwcm9wZXJ0aWVzYCBvYmplY3QgaXMgZ2l2ZW4sIGl0cyBvd24gZW51bWVyYWJsZSBzdHJpbmcga2V5ZWQgcHJvcGVydGllc1xuICAgICAqIGFyZSBhc3NpZ25lZCB0byB0aGUgY3JlYXRlZCBvYmplY3QuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMi4zLjBcbiAgICAgKiBAY2F0ZWdvcnkgT2JqZWN0XG4gICAgICogQHBhcmFtIHtPYmplY3R9IHByb3RvdHlwZSBUaGUgb2JqZWN0IHRvIGluaGVyaXQgZnJvbS5cbiAgICAgKiBAcGFyYW0ge09iamVjdH0gW3Byb3BlcnRpZXNdIFRoZSBwcm9wZXJ0aWVzIHRvIGFzc2lnbiB0byB0aGUgb2JqZWN0LlxuICAgICAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgdGhlIG5ldyBvYmplY3QuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIGZ1bmN0aW9uIFNoYXBlKCkge1xuICAgICAqICAgdGhpcy54ID0gMDtcbiAgICAgKiAgIHRoaXMueSA9IDA7XG4gICAgICogfVxuICAgICAqXG4gICAgICogZnVuY3Rpb24gQ2lyY2xlKCkge1xuICAgICAqICAgU2hhcGUuY2FsbCh0aGlzKTtcbiAgICAgKiB9XG4gICAgICpcbiAgICAgKiBDaXJjbGUucHJvdG90eXBlID0gXy5jcmVhdGUoU2hhcGUucHJvdG90eXBlLCB7XG4gICAgICogICAnY29uc3RydWN0b3InOiBDaXJjbGVcbiAgICAgKiB9KTtcbiAgICAgKlxuICAgICAqIHZhciBjaXJjbGUgPSBuZXcgQ2lyY2xlO1xuICAgICAqIGNpcmNsZSBpbnN0YW5jZW9mIENpcmNsZTtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICpcbiAgICAgKiBjaXJjbGUgaW5zdGFuY2VvZiBTaGFwZTtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICovXG4gICAgZnVuY3Rpb24gY3JlYXRlKHByb3RvdHlwZSwgcHJvcGVydGllcykge1xuICAgICAgdmFyIHJlc3VsdCA9IGJhc2VDcmVhdGUocHJvdG90eXBlKTtcbiAgICAgIHJldHVybiBwcm9wZXJ0aWVzID09IG51bGwgPyByZXN1bHQgOiBiYXNlQXNzaWduKHJlc3VsdCwgcHJvcGVydGllcyk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQXNzaWducyBvd24gYW5kIGluaGVyaXRlZCBlbnVtZXJhYmxlIHN0cmluZyBrZXllZCBwcm9wZXJ0aWVzIG9mIHNvdXJjZVxuICAgICAqIG9iamVjdHMgdG8gdGhlIGRlc3RpbmF0aW9uIG9iamVjdCBmb3IgYWxsIGRlc3RpbmF0aW9uIHByb3BlcnRpZXMgdGhhdFxuICAgICAqIHJlc29sdmUgdG8gYHVuZGVmaW5lZGAuIFNvdXJjZSBvYmplY3RzIGFyZSBhcHBsaWVkIGZyb20gbGVmdCB0byByaWdodC5cbiAgICAgKiBPbmNlIGEgcHJvcGVydHkgaXMgc2V0LCBhZGRpdGlvbmFsIHZhbHVlcyBvZiB0aGUgc2FtZSBwcm9wZXJ0eSBhcmUgaWdub3JlZC5cbiAgICAgKlxuICAgICAqICoqTm90ZToqKiBUaGlzIG1ldGhvZCBtdXRhdGVzIGBvYmplY3RgLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBzaW5jZSAwLjEuMFxuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQGNhdGVnb3J5IE9iamVjdFxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIGRlc3RpbmF0aW9uIG9iamVjdC5cbiAgICAgKiBAcGFyYW0gey4uLk9iamVjdH0gW3NvdXJjZXNdIFRoZSBzb3VyY2Ugb2JqZWN0cy5cbiAgICAgKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIGBvYmplY3RgLlxuICAgICAqIEBzZWUgXy5kZWZhdWx0c0RlZXBcbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5kZWZhdWx0cyh7ICdhJzogMSB9LCB7ICdiJzogMiB9LCB7ICdhJzogMyB9KTtcbiAgICAgKiAvLyA9PiB7ICdhJzogMSwgJ2InOiAyIH1cbiAgICAgKi9cbiAgICB2YXIgZGVmYXVsdHMgPSBiYXNlUmVzdChmdW5jdGlvbihvYmplY3QsIHNvdXJjZXMpIHtcbiAgICAgIG9iamVjdCA9IE9iamVjdChvYmplY3QpO1xuXG4gICAgICB2YXIgaW5kZXggPSAtMTtcbiAgICAgIHZhciBsZW5ndGggPSBzb3VyY2VzLmxlbmd0aDtcbiAgICAgIHZhciBndWFyZCA9IGxlbmd0aCA+IDIgPyBzb3VyY2VzWzJdIDogdW5kZWZpbmVkO1xuXG4gICAgICBpZiAoZ3VhcmQgJiYgaXNJdGVyYXRlZUNhbGwoc291cmNlc1swXSwgc291cmNlc1sxXSwgZ3VhcmQpKSB7XG4gICAgICAgIGxlbmd0aCA9IDE7XG4gICAgICB9XG5cbiAgICAgIHdoaWxlICgrK2luZGV4IDwgbGVuZ3RoKSB7XG4gICAgICAgIHZhciBzb3VyY2UgPSBzb3VyY2VzW2luZGV4XTtcbiAgICAgICAgdmFyIHByb3BzID0ga2V5c0luKHNvdXJjZSk7XG4gICAgICAgIHZhciBwcm9wc0luZGV4ID0gLTE7XG4gICAgICAgIHZhciBwcm9wc0xlbmd0aCA9IHByb3BzLmxlbmd0aDtcblxuICAgICAgICB3aGlsZSAoKytwcm9wc0luZGV4IDwgcHJvcHNMZW5ndGgpIHtcbiAgICAgICAgICB2YXIga2V5ID0gcHJvcHNbcHJvcHNJbmRleF07XG4gICAgICAgICAgdmFyIHZhbHVlID0gb2JqZWN0W2tleV07XG5cbiAgICAgICAgICBpZiAodmFsdWUgPT09IHVuZGVmaW5lZCB8fFxuICAgICAgICAgICAgICAoZXEodmFsdWUsIG9iamVjdFByb3RvW2tleV0pICYmICFoYXNPd25Qcm9wZXJ0eS5jYWxsKG9iamVjdCwga2V5KSkpIHtcbiAgICAgICAgICAgIG9iamVjdFtrZXldID0gc291cmNlW2tleV07XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBvYmplY3Q7XG4gICAgfSk7XG5cbiAgICAvKipcbiAgICAgKiBUaGlzIG1ldGhvZCBpcyBsaWtlIGBfLmRlZmF1bHRzYCBleGNlcHQgdGhhdCBpdCByZWN1cnNpdmVseSBhc3NpZ25zXG4gICAgICogZGVmYXVsdCBwcm9wZXJ0aWVzLlxuICAgICAqXG4gICAgICogKipOb3RlOioqIFRoaXMgbWV0aG9kIG11dGF0ZXMgYG9iamVjdGAuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMy4xMC4wXG4gICAgICogQGNhdGVnb3J5IE9iamVjdFxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIGRlc3RpbmF0aW9uIG9iamVjdC5cbiAgICAgKiBAcGFyYW0gey4uLk9iamVjdH0gW3NvdXJjZXNdIFRoZSBzb3VyY2Ugb2JqZWN0cy5cbiAgICAgKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIGBvYmplY3RgLlxuICAgICAqIEBzZWUgXy5kZWZhdWx0c1xuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLmRlZmF1bHRzRGVlcCh7ICdhJzogeyAnYic6IDIgfSB9LCB7ICdhJzogeyAnYic6IDEsICdjJzogMyB9IH0pO1xuICAgICAqIC8vID0+IHsgJ2EnOiB7ICdiJzogMiwgJ2MnOiAzIH0gfVxuICAgICAqL1xuICAgIHZhciBkZWZhdWx0c0RlZXAgPSBiYXNlUmVzdChmdW5jdGlvbihhcmdzKSB7XG4gICAgICBhcmdzLnB1c2godW5kZWZpbmVkLCBjdXN0b21EZWZhdWx0c01lcmdlKTtcbiAgICAgIHJldHVybiBhcHBseShtZXJnZVdpdGgsIHVuZGVmaW5lZCwgYXJncyk7XG4gICAgfSk7XG5cbiAgICAvKipcbiAgICAgKiBUaGlzIG1ldGhvZCBpcyBsaWtlIGBfLmZpbmRgIGV4Y2VwdCB0aGF0IGl0IHJldHVybnMgdGhlIGtleSBvZiB0aGUgZmlyc3RcbiAgICAgKiBlbGVtZW50IGBwcmVkaWNhdGVgIHJldHVybnMgdHJ1dGh5IGZvciBpbnN0ZWFkIG9mIHRoZSBlbGVtZW50IGl0c2VsZi5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAxLjEuMFxuICAgICAqIEBjYXRlZ29yeSBPYmplY3RcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gaW5zcGVjdC5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbcHJlZGljYXRlPV8uaWRlbnRpdHldIFRoZSBmdW5jdGlvbiBpbnZva2VkIHBlciBpdGVyYXRpb24uXG4gICAgICogQHJldHVybnMge3N0cmluZ3x1bmRlZmluZWR9IFJldHVybnMgdGhlIGtleSBvZiB0aGUgbWF0Y2hlZCBlbGVtZW50LFxuICAgICAqICBlbHNlIGB1bmRlZmluZWRgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgdXNlcnMgPSB7XG4gICAgICogICAnYmFybmV5JzogIHsgJ2FnZSc6IDM2LCAnYWN0aXZlJzogdHJ1ZSB9LFxuICAgICAqICAgJ2ZyZWQnOiAgICB7ICdhZ2UnOiA0MCwgJ2FjdGl2ZSc6IGZhbHNlIH0sXG4gICAgICogICAncGViYmxlcyc6IHsgJ2FnZSc6IDEsICAnYWN0aXZlJzogdHJ1ZSB9XG4gICAgICogfTtcbiAgICAgKlxuICAgICAqIF8uZmluZEtleSh1c2VycywgZnVuY3Rpb24obykgeyByZXR1cm4gby5hZ2UgPCA0MDsgfSk7XG4gICAgICogLy8gPT4gJ2Jhcm5leScgKGl0ZXJhdGlvbiBvcmRlciBpcyBub3QgZ3VhcmFudGVlZClcbiAgICAgKlxuICAgICAqIC8vIFRoZSBgXy5tYXRjaGVzYCBpdGVyYXRlZSBzaG9ydGhhbmQuXG4gICAgICogXy5maW5kS2V5KHVzZXJzLCB7ICdhZ2UnOiAxLCAnYWN0aXZlJzogdHJ1ZSB9KTtcbiAgICAgKiAvLyA9PiAncGViYmxlcydcbiAgICAgKlxuICAgICAqIC8vIFRoZSBgXy5tYXRjaGVzUHJvcGVydHlgIGl0ZXJhdGVlIHNob3J0aGFuZC5cbiAgICAgKiBfLmZpbmRLZXkodXNlcnMsIFsnYWN0aXZlJywgZmFsc2VdKTtcbiAgICAgKiAvLyA9PiAnZnJlZCdcbiAgICAgKlxuICAgICAqIC8vIFRoZSBgXy5wcm9wZXJ0eWAgaXRlcmF0ZWUgc2hvcnRoYW5kLlxuICAgICAqIF8uZmluZEtleSh1c2VycywgJ2FjdGl2ZScpO1xuICAgICAqIC8vID0+ICdiYXJuZXknXG4gICAgICovXG4gICAgZnVuY3Rpb24gZmluZEtleShvYmplY3QsIHByZWRpY2F0ZSkge1xuICAgICAgcmV0dXJuIGJhc2VGaW5kS2V5KG9iamVjdCwgZ2V0SXRlcmF0ZWUocHJlZGljYXRlLCAzKSwgYmFzZUZvck93bik7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhpcyBtZXRob2QgaXMgbGlrZSBgXy5maW5kS2V5YCBleGNlcHQgdGhhdCBpdCBpdGVyYXRlcyBvdmVyIGVsZW1lbnRzIG9mXG4gICAgICogYSBjb2xsZWN0aW9uIGluIHRoZSBvcHBvc2l0ZSBvcmRlci5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAyLjAuMFxuICAgICAqIEBjYXRlZ29yeSBPYmplY3RcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gaW5zcGVjdC5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbcHJlZGljYXRlPV8uaWRlbnRpdHldIFRoZSBmdW5jdGlvbiBpbnZva2VkIHBlciBpdGVyYXRpb24uXG4gICAgICogQHJldHVybnMge3N0cmluZ3x1bmRlZmluZWR9IFJldHVybnMgdGhlIGtleSBvZiB0aGUgbWF0Y2hlZCBlbGVtZW50LFxuICAgICAqICBlbHNlIGB1bmRlZmluZWRgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgdXNlcnMgPSB7XG4gICAgICogICAnYmFybmV5JzogIHsgJ2FnZSc6IDM2LCAnYWN0aXZlJzogdHJ1ZSB9LFxuICAgICAqICAgJ2ZyZWQnOiAgICB7ICdhZ2UnOiA0MCwgJ2FjdGl2ZSc6IGZhbHNlIH0sXG4gICAgICogICAncGViYmxlcyc6IHsgJ2FnZSc6IDEsICAnYWN0aXZlJzogdHJ1ZSB9XG4gICAgICogfTtcbiAgICAgKlxuICAgICAqIF8uZmluZExhc3RLZXkodXNlcnMsIGZ1bmN0aW9uKG8pIHsgcmV0dXJuIG8uYWdlIDwgNDA7IH0pO1xuICAgICAqIC8vID0+IHJldHVybnMgJ3BlYmJsZXMnIGFzc3VtaW5nIGBfLmZpbmRLZXlgIHJldHVybnMgJ2Jhcm5leSdcbiAgICAgKlxuICAgICAqIC8vIFRoZSBgXy5tYXRjaGVzYCBpdGVyYXRlZSBzaG9ydGhhbmQuXG4gICAgICogXy5maW5kTGFzdEtleSh1c2VycywgeyAnYWdlJzogMzYsICdhY3RpdmUnOiB0cnVlIH0pO1xuICAgICAqIC8vID0+ICdiYXJuZXknXG4gICAgICpcbiAgICAgKiAvLyBUaGUgYF8ubWF0Y2hlc1Byb3BlcnR5YCBpdGVyYXRlZSBzaG9ydGhhbmQuXG4gICAgICogXy5maW5kTGFzdEtleSh1c2VycywgWydhY3RpdmUnLCBmYWxzZV0pO1xuICAgICAqIC8vID0+ICdmcmVkJ1xuICAgICAqXG4gICAgICogLy8gVGhlIGBfLnByb3BlcnR5YCBpdGVyYXRlZSBzaG9ydGhhbmQuXG4gICAgICogXy5maW5kTGFzdEtleSh1c2VycywgJ2FjdGl2ZScpO1xuICAgICAqIC8vID0+ICdwZWJibGVzJ1xuICAgICAqL1xuICAgIGZ1bmN0aW9uIGZpbmRMYXN0S2V5KG9iamVjdCwgcHJlZGljYXRlKSB7XG4gICAgICByZXR1cm4gYmFzZUZpbmRLZXkob2JqZWN0LCBnZXRJdGVyYXRlZShwcmVkaWNhdGUsIDMpLCBiYXNlRm9yT3duUmlnaHQpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEl0ZXJhdGVzIG92ZXIgb3duIGFuZCBpbmhlcml0ZWQgZW51bWVyYWJsZSBzdHJpbmcga2V5ZWQgcHJvcGVydGllcyBvZiBhblxuICAgICAqIG9iamVjdCBhbmQgaW52b2tlcyBgaXRlcmF0ZWVgIGZvciBlYWNoIHByb3BlcnR5LiBUaGUgaXRlcmF0ZWUgaXMgaW52b2tlZFxuICAgICAqIHdpdGggdGhyZWUgYXJndW1lbnRzOiAodmFsdWUsIGtleSwgb2JqZWN0KS4gSXRlcmF0ZWUgZnVuY3Rpb25zIG1heSBleGl0XG4gICAgICogaXRlcmF0aW9uIGVhcmx5IGJ5IGV4cGxpY2l0bHkgcmV0dXJuaW5nIGBmYWxzZWAuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMC4zLjBcbiAgICAgKiBAY2F0ZWdvcnkgT2JqZWN0XG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIGl0ZXJhdGUgb3Zlci5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbaXRlcmF0ZWU9Xy5pZGVudGl0eV0gVGhlIGZ1bmN0aW9uIGludm9rZWQgcGVyIGl0ZXJhdGlvbi5cbiAgICAgKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIGBvYmplY3RgLlxuICAgICAqIEBzZWUgXy5mb3JJblJpZ2h0XG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIGZ1bmN0aW9uIEZvbygpIHtcbiAgICAgKiAgIHRoaXMuYSA9IDE7XG4gICAgICogICB0aGlzLmIgPSAyO1xuICAgICAqIH1cbiAgICAgKlxuICAgICAqIEZvby5wcm90b3R5cGUuYyA9IDM7XG4gICAgICpcbiAgICAgKiBfLmZvckluKG5ldyBGb28sIGZ1bmN0aW9uKHZhbHVlLCBrZXkpIHtcbiAgICAgKiAgIGNvbnNvbGUubG9nKGtleSk7XG4gICAgICogfSk7XG4gICAgICogLy8gPT4gTG9ncyAnYScsICdiJywgdGhlbiAnYycgKGl0ZXJhdGlvbiBvcmRlciBpcyBub3QgZ3VhcmFudGVlZCkuXG4gICAgICovXG4gICAgZnVuY3Rpb24gZm9ySW4ob2JqZWN0LCBpdGVyYXRlZSkge1xuICAgICAgcmV0dXJuIG9iamVjdCA9PSBudWxsXG4gICAgICAgID8gb2JqZWN0XG4gICAgICAgIDogYmFzZUZvcihvYmplY3QsIGdldEl0ZXJhdGVlKGl0ZXJhdGVlLCAzKSwga2V5c0luKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGlzIG1ldGhvZCBpcyBsaWtlIGBfLmZvckluYCBleGNlcHQgdGhhdCBpdCBpdGVyYXRlcyBvdmVyIHByb3BlcnRpZXMgb2ZcbiAgICAgKiBgb2JqZWN0YCBpbiB0aGUgb3Bwb3NpdGUgb3JkZXIuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMi4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgT2JqZWN0XG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIGl0ZXJhdGUgb3Zlci5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbaXRlcmF0ZWU9Xy5pZGVudGl0eV0gVGhlIGZ1bmN0aW9uIGludm9rZWQgcGVyIGl0ZXJhdGlvbi5cbiAgICAgKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIGBvYmplY3RgLlxuICAgICAqIEBzZWUgXy5mb3JJblxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBmdW5jdGlvbiBGb28oKSB7XG4gICAgICogICB0aGlzLmEgPSAxO1xuICAgICAqICAgdGhpcy5iID0gMjtcbiAgICAgKiB9XG4gICAgICpcbiAgICAgKiBGb28ucHJvdG90eXBlLmMgPSAzO1xuICAgICAqXG4gICAgICogXy5mb3JJblJpZ2h0KG5ldyBGb28sIGZ1bmN0aW9uKHZhbHVlLCBrZXkpIHtcbiAgICAgKiAgIGNvbnNvbGUubG9nKGtleSk7XG4gICAgICogfSk7XG4gICAgICogLy8gPT4gTG9ncyAnYycsICdiJywgdGhlbiAnYScgYXNzdW1pbmcgYF8uZm9ySW5gIGxvZ3MgJ2EnLCAnYicsIHRoZW4gJ2MnLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGZvckluUmlnaHQob2JqZWN0LCBpdGVyYXRlZSkge1xuICAgICAgcmV0dXJuIG9iamVjdCA9PSBudWxsXG4gICAgICAgID8gb2JqZWN0XG4gICAgICAgIDogYmFzZUZvclJpZ2h0KG9iamVjdCwgZ2V0SXRlcmF0ZWUoaXRlcmF0ZWUsIDMpLCBrZXlzSW4pO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEl0ZXJhdGVzIG92ZXIgb3duIGVudW1lcmFibGUgc3RyaW5nIGtleWVkIHByb3BlcnRpZXMgb2YgYW4gb2JqZWN0IGFuZFxuICAgICAqIGludm9rZXMgYGl0ZXJhdGVlYCBmb3IgZWFjaCBwcm9wZXJ0eS4gVGhlIGl0ZXJhdGVlIGlzIGludm9rZWQgd2l0aCB0aHJlZVxuICAgICAqIGFyZ3VtZW50czogKHZhbHVlLCBrZXksIG9iamVjdCkuIEl0ZXJhdGVlIGZ1bmN0aW9ucyBtYXkgZXhpdCBpdGVyYXRpb25cbiAgICAgKiBlYXJseSBieSBleHBsaWNpdGx5IHJldHVybmluZyBgZmFsc2VgLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDAuMy4wXG4gICAgICogQGNhdGVnb3J5IE9iamVjdFxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBpdGVyYXRlIG92ZXIuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gW2l0ZXJhdGVlPV8uaWRlbnRpdHldIFRoZSBmdW5jdGlvbiBpbnZva2VkIHBlciBpdGVyYXRpb24uXG4gICAgICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyBgb2JqZWN0YC5cbiAgICAgKiBAc2VlIF8uZm9yT3duUmlnaHRcbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogZnVuY3Rpb24gRm9vKCkge1xuICAgICAqICAgdGhpcy5hID0gMTtcbiAgICAgKiAgIHRoaXMuYiA9IDI7XG4gICAgICogfVxuICAgICAqXG4gICAgICogRm9vLnByb3RvdHlwZS5jID0gMztcbiAgICAgKlxuICAgICAqIF8uZm9yT3duKG5ldyBGb28sIGZ1bmN0aW9uKHZhbHVlLCBrZXkpIHtcbiAgICAgKiAgIGNvbnNvbGUubG9nKGtleSk7XG4gICAgICogfSk7XG4gICAgICogLy8gPT4gTG9ncyAnYScgdGhlbiAnYicgKGl0ZXJhdGlvbiBvcmRlciBpcyBub3QgZ3VhcmFudGVlZCkuXG4gICAgICovXG4gICAgZnVuY3Rpb24gZm9yT3duKG9iamVjdCwgaXRlcmF0ZWUpIHtcbiAgICAgIHJldHVybiBvYmplY3QgJiYgYmFzZUZvck93bihvYmplY3QsIGdldEl0ZXJhdGVlKGl0ZXJhdGVlLCAzKSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhpcyBtZXRob2QgaXMgbGlrZSBgXy5mb3JPd25gIGV4Y2VwdCB0aGF0IGl0IGl0ZXJhdGVzIG92ZXIgcHJvcGVydGllcyBvZlxuICAgICAqIGBvYmplY3RgIGluIHRoZSBvcHBvc2l0ZSBvcmRlci5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAyLjAuMFxuICAgICAqIEBjYXRlZ29yeSBPYmplY3RcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gaXRlcmF0ZSBvdmVyLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtpdGVyYXRlZT1fLmlkZW50aXR5XSBUaGUgZnVuY3Rpb24gaW52b2tlZCBwZXIgaXRlcmF0aW9uLlxuICAgICAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgYG9iamVjdGAuXG4gICAgICogQHNlZSBfLmZvck93blxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBmdW5jdGlvbiBGb28oKSB7XG4gICAgICogICB0aGlzLmEgPSAxO1xuICAgICAqICAgdGhpcy5iID0gMjtcbiAgICAgKiB9XG4gICAgICpcbiAgICAgKiBGb28ucHJvdG90eXBlLmMgPSAzO1xuICAgICAqXG4gICAgICogXy5mb3JPd25SaWdodChuZXcgRm9vLCBmdW5jdGlvbih2YWx1ZSwga2V5KSB7XG4gICAgICogICBjb25zb2xlLmxvZyhrZXkpO1xuICAgICAqIH0pO1xuICAgICAqIC8vID0+IExvZ3MgJ2InIHRoZW4gJ2EnIGFzc3VtaW5nIGBfLmZvck93bmAgbG9ncyAnYScgdGhlbiAnYicuXG4gICAgICovXG4gICAgZnVuY3Rpb24gZm9yT3duUmlnaHQob2JqZWN0LCBpdGVyYXRlZSkge1xuICAgICAgcmV0dXJuIG9iamVjdCAmJiBiYXNlRm9yT3duUmlnaHQob2JqZWN0LCBnZXRJdGVyYXRlZShpdGVyYXRlZSwgMykpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYW4gYXJyYXkgb2YgZnVuY3Rpb24gcHJvcGVydHkgbmFtZXMgZnJvbSBvd24gZW51bWVyYWJsZSBwcm9wZXJ0aWVzXG4gICAgICogb2YgYG9iamVjdGAuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQHNpbmNlIDAuMS4wXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAY2F0ZWdvcnkgT2JqZWN0XG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIGluc3BlY3QuXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBmdW5jdGlvbiBuYW1lcy5cbiAgICAgKiBAc2VlIF8uZnVuY3Rpb25zSW5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogZnVuY3Rpb24gRm9vKCkge1xuICAgICAqICAgdGhpcy5hID0gXy5jb25zdGFudCgnYScpO1xuICAgICAqICAgdGhpcy5iID0gXy5jb25zdGFudCgnYicpO1xuICAgICAqIH1cbiAgICAgKlxuICAgICAqIEZvby5wcm90b3R5cGUuYyA9IF8uY29uc3RhbnQoJ2MnKTtcbiAgICAgKlxuICAgICAqIF8uZnVuY3Rpb25zKG5ldyBGb28pO1xuICAgICAqIC8vID0+IFsnYScsICdiJ11cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBmdW5jdGlvbnMob2JqZWN0KSB7XG4gICAgICByZXR1cm4gb2JqZWN0ID09IG51bGwgPyBbXSA6IGJhc2VGdW5jdGlvbnMob2JqZWN0LCBrZXlzKG9iamVjdCkpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYW4gYXJyYXkgb2YgZnVuY3Rpb24gcHJvcGVydHkgbmFtZXMgZnJvbSBvd24gYW5kIGluaGVyaXRlZFxuICAgICAqIGVudW1lcmFibGUgcHJvcGVydGllcyBvZiBgb2JqZWN0YC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjAuMFxuICAgICAqIEBjYXRlZ29yeSBPYmplY3RcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gaW5zcGVjdC5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIGZ1bmN0aW9uIG5hbWVzLlxuICAgICAqIEBzZWUgXy5mdW5jdGlvbnNcbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogZnVuY3Rpb24gRm9vKCkge1xuICAgICAqICAgdGhpcy5hID0gXy5jb25zdGFudCgnYScpO1xuICAgICAqICAgdGhpcy5iID0gXy5jb25zdGFudCgnYicpO1xuICAgICAqIH1cbiAgICAgKlxuICAgICAqIEZvby5wcm90b3R5cGUuYyA9IF8uY29uc3RhbnQoJ2MnKTtcbiAgICAgKlxuICAgICAqIF8uZnVuY3Rpb25zSW4obmV3IEZvbyk7XG4gICAgICogLy8gPT4gWydhJywgJ2InLCAnYyddXG4gICAgICovXG4gICAgZnVuY3Rpb24gZnVuY3Rpb25zSW4ob2JqZWN0KSB7XG4gICAgICByZXR1cm4gb2JqZWN0ID09IG51bGwgPyBbXSA6IGJhc2VGdW5jdGlvbnMob2JqZWN0LCBrZXlzSW4ob2JqZWN0KSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogR2V0cyB0aGUgdmFsdWUgYXQgYHBhdGhgIG9mIGBvYmplY3RgLiBJZiB0aGUgcmVzb2x2ZWQgdmFsdWUgaXNcbiAgICAgKiBgdW5kZWZpbmVkYCwgdGhlIGBkZWZhdWx0VmFsdWVgIGlzIHJldHVybmVkIGluIGl0cyBwbGFjZS5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAzLjcuMFxuICAgICAqIEBjYXRlZ29yeSBPYmplY3RcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gcXVlcnkuXG4gICAgICogQHBhcmFtIHtBcnJheXxzdHJpbmd9IHBhdGggVGhlIHBhdGggb2YgdGhlIHByb3BlcnR5IHRvIGdldC5cbiAgICAgKiBAcGFyYW0geyp9IFtkZWZhdWx0VmFsdWVdIFRoZSB2YWx1ZSByZXR1cm5lZCBmb3IgYHVuZGVmaW5lZGAgcmVzb2x2ZWQgdmFsdWVzLlxuICAgICAqIEByZXR1cm5zIHsqfSBSZXR1cm5zIHRoZSByZXNvbHZlZCB2YWx1ZS5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIG9iamVjdCA9IHsgJ2EnOiBbeyAnYic6IHsgJ2MnOiAzIH0gfV0gfTtcbiAgICAgKlxuICAgICAqIF8uZ2V0KG9iamVjdCwgJ2FbMF0uYi5jJyk7XG4gICAgICogLy8gPT4gM1xuICAgICAqXG4gICAgICogXy5nZXQob2JqZWN0LCBbJ2EnLCAnMCcsICdiJywgJ2MnXSk7XG4gICAgICogLy8gPT4gM1xuICAgICAqXG4gICAgICogXy5nZXQob2JqZWN0LCAnYS5iLmMnLCAnZGVmYXVsdCcpO1xuICAgICAqIC8vID0+ICdkZWZhdWx0J1xuICAgICAqL1xuICAgIGZ1bmN0aW9uIGdldChvYmplY3QsIHBhdGgsIGRlZmF1bHRWYWx1ZSkge1xuICAgICAgdmFyIHJlc3VsdCA9IG9iamVjdCA9PSBudWxsID8gdW5kZWZpbmVkIDogYmFzZUdldChvYmplY3QsIHBhdGgpO1xuICAgICAgcmV0dXJuIHJlc3VsdCA9PT0gdW5kZWZpbmVkID8gZGVmYXVsdFZhbHVlIDogcmVzdWx0O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENoZWNrcyBpZiBgcGF0aGAgaXMgYSBkaXJlY3QgcHJvcGVydHkgb2YgYG9iamVjdGAuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQHNpbmNlIDAuMS4wXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAY2F0ZWdvcnkgT2JqZWN0XG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIHF1ZXJ5LlxuICAgICAqIEBwYXJhbSB7QXJyYXl8c3RyaW5nfSBwYXRoIFRoZSBwYXRoIHRvIGNoZWNrLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgcGF0aGAgZXhpc3RzLCBlbHNlIGBmYWxzZWAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciBvYmplY3QgPSB7ICdhJzogeyAnYic6IDIgfSB9O1xuICAgICAqIHZhciBvdGhlciA9IF8uY3JlYXRlKHsgJ2EnOiBfLmNyZWF0ZSh7ICdiJzogMiB9KSB9KTtcbiAgICAgKlxuICAgICAqIF8uaGFzKG9iamVjdCwgJ2EnKTtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICpcbiAgICAgKiBfLmhhcyhvYmplY3QsICdhLmInKTtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICpcbiAgICAgKiBfLmhhcyhvYmplY3QsIFsnYScsICdiJ10pO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKlxuICAgICAqIF8uaGFzKG90aGVyLCAnYScpO1xuICAgICAqIC8vID0+IGZhbHNlXG4gICAgICovXG4gICAgZnVuY3Rpb24gaGFzKG9iamVjdCwgcGF0aCkge1xuICAgICAgcmV0dXJuIG9iamVjdCAhPSBudWxsICYmIGhhc1BhdGgob2JqZWN0LCBwYXRoLCBiYXNlSGFzKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDaGVja3MgaWYgYHBhdGhgIGlzIGEgZGlyZWN0IG9yIGluaGVyaXRlZCBwcm9wZXJ0eSBvZiBgb2JqZWN0YC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjAuMFxuICAgICAqIEBjYXRlZ29yeSBPYmplY3RcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gcXVlcnkuXG4gICAgICogQHBhcmFtIHtBcnJheXxzdHJpbmd9IHBhdGggVGhlIHBhdGggdG8gY2hlY2suXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGBwYXRoYCBleGlzdHMsIGVsc2UgYGZhbHNlYC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIG9iamVjdCA9IF8uY3JlYXRlKHsgJ2EnOiBfLmNyZWF0ZSh7ICdiJzogMiB9KSB9KTtcbiAgICAgKlxuICAgICAqIF8uaGFzSW4ob2JqZWN0LCAnYScpO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKlxuICAgICAqIF8uaGFzSW4ob2JqZWN0LCAnYS5iJyk7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqXG4gICAgICogXy5oYXNJbihvYmplY3QsIFsnYScsICdiJ10pO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKlxuICAgICAqIF8uaGFzSW4ob2JqZWN0LCAnYicpO1xuICAgICAqIC8vID0+IGZhbHNlXG4gICAgICovXG4gICAgZnVuY3Rpb24gaGFzSW4ob2JqZWN0LCBwYXRoKSB7XG4gICAgICByZXR1cm4gb2JqZWN0ICE9IG51bGwgJiYgaGFzUGF0aChvYmplY3QsIHBhdGgsIGJhc2VIYXNJbik7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhbiBvYmplY3QgY29tcG9zZWQgb2YgdGhlIGludmVydGVkIGtleXMgYW5kIHZhbHVlcyBvZiBgb2JqZWN0YC5cbiAgICAgKiBJZiBgb2JqZWN0YCBjb250YWlucyBkdXBsaWNhdGUgdmFsdWVzLCBzdWJzZXF1ZW50IHZhbHVlcyBvdmVyd3JpdGVcbiAgICAgKiBwcm9wZXJ0eSBhc3NpZ25tZW50cyBvZiBwcmV2aW91cyB2YWx1ZXMuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMC43LjBcbiAgICAgKiBAY2F0ZWdvcnkgT2JqZWN0XG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIGludmVydC5cbiAgICAgKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIHRoZSBuZXcgaW52ZXJ0ZWQgb2JqZWN0LlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgb2JqZWN0ID0geyAnYSc6IDEsICdiJzogMiwgJ2MnOiAxIH07XG4gICAgICpcbiAgICAgKiBfLmludmVydChvYmplY3QpO1xuICAgICAqIC8vID0+IHsgJzEnOiAnYycsICcyJzogJ2InIH1cbiAgICAgKi9cbiAgICB2YXIgaW52ZXJ0ID0gY3JlYXRlSW52ZXJ0ZXIoZnVuY3Rpb24ocmVzdWx0LCB2YWx1ZSwga2V5KSB7XG4gICAgICBpZiAodmFsdWUgIT0gbnVsbCAmJlxuICAgICAgICAgIHR5cGVvZiB2YWx1ZS50b1N0cmluZyAhPSAnZnVuY3Rpb24nKSB7XG4gICAgICAgIHZhbHVlID0gbmF0aXZlT2JqZWN0VG9TdHJpbmcuY2FsbCh2YWx1ZSk7XG4gICAgICB9XG5cbiAgICAgIHJlc3VsdFt2YWx1ZV0gPSBrZXk7XG4gICAgfSwgY29uc3RhbnQoaWRlbnRpdHkpKTtcblxuICAgIC8qKlxuICAgICAqIFRoaXMgbWV0aG9kIGlzIGxpa2UgYF8uaW52ZXJ0YCBleGNlcHQgdGhhdCB0aGUgaW52ZXJ0ZWQgb2JqZWN0IGlzIGdlbmVyYXRlZFxuICAgICAqIGZyb20gdGhlIHJlc3VsdHMgb2YgcnVubmluZyBlYWNoIGVsZW1lbnQgb2YgYG9iamVjdGAgdGhydSBgaXRlcmF0ZWVgLiBUaGVcbiAgICAgKiBjb3JyZXNwb25kaW5nIGludmVydGVkIHZhbHVlIG9mIGVhY2ggaW52ZXJ0ZWQga2V5IGlzIGFuIGFycmF5IG9mIGtleXNcbiAgICAgKiByZXNwb25zaWJsZSBmb3IgZ2VuZXJhdGluZyB0aGUgaW52ZXJ0ZWQgdmFsdWUuIFRoZSBpdGVyYXRlZSBpcyBpbnZva2VkXG4gICAgICogd2l0aCBvbmUgYXJndW1lbnQ6ICh2YWx1ZSkuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4xLjBcbiAgICAgKiBAY2F0ZWdvcnkgT2JqZWN0XG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIGludmVydC5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbaXRlcmF0ZWU9Xy5pZGVudGl0eV0gVGhlIGl0ZXJhdGVlIGludm9rZWQgcGVyIGVsZW1lbnQuXG4gICAgICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyB0aGUgbmV3IGludmVydGVkIG9iamVjdC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIG9iamVjdCA9IHsgJ2EnOiAxLCAnYic6IDIsICdjJzogMSB9O1xuICAgICAqXG4gICAgICogXy5pbnZlcnRCeShvYmplY3QpO1xuICAgICAqIC8vID0+IHsgJzEnOiBbJ2EnLCAnYyddLCAnMic6IFsnYiddIH1cbiAgICAgKlxuICAgICAqIF8uaW52ZXJ0Qnkob2JqZWN0LCBmdW5jdGlvbih2YWx1ZSkge1xuICAgICAqICAgcmV0dXJuICdncm91cCcgKyB2YWx1ZTtcbiAgICAgKiB9KTtcbiAgICAgKiAvLyA9PiB7ICdncm91cDEnOiBbJ2EnLCAnYyddLCAnZ3JvdXAyJzogWydiJ10gfVxuICAgICAqL1xuICAgIHZhciBpbnZlcnRCeSA9IGNyZWF0ZUludmVydGVyKGZ1bmN0aW9uKHJlc3VsdCwgdmFsdWUsIGtleSkge1xuICAgICAgaWYgKHZhbHVlICE9IG51bGwgJiZcbiAgICAgICAgICB0eXBlb2YgdmFsdWUudG9TdHJpbmcgIT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICB2YWx1ZSA9IG5hdGl2ZU9iamVjdFRvU3RyaW5nLmNhbGwodmFsdWUpO1xuICAgICAgfVxuXG4gICAgICBpZiAoaGFzT3duUHJvcGVydHkuY2FsbChyZXN1bHQsIHZhbHVlKSkge1xuICAgICAgICByZXN1bHRbdmFsdWVdLnB1c2goa2V5KTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJlc3VsdFt2YWx1ZV0gPSBba2V5XTtcbiAgICAgIH1cbiAgICB9LCBnZXRJdGVyYXRlZSk7XG5cbiAgICAvKipcbiAgICAgKiBJbnZva2VzIHRoZSBtZXRob2QgYXQgYHBhdGhgIG9mIGBvYmplY3RgLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMC4wXG4gICAgICogQGNhdGVnb3J5IE9iamVjdFxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBxdWVyeS5cbiAgICAgKiBAcGFyYW0ge0FycmF5fHN0cmluZ30gcGF0aCBUaGUgcGF0aCBvZiB0aGUgbWV0aG9kIHRvIGludm9rZS5cbiAgICAgKiBAcGFyYW0gey4uLip9IFthcmdzXSBUaGUgYXJndW1lbnRzIHRvIGludm9rZSB0aGUgbWV0aG9kIHdpdGguXG4gICAgICogQHJldHVybnMgeyp9IFJldHVybnMgdGhlIHJlc3VsdCBvZiB0aGUgaW52b2tlZCBtZXRob2QuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciBvYmplY3QgPSB7ICdhJzogW3sgJ2InOiB7ICdjJzogWzEsIDIsIDMsIDRdIH0gfV0gfTtcbiAgICAgKlxuICAgICAqIF8uaW52b2tlKG9iamVjdCwgJ2FbMF0uYi5jLnNsaWNlJywgMSwgMyk7XG4gICAgICogLy8gPT4gWzIsIDNdXG4gICAgICovXG4gICAgdmFyIGludm9rZSA9IGJhc2VSZXN0KGJhc2VJbnZva2UpO1xuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhbiBhcnJheSBvZiB0aGUgb3duIGVudW1lcmFibGUgcHJvcGVydHkgbmFtZXMgb2YgYG9iamVjdGAuXG4gICAgICpcbiAgICAgKiAqKk5vdGU6KiogTm9uLW9iamVjdCB2YWx1ZXMgYXJlIGNvZXJjZWQgdG8gb2JqZWN0cy4gU2VlIHRoZVxuICAgICAqIFtFUyBzcGVjXShodHRwOi8vZWNtYS1pbnRlcm5hdGlvbmFsLm9yZy9lY21hLTI2Mi83LjAvI3NlYy1vYmplY3Qua2V5cylcbiAgICAgKiBmb3IgbW9yZSBkZXRhaWxzLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBzaW5jZSAwLjEuMFxuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQGNhdGVnb3J5IE9iamVjdFxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBxdWVyeS5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIGFycmF5IG9mIHByb3BlcnR5IG5hbWVzLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBmdW5jdGlvbiBGb28oKSB7XG4gICAgICogICB0aGlzLmEgPSAxO1xuICAgICAqICAgdGhpcy5iID0gMjtcbiAgICAgKiB9XG4gICAgICpcbiAgICAgKiBGb28ucHJvdG90eXBlLmMgPSAzO1xuICAgICAqXG4gICAgICogXy5rZXlzKG5ldyBGb28pO1xuICAgICAqIC8vID0+IFsnYScsICdiJ10gKGl0ZXJhdGlvbiBvcmRlciBpcyBub3QgZ3VhcmFudGVlZClcbiAgICAgKlxuICAgICAqIF8ua2V5cygnaGknKTtcbiAgICAgKiAvLyA9PiBbJzAnLCAnMSddXG4gICAgICovXG4gICAgZnVuY3Rpb24ga2V5cyhvYmplY3QpIHtcbiAgICAgIHJldHVybiBpc0FycmF5TGlrZShvYmplY3QpID8gYXJyYXlMaWtlS2V5cyhvYmplY3QpIDogYmFzZUtleXMob2JqZWN0KTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGFuIGFycmF5IG9mIHRoZSBvd24gYW5kIGluaGVyaXRlZCBlbnVtZXJhYmxlIHByb3BlcnR5IG5hbWVzIG9mIGBvYmplY3RgLlxuICAgICAqXG4gICAgICogKipOb3RlOioqIE5vbi1vYmplY3QgdmFsdWVzIGFyZSBjb2VyY2VkIHRvIG9iamVjdHMuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMy4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgT2JqZWN0XG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIHF1ZXJ5LlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgYXJyYXkgb2YgcHJvcGVydHkgbmFtZXMuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIGZ1bmN0aW9uIEZvbygpIHtcbiAgICAgKiAgIHRoaXMuYSA9IDE7XG4gICAgICogICB0aGlzLmIgPSAyO1xuICAgICAqIH1cbiAgICAgKlxuICAgICAqIEZvby5wcm90b3R5cGUuYyA9IDM7XG4gICAgICpcbiAgICAgKiBfLmtleXNJbihuZXcgRm9vKTtcbiAgICAgKiAvLyA9PiBbJ2EnLCAnYicsICdjJ10gKGl0ZXJhdGlvbiBvcmRlciBpcyBub3QgZ3VhcmFudGVlZClcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBrZXlzSW4ob2JqZWN0KSB7XG4gICAgICByZXR1cm4gaXNBcnJheUxpa2Uob2JqZWN0KSA/IGFycmF5TGlrZUtleXMob2JqZWN0LCB0cnVlKSA6IGJhc2VLZXlzSW4ob2JqZWN0KTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGUgb3Bwb3NpdGUgb2YgYF8ubWFwVmFsdWVzYDsgdGhpcyBtZXRob2QgY3JlYXRlcyBhbiBvYmplY3Qgd2l0aCB0aGVcbiAgICAgKiBzYW1lIHZhbHVlcyBhcyBgb2JqZWN0YCBhbmQga2V5cyBnZW5lcmF0ZWQgYnkgcnVubmluZyBlYWNoIG93biBlbnVtZXJhYmxlXG4gICAgICogc3RyaW5nIGtleWVkIHByb3BlcnR5IG9mIGBvYmplY3RgIHRocnUgYGl0ZXJhdGVlYC4gVGhlIGl0ZXJhdGVlIGlzIGludm9rZWRcbiAgICAgKiB3aXRoIHRocmVlIGFyZ3VtZW50czogKHZhbHVlLCBrZXksIG9iamVjdCkuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMy44LjBcbiAgICAgKiBAY2F0ZWdvcnkgT2JqZWN0XG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIGl0ZXJhdGUgb3Zlci5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbaXRlcmF0ZWU9Xy5pZGVudGl0eV0gVGhlIGZ1bmN0aW9uIGludm9rZWQgcGVyIGl0ZXJhdGlvbi5cbiAgICAgKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIHRoZSBuZXcgbWFwcGVkIG9iamVjdC5cbiAgICAgKiBAc2VlIF8ubWFwVmFsdWVzXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8ubWFwS2V5cyh7ICdhJzogMSwgJ2InOiAyIH0sIGZ1bmN0aW9uKHZhbHVlLCBrZXkpIHtcbiAgICAgKiAgIHJldHVybiBrZXkgKyB2YWx1ZTtcbiAgICAgKiB9KTtcbiAgICAgKiAvLyA9PiB7ICdhMSc6IDEsICdiMic6IDIgfVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIG1hcEtleXMob2JqZWN0LCBpdGVyYXRlZSkge1xuICAgICAgdmFyIHJlc3VsdCA9IHt9O1xuICAgICAgaXRlcmF0ZWUgPSBnZXRJdGVyYXRlZShpdGVyYXRlZSwgMyk7XG5cbiAgICAgIGJhc2VGb3JPd24ob2JqZWN0LCBmdW5jdGlvbih2YWx1ZSwga2V5LCBvYmplY3QpIHtcbiAgICAgICAgYmFzZUFzc2lnblZhbHVlKHJlc3VsdCwgaXRlcmF0ZWUodmFsdWUsIGtleSwgb2JqZWN0KSwgdmFsdWUpO1xuICAgICAgfSk7XG4gICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYW4gb2JqZWN0IHdpdGggdGhlIHNhbWUga2V5cyBhcyBgb2JqZWN0YCBhbmQgdmFsdWVzIGdlbmVyYXRlZFxuICAgICAqIGJ5IHJ1bm5pbmcgZWFjaCBvd24gZW51bWVyYWJsZSBzdHJpbmcga2V5ZWQgcHJvcGVydHkgb2YgYG9iamVjdGAgdGhydVxuICAgICAqIGBpdGVyYXRlZWAuIFRoZSBpdGVyYXRlZSBpcyBpbnZva2VkIHdpdGggdGhyZWUgYXJndW1lbnRzOlxuICAgICAqICh2YWx1ZSwga2V5LCBvYmplY3QpLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDIuNC4wXG4gICAgICogQGNhdGVnb3J5IE9iamVjdFxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBpdGVyYXRlIG92ZXIuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gW2l0ZXJhdGVlPV8uaWRlbnRpdHldIFRoZSBmdW5jdGlvbiBpbnZva2VkIHBlciBpdGVyYXRpb24uXG4gICAgICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyB0aGUgbmV3IG1hcHBlZCBvYmplY3QuXG4gICAgICogQHNlZSBfLm1hcEtleXNcbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIHVzZXJzID0ge1xuICAgICAqICAgJ2ZyZWQnOiAgICB7ICd1c2VyJzogJ2ZyZWQnLCAgICAnYWdlJzogNDAgfSxcbiAgICAgKiAgICdwZWJibGVzJzogeyAndXNlcic6ICdwZWJibGVzJywgJ2FnZSc6IDEgfVxuICAgICAqIH07XG4gICAgICpcbiAgICAgKiBfLm1hcFZhbHVlcyh1c2VycywgZnVuY3Rpb24obykgeyByZXR1cm4gby5hZ2U7IH0pO1xuICAgICAqIC8vID0+IHsgJ2ZyZWQnOiA0MCwgJ3BlYmJsZXMnOiAxIH0gKGl0ZXJhdGlvbiBvcmRlciBpcyBub3QgZ3VhcmFudGVlZClcbiAgICAgKlxuICAgICAqIC8vIFRoZSBgXy5wcm9wZXJ0eWAgaXRlcmF0ZWUgc2hvcnRoYW5kLlxuICAgICAqIF8ubWFwVmFsdWVzKHVzZXJzLCAnYWdlJyk7XG4gICAgICogLy8gPT4geyAnZnJlZCc6IDQwLCAncGViYmxlcyc6IDEgfSAoaXRlcmF0aW9uIG9yZGVyIGlzIG5vdCBndWFyYW50ZWVkKVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIG1hcFZhbHVlcyhvYmplY3QsIGl0ZXJhdGVlKSB7XG4gICAgICB2YXIgcmVzdWx0ID0ge307XG4gICAgICBpdGVyYXRlZSA9IGdldEl0ZXJhdGVlKGl0ZXJhdGVlLCAzKTtcblxuICAgICAgYmFzZUZvck93bihvYmplY3QsIGZ1bmN0aW9uKHZhbHVlLCBrZXksIG9iamVjdCkge1xuICAgICAgICBiYXNlQXNzaWduVmFsdWUocmVzdWx0LCBrZXksIGl0ZXJhdGVlKHZhbHVlLCBrZXksIG9iamVjdCkpO1xuICAgICAgfSk7XG4gICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoaXMgbWV0aG9kIGlzIGxpa2UgYF8uYXNzaWduYCBleGNlcHQgdGhhdCBpdCByZWN1cnNpdmVseSBtZXJnZXMgb3duIGFuZFxuICAgICAqIGluaGVyaXRlZCBlbnVtZXJhYmxlIHN0cmluZyBrZXllZCBwcm9wZXJ0aWVzIG9mIHNvdXJjZSBvYmplY3RzIGludG8gdGhlXG4gICAgICogZGVzdGluYXRpb24gb2JqZWN0LiBTb3VyY2UgcHJvcGVydGllcyB0aGF0IHJlc29sdmUgdG8gYHVuZGVmaW5lZGAgYXJlXG4gICAgICogc2tpcHBlZCBpZiBhIGRlc3RpbmF0aW9uIHZhbHVlIGV4aXN0cy4gQXJyYXkgYW5kIHBsYWluIG9iamVjdCBwcm9wZXJ0aWVzXG4gICAgICogYXJlIG1lcmdlZCByZWN1cnNpdmVseS4gT3RoZXIgb2JqZWN0cyBhbmQgdmFsdWUgdHlwZXMgYXJlIG92ZXJyaWRkZW4gYnlcbiAgICAgKiBhc3NpZ25tZW50LiBTb3VyY2Ugb2JqZWN0cyBhcmUgYXBwbGllZCBmcm9tIGxlZnQgdG8gcmlnaHQuIFN1YnNlcXVlbnRcbiAgICAgKiBzb3VyY2VzIG92ZXJ3cml0ZSBwcm9wZXJ0eSBhc3NpZ25tZW50cyBvZiBwcmV2aW91cyBzb3VyY2VzLlxuICAgICAqXG4gICAgICogKipOb3RlOioqIFRoaXMgbWV0aG9kIG11dGF0ZXMgYG9iamVjdGAuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMC41LjBcbiAgICAgKiBAY2F0ZWdvcnkgT2JqZWN0XG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgZGVzdGluYXRpb24gb2JqZWN0LlxuICAgICAqIEBwYXJhbSB7Li4uT2JqZWN0fSBbc291cmNlc10gVGhlIHNvdXJjZSBvYmplY3RzLlxuICAgICAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgYG9iamVjdGAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciBvYmplY3QgPSB7XG4gICAgICogICAnYSc6IFt7ICdiJzogMiB9LCB7ICdkJzogNCB9XVxuICAgICAqIH07XG4gICAgICpcbiAgICAgKiB2YXIgb3RoZXIgPSB7XG4gICAgICogICAnYSc6IFt7ICdjJzogMyB9LCB7ICdlJzogNSB9XVxuICAgICAqIH07XG4gICAgICpcbiAgICAgKiBfLm1lcmdlKG9iamVjdCwgb3RoZXIpO1xuICAgICAqIC8vID0+IHsgJ2EnOiBbeyAnYic6IDIsICdjJzogMyB9LCB7ICdkJzogNCwgJ2UnOiA1IH1dIH1cbiAgICAgKi9cbiAgICB2YXIgbWVyZ2UgPSBjcmVhdGVBc3NpZ25lcihmdW5jdGlvbihvYmplY3QsIHNvdXJjZSwgc3JjSW5kZXgpIHtcbiAgICAgIGJhc2VNZXJnZShvYmplY3QsIHNvdXJjZSwgc3JjSW5kZXgpO1xuICAgIH0pO1xuXG4gICAgLyoqXG4gICAgICogVGhpcyBtZXRob2QgaXMgbGlrZSBgXy5tZXJnZWAgZXhjZXB0IHRoYXQgaXQgYWNjZXB0cyBgY3VzdG9taXplcmAgd2hpY2hcbiAgICAgKiBpcyBpbnZva2VkIHRvIHByb2R1Y2UgdGhlIG1lcmdlZCB2YWx1ZXMgb2YgdGhlIGRlc3RpbmF0aW9uIGFuZCBzb3VyY2VcbiAgICAgKiBwcm9wZXJ0aWVzLiBJZiBgY3VzdG9taXplcmAgcmV0dXJucyBgdW5kZWZpbmVkYCwgbWVyZ2luZyBpcyBoYW5kbGVkIGJ5IHRoZVxuICAgICAqIG1ldGhvZCBpbnN0ZWFkLiBUaGUgYGN1c3RvbWl6ZXJgIGlzIGludm9rZWQgd2l0aCBzaXggYXJndW1lbnRzOlxuICAgICAqIChvYmpWYWx1ZSwgc3JjVmFsdWUsIGtleSwgb2JqZWN0LCBzb3VyY2UsIHN0YWNrKS5cbiAgICAgKlxuICAgICAqICoqTm90ZToqKiBUaGlzIG1ldGhvZCBtdXRhdGVzIGBvYmplY3RgLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMC4wXG4gICAgICogQGNhdGVnb3J5IE9iamVjdFxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIGRlc3RpbmF0aW9uIG9iamVjdC5cbiAgICAgKiBAcGFyYW0gey4uLk9iamVjdH0gc291cmNlcyBUaGUgc291cmNlIG9iamVjdHMuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gY3VzdG9taXplciBUaGUgZnVuY3Rpb24gdG8gY3VzdG9taXplIGFzc2lnbmVkIHZhbHVlcy5cbiAgICAgKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIGBvYmplY3RgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBmdW5jdGlvbiBjdXN0b21pemVyKG9ialZhbHVlLCBzcmNWYWx1ZSkge1xuICAgICAqICAgaWYgKF8uaXNBcnJheShvYmpWYWx1ZSkpIHtcbiAgICAgKiAgICAgcmV0dXJuIG9ialZhbHVlLmNvbmNhdChzcmNWYWx1ZSk7XG4gICAgICogICB9XG4gICAgICogfVxuICAgICAqXG4gICAgICogdmFyIG9iamVjdCA9IHsgJ2EnOiBbMV0sICdiJzogWzJdIH07XG4gICAgICogdmFyIG90aGVyID0geyAnYSc6IFszXSwgJ2InOiBbNF0gfTtcbiAgICAgKlxuICAgICAqIF8ubWVyZ2VXaXRoKG9iamVjdCwgb3RoZXIsIGN1c3RvbWl6ZXIpO1xuICAgICAqIC8vID0+IHsgJ2EnOiBbMSwgM10sICdiJzogWzIsIDRdIH1cbiAgICAgKi9cbiAgICB2YXIgbWVyZ2VXaXRoID0gY3JlYXRlQXNzaWduZXIoZnVuY3Rpb24ob2JqZWN0LCBzb3VyY2UsIHNyY0luZGV4LCBjdXN0b21pemVyKSB7XG4gICAgICBiYXNlTWVyZ2Uob2JqZWN0LCBzb3VyY2UsIHNyY0luZGV4LCBjdXN0b21pemVyKTtcbiAgICB9KTtcblxuICAgIC8qKlxuICAgICAqIFRoZSBvcHBvc2l0ZSBvZiBgXy5waWNrYDsgdGhpcyBtZXRob2QgY3JlYXRlcyBhbiBvYmplY3QgY29tcG9zZWQgb2YgdGhlXG4gICAgICogb3duIGFuZCBpbmhlcml0ZWQgZW51bWVyYWJsZSBwcm9wZXJ0eSBwYXRocyBvZiBgb2JqZWN0YCB0aGF0IGFyZSBub3Qgb21pdHRlZC5cbiAgICAgKlxuICAgICAqICoqTm90ZToqKiBUaGlzIG1ldGhvZCBpcyBjb25zaWRlcmFibHkgc2xvd2VyIHRoYW4gYF8ucGlja2AuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQHNpbmNlIDAuMS4wXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAY2F0ZWdvcnkgT2JqZWN0XG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgc291cmNlIG9iamVjdC5cbiAgICAgKiBAcGFyYW0gey4uLihzdHJpbmd8c3RyaW5nW10pfSBbcGF0aHNdIFRoZSBwcm9wZXJ0eSBwYXRocyB0byBvbWl0LlxuICAgICAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgdGhlIG5ldyBvYmplY3QuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciBvYmplY3QgPSB7ICdhJzogMSwgJ2InOiAnMicsICdjJzogMyB9O1xuICAgICAqXG4gICAgICogXy5vbWl0KG9iamVjdCwgWydhJywgJ2MnXSk7XG4gICAgICogLy8gPT4geyAnYic6ICcyJyB9XG4gICAgICovXG4gICAgdmFyIG9taXQgPSBmbGF0UmVzdChmdW5jdGlvbihvYmplY3QsIHBhdGhzKSB7XG4gICAgICB2YXIgcmVzdWx0ID0ge307XG4gICAgICBpZiAob2JqZWN0ID09IG51bGwpIHtcbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICAgIH1cbiAgICAgIHZhciBpc0RlZXAgPSBmYWxzZTtcbiAgICAgIHBhdGhzID0gYXJyYXlNYXAocGF0aHMsIGZ1bmN0aW9uKHBhdGgpIHtcbiAgICAgICAgcGF0aCA9IGNhc3RQYXRoKHBhdGgsIG9iamVjdCk7XG4gICAgICAgIGlzRGVlcCB8fCAoaXNEZWVwID0gcGF0aC5sZW5ndGggPiAxKTtcbiAgICAgICAgcmV0dXJuIHBhdGg7XG4gICAgICB9KTtcbiAgICAgIGNvcHlPYmplY3Qob2JqZWN0LCBnZXRBbGxLZXlzSW4ob2JqZWN0KSwgcmVzdWx0KTtcbiAgICAgIGlmIChpc0RlZXApIHtcbiAgICAgICAgcmVzdWx0ID0gYmFzZUNsb25lKHJlc3VsdCwgQ0xPTkVfREVFUF9GTEFHIHwgQ0xPTkVfRkxBVF9GTEFHIHwgQ0xPTkVfU1lNQk9MU19GTEFHLCBjdXN0b21PbWl0Q2xvbmUpO1xuICAgICAgfVxuICAgICAgdmFyIGxlbmd0aCA9IHBhdGhzLmxlbmd0aDtcbiAgICAgIHdoaWxlIChsZW5ndGgtLSkge1xuICAgICAgICBiYXNlVW5zZXQocmVzdWx0LCBwYXRoc1tsZW5ndGhdKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfSk7XG5cbiAgICAvKipcbiAgICAgKiBUaGUgb3Bwb3NpdGUgb2YgYF8ucGlja0J5YDsgdGhpcyBtZXRob2QgY3JlYXRlcyBhbiBvYmplY3QgY29tcG9zZWQgb2ZcbiAgICAgKiB0aGUgb3duIGFuZCBpbmhlcml0ZWQgZW51bWVyYWJsZSBzdHJpbmcga2V5ZWQgcHJvcGVydGllcyBvZiBgb2JqZWN0YCB0aGF0XG4gICAgICogYHByZWRpY2F0ZWAgZG9lc24ndCByZXR1cm4gdHJ1dGh5IGZvci4gVGhlIHByZWRpY2F0ZSBpcyBpbnZva2VkIHdpdGggdHdvXG4gICAgICogYXJndW1lbnRzOiAodmFsdWUsIGtleSkuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgT2JqZWN0XG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgc291cmNlIG9iamVjdC5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbcHJlZGljYXRlPV8uaWRlbnRpdHldIFRoZSBmdW5jdGlvbiBpbnZva2VkIHBlciBwcm9wZXJ0eS5cbiAgICAgKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIHRoZSBuZXcgb2JqZWN0LlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgb2JqZWN0ID0geyAnYSc6IDEsICdiJzogJzInLCAnYyc6IDMgfTtcbiAgICAgKlxuICAgICAqIF8ub21pdEJ5KG9iamVjdCwgXy5pc051bWJlcik7XG4gICAgICogLy8gPT4geyAnYic6ICcyJyB9XG4gICAgICovXG4gICAgZnVuY3Rpb24gb21pdEJ5KG9iamVjdCwgcHJlZGljYXRlKSB7XG4gICAgICByZXR1cm4gcGlja0J5KG9iamVjdCwgbmVnYXRlKGdldEl0ZXJhdGVlKHByZWRpY2F0ZSkpKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGFuIG9iamVjdCBjb21wb3NlZCBvZiB0aGUgcGlja2VkIGBvYmplY3RgIHByb3BlcnRpZXMuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQHNpbmNlIDAuMS4wXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAY2F0ZWdvcnkgT2JqZWN0XG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgc291cmNlIG9iamVjdC5cbiAgICAgKiBAcGFyYW0gey4uLihzdHJpbmd8c3RyaW5nW10pfSBbcGF0aHNdIFRoZSBwcm9wZXJ0eSBwYXRocyB0byBwaWNrLlxuICAgICAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgdGhlIG5ldyBvYmplY3QuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciBvYmplY3QgPSB7ICdhJzogMSwgJ2InOiAnMicsICdjJzogMyB9O1xuICAgICAqXG4gICAgICogXy5waWNrKG9iamVjdCwgWydhJywgJ2MnXSk7XG4gICAgICogLy8gPT4geyAnYSc6IDEsICdjJzogMyB9XG4gICAgICovXG4gICAgdmFyIHBpY2sgPSBmbGF0UmVzdChmdW5jdGlvbihvYmplY3QsIHBhdGhzKSB7XG4gICAgICByZXR1cm4gb2JqZWN0ID09IG51bGwgPyB7fSA6IGJhc2VQaWNrKG9iamVjdCwgcGF0aHMpO1xuICAgIH0pO1xuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhbiBvYmplY3QgY29tcG9zZWQgb2YgdGhlIGBvYmplY3RgIHByb3BlcnRpZXMgYHByZWRpY2F0ZWAgcmV0dXJuc1xuICAgICAqIHRydXRoeSBmb3IuIFRoZSBwcmVkaWNhdGUgaXMgaW52b2tlZCB3aXRoIHR3byBhcmd1bWVudHM6ICh2YWx1ZSwga2V5KS5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjAuMFxuICAgICAqIEBjYXRlZ29yeSBPYmplY3RcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBzb3VyY2Ugb2JqZWN0LlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtwcmVkaWNhdGU9Xy5pZGVudGl0eV0gVGhlIGZ1bmN0aW9uIGludm9rZWQgcGVyIHByb3BlcnR5LlxuICAgICAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgdGhlIG5ldyBvYmplY3QuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciBvYmplY3QgPSB7ICdhJzogMSwgJ2InOiAnMicsICdjJzogMyB9O1xuICAgICAqXG4gICAgICogXy5waWNrQnkob2JqZWN0LCBfLmlzTnVtYmVyKTtcbiAgICAgKiAvLyA9PiB7ICdhJzogMSwgJ2MnOiAzIH1cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBwaWNrQnkob2JqZWN0LCBwcmVkaWNhdGUpIHtcbiAgICAgIGlmIChvYmplY3QgPT0gbnVsbCkge1xuICAgICAgICByZXR1cm4ge307XG4gICAgICB9XG4gICAgICB2YXIgcHJvcHMgPSBhcnJheU1hcChnZXRBbGxLZXlzSW4ob2JqZWN0KSwgZnVuY3Rpb24ocHJvcCkge1xuICAgICAgICByZXR1cm4gW3Byb3BdO1xuICAgICAgfSk7XG4gICAgICBwcmVkaWNhdGUgPSBnZXRJdGVyYXRlZShwcmVkaWNhdGUpO1xuICAgICAgcmV0dXJuIGJhc2VQaWNrQnkob2JqZWN0LCBwcm9wcywgZnVuY3Rpb24odmFsdWUsIHBhdGgpIHtcbiAgICAgICAgcmV0dXJuIHByZWRpY2F0ZSh2YWx1ZSwgcGF0aFswXSk7XG4gICAgICB9KTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGlzIG1ldGhvZCBpcyBsaWtlIGBfLmdldGAgZXhjZXB0IHRoYXQgaWYgdGhlIHJlc29sdmVkIHZhbHVlIGlzIGFcbiAgICAgKiBmdW5jdGlvbiBpdCdzIGludm9rZWQgd2l0aCB0aGUgYHRoaXNgIGJpbmRpbmcgb2YgaXRzIHBhcmVudCBvYmplY3QgYW5kXG4gICAgICogaXRzIHJlc3VsdCBpcyByZXR1cm5lZC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAc2luY2UgMC4xLjBcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBjYXRlZ29yeSBPYmplY3RcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gcXVlcnkuXG4gICAgICogQHBhcmFtIHtBcnJheXxzdHJpbmd9IHBhdGggVGhlIHBhdGggb2YgdGhlIHByb3BlcnR5IHRvIHJlc29sdmUuXG4gICAgICogQHBhcmFtIHsqfSBbZGVmYXVsdFZhbHVlXSBUaGUgdmFsdWUgcmV0dXJuZWQgZm9yIGB1bmRlZmluZWRgIHJlc29sdmVkIHZhbHVlcy5cbiAgICAgKiBAcmV0dXJucyB7Kn0gUmV0dXJucyB0aGUgcmVzb2x2ZWQgdmFsdWUuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciBvYmplY3QgPSB7ICdhJzogW3sgJ2InOiB7ICdjMSc6IDMsICdjMic6IF8uY29uc3RhbnQoNCkgfSB9XSB9O1xuICAgICAqXG4gICAgICogXy5yZXN1bHQob2JqZWN0LCAnYVswXS5iLmMxJyk7XG4gICAgICogLy8gPT4gM1xuICAgICAqXG4gICAgICogXy5yZXN1bHQob2JqZWN0LCAnYVswXS5iLmMyJyk7XG4gICAgICogLy8gPT4gNFxuICAgICAqXG4gICAgICogXy5yZXN1bHQob2JqZWN0LCAnYVswXS5iLmMzJywgJ2RlZmF1bHQnKTtcbiAgICAgKiAvLyA9PiAnZGVmYXVsdCdcbiAgICAgKlxuICAgICAqIF8ucmVzdWx0KG9iamVjdCwgJ2FbMF0uYi5jMycsIF8uY29uc3RhbnQoJ2RlZmF1bHQnKSk7XG4gICAgICogLy8gPT4gJ2RlZmF1bHQnXG4gICAgICovXG4gICAgZnVuY3Rpb24gcmVzdWx0KG9iamVjdCwgcGF0aCwgZGVmYXVsdFZhbHVlKSB7XG4gICAgICBwYXRoID0gY2FzdFBhdGgocGF0aCwgb2JqZWN0KTtcblxuICAgICAgdmFyIGluZGV4ID0gLTEsXG4gICAgICAgICAgbGVuZ3RoID0gcGF0aC5sZW5ndGg7XG5cbiAgICAgIC8vIEVuc3VyZSB0aGUgbG9vcCBpcyBlbnRlcmVkIHdoZW4gcGF0aCBpcyBlbXB0eS5cbiAgICAgIGlmICghbGVuZ3RoKSB7XG4gICAgICAgIGxlbmd0aCA9IDE7XG4gICAgICAgIG9iamVjdCA9IHVuZGVmaW5lZDtcbiAgICAgIH1cbiAgICAgIHdoaWxlICgrK2luZGV4IDwgbGVuZ3RoKSB7XG4gICAgICAgIHZhciB2YWx1ZSA9IG9iamVjdCA9PSBudWxsID8gdW5kZWZpbmVkIDogb2JqZWN0W3RvS2V5KHBhdGhbaW5kZXhdKV07XG4gICAgICAgIGlmICh2YWx1ZSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgaW5kZXggPSBsZW5ndGg7XG4gICAgICAgICAgdmFsdWUgPSBkZWZhdWx0VmFsdWU7XG4gICAgICAgIH1cbiAgICAgICAgb2JqZWN0ID0gaXNGdW5jdGlvbih2YWx1ZSkgPyB2YWx1ZS5jYWxsKG9iamVjdCkgOiB2YWx1ZTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBvYmplY3Q7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogU2V0cyB0aGUgdmFsdWUgYXQgYHBhdGhgIG9mIGBvYmplY3RgLiBJZiBhIHBvcnRpb24gb2YgYHBhdGhgIGRvZXNuJ3QgZXhpc3QsXG4gICAgICogaXQncyBjcmVhdGVkLiBBcnJheXMgYXJlIGNyZWF0ZWQgZm9yIG1pc3NpbmcgaW5kZXggcHJvcGVydGllcyB3aGlsZSBvYmplY3RzXG4gICAgICogYXJlIGNyZWF0ZWQgZm9yIGFsbCBvdGhlciBtaXNzaW5nIHByb3BlcnRpZXMuIFVzZSBgXy5zZXRXaXRoYCB0byBjdXN0b21pemVcbiAgICAgKiBgcGF0aGAgY3JlYXRpb24uXG4gICAgICpcbiAgICAgKiAqKk5vdGU6KiogVGhpcyBtZXRob2QgbXV0YXRlcyBgb2JqZWN0YC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAzLjcuMFxuICAgICAqIEBjYXRlZ29yeSBPYmplY3RcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gbW9kaWZ5LlxuICAgICAqIEBwYXJhbSB7QXJyYXl8c3RyaW5nfSBwYXRoIFRoZSBwYXRoIG9mIHRoZSBwcm9wZXJ0eSB0byBzZXQuXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gc2V0LlxuICAgICAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgYG9iamVjdGAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciBvYmplY3QgPSB7ICdhJzogW3sgJ2InOiB7ICdjJzogMyB9IH1dIH07XG4gICAgICpcbiAgICAgKiBfLnNldChvYmplY3QsICdhWzBdLmIuYycsIDQpO1xuICAgICAqIGNvbnNvbGUubG9nKG9iamVjdC5hWzBdLmIuYyk7XG4gICAgICogLy8gPT4gNFxuICAgICAqXG4gICAgICogXy5zZXQob2JqZWN0LCBbJ3gnLCAnMCcsICd5JywgJ3onXSwgNSk7XG4gICAgICogY29uc29sZS5sb2cob2JqZWN0LnhbMF0ueS56KTtcbiAgICAgKiAvLyA9PiA1XG4gICAgICovXG4gICAgZnVuY3Rpb24gc2V0KG9iamVjdCwgcGF0aCwgdmFsdWUpIHtcbiAgICAgIHJldHVybiBvYmplY3QgPT0gbnVsbCA/IG9iamVjdCA6IGJhc2VTZXQob2JqZWN0LCBwYXRoLCB2YWx1ZSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhpcyBtZXRob2QgaXMgbGlrZSBgXy5zZXRgIGV4Y2VwdCB0aGF0IGl0IGFjY2VwdHMgYGN1c3RvbWl6ZXJgIHdoaWNoIGlzXG4gICAgICogaW52b2tlZCB0byBwcm9kdWNlIHRoZSBvYmplY3RzIG9mIGBwYXRoYC4gIElmIGBjdXN0b21pemVyYCByZXR1cm5zIGB1bmRlZmluZWRgXG4gICAgICogcGF0aCBjcmVhdGlvbiBpcyBoYW5kbGVkIGJ5IHRoZSBtZXRob2QgaW5zdGVhZC4gVGhlIGBjdXN0b21pemVyYCBpcyBpbnZva2VkXG4gICAgICogd2l0aCB0aHJlZSBhcmd1bWVudHM6IChuc1ZhbHVlLCBrZXksIG5zT2JqZWN0KS5cbiAgICAgKlxuICAgICAqICoqTm90ZToqKiBUaGlzIG1ldGhvZCBtdXRhdGVzIGBvYmplY3RgLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMC4wXG4gICAgICogQGNhdGVnb3J5IE9iamVjdFxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBtb2RpZnkuXG4gICAgICogQHBhcmFtIHtBcnJheXxzdHJpbmd9IHBhdGggVGhlIHBhdGggb2YgdGhlIHByb3BlcnR5IHRvIHNldC5cbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBzZXQuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gW2N1c3RvbWl6ZXJdIFRoZSBmdW5jdGlvbiB0byBjdXN0b21pemUgYXNzaWduZWQgdmFsdWVzLlxuICAgICAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgYG9iamVjdGAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciBvYmplY3QgPSB7fTtcbiAgICAgKlxuICAgICAqIF8uc2V0V2l0aChvYmplY3QsICdbMF1bMV0nLCAnYScsIE9iamVjdCk7XG4gICAgICogLy8gPT4geyAnMCc6IHsgJzEnOiAnYScgfSB9XG4gICAgICovXG4gICAgZnVuY3Rpb24gc2V0V2l0aChvYmplY3QsIHBhdGgsIHZhbHVlLCBjdXN0b21pemVyKSB7XG4gICAgICBjdXN0b21pemVyID0gdHlwZW9mIGN1c3RvbWl6ZXIgPT0gJ2Z1bmN0aW9uJyA/IGN1c3RvbWl6ZXIgOiB1bmRlZmluZWQ7XG4gICAgICByZXR1cm4gb2JqZWN0ID09IG51bGwgPyBvYmplY3QgOiBiYXNlU2V0KG9iamVjdCwgcGF0aCwgdmFsdWUsIGN1c3RvbWl6ZXIpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYW4gYXJyYXkgb2Ygb3duIGVudW1lcmFibGUgc3RyaW5nIGtleWVkLXZhbHVlIHBhaXJzIGZvciBgb2JqZWN0YFxuICAgICAqIHdoaWNoIGNhbiBiZSBjb25zdW1lZCBieSBgXy5mcm9tUGFpcnNgLiBJZiBgb2JqZWN0YCBpcyBhIG1hcCBvciBzZXQsIGl0c1xuICAgICAqIGVudHJpZXMgYXJlIHJldHVybmVkLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMC4wXG4gICAgICogQGFsaWFzIGVudHJpZXNcbiAgICAgKiBAY2F0ZWdvcnkgT2JqZWN0XG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIHF1ZXJ5LlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUga2V5LXZhbHVlIHBhaXJzLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBmdW5jdGlvbiBGb28oKSB7XG4gICAgICogICB0aGlzLmEgPSAxO1xuICAgICAqICAgdGhpcy5iID0gMjtcbiAgICAgKiB9XG4gICAgICpcbiAgICAgKiBGb28ucHJvdG90eXBlLmMgPSAzO1xuICAgICAqXG4gICAgICogXy50b1BhaXJzKG5ldyBGb28pO1xuICAgICAqIC8vID0+IFtbJ2EnLCAxXSwgWydiJywgMl1dIChpdGVyYXRpb24gb3JkZXIgaXMgbm90IGd1YXJhbnRlZWQpXG4gICAgICovXG4gICAgdmFyIHRvUGFpcnMgPSBjcmVhdGVUb1BhaXJzKGtleXMpO1xuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhbiBhcnJheSBvZiBvd24gYW5kIGluaGVyaXRlZCBlbnVtZXJhYmxlIHN0cmluZyBrZXllZC12YWx1ZSBwYWlyc1xuICAgICAqIGZvciBgb2JqZWN0YCB3aGljaCBjYW4gYmUgY29uc3VtZWQgYnkgYF8uZnJvbVBhaXJzYC4gSWYgYG9iamVjdGAgaXMgYSBtYXBcbiAgICAgKiBvciBzZXQsIGl0cyBlbnRyaWVzIGFyZSByZXR1cm5lZC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjAuMFxuICAgICAqIEBhbGlhcyBlbnRyaWVzSW5cbiAgICAgKiBAY2F0ZWdvcnkgT2JqZWN0XG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIHF1ZXJ5LlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUga2V5LXZhbHVlIHBhaXJzLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBmdW5jdGlvbiBGb28oKSB7XG4gICAgICogICB0aGlzLmEgPSAxO1xuICAgICAqICAgdGhpcy5iID0gMjtcbiAgICAgKiB9XG4gICAgICpcbiAgICAgKiBGb28ucHJvdG90eXBlLmMgPSAzO1xuICAgICAqXG4gICAgICogXy50b1BhaXJzSW4obmV3IEZvbyk7XG4gICAgICogLy8gPT4gW1snYScsIDFdLCBbJ2InLCAyXSwgWydjJywgM11dIChpdGVyYXRpb24gb3JkZXIgaXMgbm90IGd1YXJhbnRlZWQpXG4gICAgICovXG4gICAgdmFyIHRvUGFpcnNJbiA9IGNyZWF0ZVRvUGFpcnMoa2V5c0luKTtcblxuICAgIC8qKlxuICAgICAqIEFuIGFsdGVybmF0aXZlIHRvIGBfLnJlZHVjZWA7IHRoaXMgbWV0aG9kIHRyYW5zZm9ybXMgYG9iamVjdGAgdG8gYSBuZXdcbiAgICAgKiBgYWNjdW11bGF0b3JgIG9iamVjdCB3aGljaCBpcyB0aGUgcmVzdWx0IG9mIHJ1bm5pbmcgZWFjaCBvZiBpdHMgb3duXG4gICAgICogZW51bWVyYWJsZSBzdHJpbmcga2V5ZWQgcHJvcGVydGllcyB0aHJ1IGBpdGVyYXRlZWAsIHdpdGggZWFjaCBpbnZvY2F0aW9uXG4gICAgICogcG90ZW50aWFsbHkgbXV0YXRpbmcgdGhlIGBhY2N1bXVsYXRvcmAgb2JqZWN0LiBJZiBgYWNjdW11bGF0b3JgIGlzIG5vdFxuICAgICAqIHByb3ZpZGVkLCBhIG5ldyBvYmplY3Qgd2l0aCB0aGUgc2FtZSBgW1tQcm90b3R5cGVdXWAgd2lsbCBiZSB1c2VkLiBUaGVcbiAgICAgKiBpdGVyYXRlZSBpcyBpbnZva2VkIHdpdGggZm91ciBhcmd1bWVudHM6IChhY2N1bXVsYXRvciwgdmFsdWUsIGtleSwgb2JqZWN0KS5cbiAgICAgKiBJdGVyYXRlZSBmdW5jdGlvbnMgbWF5IGV4aXQgaXRlcmF0aW9uIGVhcmx5IGJ5IGV4cGxpY2l0bHkgcmV0dXJuaW5nIGBmYWxzZWAuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMS4zLjBcbiAgICAgKiBAY2F0ZWdvcnkgT2JqZWN0XG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIGl0ZXJhdGUgb3Zlci5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbaXRlcmF0ZWU9Xy5pZGVudGl0eV0gVGhlIGZ1bmN0aW9uIGludm9rZWQgcGVyIGl0ZXJhdGlvbi5cbiAgICAgKiBAcGFyYW0geyp9IFthY2N1bXVsYXRvcl0gVGhlIGN1c3RvbSBhY2N1bXVsYXRvciB2YWx1ZS5cbiAgICAgKiBAcmV0dXJucyB7Kn0gUmV0dXJucyB0aGUgYWNjdW11bGF0ZWQgdmFsdWUuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8udHJhbnNmb3JtKFsyLCAzLCA0XSwgZnVuY3Rpb24ocmVzdWx0LCBuKSB7XG4gICAgICogICByZXN1bHQucHVzaChuICo9IG4pO1xuICAgICAqICAgcmV0dXJuIG4gJSAyID09IDA7XG4gICAgICogfSwgW10pO1xuICAgICAqIC8vID0+IFs0LCA5XVxuICAgICAqXG4gICAgICogXy50cmFuc2Zvcm0oeyAnYSc6IDEsICdiJzogMiwgJ2MnOiAxIH0sIGZ1bmN0aW9uKHJlc3VsdCwgdmFsdWUsIGtleSkge1xuICAgICAqICAgKHJlc3VsdFt2YWx1ZV0gfHwgKHJlc3VsdFt2YWx1ZV0gPSBbXSkpLnB1c2goa2V5KTtcbiAgICAgKiB9LCB7fSk7XG4gICAgICogLy8gPT4geyAnMSc6IFsnYScsICdjJ10sICcyJzogWydiJ10gfVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHRyYW5zZm9ybShvYmplY3QsIGl0ZXJhdGVlLCBhY2N1bXVsYXRvcikge1xuICAgICAgdmFyIGlzQXJyID0gaXNBcnJheShvYmplY3QpLFxuICAgICAgICAgIGlzQXJyTGlrZSA9IGlzQXJyIHx8IGlzQnVmZmVyKG9iamVjdCkgfHwgaXNUeXBlZEFycmF5KG9iamVjdCk7XG5cbiAgICAgIGl0ZXJhdGVlID0gZ2V0SXRlcmF0ZWUoaXRlcmF0ZWUsIDQpO1xuICAgICAgaWYgKGFjY3VtdWxhdG9yID09IG51bGwpIHtcbiAgICAgICAgdmFyIEN0b3IgPSBvYmplY3QgJiYgb2JqZWN0LmNvbnN0cnVjdG9yO1xuICAgICAgICBpZiAoaXNBcnJMaWtlKSB7XG4gICAgICAgICAgYWNjdW11bGF0b3IgPSBpc0FyciA/IG5ldyBDdG9yIDogW107XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAoaXNPYmplY3Qob2JqZWN0KSkge1xuICAgICAgICAgIGFjY3VtdWxhdG9yID0gaXNGdW5jdGlvbihDdG9yKSA/IGJhc2VDcmVhdGUoZ2V0UHJvdG90eXBlKG9iamVjdCkpIDoge307XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgYWNjdW11bGF0b3IgPSB7fTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgKGlzQXJyTGlrZSA/IGFycmF5RWFjaCA6IGJhc2VGb3JPd24pKG9iamVjdCwgZnVuY3Rpb24odmFsdWUsIGluZGV4LCBvYmplY3QpIHtcbiAgICAgICAgcmV0dXJuIGl0ZXJhdGVlKGFjY3VtdWxhdG9yLCB2YWx1ZSwgaW5kZXgsIG9iamVjdCk7XG4gICAgICB9KTtcbiAgICAgIHJldHVybiBhY2N1bXVsYXRvcjtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBSZW1vdmVzIHRoZSBwcm9wZXJ0eSBhdCBgcGF0aGAgb2YgYG9iamVjdGAuXG4gICAgICpcbiAgICAgKiAqKk5vdGU6KiogVGhpcyBtZXRob2QgbXV0YXRlcyBgb2JqZWN0YC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjAuMFxuICAgICAqIEBjYXRlZ29yeSBPYmplY3RcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gbW9kaWZ5LlxuICAgICAqIEBwYXJhbSB7QXJyYXl8c3RyaW5nfSBwYXRoIFRoZSBwYXRoIG9mIHRoZSBwcm9wZXJ0eSB0byB1bnNldC5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgdGhlIHByb3BlcnR5IGlzIGRlbGV0ZWQsIGVsc2UgYGZhbHNlYC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIG9iamVjdCA9IHsgJ2EnOiBbeyAnYic6IHsgJ2MnOiA3IH0gfV0gfTtcbiAgICAgKiBfLnVuc2V0KG9iamVjdCwgJ2FbMF0uYi5jJyk7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqXG4gICAgICogY29uc29sZS5sb2cob2JqZWN0KTtcbiAgICAgKiAvLyA9PiB7ICdhJzogW3sgJ2InOiB7fSB9XSB9O1xuICAgICAqXG4gICAgICogXy51bnNldChvYmplY3QsIFsnYScsICcwJywgJ2InLCAnYyddKTtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICpcbiAgICAgKiBjb25zb2xlLmxvZyhvYmplY3QpO1xuICAgICAqIC8vID0+IHsgJ2EnOiBbeyAnYic6IHt9IH1dIH07XG4gICAgICovXG4gICAgZnVuY3Rpb24gdW5zZXQob2JqZWN0LCBwYXRoKSB7XG4gICAgICByZXR1cm4gb2JqZWN0ID09IG51bGwgPyB0cnVlIDogYmFzZVVuc2V0KG9iamVjdCwgcGF0aCk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhpcyBtZXRob2QgaXMgbGlrZSBgXy5zZXRgIGV4Y2VwdCB0aGF0IGFjY2VwdHMgYHVwZGF0ZXJgIHRvIHByb2R1Y2UgdGhlXG4gICAgICogdmFsdWUgdG8gc2V0LiBVc2UgYF8udXBkYXRlV2l0aGAgdG8gY3VzdG9taXplIGBwYXRoYCBjcmVhdGlvbi4gVGhlIGB1cGRhdGVyYFxuICAgICAqIGlzIGludm9rZWQgd2l0aCBvbmUgYXJndW1lbnQ6ICh2YWx1ZSkuXG4gICAgICpcbiAgICAgKiAqKk5vdGU6KiogVGhpcyBtZXRob2QgbXV0YXRlcyBgb2JqZWN0YC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjYuMFxuICAgICAqIEBjYXRlZ29yeSBPYmplY3RcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gbW9kaWZ5LlxuICAgICAqIEBwYXJhbSB7QXJyYXl8c3RyaW5nfSBwYXRoIFRoZSBwYXRoIG9mIHRoZSBwcm9wZXJ0eSB0byBzZXQuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gdXBkYXRlciBUaGUgZnVuY3Rpb24gdG8gcHJvZHVjZSB0aGUgdXBkYXRlZCB2YWx1ZS5cbiAgICAgKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIGBvYmplY3RgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgb2JqZWN0ID0geyAnYSc6IFt7ICdiJzogeyAnYyc6IDMgfSB9XSB9O1xuICAgICAqXG4gICAgICogXy51cGRhdGUob2JqZWN0LCAnYVswXS5iLmMnLCBmdW5jdGlvbihuKSB7IHJldHVybiBuICogbjsgfSk7XG4gICAgICogY29uc29sZS5sb2cob2JqZWN0LmFbMF0uYi5jKTtcbiAgICAgKiAvLyA9PiA5XG4gICAgICpcbiAgICAgKiBfLnVwZGF0ZShvYmplY3QsICd4WzBdLnkueicsIGZ1bmN0aW9uKG4pIHsgcmV0dXJuIG4gPyBuICsgMSA6IDA7IH0pO1xuICAgICAqIGNvbnNvbGUubG9nKG9iamVjdC54WzBdLnkueik7XG4gICAgICogLy8gPT4gMFxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHVwZGF0ZShvYmplY3QsIHBhdGgsIHVwZGF0ZXIpIHtcbiAgICAgIHJldHVybiBvYmplY3QgPT0gbnVsbCA/IG9iamVjdCA6IGJhc2VVcGRhdGUob2JqZWN0LCBwYXRoLCBjYXN0RnVuY3Rpb24odXBkYXRlcikpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoaXMgbWV0aG9kIGlzIGxpa2UgYF8udXBkYXRlYCBleGNlcHQgdGhhdCBpdCBhY2NlcHRzIGBjdXN0b21pemVyYCB3aGljaCBpc1xuICAgICAqIGludm9rZWQgdG8gcHJvZHVjZSB0aGUgb2JqZWN0cyBvZiBgcGF0aGAuICBJZiBgY3VzdG9taXplcmAgcmV0dXJucyBgdW5kZWZpbmVkYFxuICAgICAqIHBhdGggY3JlYXRpb24gaXMgaGFuZGxlZCBieSB0aGUgbWV0aG9kIGluc3RlYWQuIFRoZSBgY3VzdG9taXplcmAgaXMgaW52b2tlZFxuICAgICAqIHdpdGggdGhyZWUgYXJndW1lbnRzOiAobnNWYWx1ZSwga2V5LCBuc09iamVjdCkuXG4gICAgICpcbiAgICAgKiAqKk5vdGU6KiogVGhpcyBtZXRob2QgbXV0YXRlcyBgb2JqZWN0YC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjYuMFxuICAgICAqIEBjYXRlZ29yeSBPYmplY3RcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gbW9kaWZ5LlxuICAgICAqIEBwYXJhbSB7QXJyYXl8c3RyaW5nfSBwYXRoIFRoZSBwYXRoIG9mIHRoZSBwcm9wZXJ0eSB0byBzZXQuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gdXBkYXRlciBUaGUgZnVuY3Rpb24gdG8gcHJvZHVjZSB0aGUgdXBkYXRlZCB2YWx1ZS5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbY3VzdG9taXplcl0gVGhlIGZ1bmN0aW9uIHRvIGN1c3RvbWl6ZSBhc3NpZ25lZCB2YWx1ZXMuXG4gICAgICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyBgb2JqZWN0YC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIG9iamVjdCA9IHt9O1xuICAgICAqXG4gICAgICogXy51cGRhdGVXaXRoKG9iamVjdCwgJ1swXVsxXScsIF8uY29uc3RhbnQoJ2EnKSwgT2JqZWN0KTtcbiAgICAgKiAvLyA9PiB7ICcwJzogeyAnMSc6ICdhJyB9IH1cbiAgICAgKi9cbiAgICBmdW5jdGlvbiB1cGRhdGVXaXRoKG9iamVjdCwgcGF0aCwgdXBkYXRlciwgY3VzdG9taXplcikge1xuICAgICAgY3VzdG9taXplciA9IHR5cGVvZiBjdXN0b21pemVyID09ICdmdW5jdGlvbicgPyBjdXN0b21pemVyIDogdW5kZWZpbmVkO1xuICAgICAgcmV0dXJuIG9iamVjdCA9PSBudWxsID8gb2JqZWN0IDogYmFzZVVwZGF0ZShvYmplY3QsIHBhdGgsIGNhc3RGdW5jdGlvbih1cGRhdGVyKSwgY3VzdG9taXplcik7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhbiBhcnJheSBvZiB0aGUgb3duIGVudW1lcmFibGUgc3RyaW5nIGtleWVkIHByb3BlcnR5IHZhbHVlcyBvZiBgb2JqZWN0YC5cbiAgICAgKlxuICAgICAqICoqTm90ZToqKiBOb24tb2JqZWN0IHZhbHVlcyBhcmUgY29lcmNlZCB0byBvYmplY3RzLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBzaW5jZSAwLjEuMFxuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQGNhdGVnb3J5IE9iamVjdFxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBxdWVyeS5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIGFycmF5IG9mIHByb3BlcnR5IHZhbHVlcy5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogZnVuY3Rpb24gRm9vKCkge1xuICAgICAqICAgdGhpcy5hID0gMTtcbiAgICAgKiAgIHRoaXMuYiA9IDI7XG4gICAgICogfVxuICAgICAqXG4gICAgICogRm9vLnByb3RvdHlwZS5jID0gMztcbiAgICAgKlxuICAgICAqIF8udmFsdWVzKG5ldyBGb28pO1xuICAgICAqIC8vID0+IFsxLCAyXSAoaXRlcmF0aW9uIG9yZGVyIGlzIG5vdCBndWFyYW50ZWVkKVxuICAgICAqXG4gICAgICogXy52YWx1ZXMoJ2hpJyk7XG4gICAgICogLy8gPT4gWydoJywgJ2knXVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHZhbHVlcyhvYmplY3QpIHtcbiAgICAgIHJldHVybiBvYmplY3QgPT0gbnVsbCA/IFtdIDogYmFzZVZhbHVlcyhvYmplY3QsIGtleXMob2JqZWN0KSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhbiBhcnJheSBvZiB0aGUgb3duIGFuZCBpbmhlcml0ZWQgZW51bWVyYWJsZSBzdHJpbmcga2V5ZWQgcHJvcGVydHlcbiAgICAgKiB2YWx1ZXMgb2YgYG9iamVjdGAuXG4gICAgICpcbiAgICAgKiAqKk5vdGU6KiogTm9uLW9iamVjdCB2YWx1ZXMgYXJlIGNvZXJjZWQgdG8gb2JqZWN0cy5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAzLjAuMFxuICAgICAqIEBjYXRlZ29yeSBPYmplY3RcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gcXVlcnkuXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBhcnJheSBvZiBwcm9wZXJ0eSB2YWx1ZXMuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIGZ1bmN0aW9uIEZvbygpIHtcbiAgICAgKiAgIHRoaXMuYSA9IDE7XG4gICAgICogICB0aGlzLmIgPSAyO1xuICAgICAqIH1cbiAgICAgKlxuICAgICAqIEZvby5wcm90b3R5cGUuYyA9IDM7XG4gICAgICpcbiAgICAgKiBfLnZhbHVlc0luKG5ldyBGb28pO1xuICAgICAqIC8vID0+IFsxLCAyLCAzXSAoaXRlcmF0aW9uIG9yZGVyIGlzIG5vdCBndWFyYW50ZWVkKVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHZhbHVlc0luKG9iamVjdCkge1xuICAgICAgcmV0dXJuIG9iamVjdCA9PSBudWxsID8gW10gOiBiYXNlVmFsdWVzKG9iamVjdCwga2V5c0luKG9iamVjdCkpO1xuICAgIH1cblxuICAgIC8qLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tKi9cblxuICAgIC8qKlxuICAgICAqIENsYW1wcyBgbnVtYmVyYCB3aXRoaW4gdGhlIGluY2x1c2l2ZSBgbG93ZXJgIGFuZCBgdXBwZXJgIGJvdW5kcy5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjAuMFxuICAgICAqIEBjYXRlZ29yeSBOdW1iZXJcbiAgICAgKiBAcGFyYW0ge251bWJlcn0gbnVtYmVyIFRoZSBudW1iZXIgdG8gY2xhbXAuXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IFtsb3dlcl0gVGhlIGxvd2VyIGJvdW5kLlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSB1cHBlciBUaGUgdXBwZXIgYm91bmQuXG4gICAgICogQHJldHVybnMge251bWJlcn0gUmV0dXJucyB0aGUgY2xhbXBlZCBudW1iZXIuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uY2xhbXAoLTEwLCAtNSwgNSk7XG4gICAgICogLy8gPT4gLTVcbiAgICAgKlxuICAgICAqIF8uY2xhbXAoMTAsIC01LCA1KTtcbiAgICAgKiAvLyA9PiA1XG4gICAgICovXG4gICAgZnVuY3Rpb24gY2xhbXAobnVtYmVyLCBsb3dlciwgdXBwZXIpIHtcbiAgICAgIGlmICh1cHBlciA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIHVwcGVyID0gbG93ZXI7XG4gICAgICAgIGxvd2VyID0gdW5kZWZpbmVkO1xuICAgICAgfVxuICAgICAgaWYgKHVwcGVyICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgdXBwZXIgPSB0b051bWJlcih1cHBlcik7XG4gICAgICAgIHVwcGVyID0gdXBwZXIgPT09IHVwcGVyID8gdXBwZXIgOiAwO1xuICAgICAgfVxuICAgICAgaWYgKGxvd2VyICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgbG93ZXIgPSB0b051bWJlcihsb3dlcik7XG4gICAgICAgIGxvd2VyID0gbG93ZXIgPT09IGxvd2VyID8gbG93ZXIgOiAwO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGJhc2VDbGFtcCh0b051bWJlcihudW1iZXIpLCBsb3dlciwgdXBwZXIpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENoZWNrcyBpZiBgbmAgaXMgYmV0d2VlbiBgc3RhcnRgIGFuZCB1cCB0bywgYnV0IG5vdCBpbmNsdWRpbmcsIGBlbmRgLiBJZlxuICAgICAqIGBlbmRgIGlzIG5vdCBzcGVjaWZpZWQsIGl0J3Mgc2V0IHRvIGBzdGFydGAgd2l0aCBgc3RhcnRgIHRoZW4gc2V0IHRvIGAwYC5cbiAgICAgKiBJZiBgc3RhcnRgIGlzIGdyZWF0ZXIgdGhhbiBgZW5kYCB0aGUgcGFyYW1zIGFyZSBzd2FwcGVkIHRvIHN1cHBvcnRcbiAgICAgKiBuZWdhdGl2ZSByYW5nZXMuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMy4zLjBcbiAgICAgKiBAY2F0ZWdvcnkgTnVtYmVyXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IG51bWJlciBUaGUgbnVtYmVyIHRvIGNoZWNrLlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBbc3RhcnQ9MF0gVGhlIHN0YXJ0IG9mIHRoZSByYW5nZS5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gZW5kIFRoZSBlbmQgb2YgdGhlIHJhbmdlLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgbnVtYmVyYCBpcyBpbiB0aGUgcmFuZ2UsIGVsc2UgYGZhbHNlYC5cbiAgICAgKiBAc2VlIF8ucmFuZ2UsIF8ucmFuZ2VSaWdodFxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLmluUmFuZ2UoMywgMiwgNCk7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqXG4gICAgICogXy5pblJhbmdlKDQsIDgpO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKlxuICAgICAqIF8uaW5SYW5nZSg0LCAyKTtcbiAgICAgKiAvLyA9PiBmYWxzZVxuICAgICAqXG4gICAgICogXy5pblJhbmdlKDIsIDIpO1xuICAgICAqIC8vID0+IGZhbHNlXG4gICAgICpcbiAgICAgKiBfLmluUmFuZ2UoMS4yLCAyKTtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICpcbiAgICAgKiBfLmluUmFuZ2UoNS4yLCA0KTtcbiAgICAgKiAvLyA9PiBmYWxzZVxuICAgICAqXG4gICAgICogXy5pblJhbmdlKC0zLCAtMiwgLTYpO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBpblJhbmdlKG51bWJlciwgc3RhcnQsIGVuZCkge1xuICAgICAgc3RhcnQgPSB0b0Zpbml0ZShzdGFydCk7XG4gICAgICBpZiAoZW5kID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgZW5kID0gc3RhcnQ7XG4gICAgICAgIHN0YXJ0ID0gMDtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGVuZCA9IHRvRmluaXRlKGVuZCk7XG4gICAgICB9XG4gICAgICBudW1iZXIgPSB0b051bWJlcihudW1iZXIpO1xuICAgICAgcmV0dXJuIGJhc2VJblJhbmdlKG51bWJlciwgc3RhcnQsIGVuZCk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogUHJvZHVjZXMgYSByYW5kb20gbnVtYmVyIGJldHdlZW4gdGhlIGluY2x1c2l2ZSBgbG93ZXJgIGFuZCBgdXBwZXJgIGJvdW5kcy5cbiAgICAgKiBJZiBvbmx5IG9uZSBhcmd1bWVudCBpcyBwcm92aWRlZCBhIG51bWJlciBiZXR3ZWVuIGAwYCBhbmQgdGhlIGdpdmVuIG51bWJlclxuICAgICAqIGlzIHJldHVybmVkLiBJZiBgZmxvYXRpbmdgIGlzIGB0cnVlYCwgb3IgZWl0aGVyIGBsb3dlcmAgb3IgYHVwcGVyYCBhcmVcbiAgICAgKiBmbG9hdHMsIGEgZmxvYXRpbmctcG9pbnQgbnVtYmVyIGlzIHJldHVybmVkIGluc3RlYWQgb2YgYW4gaW50ZWdlci5cbiAgICAgKlxuICAgICAqICoqTm90ZToqKiBKYXZhU2NyaXB0IGZvbGxvd3MgdGhlIElFRUUtNzU0IHN0YW5kYXJkIGZvciByZXNvbHZpbmdcbiAgICAgKiBmbG9hdGluZy1wb2ludCB2YWx1ZXMgd2hpY2ggY2FuIHByb2R1Y2UgdW5leHBlY3RlZCByZXN1bHRzLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDAuNy4wXG4gICAgICogQGNhdGVnb3J5IE51bWJlclxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBbbG93ZXI9MF0gVGhlIGxvd2VyIGJvdW5kLlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBbdXBwZXI9MV0gVGhlIHVwcGVyIGJvdW5kLlxuICAgICAqIEBwYXJhbSB7Ym9vbGVhbn0gW2Zsb2F0aW5nXSBTcGVjaWZ5IHJldHVybmluZyBhIGZsb2F0aW5nLXBvaW50IG51bWJlci5cbiAgICAgKiBAcmV0dXJucyB7bnVtYmVyfSBSZXR1cm5zIHRoZSByYW5kb20gbnVtYmVyLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLnJhbmRvbSgwLCA1KTtcbiAgICAgKiAvLyA9PiBhbiBpbnRlZ2VyIGJldHdlZW4gMCBhbmQgNVxuICAgICAqXG4gICAgICogXy5yYW5kb20oNSk7XG4gICAgICogLy8gPT4gYWxzbyBhbiBpbnRlZ2VyIGJldHdlZW4gMCBhbmQgNVxuICAgICAqXG4gICAgICogXy5yYW5kb20oNSwgdHJ1ZSk7XG4gICAgICogLy8gPT4gYSBmbG9hdGluZy1wb2ludCBudW1iZXIgYmV0d2VlbiAwIGFuZCA1XG4gICAgICpcbiAgICAgKiBfLnJhbmRvbSgxLjIsIDUuMik7XG4gICAgICogLy8gPT4gYSBmbG9hdGluZy1wb2ludCBudW1iZXIgYmV0d2VlbiAxLjIgYW5kIDUuMlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHJhbmRvbShsb3dlciwgdXBwZXIsIGZsb2F0aW5nKSB7XG4gICAgICBpZiAoZmxvYXRpbmcgJiYgdHlwZW9mIGZsb2F0aW5nICE9ICdib29sZWFuJyAmJiBpc0l0ZXJhdGVlQ2FsbChsb3dlciwgdXBwZXIsIGZsb2F0aW5nKSkge1xuICAgICAgICB1cHBlciA9IGZsb2F0aW5nID0gdW5kZWZpbmVkO1xuICAgICAgfVxuICAgICAgaWYgKGZsb2F0aW5nID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgaWYgKHR5cGVvZiB1cHBlciA9PSAnYm9vbGVhbicpIHtcbiAgICAgICAgICBmbG9hdGluZyA9IHVwcGVyO1xuICAgICAgICAgIHVwcGVyID0gdW5kZWZpbmVkO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKHR5cGVvZiBsb3dlciA9PSAnYm9vbGVhbicpIHtcbiAgICAgICAgICBmbG9hdGluZyA9IGxvd2VyO1xuICAgICAgICAgIGxvd2VyID0gdW5kZWZpbmVkO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBpZiAobG93ZXIgPT09IHVuZGVmaW5lZCAmJiB1cHBlciA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIGxvd2VyID0gMDtcbiAgICAgICAgdXBwZXIgPSAxO1xuICAgICAgfVxuICAgICAgZWxzZSB7XG4gICAgICAgIGxvd2VyID0gdG9GaW5pdGUobG93ZXIpO1xuICAgICAgICBpZiAodXBwZXIgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgIHVwcGVyID0gbG93ZXI7XG4gICAgICAgICAgbG93ZXIgPSAwO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHVwcGVyID0gdG9GaW5pdGUodXBwZXIpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBpZiAobG93ZXIgPiB1cHBlcikge1xuICAgICAgICB2YXIgdGVtcCA9IGxvd2VyO1xuICAgICAgICBsb3dlciA9IHVwcGVyO1xuICAgICAgICB1cHBlciA9IHRlbXA7XG4gICAgICB9XG4gICAgICBpZiAoZmxvYXRpbmcgfHwgbG93ZXIgJSAxIHx8IHVwcGVyICUgMSkge1xuICAgICAgICB2YXIgcmFuZCA9IG5hdGl2ZVJhbmRvbSgpO1xuICAgICAgICByZXR1cm4gbmF0aXZlTWluKGxvd2VyICsgKHJhbmQgKiAodXBwZXIgLSBsb3dlciArIGZyZWVQYXJzZUZsb2F0KCcxZS0nICsgKChyYW5kICsgJycpLmxlbmd0aCAtIDEpKSkpLCB1cHBlcik7XG4gICAgICB9XG4gICAgICByZXR1cm4gYmFzZVJhbmRvbShsb3dlciwgdXBwZXIpO1xuICAgIH1cblxuICAgIC8qLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tKi9cblxuICAgIC8qKlxuICAgICAqIENvbnZlcnRzIGBzdHJpbmdgIHRvIFtjYW1lbCBjYXNlXShodHRwczovL2VuLndpa2lwZWRpYS5vcmcvd2lraS9DYW1lbENhc2UpLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDMuMC4wXG4gICAgICogQGNhdGVnb3J5IFN0cmluZ1xuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBbc3RyaW5nPScnXSBUaGUgc3RyaW5nIHRvIGNvbnZlcnQuXG4gICAgICogQHJldHVybnMge3N0cmluZ30gUmV0dXJucyB0aGUgY2FtZWwgY2FzZWQgc3RyaW5nLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLmNhbWVsQ2FzZSgnRm9vIEJhcicpO1xuICAgICAqIC8vID0+ICdmb29CYXInXG4gICAgICpcbiAgICAgKiBfLmNhbWVsQ2FzZSgnLS1mb28tYmFyLS0nKTtcbiAgICAgKiAvLyA9PiAnZm9vQmFyJ1xuICAgICAqXG4gICAgICogXy5jYW1lbENhc2UoJ19fRk9PX0JBUl9fJyk7XG4gICAgICogLy8gPT4gJ2Zvb0JhcidcbiAgICAgKi9cbiAgICB2YXIgY2FtZWxDYXNlID0gY3JlYXRlQ29tcG91bmRlcihmdW5jdGlvbihyZXN1bHQsIHdvcmQsIGluZGV4KSB7XG4gICAgICB3b3JkID0gd29yZC50b0xvd2VyQ2FzZSgpO1xuICAgICAgcmV0dXJuIHJlc3VsdCArIChpbmRleCA/IGNhcGl0YWxpemUod29yZCkgOiB3b3JkKTtcbiAgICB9KTtcblxuICAgIC8qKlxuICAgICAqIENvbnZlcnRzIHRoZSBmaXJzdCBjaGFyYWN0ZXIgb2YgYHN0cmluZ2AgdG8gdXBwZXIgY2FzZSBhbmQgdGhlIHJlbWFpbmluZ1xuICAgICAqIHRvIGxvd2VyIGNhc2UuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMy4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgU3RyaW5nXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IFtzdHJpbmc9JyddIFRoZSBzdHJpbmcgdG8gY2FwaXRhbGl6ZS5cbiAgICAgKiBAcmV0dXJucyB7c3RyaW5nfSBSZXR1cm5zIHRoZSBjYXBpdGFsaXplZCBzdHJpbmcuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uY2FwaXRhbGl6ZSgnRlJFRCcpO1xuICAgICAqIC8vID0+ICdGcmVkJ1xuICAgICAqL1xuICAgIGZ1bmN0aW9uIGNhcGl0YWxpemUoc3RyaW5nKSB7XG4gICAgICByZXR1cm4gdXBwZXJGaXJzdCh0b1N0cmluZyhzdHJpbmcpLnRvTG93ZXJDYXNlKCkpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIERlYnVycnMgYHN0cmluZ2AgYnkgY29udmVydGluZ1xuICAgICAqIFtMYXRpbi0xIFN1cHBsZW1lbnRdKGh0dHBzOi8vZW4ud2lraXBlZGlhLm9yZy93aWtpL0xhdGluLTFfU3VwcGxlbWVudF8oVW5pY29kZV9ibG9jaykjQ2hhcmFjdGVyX3RhYmxlKVxuICAgICAqIGFuZCBbTGF0aW4gRXh0ZW5kZWQtQV0oaHR0cHM6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvTGF0aW5fRXh0ZW5kZWQtQSlcbiAgICAgKiBsZXR0ZXJzIHRvIGJhc2ljIExhdGluIGxldHRlcnMgYW5kIHJlbW92aW5nXG4gICAgICogW2NvbWJpbmluZyBkaWFjcml0aWNhbCBtYXJrc10oaHR0cHM6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvQ29tYmluaW5nX0RpYWNyaXRpY2FsX01hcmtzKS5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAzLjAuMFxuICAgICAqIEBjYXRlZ29yeSBTdHJpbmdcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gW3N0cmluZz0nJ10gVGhlIHN0cmluZyB0byBkZWJ1cnIuXG4gICAgICogQHJldHVybnMge3N0cmluZ30gUmV0dXJucyB0aGUgZGVidXJyZWQgc3RyaW5nLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLmRlYnVycignZMOpasOgIHZ1Jyk7XG4gICAgICogLy8gPT4gJ2RlamEgdnUnXG4gICAgICovXG4gICAgZnVuY3Rpb24gZGVidXJyKHN0cmluZykge1xuICAgICAgc3RyaW5nID0gdG9TdHJpbmcoc3RyaW5nKTtcbiAgICAgIHJldHVybiBzdHJpbmcgJiYgc3RyaW5nLnJlcGxhY2UocmVMYXRpbiwgZGVidXJyTGV0dGVyKS5yZXBsYWNlKHJlQ29tYm9NYXJrLCAnJyk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ2hlY2tzIGlmIGBzdHJpbmdgIGVuZHMgd2l0aCB0aGUgZ2l2ZW4gdGFyZ2V0IHN0cmluZy5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAzLjAuMFxuICAgICAqIEBjYXRlZ29yeSBTdHJpbmdcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gW3N0cmluZz0nJ10gVGhlIHN0cmluZyB0byBpbnNwZWN0LlxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBbdGFyZ2V0XSBUaGUgc3RyaW5nIHRvIHNlYXJjaCBmb3IuXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IFtwb3NpdGlvbj1zdHJpbmcubGVuZ3RoXSBUaGUgcG9zaXRpb24gdG8gc2VhcmNoIHVwIHRvLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgc3RyaW5nYCBlbmRzIHdpdGggYHRhcmdldGAsXG4gICAgICogIGVsc2UgYGZhbHNlYC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5lbmRzV2l0aCgnYWJjJywgJ2MnKTtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICpcbiAgICAgKiBfLmVuZHNXaXRoKCdhYmMnLCAnYicpO1xuICAgICAqIC8vID0+IGZhbHNlXG4gICAgICpcbiAgICAgKiBfLmVuZHNXaXRoKCdhYmMnLCAnYicsIDIpO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBlbmRzV2l0aChzdHJpbmcsIHRhcmdldCwgcG9zaXRpb24pIHtcbiAgICAgIHN0cmluZyA9IHRvU3RyaW5nKHN0cmluZyk7XG4gICAgICB0YXJnZXQgPSBiYXNlVG9TdHJpbmcodGFyZ2V0KTtcblxuICAgICAgdmFyIGxlbmd0aCA9IHN0cmluZy5sZW5ndGg7XG4gICAgICBwb3NpdGlvbiA9IHBvc2l0aW9uID09PSB1bmRlZmluZWRcbiAgICAgICAgPyBsZW5ndGhcbiAgICAgICAgOiBiYXNlQ2xhbXAodG9JbnRlZ2VyKHBvc2l0aW9uKSwgMCwgbGVuZ3RoKTtcblxuICAgICAgdmFyIGVuZCA9IHBvc2l0aW9uO1xuICAgICAgcG9zaXRpb24gLT0gdGFyZ2V0Lmxlbmd0aDtcbiAgICAgIHJldHVybiBwb3NpdGlvbiA+PSAwICYmIHN0cmluZy5zbGljZShwb3NpdGlvbiwgZW5kKSA9PSB0YXJnZXQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ29udmVydHMgdGhlIGNoYXJhY3RlcnMgXCImXCIsIFwiPFwiLCBcIj5cIiwgJ1wiJywgYW5kIFwiJ1wiIGluIGBzdHJpbmdgIHRvIHRoZWlyXG4gICAgICogY29ycmVzcG9uZGluZyBIVE1MIGVudGl0aWVzLlxuICAgICAqXG4gICAgICogKipOb3RlOioqIE5vIG90aGVyIGNoYXJhY3RlcnMgYXJlIGVzY2FwZWQuIFRvIGVzY2FwZSBhZGRpdGlvbmFsXG4gICAgICogY2hhcmFjdGVycyB1c2UgYSB0aGlyZC1wYXJ0eSBsaWJyYXJ5IGxpa2UgW19oZV9dKGh0dHBzOi8vbXRocy5iZS9oZSkuXG4gICAgICpcbiAgICAgKiBUaG91Z2ggdGhlIFwiPlwiIGNoYXJhY3RlciBpcyBlc2NhcGVkIGZvciBzeW1tZXRyeSwgY2hhcmFjdGVycyBsaWtlXG4gICAgICogXCI+XCIgYW5kIFwiL1wiIGRvbid0IG5lZWQgZXNjYXBpbmcgaW4gSFRNTCBhbmQgaGF2ZSBubyBzcGVjaWFsIG1lYW5pbmdcbiAgICAgKiB1bmxlc3MgdGhleSdyZSBwYXJ0IG9mIGEgdGFnIG9yIHVucXVvdGVkIGF0dHJpYnV0ZSB2YWx1ZS4gU2VlXG4gICAgICogW01hdGhpYXMgQnluZW5zJ3MgYXJ0aWNsZV0oaHR0cHM6Ly9tYXRoaWFzYnluZW5zLmJlL25vdGVzL2FtYmlndW91cy1hbXBlcnNhbmRzKVxuICAgICAqICh1bmRlciBcInNlbWktcmVsYXRlZCBmdW4gZmFjdFwiKSBmb3IgbW9yZSBkZXRhaWxzLlxuICAgICAqXG4gICAgICogV2hlbiB3b3JraW5nIHdpdGggSFRNTCB5b3Ugc2hvdWxkIGFsd2F5c1xuICAgICAqIFtxdW90ZSBhdHRyaWJ1dGUgdmFsdWVzXShodHRwOi8vd29ua28uY29tL3Bvc3QvaHRtbC1lc2NhcGluZykgdG8gcmVkdWNlXG4gICAgICogWFNTIHZlY3RvcnMuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQHNpbmNlIDAuMS4wXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAY2F0ZWdvcnkgU3RyaW5nXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IFtzdHJpbmc9JyddIFRoZSBzdHJpbmcgdG8gZXNjYXBlLlxuICAgICAqIEByZXR1cm5zIHtzdHJpbmd9IFJldHVybnMgdGhlIGVzY2FwZWQgc3RyaW5nLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLmVzY2FwZSgnZnJlZCwgYmFybmV5LCAmIHBlYmJsZXMnKTtcbiAgICAgKiAvLyA9PiAnZnJlZCwgYmFybmV5LCAmYW1wOyBwZWJibGVzJ1xuICAgICAqL1xuICAgIGZ1bmN0aW9uIGVzY2FwZShzdHJpbmcpIHtcbiAgICAgIHN0cmluZyA9IHRvU3RyaW5nKHN0cmluZyk7XG4gICAgICByZXR1cm4gKHN0cmluZyAmJiByZUhhc1VuZXNjYXBlZEh0bWwudGVzdChzdHJpbmcpKVxuICAgICAgICA/IHN0cmluZy5yZXBsYWNlKHJlVW5lc2NhcGVkSHRtbCwgZXNjYXBlSHRtbENoYXIpXG4gICAgICAgIDogc3RyaW5nO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEVzY2FwZXMgdGhlIGBSZWdFeHBgIHNwZWNpYWwgY2hhcmFjdGVycyBcIl5cIiwgXCIkXCIsIFwiXFxcIiwgXCIuXCIsIFwiKlwiLCBcIitcIixcbiAgICAgKiBcIj9cIiwgXCIoXCIsIFwiKVwiLCBcIltcIiwgXCJdXCIsIFwie1wiLCBcIn1cIiwgYW5kIFwifFwiIGluIGBzdHJpbmdgLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDMuMC4wXG4gICAgICogQGNhdGVnb3J5IFN0cmluZ1xuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBbc3RyaW5nPScnXSBUaGUgc3RyaW5nIHRvIGVzY2FwZS5cbiAgICAgKiBAcmV0dXJucyB7c3RyaW5nfSBSZXR1cm5zIHRoZSBlc2NhcGVkIHN0cmluZy5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5lc2NhcGVSZWdFeHAoJ1tsb2Rhc2hdKGh0dHBzOi8vbG9kYXNoLmNvbS8pJyk7XG4gICAgICogLy8gPT4gJ1xcW2xvZGFzaFxcXVxcKGh0dHBzOi8vbG9kYXNoXFwuY29tL1xcKSdcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBlc2NhcGVSZWdFeHAoc3RyaW5nKSB7XG4gICAgICBzdHJpbmcgPSB0b1N0cmluZyhzdHJpbmcpO1xuICAgICAgcmV0dXJuIChzdHJpbmcgJiYgcmVIYXNSZWdFeHBDaGFyLnRlc3Qoc3RyaW5nKSlcbiAgICAgICAgPyBzdHJpbmcucmVwbGFjZShyZVJlZ0V4cENoYXIsICdcXFxcJCYnKVxuICAgICAgICA6IHN0cmluZztcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDb252ZXJ0cyBgc3RyaW5nYCB0b1xuICAgICAqIFtrZWJhYiBjYXNlXShodHRwczovL2VuLndpa2lwZWRpYS5vcmcvd2lraS9MZXR0ZXJfY2FzZSNTcGVjaWFsX2Nhc2Vfc3R5bGVzKS5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAzLjAuMFxuICAgICAqIEBjYXRlZ29yeSBTdHJpbmdcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gW3N0cmluZz0nJ10gVGhlIHN0cmluZyB0byBjb252ZXJ0LlxuICAgICAqIEByZXR1cm5zIHtzdHJpbmd9IFJldHVybnMgdGhlIGtlYmFiIGNhc2VkIHN0cmluZy5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5rZWJhYkNhc2UoJ0ZvbyBCYXInKTtcbiAgICAgKiAvLyA9PiAnZm9vLWJhcidcbiAgICAgKlxuICAgICAqIF8ua2ViYWJDYXNlKCdmb29CYXInKTtcbiAgICAgKiAvLyA9PiAnZm9vLWJhcidcbiAgICAgKlxuICAgICAqIF8ua2ViYWJDYXNlKCdfX0ZPT19CQVJfXycpO1xuICAgICAqIC8vID0+ICdmb28tYmFyJ1xuICAgICAqL1xuICAgIHZhciBrZWJhYkNhc2UgPSBjcmVhdGVDb21wb3VuZGVyKGZ1bmN0aW9uKHJlc3VsdCwgd29yZCwgaW5kZXgpIHtcbiAgICAgIHJldHVybiByZXN1bHQgKyAoaW5kZXggPyAnLScgOiAnJykgKyB3b3JkLnRvTG93ZXJDYXNlKCk7XG4gICAgfSk7XG5cbiAgICAvKipcbiAgICAgKiBDb252ZXJ0cyBgc3RyaW5nYCwgYXMgc3BhY2Ugc2VwYXJhdGVkIHdvcmRzLCB0byBsb3dlciBjYXNlLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMC4wXG4gICAgICogQGNhdGVnb3J5IFN0cmluZ1xuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBbc3RyaW5nPScnXSBUaGUgc3RyaW5nIHRvIGNvbnZlcnQuXG4gICAgICogQHJldHVybnMge3N0cmluZ30gUmV0dXJucyB0aGUgbG93ZXIgY2FzZWQgc3RyaW5nLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLmxvd2VyQ2FzZSgnLS1Gb28tQmFyLS0nKTtcbiAgICAgKiAvLyA9PiAnZm9vIGJhcidcbiAgICAgKlxuICAgICAqIF8ubG93ZXJDYXNlKCdmb29CYXInKTtcbiAgICAgKiAvLyA9PiAnZm9vIGJhcidcbiAgICAgKlxuICAgICAqIF8ubG93ZXJDYXNlKCdfX0ZPT19CQVJfXycpO1xuICAgICAqIC8vID0+ICdmb28gYmFyJ1xuICAgICAqL1xuICAgIHZhciBsb3dlckNhc2UgPSBjcmVhdGVDb21wb3VuZGVyKGZ1bmN0aW9uKHJlc3VsdCwgd29yZCwgaW5kZXgpIHtcbiAgICAgIHJldHVybiByZXN1bHQgKyAoaW5kZXggPyAnICcgOiAnJykgKyB3b3JkLnRvTG93ZXJDYXNlKCk7XG4gICAgfSk7XG5cbiAgICAvKipcbiAgICAgKiBDb252ZXJ0cyB0aGUgZmlyc3QgY2hhcmFjdGVyIG9mIGBzdHJpbmdgIHRvIGxvd2VyIGNhc2UuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgU3RyaW5nXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IFtzdHJpbmc9JyddIFRoZSBzdHJpbmcgdG8gY29udmVydC5cbiAgICAgKiBAcmV0dXJucyB7c3RyaW5nfSBSZXR1cm5zIHRoZSBjb252ZXJ0ZWQgc3RyaW5nLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLmxvd2VyRmlyc3QoJ0ZyZWQnKTtcbiAgICAgKiAvLyA9PiAnZnJlZCdcbiAgICAgKlxuICAgICAqIF8ubG93ZXJGaXJzdCgnRlJFRCcpO1xuICAgICAqIC8vID0+ICdmUkVEJ1xuICAgICAqL1xuICAgIHZhciBsb3dlckZpcnN0ID0gY3JlYXRlQ2FzZUZpcnN0KCd0b0xvd2VyQ2FzZScpO1xuXG4gICAgLyoqXG4gICAgICogUGFkcyBgc3RyaW5nYCBvbiB0aGUgbGVmdCBhbmQgcmlnaHQgc2lkZXMgaWYgaXQncyBzaG9ydGVyIHRoYW4gYGxlbmd0aGAuXG4gICAgICogUGFkZGluZyBjaGFyYWN0ZXJzIGFyZSB0cnVuY2F0ZWQgaWYgdGhleSBjYW4ndCBiZSBldmVubHkgZGl2aWRlZCBieSBgbGVuZ3RoYC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAzLjAuMFxuICAgICAqIEBjYXRlZ29yeSBTdHJpbmdcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gW3N0cmluZz0nJ10gVGhlIHN0cmluZyB0byBwYWQuXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IFtsZW5ndGg9MF0gVGhlIHBhZGRpbmcgbGVuZ3RoLlxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBbY2hhcnM9JyAnXSBUaGUgc3RyaW5nIHVzZWQgYXMgcGFkZGluZy5cbiAgICAgKiBAcmV0dXJucyB7c3RyaW5nfSBSZXR1cm5zIHRoZSBwYWRkZWQgc3RyaW5nLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLnBhZCgnYWJjJywgOCk7XG4gICAgICogLy8gPT4gJyAgYWJjICAgJ1xuICAgICAqXG4gICAgICogXy5wYWQoJ2FiYycsIDgsICdfLScpO1xuICAgICAqIC8vID0+ICdfLWFiY18tXydcbiAgICAgKlxuICAgICAqIF8ucGFkKCdhYmMnLCAzKTtcbiAgICAgKiAvLyA9PiAnYWJjJ1xuICAgICAqL1xuICAgIGZ1bmN0aW9uIHBhZChzdHJpbmcsIGxlbmd0aCwgY2hhcnMpIHtcbiAgICAgIHN0cmluZyA9IHRvU3RyaW5nKHN0cmluZyk7XG4gICAgICBsZW5ndGggPSB0b0ludGVnZXIobGVuZ3RoKTtcblxuICAgICAgdmFyIHN0ckxlbmd0aCA9IGxlbmd0aCA/IHN0cmluZ1NpemUoc3RyaW5nKSA6IDA7XG4gICAgICBpZiAoIWxlbmd0aCB8fCBzdHJMZW5ndGggPj0gbGVuZ3RoKSB7XG4gICAgICAgIHJldHVybiBzdHJpbmc7XG4gICAgICB9XG4gICAgICB2YXIgbWlkID0gKGxlbmd0aCAtIHN0ckxlbmd0aCkgLyAyO1xuICAgICAgcmV0dXJuIChcbiAgICAgICAgY3JlYXRlUGFkZGluZyhuYXRpdmVGbG9vcihtaWQpLCBjaGFycykgK1xuICAgICAgICBzdHJpbmcgK1xuICAgICAgICBjcmVhdGVQYWRkaW5nKG5hdGl2ZUNlaWwobWlkKSwgY2hhcnMpXG4gICAgICApO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFBhZHMgYHN0cmluZ2Agb24gdGhlIHJpZ2h0IHNpZGUgaWYgaXQncyBzaG9ydGVyIHRoYW4gYGxlbmd0aGAuIFBhZGRpbmdcbiAgICAgKiBjaGFyYWN0ZXJzIGFyZSB0cnVuY2F0ZWQgaWYgdGhleSBleGNlZWQgYGxlbmd0aGAuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgU3RyaW5nXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IFtzdHJpbmc9JyddIFRoZSBzdHJpbmcgdG8gcGFkLlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBbbGVuZ3RoPTBdIFRoZSBwYWRkaW5nIGxlbmd0aC5cbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gW2NoYXJzPScgJ10gVGhlIHN0cmluZyB1c2VkIGFzIHBhZGRpbmcuXG4gICAgICogQHJldHVybnMge3N0cmluZ30gUmV0dXJucyB0aGUgcGFkZGVkIHN0cmluZy5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5wYWRFbmQoJ2FiYycsIDYpO1xuICAgICAqIC8vID0+ICdhYmMgICAnXG4gICAgICpcbiAgICAgKiBfLnBhZEVuZCgnYWJjJywgNiwgJ18tJyk7XG4gICAgICogLy8gPT4gJ2FiY18tXydcbiAgICAgKlxuICAgICAqIF8ucGFkRW5kKCdhYmMnLCAzKTtcbiAgICAgKiAvLyA9PiAnYWJjJ1xuICAgICAqL1xuICAgIGZ1bmN0aW9uIHBhZEVuZChzdHJpbmcsIGxlbmd0aCwgY2hhcnMpIHtcbiAgICAgIHN0cmluZyA9IHRvU3RyaW5nKHN0cmluZyk7XG4gICAgICBsZW5ndGggPSB0b0ludGVnZXIobGVuZ3RoKTtcblxuICAgICAgdmFyIHN0ckxlbmd0aCA9IGxlbmd0aCA/IHN0cmluZ1NpemUoc3RyaW5nKSA6IDA7XG4gICAgICByZXR1cm4gKGxlbmd0aCAmJiBzdHJMZW5ndGggPCBsZW5ndGgpXG4gICAgICAgID8gKHN0cmluZyArIGNyZWF0ZVBhZGRpbmcobGVuZ3RoIC0gc3RyTGVuZ3RoLCBjaGFycykpXG4gICAgICAgIDogc3RyaW5nO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFBhZHMgYHN0cmluZ2Agb24gdGhlIGxlZnQgc2lkZSBpZiBpdCdzIHNob3J0ZXIgdGhhbiBgbGVuZ3RoYC4gUGFkZGluZ1xuICAgICAqIGNoYXJhY3RlcnMgYXJlIHRydW5jYXRlZCBpZiB0aGV5IGV4Y2VlZCBgbGVuZ3RoYC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjAuMFxuICAgICAqIEBjYXRlZ29yeSBTdHJpbmdcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gW3N0cmluZz0nJ10gVGhlIHN0cmluZyB0byBwYWQuXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IFtsZW5ndGg9MF0gVGhlIHBhZGRpbmcgbGVuZ3RoLlxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBbY2hhcnM9JyAnXSBUaGUgc3RyaW5nIHVzZWQgYXMgcGFkZGluZy5cbiAgICAgKiBAcmV0dXJucyB7c3RyaW5nfSBSZXR1cm5zIHRoZSBwYWRkZWQgc3RyaW5nLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLnBhZFN0YXJ0KCdhYmMnLCA2KTtcbiAgICAgKiAvLyA9PiAnICAgYWJjJ1xuICAgICAqXG4gICAgICogXy5wYWRTdGFydCgnYWJjJywgNiwgJ18tJyk7XG4gICAgICogLy8gPT4gJ18tX2FiYydcbiAgICAgKlxuICAgICAqIF8ucGFkU3RhcnQoJ2FiYycsIDMpO1xuICAgICAqIC8vID0+ICdhYmMnXG4gICAgICovXG4gICAgZnVuY3Rpb24gcGFkU3RhcnQoc3RyaW5nLCBsZW5ndGgsIGNoYXJzKSB7XG4gICAgICBzdHJpbmcgPSB0b1N0cmluZyhzdHJpbmcpO1xuICAgICAgbGVuZ3RoID0gdG9JbnRlZ2VyKGxlbmd0aCk7XG5cbiAgICAgIHZhciBzdHJMZW5ndGggPSBsZW5ndGggPyBzdHJpbmdTaXplKHN0cmluZykgOiAwO1xuICAgICAgcmV0dXJuIChsZW5ndGggJiYgc3RyTGVuZ3RoIDwgbGVuZ3RoKVxuICAgICAgICA/IChjcmVhdGVQYWRkaW5nKGxlbmd0aCAtIHN0ckxlbmd0aCwgY2hhcnMpICsgc3RyaW5nKVxuICAgICAgICA6IHN0cmluZztcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDb252ZXJ0cyBgc3RyaW5nYCB0byBhbiBpbnRlZ2VyIG9mIHRoZSBzcGVjaWZpZWQgcmFkaXguIElmIGByYWRpeGAgaXNcbiAgICAgKiBgdW5kZWZpbmVkYCBvciBgMGAsIGEgYHJhZGl4YCBvZiBgMTBgIGlzIHVzZWQgdW5sZXNzIGB2YWx1ZWAgaXMgYVxuICAgICAqIGhleGFkZWNpbWFsLCBpbiB3aGljaCBjYXNlIGEgYHJhZGl4YCBvZiBgMTZgIGlzIHVzZWQuXG4gICAgICpcbiAgICAgKiAqKk5vdGU6KiogVGhpcyBtZXRob2QgYWxpZ25zIHdpdGggdGhlXG4gICAgICogW0VTNSBpbXBsZW1lbnRhdGlvbl0oaHR0cHM6Ly9lczUuZ2l0aHViLmlvLyN4MTUuMS4yLjIpIG9mIGBwYXJzZUludGAuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMS4xLjBcbiAgICAgKiBAY2F0ZWdvcnkgU3RyaW5nXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IHN0cmluZyBUaGUgc3RyaW5nIHRvIGNvbnZlcnQuXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IFtyYWRpeD0xMF0gVGhlIHJhZGl4IHRvIGludGVycHJldCBgdmFsdWVgIGJ5LlxuICAgICAqIEBwYXJhbS0ge09iamVjdH0gW2d1YXJkXSBFbmFibGVzIHVzZSBhcyBhbiBpdGVyYXRlZSBmb3IgbWV0aG9kcyBsaWtlIGBfLm1hcGAuXG4gICAgICogQHJldHVybnMge251bWJlcn0gUmV0dXJucyB0aGUgY29udmVydGVkIGludGVnZXIuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8ucGFyc2VJbnQoJzA4Jyk7XG4gICAgICogLy8gPT4gOFxuICAgICAqXG4gICAgICogXy5tYXAoWyc2JywgJzA4JywgJzEwJ10sIF8ucGFyc2VJbnQpO1xuICAgICAqIC8vID0+IFs2LCA4LCAxMF1cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBwYXJzZUludChzdHJpbmcsIHJhZGl4LCBndWFyZCkge1xuICAgICAgaWYgKGd1YXJkIHx8IHJhZGl4ID09IG51bGwpIHtcbiAgICAgICAgcmFkaXggPSAwO1xuICAgICAgfSBlbHNlIGlmIChyYWRpeCkge1xuICAgICAgICByYWRpeCA9ICtyYWRpeDtcbiAgICAgIH1cbiAgICAgIHJldHVybiBuYXRpdmVQYXJzZUludCh0b1N0cmluZyhzdHJpbmcpLnJlcGxhY2UocmVUcmltU3RhcnQsICcnKSwgcmFkaXggfHwgMCk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogUmVwZWF0cyB0aGUgZ2l2ZW4gc3RyaW5nIGBuYCB0aW1lcy5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAzLjAuMFxuICAgICAqIEBjYXRlZ29yeSBTdHJpbmdcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gW3N0cmluZz0nJ10gVGhlIHN0cmluZyB0byByZXBlYXQuXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IFtuPTFdIFRoZSBudW1iZXIgb2YgdGltZXMgdG8gcmVwZWF0IHRoZSBzdHJpbmcuXG4gICAgICogQHBhcmFtLSB7T2JqZWN0fSBbZ3VhcmRdIEVuYWJsZXMgdXNlIGFzIGFuIGl0ZXJhdGVlIGZvciBtZXRob2RzIGxpa2UgYF8ubWFwYC5cbiAgICAgKiBAcmV0dXJucyB7c3RyaW5nfSBSZXR1cm5zIHRoZSByZXBlYXRlZCBzdHJpbmcuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8ucmVwZWF0KCcqJywgMyk7XG4gICAgICogLy8gPT4gJyoqKidcbiAgICAgKlxuICAgICAqIF8ucmVwZWF0KCdhYmMnLCAyKTtcbiAgICAgKiAvLyA9PiAnYWJjYWJjJ1xuICAgICAqXG4gICAgICogXy5yZXBlYXQoJ2FiYycsIDApO1xuICAgICAqIC8vID0+ICcnXG4gICAgICovXG4gICAgZnVuY3Rpb24gcmVwZWF0KHN0cmluZywgbiwgZ3VhcmQpIHtcbiAgICAgIGlmICgoZ3VhcmQgPyBpc0l0ZXJhdGVlQ2FsbChzdHJpbmcsIG4sIGd1YXJkKSA6IG4gPT09IHVuZGVmaW5lZCkpIHtcbiAgICAgICAgbiA9IDE7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBuID0gdG9JbnRlZ2VyKG4pO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGJhc2VSZXBlYXQodG9TdHJpbmcoc3RyaW5nKSwgbik7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogUmVwbGFjZXMgbWF0Y2hlcyBmb3IgYHBhdHRlcm5gIGluIGBzdHJpbmdgIHdpdGggYHJlcGxhY2VtZW50YC5cbiAgICAgKlxuICAgICAqICoqTm90ZToqKiBUaGlzIG1ldGhvZCBpcyBiYXNlZCBvblxuICAgICAqIFtgU3RyaW5nI3JlcGxhY2VgXShodHRwczovL21kbi5pby9TdHJpbmcvcmVwbGFjZSkuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgU3RyaW5nXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IFtzdHJpbmc9JyddIFRoZSBzdHJpbmcgdG8gbW9kaWZ5LlxuICAgICAqIEBwYXJhbSB7UmVnRXhwfHN0cmluZ30gcGF0dGVybiBUaGUgcGF0dGVybiB0byByZXBsYWNlLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb258c3RyaW5nfSByZXBsYWNlbWVudCBUaGUgbWF0Y2ggcmVwbGFjZW1lbnQuXG4gICAgICogQHJldHVybnMge3N0cmluZ30gUmV0dXJucyB0aGUgbW9kaWZpZWQgc3RyaW5nLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLnJlcGxhY2UoJ0hpIEZyZWQnLCAnRnJlZCcsICdCYXJuZXknKTtcbiAgICAgKiAvLyA9PiAnSGkgQmFybmV5J1xuICAgICAqL1xuICAgIGZ1bmN0aW9uIHJlcGxhY2UoKSB7XG4gICAgICB2YXIgYXJncyA9IGFyZ3VtZW50cyxcbiAgICAgICAgICBzdHJpbmcgPSB0b1N0cmluZyhhcmdzWzBdKTtcblxuICAgICAgcmV0dXJuIGFyZ3MubGVuZ3RoIDwgMyA/IHN0cmluZyA6IHN0cmluZy5yZXBsYWNlKGFyZ3NbMV0sIGFyZ3NbMl0pO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENvbnZlcnRzIGBzdHJpbmdgIHRvXG4gICAgICogW3NuYWtlIGNhc2VdKGh0dHBzOi8vZW4ud2lraXBlZGlhLm9yZy93aWtpL1NuYWtlX2Nhc2UpLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDMuMC4wXG4gICAgICogQGNhdGVnb3J5IFN0cmluZ1xuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBbc3RyaW5nPScnXSBUaGUgc3RyaW5nIHRvIGNvbnZlcnQuXG4gICAgICogQHJldHVybnMge3N0cmluZ30gUmV0dXJucyB0aGUgc25ha2UgY2FzZWQgc3RyaW5nLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLnNuYWtlQ2FzZSgnRm9vIEJhcicpO1xuICAgICAqIC8vID0+ICdmb29fYmFyJ1xuICAgICAqXG4gICAgICogXy5zbmFrZUNhc2UoJ2Zvb0JhcicpO1xuICAgICAqIC8vID0+ICdmb29fYmFyJ1xuICAgICAqXG4gICAgICogXy5zbmFrZUNhc2UoJy0tRk9PLUJBUi0tJyk7XG4gICAgICogLy8gPT4gJ2Zvb19iYXInXG4gICAgICovXG4gICAgdmFyIHNuYWtlQ2FzZSA9IGNyZWF0ZUNvbXBvdW5kZXIoZnVuY3Rpb24ocmVzdWx0LCB3b3JkLCBpbmRleCkge1xuICAgICAgcmV0dXJuIHJlc3VsdCArIChpbmRleCA/ICdfJyA6ICcnKSArIHdvcmQudG9Mb3dlckNhc2UoKTtcbiAgICB9KTtcblxuICAgIC8qKlxuICAgICAqIFNwbGl0cyBgc3RyaW5nYCBieSBgc2VwYXJhdG9yYC5cbiAgICAgKlxuICAgICAqICoqTm90ZToqKiBUaGlzIG1ldGhvZCBpcyBiYXNlZCBvblxuICAgICAqIFtgU3RyaW5nI3NwbGl0YF0oaHR0cHM6Ly9tZG4uaW8vU3RyaW5nL3NwbGl0KS5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjAuMFxuICAgICAqIEBjYXRlZ29yeSBTdHJpbmdcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gW3N0cmluZz0nJ10gVGhlIHN0cmluZyB0byBzcGxpdC5cbiAgICAgKiBAcGFyYW0ge1JlZ0V4cHxzdHJpbmd9IHNlcGFyYXRvciBUaGUgc2VwYXJhdG9yIHBhdHRlcm4gdG8gc3BsaXQgYnkuXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IFtsaW1pdF0gVGhlIGxlbmd0aCB0byB0cnVuY2F0ZSByZXN1bHRzIHRvLlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgc3RyaW5nIHNlZ21lbnRzLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLnNwbGl0KCdhLWItYycsICctJywgMik7XG4gICAgICogLy8gPT4gWydhJywgJ2InXVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHNwbGl0KHN0cmluZywgc2VwYXJhdG9yLCBsaW1pdCkge1xuICAgICAgaWYgKGxpbWl0ICYmIHR5cGVvZiBsaW1pdCAhPSAnbnVtYmVyJyAmJiBpc0l0ZXJhdGVlQ2FsbChzdHJpbmcsIHNlcGFyYXRvciwgbGltaXQpKSB7XG4gICAgICAgIHNlcGFyYXRvciA9IGxpbWl0ID0gdW5kZWZpbmVkO1xuICAgICAgfVxuICAgICAgbGltaXQgPSBsaW1pdCA9PT0gdW5kZWZpbmVkID8gTUFYX0FSUkFZX0xFTkdUSCA6IGxpbWl0ID4+PiAwO1xuICAgICAgaWYgKCFsaW1pdCkge1xuICAgICAgICByZXR1cm4gW107XG4gICAgICB9XG4gICAgICBzdHJpbmcgPSB0b1N0cmluZyhzdHJpbmcpO1xuICAgICAgaWYgKHN0cmluZyAmJiAoXG4gICAgICAgICAgICB0eXBlb2Ygc2VwYXJhdG9yID09ICdzdHJpbmcnIHx8XG4gICAgICAgICAgICAoc2VwYXJhdG9yICE9IG51bGwgJiYgIWlzUmVnRXhwKHNlcGFyYXRvcikpXG4gICAgICAgICAgKSkge1xuICAgICAgICBzZXBhcmF0b3IgPSBiYXNlVG9TdHJpbmcoc2VwYXJhdG9yKTtcbiAgICAgICAgaWYgKCFzZXBhcmF0b3IgJiYgaGFzVW5pY29kZShzdHJpbmcpKSB7XG4gICAgICAgICAgcmV0dXJuIGNhc3RTbGljZShzdHJpbmdUb0FycmF5KHN0cmluZyksIDAsIGxpbWl0KTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgcmV0dXJuIHN0cmluZy5zcGxpdChzZXBhcmF0b3IsIGxpbWl0KTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDb252ZXJ0cyBgc3RyaW5nYCB0b1xuICAgICAqIFtzdGFydCBjYXNlXShodHRwczovL2VuLndpa2lwZWRpYS5vcmcvd2lraS9MZXR0ZXJfY2FzZSNTdHlsaXN0aWNfb3Jfc3BlY2lhbGlzZWRfdXNhZ2UpLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDMuMS4wXG4gICAgICogQGNhdGVnb3J5IFN0cmluZ1xuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBbc3RyaW5nPScnXSBUaGUgc3RyaW5nIHRvIGNvbnZlcnQuXG4gICAgICogQHJldHVybnMge3N0cmluZ30gUmV0dXJucyB0aGUgc3RhcnQgY2FzZWQgc3RyaW5nLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLnN0YXJ0Q2FzZSgnLS1mb28tYmFyLS0nKTtcbiAgICAgKiAvLyA9PiAnRm9vIEJhcidcbiAgICAgKlxuICAgICAqIF8uc3RhcnRDYXNlKCdmb29CYXInKTtcbiAgICAgKiAvLyA9PiAnRm9vIEJhcidcbiAgICAgKlxuICAgICAqIF8uc3RhcnRDYXNlKCdfX0ZPT19CQVJfXycpO1xuICAgICAqIC8vID0+ICdGT08gQkFSJ1xuICAgICAqL1xuICAgIHZhciBzdGFydENhc2UgPSBjcmVhdGVDb21wb3VuZGVyKGZ1bmN0aW9uKHJlc3VsdCwgd29yZCwgaW5kZXgpIHtcbiAgICAgIHJldHVybiByZXN1bHQgKyAoaW5kZXggPyAnICcgOiAnJykgKyB1cHBlckZpcnN0KHdvcmQpO1xuICAgIH0pO1xuXG4gICAgLyoqXG4gICAgICogQ2hlY2tzIGlmIGBzdHJpbmdgIHN0YXJ0cyB3aXRoIHRoZSBnaXZlbiB0YXJnZXQgc3RyaW5nLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDMuMC4wXG4gICAgICogQGNhdGVnb3J5IFN0cmluZ1xuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBbc3RyaW5nPScnXSBUaGUgc3RyaW5nIHRvIGluc3BlY3QuXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IFt0YXJnZXRdIFRoZSBzdHJpbmcgdG8gc2VhcmNoIGZvci5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gW3Bvc2l0aW9uPTBdIFRoZSBwb3NpdGlvbiB0byBzZWFyY2ggZnJvbS5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHN0cmluZ2Agc3RhcnRzIHdpdGggYHRhcmdldGAsXG4gICAgICogIGVsc2UgYGZhbHNlYC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5zdGFydHNXaXRoKCdhYmMnLCAnYScpO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKlxuICAgICAqIF8uc3RhcnRzV2l0aCgnYWJjJywgJ2InKTtcbiAgICAgKiAvLyA9PiBmYWxzZVxuICAgICAqXG4gICAgICogXy5zdGFydHNXaXRoKCdhYmMnLCAnYicsIDEpO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBzdGFydHNXaXRoKHN0cmluZywgdGFyZ2V0LCBwb3NpdGlvbikge1xuICAgICAgc3RyaW5nID0gdG9TdHJpbmcoc3RyaW5nKTtcbiAgICAgIHBvc2l0aW9uID0gcG9zaXRpb24gPT0gbnVsbFxuICAgICAgICA/IDBcbiAgICAgICAgOiBiYXNlQ2xhbXAodG9JbnRlZ2VyKHBvc2l0aW9uKSwgMCwgc3RyaW5nLmxlbmd0aCk7XG5cbiAgICAgIHRhcmdldCA9IGJhc2VUb1N0cmluZyh0YXJnZXQpO1xuICAgICAgcmV0dXJuIHN0cmluZy5zbGljZShwb3NpdGlvbiwgcG9zaXRpb24gKyB0YXJnZXQubGVuZ3RoKSA9PSB0YXJnZXQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIGNvbXBpbGVkIHRlbXBsYXRlIGZ1bmN0aW9uIHRoYXQgY2FuIGludGVycG9sYXRlIGRhdGEgcHJvcGVydGllc1xuICAgICAqIGluIFwiaW50ZXJwb2xhdGVcIiBkZWxpbWl0ZXJzLCBIVE1MLWVzY2FwZSBpbnRlcnBvbGF0ZWQgZGF0YSBwcm9wZXJ0aWVzIGluXG4gICAgICogXCJlc2NhcGVcIiBkZWxpbWl0ZXJzLCBhbmQgZXhlY3V0ZSBKYXZhU2NyaXB0IGluIFwiZXZhbHVhdGVcIiBkZWxpbWl0ZXJzLiBEYXRhXG4gICAgICogcHJvcGVydGllcyBtYXkgYmUgYWNjZXNzZWQgYXMgZnJlZSB2YXJpYWJsZXMgaW4gdGhlIHRlbXBsYXRlLiBJZiBhIHNldHRpbmdcbiAgICAgKiBvYmplY3QgaXMgZ2l2ZW4sIGl0IHRha2VzIHByZWNlZGVuY2Ugb3ZlciBgXy50ZW1wbGF0ZVNldHRpbmdzYCB2YWx1ZXMuXG4gICAgICpcbiAgICAgKiAqKk5vdGU6KiogSW4gdGhlIGRldmVsb3BtZW50IGJ1aWxkIGBfLnRlbXBsYXRlYCB1dGlsaXplc1xuICAgICAqIFtzb3VyY2VVUkxzXShodHRwOi8vd3d3Lmh0bWw1cm9ja3MuY29tL2VuL3R1dG9yaWFscy9kZXZlbG9wZXJ0b29scy9zb3VyY2VtYXBzLyN0b2Mtc291cmNldXJsKVxuICAgICAqIGZvciBlYXNpZXIgZGVidWdnaW5nLlxuICAgICAqXG4gICAgICogRm9yIG1vcmUgaW5mb3JtYXRpb24gb24gcHJlY29tcGlsaW5nIHRlbXBsYXRlcyBzZWVcbiAgICAgKiBbbG9kYXNoJ3MgY3VzdG9tIGJ1aWxkcyBkb2N1bWVudGF0aW9uXShodHRwczovL2xvZGFzaC5jb20vY3VzdG9tLWJ1aWxkcykuXG4gICAgICpcbiAgICAgKiBGb3IgbW9yZSBpbmZvcm1hdGlvbiBvbiBDaHJvbWUgZXh0ZW5zaW9uIHNhbmRib3hlcyBzZWVcbiAgICAgKiBbQ2hyb21lJ3MgZXh0ZW5zaW9ucyBkb2N1bWVudGF0aW9uXShodHRwczovL2RldmVsb3Blci5jaHJvbWUuY29tL2V4dGVuc2lvbnMvc2FuZGJveGluZ0V2YWwpLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBzaW5jZSAwLjEuMFxuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQGNhdGVnb3J5IFN0cmluZ1xuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBbc3RyaW5nPScnXSBUaGUgdGVtcGxhdGUgc3RyaW5nLlxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBbb3B0aW9ucz17fV0gVGhlIG9wdGlvbnMgb2JqZWN0LlxuICAgICAqIEBwYXJhbSB7UmVnRXhwfSBbb3B0aW9ucy5lc2NhcGU9Xy50ZW1wbGF0ZVNldHRpbmdzLmVzY2FwZV1cbiAgICAgKiAgVGhlIEhUTUwgXCJlc2NhcGVcIiBkZWxpbWl0ZXIuXG4gICAgICogQHBhcmFtIHtSZWdFeHB9IFtvcHRpb25zLmV2YWx1YXRlPV8udGVtcGxhdGVTZXR0aW5ncy5ldmFsdWF0ZV1cbiAgICAgKiAgVGhlIFwiZXZhbHVhdGVcIiBkZWxpbWl0ZXIuXG4gICAgICogQHBhcmFtIHtPYmplY3R9IFtvcHRpb25zLmltcG9ydHM9Xy50ZW1wbGF0ZVNldHRpbmdzLmltcG9ydHNdXG4gICAgICogIEFuIG9iamVjdCB0byBpbXBvcnQgaW50byB0aGUgdGVtcGxhdGUgYXMgZnJlZSB2YXJpYWJsZXMuXG4gICAgICogQHBhcmFtIHtSZWdFeHB9IFtvcHRpb25zLmludGVycG9sYXRlPV8udGVtcGxhdGVTZXR0aW5ncy5pbnRlcnBvbGF0ZV1cbiAgICAgKiAgVGhlIFwiaW50ZXJwb2xhdGVcIiBkZWxpbWl0ZXIuXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IFtvcHRpb25zLnNvdXJjZVVSTD0nbG9kYXNoLnRlbXBsYXRlU291cmNlc1tuXSddXG4gICAgICogIFRoZSBzb3VyY2VVUkwgb2YgdGhlIGNvbXBpbGVkIHRlbXBsYXRlLlxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBbb3B0aW9ucy52YXJpYWJsZT0nb2JqJ11cbiAgICAgKiAgVGhlIGRhdGEgb2JqZWN0IHZhcmlhYmxlIG5hbWUuXG4gICAgICogQHBhcmFtLSB7T2JqZWN0fSBbZ3VhcmRdIEVuYWJsZXMgdXNlIGFzIGFuIGl0ZXJhdGVlIGZvciBtZXRob2RzIGxpa2UgYF8ubWFwYC5cbiAgICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIGNvbXBpbGVkIHRlbXBsYXRlIGZ1bmN0aW9uLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiAvLyBVc2UgdGhlIFwiaW50ZXJwb2xhdGVcIiBkZWxpbWl0ZXIgdG8gY3JlYXRlIGEgY29tcGlsZWQgdGVtcGxhdGUuXG4gICAgICogdmFyIGNvbXBpbGVkID0gXy50ZW1wbGF0ZSgnaGVsbG8gPCU9IHVzZXIgJT4hJyk7XG4gICAgICogY29tcGlsZWQoeyAndXNlcic6ICdmcmVkJyB9KTtcbiAgICAgKiAvLyA9PiAnaGVsbG8gZnJlZCEnXG4gICAgICpcbiAgICAgKiAvLyBVc2UgdGhlIEhUTUwgXCJlc2NhcGVcIiBkZWxpbWl0ZXIgdG8gZXNjYXBlIGRhdGEgcHJvcGVydHkgdmFsdWVzLlxuICAgICAqIHZhciBjb21waWxlZCA9IF8udGVtcGxhdGUoJzxiPjwlLSB2YWx1ZSAlPjwvYj4nKTtcbiAgICAgKiBjb21waWxlZCh7ICd2YWx1ZSc6ICc8c2NyaXB0PicgfSk7XG4gICAgICogLy8gPT4gJzxiPiZsdDtzY3JpcHQmZ3Q7PC9iPidcbiAgICAgKlxuICAgICAqIC8vIFVzZSB0aGUgXCJldmFsdWF0ZVwiIGRlbGltaXRlciB0byBleGVjdXRlIEphdmFTY3JpcHQgYW5kIGdlbmVyYXRlIEhUTUwuXG4gICAgICogdmFyIGNvbXBpbGVkID0gXy50ZW1wbGF0ZSgnPCUgXy5mb3JFYWNoKHVzZXJzLCBmdW5jdGlvbih1c2VyKSB7ICU+PGxpPjwlLSB1c2VyICU+PC9saT48JSB9KTsgJT4nKTtcbiAgICAgKiBjb21waWxlZCh7ICd1c2Vycyc6IFsnZnJlZCcsICdiYXJuZXknXSB9KTtcbiAgICAgKiAvLyA9PiAnPGxpPmZyZWQ8L2xpPjxsaT5iYXJuZXk8L2xpPidcbiAgICAgKlxuICAgICAqIC8vIFVzZSB0aGUgaW50ZXJuYWwgYHByaW50YCBmdW5jdGlvbiBpbiBcImV2YWx1YXRlXCIgZGVsaW1pdGVycy5cbiAgICAgKiB2YXIgY29tcGlsZWQgPSBfLnRlbXBsYXRlKCc8JSBwcmludChcImhlbGxvIFwiICsgdXNlcik7ICU+IScpO1xuICAgICAqIGNvbXBpbGVkKHsgJ3VzZXInOiAnYmFybmV5JyB9KTtcbiAgICAgKiAvLyA9PiAnaGVsbG8gYmFybmV5ISdcbiAgICAgKlxuICAgICAqIC8vIFVzZSB0aGUgRVMgdGVtcGxhdGUgbGl0ZXJhbCBkZWxpbWl0ZXIgYXMgYW4gXCJpbnRlcnBvbGF0ZVwiIGRlbGltaXRlci5cbiAgICAgKiAvLyBEaXNhYmxlIHN1cHBvcnQgYnkgcmVwbGFjaW5nIHRoZSBcImludGVycG9sYXRlXCIgZGVsaW1pdGVyLlxuICAgICAqIHZhciBjb21waWxlZCA9IF8udGVtcGxhdGUoJ2hlbGxvICR7IHVzZXIgfSEnKTtcbiAgICAgKiBjb21waWxlZCh7ICd1c2VyJzogJ3BlYmJsZXMnIH0pO1xuICAgICAqIC8vID0+ICdoZWxsbyBwZWJibGVzISdcbiAgICAgKlxuICAgICAqIC8vIFVzZSBiYWNrc2xhc2hlcyB0byB0cmVhdCBkZWxpbWl0ZXJzIGFzIHBsYWluIHRleHQuXG4gICAgICogdmFyIGNvbXBpbGVkID0gXy50ZW1wbGF0ZSgnPCU9IFwiXFxcXDwlLSB2YWx1ZSAlXFxcXD5cIiAlPicpO1xuICAgICAqIGNvbXBpbGVkKHsgJ3ZhbHVlJzogJ2lnbm9yZWQnIH0pO1xuICAgICAqIC8vID0+ICc8JS0gdmFsdWUgJT4nXG4gICAgICpcbiAgICAgKiAvLyBVc2UgdGhlIGBpbXBvcnRzYCBvcHRpb24gdG8gaW1wb3J0IGBqUXVlcnlgIGFzIGBqcWAuXG4gICAgICogdmFyIHRleHQgPSAnPCUganEuZWFjaCh1c2VycywgZnVuY3Rpb24odXNlcikgeyAlPjxsaT48JS0gdXNlciAlPjwvbGk+PCUgfSk7ICU+JztcbiAgICAgKiB2YXIgY29tcGlsZWQgPSBfLnRlbXBsYXRlKHRleHQsIHsgJ2ltcG9ydHMnOiB7ICdqcSc6IGpRdWVyeSB9IH0pO1xuICAgICAqIGNvbXBpbGVkKHsgJ3VzZXJzJzogWydmcmVkJywgJ2Jhcm5leSddIH0pO1xuICAgICAqIC8vID0+ICc8bGk+ZnJlZDwvbGk+PGxpPmJhcm5leTwvbGk+J1xuICAgICAqXG4gICAgICogLy8gVXNlIHRoZSBgc291cmNlVVJMYCBvcHRpb24gdG8gc3BlY2lmeSBhIGN1c3RvbSBzb3VyY2VVUkwgZm9yIHRoZSB0ZW1wbGF0ZS5cbiAgICAgKiB2YXIgY29tcGlsZWQgPSBfLnRlbXBsYXRlKCdoZWxsbyA8JT0gdXNlciAlPiEnLCB7ICdzb3VyY2VVUkwnOiAnL2Jhc2ljL2dyZWV0aW5nLmpzdCcgfSk7XG4gICAgICogY29tcGlsZWQoZGF0YSk7XG4gICAgICogLy8gPT4gRmluZCB0aGUgc291cmNlIG9mIFwiZ3JlZXRpbmcuanN0XCIgdW5kZXIgdGhlIFNvdXJjZXMgdGFiIG9yIFJlc291cmNlcyBwYW5lbCBvZiB0aGUgd2ViIGluc3BlY3Rvci5cbiAgICAgKlxuICAgICAqIC8vIFVzZSB0aGUgYHZhcmlhYmxlYCBvcHRpb24gdG8gZW5zdXJlIGEgd2l0aC1zdGF0ZW1lbnQgaXNuJ3QgdXNlZCBpbiB0aGUgY29tcGlsZWQgdGVtcGxhdGUuXG4gICAgICogdmFyIGNvbXBpbGVkID0gXy50ZW1wbGF0ZSgnaGkgPCU9IGRhdGEudXNlciAlPiEnLCB7ICd2YXJpYWJsZSc6ICdkYXRhJyB9KTtcbiAgICAgKiBjb21waWxlZC5zb3VyY2U7XG4gICAgICogLy8gPT4gZnVuY3Rpb24oZGF0YSkge1xuICAgICAqIC8vICAgdmFyIF9fdCwgX19wID0gJyc7XG4gICAgICogLy8gICBfX3AgKz0gJ2hpICcgKyAoKF9fdCA9ICggZGF0YS51c2VyICkpID09IG51bGwgPyAnJyA6IF9fdCkgKyAnISc7XG4gICAgICogLy8gICByZXR1cm4gX19wO1xuICAgICAqIC8vIH1cbiAgICAgKlxuICAgICAqIC8vIFVzZSBjdXN0b20gdGVtcGxhdGUgZGVsaW1pdGVycy5cbiAgICAgKiBfLnRlbXBsYXRlU2V0dGluZ3MuaW50ZXJwb2xhdGUgPSAve3soW1xcc1xcU10rPyl9fS9nO1xuICAgICAqIHZhciBjb21waWxlZCA9IF8udGVtcGxhdGUoJ2hlbGxvIHt7IHVzZXIgfX0hJyk7XG4gICAgICogY29tcGlsZWQoeyAndXNlcic6ICdtdXN0YWNoZScgfSk7XG4gICAgICogLy8gPT4gJ2hlbGxvIG11c3RhY2hlISdcbiAgICAgKlxuICAgICAqIC8vIFVzZSB0aGUgYHNvdXJjZWAgcHJvcGVydHkgdG8gaW5saW5lIGNvbXBpbGVkIHRlbXBsYXRlcyBmb3IgbWVhbmluZ2Z1bFxuICAgICAqIC8vIGxpbmUgbnVtYmVycyBpbiBlcnJvciBtZXNzYWdlcyBhbmQgc3RhY2sgdHJhY2VzLlxuICAgICAqIGZzLndyaXRlRmlsZVN5bmMocGF0aC5qb2luKHByb2Nlc3MuY3dkKCksICdqc3QuanMnKSwgJ1xcXG4gICAgICogICB2YXIgSlNUID0ge1xcXG4gICAgICogICAgIFwibWFpblwiOiAnICsgXy50ZW1wbGF0ZShtYWluVGV4dCkuc291cmNlICsgJ1xcXG4gICAgICogICB9O1xcXG4gICAgICogJyk7XG4gICAgICovXG4gICAgZnVuY3Rpb24gdGVtcGxhdGUoc3RyaW5nLCBvcHRpb25zLCBndWFyZCkge1xuICAgICAgLy8gQmFzZWQgb24gSm9obiBSZXNpZydzIGB0bXBsYCBpbXBsZW1lbnRhdGlvblxuICAgICAgLy8gKGh0dHA6Ly9lam9obi5vcmcvYmxvZy9qYXZhc2NyaXB0LW1pY3JvLXRlbXBsYXRpbmcvKVxuICAgICAgLy8gYW5kIExhdXJhIERva3Rvcm92YSdzIGRvVC5qcyAoaHR0cHM6Ly9naXRodWIuY29tL29sYWRvL2RvVCkuXG4gICAgICB2YXIgc2V0dGluZ3MgPSBsb2Rhc2gudGVtcGxhdGVTZXR0aW5ncztcblxuICAgICAgaWYgKGd1YXJkICYmIGlzSXRlcmF0ZWVDYWxsKHN0cmluZywgb3B0aW9ucywgZ3VhcmQpKSB7XG4gICAgICAgIG9wdGlvbnMgPSB1bmRlZmluZWQ7XG4gICAgICB9XG4gICAgICBzdHJpbmcgPSB0b1N0cmluZyhzdHJpbmcpO1xuICAgICAgb3B0aW9ucyA9IGFzc2lnbkluV2l0aCh7fSwgb3B0aW9ucywgc2V0dGluZ3MsIGN1c3RvbURlZmF1bHRzQXNzaWduSW4pO1xuXG4gICAgICB2YXIgaW1wb3J0cyA9IGFzc2lnbkluV2l0aCh7fSwgb3B0aW9ucy5pbXBvcnRzLCBzZXR0aW5ncy5pbXBvcnRzLCBjdXN0b21EZWZhdWx0c0Fzc2lnbkluKSxcbiAgICAgICAgICBpbXBvcnRzS2V5cyA9IGtleXMoaW1wb3J0cyksXG4gICAgICAgICAgaW1wb3J0c1ZhbHVlcyA9IGJhc2VWYWx1ZXMoaW1wb3J0cywgaW1wb3J0c0tleXMpO1xuXG4gICAgICB2YXIgaXNFc2NhcGluZyxcbiAgICAgICAgICBpc0V2YWx1YXRpbmcsXG4gICAgICAgICAgaW5kZXggPSAwLFxuICAgICAgICAgIGludGVycG9sYXRlID0gb3B0aW9ucy5pbnRlcnBvbGF0ZSB8fCByZU5vTWF0Y2gsXG4gICAgICAgICAgc291cmNlID0gXCJfX3AgKz0gJ1wiO1xuXG4gICAgICAvLyBDb21waWxlIHRoZSByZWdleHAgdG8gbWF0Y2ggZWFjaCBkZWxpbWl0ZXIuXG4gICAgICB2YXIgcmVEZWxpbWl0ZXJzID0gUmVnRXhwKFxuICAgICAgICAob3B0aW9ucy5lc2NhcGUgfHwgcmVOb01hdGNoKS5zb3VyY2UgKyAnfCcgK1xuICAgICAgICBpbnRlcnBvbGF0ZS5zb3VyY2UgKyAnfCcgK1xuICAgICAgICAoaW50ZXJwb2xhdGUgPT09IHJlSW50ZXJwb2xhdGUgPyByZUVzVGVtcGxhdGUgOiByZU5vTWF0Y2gpLnNvdXJjZSArICd8JyArXG4gICAgICAgIChvcHRpb25zLmV2YWx1YXRlIHx8IHJlTm9NYXRjaCkuc291cmNlICsgJ3wkJ1xuICAgICAgLCAnZycpO1xuXG4gICAgICAvLyBVc2UgYSBzb3VyY2VVUkwgZm9yIGVhc2llciBkZWJ1Z2dpbmcuXG4gICAgICAvLyBUaGUgc291cmNlVVJMIGdldHMgaW5qZWN0ZWQgaW50byB0aGUgc291cmNlIHRoYXQncyBldmFsLWVkLCBzbyBiZSBjYXJlZnVsXG4gICAgICAvLyB0byBub3JtYWxpemUgYWxsIGtpbmRzIG9mIHdoaXRlc3BhY2UsIHNvIGUuZy4gbmV3bGluZXMgKGFuZCB1bmljb2RlIHZlcnNpb25zIG9mIGl0KSBjYW4ndCBzbmVhayBpblxuICAgICAgLy8gYW5kIGVzY2FwZSB0aGUgY29tbWVudCwgdGh1cyBpbmplY3RpbmcgY29kZSB0aGF0IGdldHMgZXZhbGVkLlxuICAgICAgdmFyIHNvdXJjZVVSTCA9ICcvLyMgc291cmNlVVJMPScgK1xuICAgICAgICAoaGFzT3duUHJvcGVydHkuY2FsbChvcHRpb25zLCAnc291cmNlVVJMJylcbiAgICAgICAgICA/IChvcHRpb25zLnNvdXJjZVVSTCArICcnKS5yZXBsYWNlKC9cXHMvZywgJyAnKVxuICAgICAgICAgIDogKCdsb2Rhc2gudGVtcGxhdGVTb3VyY2VzWycgKyAoKyt0ZW1wbGF0ZUNvdW50ZXIpICsgJ10nKVxuICAgICAgICApICsgJ1xcbic7XG5cbiAgICAgIHN0cmluZy5yZXBsYWNlKHJlRGVsaW1pdGVycywgZnVuY3Rpb24obWF0Y2gsIGVzY2FwZVZhbHVlLCBpbnRlcnBvbGF0ZVZhbHVlLCBlc1RlbXBsYXRlVmFsdWUsIGV2YWx1YXRlVmFsdWUsIG9mZnNldCkge1xuICAgICAgICBpbnRlcnBvbGF0ZVZhbHVlIHx8IChpbnRlcnBvbGF0ZVZhbHVlID0gZXNUZW1wbGF0ZVZhbHVlKTtcblxuICAgICAgICAvLyBFc2NhcGUgY2hhcmFjdGVycyB0aGF0IGNhbid0IGJlIGluY2x1ZGVkIGluIHN0cmluZyBsaXRlcmFscy5cbiAgICAgICAgc291cmNlICs9IHN0cmluZy5zbGljZShpbmRleCwgb2Zmc2V0KS5yZXBsYWNlKHJlVW5lc2NhcGVkU3RyaW5nLCBlc2NhcGVTdHJpbmdDaGFyKTtcblxuICAgICAgICAvLyBSZXBsYWNlIGRlbGltaXRlcnMgd2l0aCBzbmlwcGV0cy5cbiAgICAgICAgaWYgKGVzY2FwZVZhbHVlKSB7XG4gICAgICAgICAgaXNFc2NhcGluZyA9IHRydWU7XG4gICAgICAgICAgc291cmNlICs9IFwiJyArXFxuX19lKFwiICsgZXNjYXBlVmFsdWUgKyBcIikgK1xcbidcIjtcbiAgICAgICAgfVxuICAgICAgICBpZiAoZXZhbHVhdGVWYWx1ZSkge1xuICAgICAgICAgIGlzRXZhbHVhdGluZyA9IHRydWU7XG4gICAgICAgICAgc291cmNlICs9IFwiJztcXG5cIiArIGV2YWx1YXRlVmFsdWUgKyBcIjtcXG5fX3AgKz0gJ1wiO1xuICAgICAgICB9XG4gICAgICAgIGlmIChpbnRlcnBvbGF0ZVZhbHVlKSB7XG4gICAgICAgICAgc291cmNlICs9IFwiJyArXFxuKChfX3QgPSAoXCIgKyBpbnRlcnBvbGF0ZVZhbHVlICsgXCIpKSA9PSBudWxsID8gJycgOiBfX3QpICtcXG4nXCI7XG4gICAgICAgIH1cbiAgICAgICAgaW5kZXggPSBvZmZzZXQgKyBtYXRjaC5sZW5ndGg7XG5cbiAgICAgICAgLy8gVGhlIEpTIGVuZ2luZSBlbWJlZGRlZCBpbiBBZG9iZSBwcm9kdWN0cyBuZWVkcyBgbWF0Y2hgIHJldHVybmVkIGluXG4gICAgICAgIC8vIG9yZGVyIHRvIHByb2R1Y2UgdGhlIGNvcnJlY3QgYG9mZnNldGAgdmFsdWUuXG4gICAgICAgIHJldHVybiBtYXRjaDtcbiAgICAgIH0pO1xuXG4gICAgICBzb3VyY2UgKz0gXCInO1xcblwiO1xuXG4gICAgICAvLyBJZiBgdmFyaWFibGVgIGlzIG5vdCBzcGVjaWZpZWQgd3JhcCBhIHdpdGgtc3RhdGVtZW50IGFyb3VuZCB0aGUgZ2VuZXJhdGVkXG4gICAgICAvLyBjb2RlIHRvIGFkZCB0aGUgZGF0YSBvYmplY3QgdG8gdGhlIHRvcCBvZiB0aGUgc2NvcGUgY2hhaW4uXG4gICAgICB2YXIgdmFyaWFibGUgPSBoYXNPd25Qcm9wZXJ0eS5jYWxsKG9wdGlvbnMsICd2YXJpYWJsZScpICYmIG9wdGlvbnMudmFyaWFibGU7XG4gICAgICBpZiAoIXZhcmlhYmxlKSB7XG4gICAgICAgIHNvdXJjZSA9ICd3aXRoIChvYmopIHtcXG4nICsgc291cmNlICsgJ1xcbn1cXG4nO1xuICAgICAgfVxuICAgICAgLy8gVGhyb3cgYW4gZXJyb3IgaWYgYSBmb3JiaWRkZW4gY2hhcmFjdGVyIHdhcyBmb3VuZCBpbiBgdmFyaWFibGVgLCB0byBwcmV2ZW50XG4gICAgICAvLyBwb3RlbnRpYWwgY29tbWFuZCBpbmplY3Rpb24gYXR0YWNrcy5cbiAgICAgIGVsc2UgaWYgKHJlRm9yYmlkZGVuSWRlbnRpZmllckNoYXJzLnRlc3QodmFyaWFibGUpKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihJTlZBTElEX1RFTVBMX1ZBUl9FUlJPUl9URVhUKTtcbiAgICAgIH1cblxuICAgICAgLy8gQ2xlYW51cCBjb2RlIGJ5IHN0cmlwcGluZyBlbXB0eSBzdHJpbmdzLlxuICAgICAgc291cmNlID0gKGlzRXZhbHVhdGluZyA/IHNvdXJjZS5yZXBsYWNlKHJlRW1wdHlTdHJpbmdMZWFkaW5nLCAnJykgOiBzb3VyY2UpXG4gICAgICAgIC5yZXBsYWNlKHJlRW1wdHlTdHJpbmdNaWRkbGUsICckMScpXG4gICAgICAgIC5yZXBsYWNlKHJlRW1wdHlTdHJpbmdUcmFpbGluZywgJyQxOycpO1xuXG4gICAgICAvLyBGcmFtZSBjb2RlIGFzIHRoZSBmdW5jdGlvbiBib2R5LlxuICAgICAgc291cmNlID0gJ2Z1bmN0aW9uKCcgKyAodmFyaWFibGUgfHwgJ29iaicpICsgJykge1xcbicgK1xuICAgICAgICAodmFyaWFibGVcbiAgICAgICAgICA/ICcnXG4gICAgICAgICAgOiAnb2JqIHx8IChvYmogPSB7fSk7XFxuJ1xuICAgICAgICApICtcbiAgICAgICAgXCJ2YXIgX190LCBfX3AgPSAnJ1wiICtcbiAgICAgICAgKGlzRXNjYXBpbmdcbiAgICAgICAgICAgPyAnLCBfX2UgPSBfLmVzY2FwZSdcbiAgICAgICAgICAgOiAnJ1xuICAgICAgICApICtcbiAgICAgICAgKGlzRXZhbHVhdGluZ1xuICAgICAgICAgID8gJywgX19qID0gQXJyYXkucHJvdG90eXBlLmpvaW47XFxuJyArXG4gICAgICAgICAgICBcImZ1bmN0aW9uIHByaW50KCkgeyBfX3AgKz0gX19qLmNhbGwoYXJndW1lbnRzLCAnJykgfVxcblwiXG4gICAgICAgICAgOiAnO1xcbidcbiAgICAgICAgKSArXG4gICAgICAgIHNvdXJjZSArXG4gICAgICAgICdyZXR1cm4gX19wXFxufSc7XG5cbiAgICAgIHZhciByZXN1bHQgPSBhdHRlbXB0KGZ1bmN0aW9uKCkge1xuICAgICAgICByZXR1cm4gRnVuY3Rpb24oaW1wb3J0c0tleXMsIHNvdXJjZVVSTCArICdyZXR1cm4gJyArIHNvdXJjZSlcbiAgICAgICAgICAuYXBwbHkodW5kZWZpbmVkLCBpbXBvcnRzVmFsdWVzKTtcbiAgICAgIH0pO1xuXG4gICAgICAvLyBQcm92aWRlIHRoZSBjb21waWxlZCBmdW5jdGlvbidzIHNvdXJjZSBieSBpdHMgYHRvU3RyaW5nYCBtZXRob2Qgb3JcbiAgICAgIC8vIHRoZSBgc291cmNlYCBwcm9wZXJ0eSBhcyBhIGNvbnZlbmllbmNlIGZvciBpbmxpbmluZyBjb21waWxlZCB0ZW1wbGF0ZXMuXG4gICAgICByZXN1bHQuc291cmNlID0gc291cmNlO1xuICAgICAgaWYgKGlzRXJyb3IocmVzdWx0KSkge1xuICAgICAgICB0aHJvdyByZXN1bHQ7XG4gICAgICB9XG4gICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENvbnZlcnRzIGBzdHJpbmdgLCBhcyBhIHdob2xlLCB0byBsb3dlciBjYXNlIGp1c3QgbGlrZVxuICAgICAqIFtTdHJpbmcjdG9Mb3dlckNhc2VdKGh0dHBzOi8vbWRuLmlvL3RvTG93ZXJDYXNlKS5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjAuMFxuICAgICAqIEBjYXRlZ29yeSBTdHJpbmdcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gW3N0cmluZz0nJ10gVGhlIHN0cmluZyB0byBjb252ZXJ0LlxuICAgICAqIEByZXR1cm5zIHtzdHJpbmd9IFJldHVybnMgdGhlIGxvd2VyIGNhc2VkIHN0cmluZy5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy50b0xvd2VyKCctLUZvby1CYXItLScpO1xuICAgICAqIC8vID0+ICctLWZvby1iYXItLSdcbiAgICAgKlxuICAgICAqIF8udG9Mb3dlcignZm9vQmFyJyk7XG4gICAgICogLy8gPT4gJ2Zvb2JhcidcbiAgICAgKlxuICAgICAqIF8udG9Mb3dlcignX19GT09fQkFSX18nKTtcbiAgICAgKiAvLyA9PiAnX19mb29fYmFyX18nXG4gICAgICovXG4gICAgZnVuY3Rpb24gdG9Mb3dlcih2YWx1ZSkge1xuICAgICAgcmV0dXJuIHRvU3RyaW5nKHZhbHVlKS50b0xvd2VyQ2FzZSgpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENvbnZlcnRzIGBzdHJpbmdgLCBhcyBhIHdob2xlLCB0byB1cHBlciBjYXNlIGp1c3QgbGlrZVxuICAgICAqIFtTdHJpbmcjdG9VcHBlckNhc2VdKGh0dHBzOi8vbWRuLmlvL3RvVXBwZXJDYXNlKS5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjAuMFxuICAgICAqIEBjYXRlZ29yeSBTdHJpbmdcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gW3N0cmluZz0nJ10gVGhlIHN0cmluZyB0byBjb252ZXJ0LlxuICAgICAqIEByZXR1cm5zIHtzdHJpbmd9IFJldHVybnMgdGhlIHVwcGVyIGNhc2VkIHN0cmluZy5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy50b1VwcGVyKCctLWZvby1iYXItLScpO1xuICAgICAqIC8vID0+ICctLUZPTy1CQVItLSdcbiAgICAgKlxuICAgICAqIF8udG9VcHBlcignZm9vQmFyJyk7XG4gICAgICogLy8gPT4gJ0ZPT0JBUidcbiAgICAgKlxuICAgICAqIF8udG9VcHBlcignX19mb29fYmFyX18nKTtcbiAgICAgKiAvLyA9PiAnX19GT09fQkFSX18nXG4gICAgICovXG4gICAgZnVuY3Rpb24gdG9VcHBlcih2YWx1ZSkge1xuICAgICAgcmV0dXJuIHRvU3RyaW5nKHZhbHVlKS50b1VwcGVyQ2FzZSgpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFJlbW92ZXMgbGVhZGluZyBhbmQgdHJhaWxpbmcgd2hpdGVzcGFjZSBvciBzcGVjaWZpZWQgY2hhcmFjdGVycyBmcm9tIGBzdHJpbmdgLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDMuMC4wXG4gICAgICogQGNhdGVnb3J5IFN0cmluZ1xuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBbc3RyaW5nPScnXSBUaGUgc3RyaW5nIHRvIHRyaW0uXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IFtjaGFycz13aGl0ZXNwYWNlXSBUaGUgY2hhcmFjdGVycyB0byB0cmltLlxuICAgICAqIEBwYXJhbS0ge09iamVjdH0gW2d1YXJkXSBFbmFibGVzIHVzZSBhcyBhbiBpdGVyYXRlZSBmb3IgbWV0aG9kcyBsaWtlIGBfLm1hcGAuXG4gICAgICogQHJldHVybnMge3N0cmluZ30gUmV0dXJucyB0aGUgdHJpbW1lZCBzdHJpbmcuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8udHJpbSgnICBhYmMgICcpO1xuICAgICAqIC8vID0+ICdhYmMnXG4gICAgICpcbiAgICAgKiBfLnRyaW0oJy1fLWFiYy1fLScsICdfLScpO1xuICAgICAqIC8vID0+ICdhYmMnXG4gICAgICpcbiAgICAgKiBfLm1hcChbJyAgZm9vICAnLCAnICBiYXIgICddLCBfLnRyaW0pO1xuICAgICAqIC8vID0+IFsnZm9vJywgJ2JhciddXG4gICAgICovXG4gICAgZnVuY3Rpb24gdHJpbShzdHJpbmcsIGNoYXJzLCBndWFyZCkge1xuICAgICAgc3RyaW5nID0gdG9TdHJpbmcoc3RyaW5nKTtcbiAgICAgIGlmIChzdHJpbmcgJiYgKGd1YXJkIHx8IGNoYXJzID09PSB1bmRlZmluZWQpKSB7XG4gICAgICAgIHJldHVybiBiYXNlVHJpbShzdHJpbmcpO1xuICAgICAgfVxuICAgICAgaWYgKCFzdHJpbmcgfHwgIShjaGFycyA9IGJhc2VUb1N0cmluZyhjaGFycykpKSB7XG4gICAgICAgIHJldHVybiBzdHJpbmc7XG4gICAgICB9XG4gICAgICB2YXIgc3RyU3ltYm9scyA9IHN0cmluZ1RvQXJyYXkoc3RyaW5nKSxcbiAgICAgICAgICBjaHJTeW1ib2xzID0gc3RyaW5nVG9BcnJheShjaGFycyksXG4gICAgICAgICAgc3RhcnQgPSBjaGFyc1N0YXJ0SW5kZXgoc3RyU3ltYm9scywgY2hyU3ltYm9scyksXG4gICAgICAgICAgZW5kID0gY2hhcnNFbmRJbmRleChzdHJTeW1ib2xzLCBjaHJTeW1ib2xzKSArIDE7XG5cbiAgICAgIHJldHVybiBjYXN0U2xpY2Uoc3RyU3ltYm9scywgc3RhcnQsIGVuZCkuam9pbignJyk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogUmVtb3ZlcyB0cmFpbGluZyB3aGl0ZXNwYWNlIG9yIHNwZWNpZmllZCBjaGFyYWN0ZXJzIGZyb20gYHN0cmluZ2AuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgU3RyaW5nXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IFtzdHJpbmc9JyddIFRoZSBzdHJpbmcgdG8gdHJpbS5cbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gW2NoYXJzPXdoaXRlc3BhY2VdIFRoZSBjaGFyYWN0ZXJzIHRvIHRyaW0uXG4gICAgICogQHBhcmFtLSB7T2JqZWN0fSBbZ3VhcmRdIEVuYWJsZXMgdXNlIGFzIGFuIGl0ZXJhdGVlIGZvciBtZXRob2RzIGxpa2UgYF8ubWFwYC5cbiAgICAgKiBAcmV0dXJucyB7c3RyaW5nfSBSZXR1cm5zIHRoZSB0cmltbWVkIHN0cmluZy5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy50cmltRW5kKCcgIGFiYyAgJyk7XG4gICAgICogLy8gPT4gJyAgYWJjJ1xuICAgICAqXG4gICAgICogXy50cmltRW5kKCctXy1hYmMtXy0nLCAnXy0nKTtcbiAgICAgKiAvLyA9PiAnLV8tYWJjJ1xuICAgICAqL1xuICAgIGZ1bmN0aW9uIHRyaW1FbmQoc3RyaW5nLCBjaGFycywgZ3VhcmQpIHtcbiAgICAgIHN0cmluZyA9IHRvU3RyaW5nKHN0cmluZyk7XG4gICAgICBpZiAoc3RyaW5nICYmIChndWFyZCB8fCBjaGFycyA9PT0gdW5kZWZpbmVkKSkge1xuICAgICAgICByZXR1cm4gc3RyaW5nLnNsaWNlKDAsIHRyaW1tZWRFbmRJbmRleChzdHJpbmcpICsgMSk7XG4gICAgICB9XG4gICAgICBpZiAoIXN0cmluZyB8fCAhKGNoYXJzID0gYmFzZVRvU3RyaW5nKGNoYXJzKSkpIHtcbiAgICAgICAgcmV0dXJuIHN0cmluZztcbiAgICAgIH1cbiAgICAgIHZhciBzdHJTeW1ib2xzID0gc3RyaW5nVG9BcnJheShzdHJpbmcpLFxuICAgICAgICAgIGVuZCA9IGNoYXJzRW5kSW5kZXgoc3RyU3ltYm9scywgc3RyaW5nVG9BcnJheShjaGFycykpICsgMTtcblxuICAgICAgcmV0dXJuIGNhc3RTbGljZShzdHJTeW1ib2xzLCAwLCBlbmQpLmpvaW4oJycpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFJlbW92ZXMgbGVhZGluZyB3aGl0ZXNwYWNlIG9yIHNwZWNpZmllZCBjaGFyYWN0ZXJzIGZyb20gYHN0cmluZ2AuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgU3RyaW5nXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IFtzdHJpbmc9JyddIFRoZSBzdHJpbmcgdG8gdHJpbS5cbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gW2NoYXJzPXdoaXRlc3BhY2VdIFRoZSBjaGFyYWN0ZXJzIHRvIHRyaW0uXG4gICAgICogQHBhcmFtLSB7T2JqZWN0fSBbZ3VhcmRdIEVuYWJsZXMgdXNlIGFzIGFuIGl0ZXJhdGVlIGZvciBtZXRob2RzIGxpa2UgYF8ubWFwYC5cbiAgICAgKiBAcmV0dXJucyB7c3RyaW5nfSBSZXR1cm5zIHRoZSB0cmltbWVkIHN0cmluZy5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy50cmltU3RhcnQoJyAgYWJjICAnKTtcbiAgICAgKiAvLyA9PiAnYWJjICAnXG4gICAgICpcbiAgICAgKiBfLnRyaW1TdGFydCgnLV8tYWJjLV8tJywgJ18tJyk7XG4gICAgICogLy8gPT4gJ2FiYy1fLSdcbiAgICAgKi9cbiAgICBmdW5jdGlvbiB0cmltU3RhcnQoc3RyaW5nLCBjaGFycywgZ3VhcmQpIHtcbiAgICAgIHN0cmluZyA9IHRvU3RyaW5nKHN0cmluZyk7XG4gICAgICBpZiAoc3RyaW5nICYmIChndWFyZCB8fCBjaGFycyA9PT0gdW5kZWZpbmVkKSkge1xuICAgICAgICByZXR1cm4gc3RyaW5nLnJlcGxhY2UocmVUcmltU3RhcnQsICcnKTtcbiAgICAgIH1cbiAgICAgIGlmICghc3RyaW5nIHx8ICEoY2hhcnMgPSBiYXNlVG9TdHJpbmcoY2hhcnMpKSkge1xuICAgICAgICByZXR1cm4gc3RyaW5nO1xuICAgICAgfVxuICAgICAgdmFyIHN0clN5bWJvbHMgPSBzdHJpbmdUb0FycmF5KHN0cmluZyksXG4gICAgICAgICAgc3RhcnQgPSBjaGFyc1N0YXJ0SW5kZXgoc3RyU3ltYm9scywgc3RyaW5nVG9BcnJheShjaGFycykpO1xuXG4gICAgICByZXR1cm4gY2FzdFNsaWNlKHN0clN5bWJvbHMsIHN0YXJ0KS5qb2luKCcnKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUcnVuY2F0ZXMgYHN0cmluZ2AgaWYgaXQncyBsb25nZXIgdGhhbiB0aGUgZ2l2ZW4gbWF4aW11bSBzdHJpbmcgbGVuZ3RoLlxuICAgICAqIFRoZSBsYXN0IGNoYXJhY3RlcnMgb2YgdGhlIHRydW5jYXRlZCBzdHJpbmcgYXJlIHJlcGxhY2VkIHdpdGggdGhlIG9taXNzaW9uXG4gICAgICogc3RyaW5nIHdoaWNoIGRlZmF1bHRzIHRvIFwiLi4uXCIuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgU3RyaW5nXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IFtzdHJpbmc9JyddIFRoZSBzdHJpbmcgdG8gdHJ1bmNhdGUuXG4gICAgICogQHBhcmFtIHtPYmplY3R9IFtvcHRpb25zPXt9XSBUaGUgb3B0aW9ucyBvYmplY3QuXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IFtvcHRpb25zLmxlbmd0aD0zMF0gVGhlIG1heGltdW0gc3RyaW5nIGxlbmd0aC5cbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gW29wdGlvbnMub21pc3Npb249Jy4uLiddIFRoZSBzdHJpbmcgdG8gaW5kaWNhdGUgdGV4dCBpcyBvbWl0dGVkLlxuICAgICAqIEBwYXJhbSB7UmVnRXhwfHN0cmluZ30gW29wdGlvbnMuc2VwYXJhdG9yXSBUaGUgc2VwYXJhdG9yIHBhdHRlcm4gdG8gdHJ1bmNhdGUgdG8uXG4gICAgICogQHJldHVybnMge3N0cmluZ30gUmV0dXJucyB0aGUgdHJ1bmNhdGVkIHN0cmluZy5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy50cnVuY2F0ZSgnaGktZGlkZGx5LWhvIHRoZXJlLCBuZWlnaGJvcmlubycpO1xuICAgICAqIC8vID0+ICdoaS1kaWRkbHktaG8gdGhlcmUsIG5laWdoYm8uLi4nXG4gICAgICpcbiAgICAgKiBfLnRydW5jYXRlKCdoaS1kaWRkbHktaG8gdGhlcmUsIG5laWdoYm9yaW5vJywge1xuICAgICAqICAgJ2xlbmd0aCc6IDI0LFxuICAgICAqICAgJ3NlcGFyYXRvcic6ICcgJ1xuICAgICAqIH0pO1xuICAgICAqIC8vID0+ICdoaS1kaWRkbHktaG8gdGhlcmUsLi4uJ1xuICAgICAqXG4gICAgICogXy50cnVuY2F0ZSgnaGktZGlkZGx5LWhvIHRoZXJlLCBuZWlnaGJvcmlubycsIHtcbiAgICAgKiAgICdsZW5ndGgnOiAyNCxcbiAgICAgKiAgICdzZXBhcmF0b3InOiAvLD8gKy9cbiAgICAgKiB9KTtcbiAgICAgKiAvLyA9PiAnaGktZGlkZGx5LWhvIHRoZXJlLi4uJ1xuICAgICAqXG4gICAgICogXy50cnVuY2F0ZSgnaGktZGlkZGx5LWhvIHRoZXJlLCBuZWlnaGJvcmlubycsIHtcbiAgICAgKiAgICdvbWlzc2lvbic6ICcgWy4uLl0nXG4gICAgICogfSk7XG4gICAgICogLy8gPT4gJ2hpLWRpZGRseS1obyB0aGVyZSwgbmVpZyBbLi4uXSdcbiAgICAgKi9cbiAgICBmdW5jdGlvbiB0cnVuY2F0ZShzdHJpbmcsIG9wdGlvbnMpIHtcbiAgICAgIHZhciBsZW5ndGggPSBERUZBVUxUX1RSVU5DX0xFTkdUSCxcbiAgICAgICAgICBvbWlzc2lvbiA9IERFRkFVTFRfVFJVTkNfT01JU1NJT047XG5cbiAgICAgIGlmIChpc09iamVjdChvcHRpb25zKSkge1xuICAgICAgICB2YXIgc2VwYXJhdG9yID0gJ3NlcGFyYXRvcicgaW4gb3B0aW9ucyA/IG9wdGlvbnMuc2VwYXJhdG9yIDogc2VwYXJhdG9yO1xuICAgICAgICBsZW5ndGggPSAnbGVuZ3RoJyBpbiBvcHRpb25zID8gdG9JbnRlZ2VyKG9wdGlvbnMubGVuZ3RoKSA6IGxlbmd0aDtcbiAgICAgICAgb21pc3Npb24gPSAnb21pc3Npb24nIGluIG9wdGlvbnMgPyBiYXNlVG9TdHJpbmcob3B0aW9ucy5vbWlzc2lvbikgOiBvbWlzc2lvbjtcbiAgICAgIH1cbiAgICAgIHN0cmluZyA9IHRvU3RyaW5nKHN0cmluZyk7XG5cbiAgICAgIHZhciBzdHJMZW5ndGggPSBzdHJpbmcubGVuZ3RoO1xuICAgICAgaWYgKGhhc1VuaWNvZGUoc3RyaW5nKSkge1xuICAgICAgICB2YXIgc3RyU3ltYm9scyA9IHN0cmluZ1RvQXJyYXkoc3RyaW5nKTtcbiAgICAgICAgc3RyTGVuZ3RoID0gc3RyU3ltYm9scy5sZW5ndGg7XG4gICAgICB9XG4gICAgICBpZiAobGVuZ3RoID49IHN0ckxlbmd0aCkge1xuICAgICAgICByZXR1cm4gc3RyaW5nO1xuICAgICAgfVxuICAgICAgdmFyIGVuZCA9IGxlbmd0aCAtIHN0cmluZ1NpemUob21pc3Npb24pO1xuICAgICAgaWYgKGVuZCA8IDEpIHtcbiAgICAgICAgcmV0dXJuIG9taXNzaW9uO1xuICAgICAgfVxuICAgICAgdmFyIHJlc3VsdCA9IHN0clN5bWJvbHNcbiAgICAgICAgPyBjYXN0U2xpY2Uoc3RyU3ltYm9scywgMCwgZW5kKS5qb2luKCcnKVxuICAgICAgICA6IHN0cmluZy5zbGljZSgwLCBlbmQpO1xuXG4gICAgICBpZiAoc2VwYXJhdG9yID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgcmV0dXJuIHJlc3VsdCArIG9taXNzaW9uO1xuICAgICAgfVxuICAgICAgaWYgKHN0clN5bWJvbHMpIHtcbiAgICAgICAgZW5kICs9IChyZXN1bHQubGVuZ3RoIC0gZW5kKTtcbiAgICAgIH1cbiAgICAgIGlmIChpc1JlZ0V4cChzZXBhcmF0b3IpKSB7XG4gICAgICAgIGlmIChzdHJpbmcuc2xpY2UoZW5kKS5zZWFyY2goc2VwYXJhdG9yKSkge1xuICAgICAgICAgIHZhciBtYXRjaCxcbiAgICAgICAgICAgICAgc3Vic3RyaW5nID0gcmVzdWx0O1xuXG4gICAgICAgICAgaWYgKCFzZXBhcmF0b3IuZ2xvYmFsKSB7XG4gICAgICAgICAgICBzZXBhcmF0b3IgPSBSZWdFeHAoc2VwYXJhdG9yLnNvdXJjZSwgdG9TdHJpbmcocmVGbGFncy5leGVjKHNlcGFyYXRvcikpICsgJ2cnKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgc2VwYXJhdG9yLmxhc3RJbmRleCA9IDA7XG4gICAgICAgICAgd2hpbGUgKChtYXRjaCA9IHNlcGFyYXRvci5leGVjKHN1YnN0cmluZykpKSB7XG4gICAgICAgICAgICB2YXIgbmV3RW5kID0gbWF0Y2guaW5kZXg7XG4gICAgICAgICAgfVxuICAgICAgICAgIHJlc3VsdCA9IHJlc3VsdC5zbGljZSgwLCBuZXdFbmQgPT09IHVuZGVmaW5lZCA/IGVuZCA6IG5ld0VuZCk7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSBpZiAoc3RyaW5nLmluZGV4T2YoYmFzZVRvU3RyaW5nKHNlcGFyYXRvciksIGVuZCkgIT0gZW5kKSB7XG4gICAgICAgIHZhciBpbmRleCA9IHJlc3VsdC5sYXN0SW5kZXhPZihzZXBhcmF0b3IpO1xuICAgICAgICBpZiAoaW5kZXggPiAtMSkge1xuICAgICAgICAgIHJlc3VsdCA9IHJlc3VsdC5zbGljZSgwLCBpbmRleCk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHJldHVybiByZXN1bHQgKyBvbWlzc2lvbjtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGUgaW52ZXJzZSBvZiBgXy5lc2NhcGVgOyB0aGlzIG1ldGhvZCBjb252ZXJ0cyB0aGUgSFRNTCBlbnRpdGllc1xuICAgICAqIGAmYW1wO2AsIGAmbHQ7YCwgYCZndDtgLCBgJnF1b3Q7YCwgYW5kIGAmIzM5O2AgaW4gYHN0cmluZ2AgdG9cbiAgICAgKiB0aGVpciBjb3JyZXNwb25kaW5nIGNoYXJhY3RlcnMuXG4gICAgICpcbiAgICAgKiAqKk5vdGU6KiogTm8gb3RoZXIgSFRNTCBlbnRpdGllcyBhcmUgdW5lc2NhcGVkLiBUbyB1bmVzY2FwZSBhZGRpdGlvbmFsXG4gICAgICogSFRNTCBlbnRpdGllcyB1c2UgYSB0aGlyZC1wYXJ0eSBsaWJyYXJ5IGxpa2UgW19oZV9dKGh0dHBzOi8vbXRocy5iZS9oZSkuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMC42LjBcbiAgICAgKiBAY2F0ZWdvcnkgU3RyaW5nXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IFtzdHJpbmc9JyddIFRoZSBzdHJpbmcgdG8gdW5lc2NhcGUuXG4gICAgICogQHJldHVybnMge3N0cmluZ30gUmV0dXJucyB0aGUgdW5lc2NhcGVkIHN0cmluZy5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy51bmVzY2FwZSgnZnJlZCwgYmFybmV5LCAmYW1wOyBwZWJibGVzJyk7XG4gICAgICogLy8gPT4gJ2ZyZWQsIGJhcm5leSwgJiBwZWJibGVzJ1xuICAgICAqL1xuICAgIGZ1bmN0aW9uIHVuZXNjYXBlKHN0cmluZykge1xuICAgICAgc3RyaW5nID0gdG9TdHJpbmcoc3RyaW5nKTtcbiAgICAgIHJldHVybiAoc3RyaW5nICYmIHJlSGFzRXNjYXBlZEh0bWwudGVzdChzdHJpbmcpKVxuICAgICAgICA/IHN0cmluZy5yZXBsYWNlKHJlRXNjYXBlZEh0bWwsIHVuZXNjYXBlSHRtbENoYXIpXG4gICAgICAgIDogc3RyaW5nO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENvbnZlcnRzIGBzdHJpbmdgLCBhcyBzcGFjZSBzZXBhcmF0ZWQgd29yZHMsIHRvIHVwcGVyIGNhc2UuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgU3RyaW5nXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IFtzdHJpbmc9JyddIFRoZSBzdHJpbmcgdG8gY29udmVydC5cbiAgICAgKiBAcmV0dXJucyB7c3RyaW5nfSBSZXR1cm5zIHRoZSB1cHBlciBjYXNlZCBzdHJpbmcuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8udXBwZXJDYXNlKCctLWZvby1iYXInKTtcbiAgICAgKiAvLyA9PiAnRk9PIEJBUidcbiAgICAgKlxuICAgICAqIF8udXBwZXJDYXNlKCdmb29CYXInKTtcbiAgICAgKiAvLyA9PiAnRk9PIEJBUidcbiAgICAgKlxuICAgICAqIF8udXBwZXJDYXNlKCdfX2Zvb19iYXJfXycpO1xuICAgICAqIC8vID0+ICdGT08gQkFSJ1xuICAgICAqL1xuICAgIHZhciB1cHBlckNhc2UgPSBjcmVhdGVDb21wb3VuZGVyKGZ1bmN0aW9uKHJlc3VsdCwgd29yZCwgaW5kZXgpIHtcbiAgICAgIHJldHVybiByZXN1bHQgKyAoaW5kZXggPyAnICcgOiAnJykgKyB3b3JkLnRvVXBwZXJDYXNlKCk7XG4gICAgfSk7XG5cbiAgICAvKipcbiAgICAgKiBDb252ZXJ0cyB0aGUgZmlyc3QgY2hhcmFjdGVyIG9mIGBzdHJpbmdgIHRvIHVwcGVyIGNhc2UuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgU3RyaW5nXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IFtzdHJpbmc9JyddIFRoZSBzdHJpbmcgdG8gY29udmVydC5cbiAgICAgKiBAcmV0dXJucyB7c3RyaW5nfSBSZXR1cm5zIHRoZSBjb252ZXJ0ZWQgc3RyaW5nLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLnVwcGVyRmlyc3QoJ2ZyZWQnKTtcbiAgICAgKiAvLyA9PiAnRnJlZCdcbiAgICAgKlxuICAgICAqIF8udXBwZXJGaXJzdCgnRlJFRCcpO1xuICAgICAqIC8vID0+ICdGUkVEJ1xuICAgICAqL1xuICAgIHZhciB1cHBlckZpcnN0ID0gY3JlYXRlQ2FzZUZpcnN0KCd0b1VwcGVyQ2FzZScpO1xuXG4gICAgLyoqXG4gICAgICogU3BsaXRzIGBzdHJpbmdgIGludG8gYW4gYXJyYXkgb2YgaXRzIHdvcmRzLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDMuMC4wXG4gICAgICogQGNhdGVnb3J5IFN0cmluZ1xuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBbc3RyaW5nPScnXSBUaGUgc3RyaW5nIHRvIGluc3BlY3QuXG4gICAgICogQHBhcmFtIHtSZWdFeHB8c3RyaW5nfSBbcGF0dGVybl0gVGhlIHBhdHRlcm4gdG8gbWF0Y2ggd29yZHMuXG4gICAgICogQHBhcmFtLSB7T2JqZWN0fSBbZ3VhcmRdIEVuYWJsZXMgdXNlIGFzIGFuIGl0ZXJhdGVlIGZvciBtZXRob2RzIGxpa2UgYF8ubWFwYC5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIHdvcmRzIG9mIGBzdHJpbmdgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLndvcmRzKCdmcmVkLCBiYXJuZXksICYgcGViYmxlcycpO1xuICAgICAqIC8vID0+IFsnZnJlZCcsICdiYXJuZXknLCAncGViYmxlcyddXG4gICAgICpcbiAgICAgKiBfLndvcmRzKCdmcmVkLCBiYXJuZXksICYgcGViYmxlcycsIC9bXiwgXSsvZyk7XG4gICAgICogLy8gPT4gWydmcmVkJywgJ2Jhcm5leScsICcmJywgJ3BlYmJsZXMnXVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHdvcmRzKHN0cmluZywgcGF0dGVybiwgZ3VhcmQpIHtcbiAgICAgIHN0cmluZyA9IHRvU3RyaW5nKHN0cmluZyk7XG4gICAgICBwYXR0ZXJuID0gZ3VhcmQgPyB1bmRlZmluZWQgOiBwYXR0ZXJuO1xuXG4gICAgICBpZiAocGF0dGVybiA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIHJldHVybiBoYXNVbmljb2RlV29yZChzdHJpbmcpID8gdW5pY29kZVdvcmRzKHN0cmluZykgOiBhc2NpaVdvcmRzKHN0cmluZyk7XG4gICAgICB9XG4gICAgICByZXR1cm4gc3RyaW5nLm1hdGNoKHBhdHRlcm4pIHx8IFtdO1xuICAgIH1cblxuICAgIC8qLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tKi9cblxuICAgIC8qKlxuICAgICAqIEF0dGVtcHRzIHRvIGludm9rZSBgZnVuY2AsIHJldHVybmluZyBlaXRoZXIgdGhlIHJlc3VsdCBvciB0aGUgY2F1Z2h0IGVycm9yXG4gICAgICogb2JqZWN0LiBBbnkgYWRkaXRpb25hbCBhcmd1bWVudHMgYXJlIHByb3ZpZGVkIHRvIGBmdW5jYCB3aGVuIGl0J3MgaW52b2tlZC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAzLjAuMFxuICAgICAqIEBjYXRlZ29yeSBVdGlsXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gZnVuYyBUaGUgZnVuY3Rpb24gdG8gYXR0ZW1wdC5cbiAgICAgKiBAcGFyYW0gey4uLip9IFthcmdzXSBUaGUgYXJndW1lbnRzIHRvIGludm9rZSBgZnVuY2Agd2l0aC5cbiAgICAgKiBAcmV0dXJucyB7Kn0gUmV0dXJucyB0aGUgYGZ1bmNgIHJlc3VsdCBvciBlcnJvciBvYmplY3QuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIC8vIEF2b2lkIHRocm93aW5nIGVycm9ycyBmb3IgaW52YWxpZCBzZWxlY3RvcnMuXG4gICAgICogdmFyIGVsZW1lbnRzID0gXy5hdHRlbXB0KGZ1bmN0aW9uKHNlbGVjdG9yKSB7XG4gICAgICogICByZXR1cm4gZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbChzZWxlY3Rvcik7XG4gICAgICogfSwgJz5fPicpO1xuICAgICAqXG4gICAgICogaWYgKF8uaXNFcnJvcihlbGVtZW50cykpIHtcbiAgICAgKiAgIGVsZW1lbnRzID0gW107XG4gICAgICogfVxuICAgICAqL1xuICAgIHZhciBhdHRlbXB0ID0gYmFzZVJlc3QoZnVuY3Rpb24oZnVuYywgYXJncykge1xuICAgICAgdHJ5IHtcbiAgICAgICAgcmV0dXJuIGFwcGx5KGZ1bmMsIHVuZGVmaW5lZCwgYXJncyk7XG4gICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgIHJldHVybiBpc0Vycm9yKGUpID8gZSA6IG5ldyBFcnJvcihlKTtcbiAgICAgIH1cbiAgICB9KTtcblxuICAgIC8qKlxuICAgICAqIEJpbmRzIG1ldGhvZHMgb2YgYW4gb2JqZWN0IHRvIHRoZSBvYmplY3QgaXRzZWxmLCBvdmVyd3JpdGluZyB0aGUgZXhpc3RpbmdcbiAgICAgKiBtZXRob2QuXG4gICAgICpcbiAgICAgKiAqKk5vdGU6KiogVGhpcyBtZXRob2QgZG9lc24ndCBzZXQgdGhlIFwibGVuZ3RoXCIgcHJvcGVydHkgb2YgYm91bmQgZnVuY3Rpb25zLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBzaW5jZSAwLjEuMFxuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQGNhdGVnb3J5IFV0aWxcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gYmluZCBhbmQgYXNzaWduIHRoZSBib3VuZCBtZXRob2RzIHRvLlxuICAgICAqIEBwYXJhbSB7Li4uKHN0cmluZ3xzdHJpbmdbXSl9IG1ldGhvZE5hbWVzIFRoZSBvYmplY3QgbWV0aG9kIG5hbWVzIHRvIGJpbmQuXG4gICAgICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyBgb2JqZWN0YC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIHZpZXcgPSB7XG4gICAgICogICAnbGFiZWwnOiAnZG9jcycsXG4gICAgICogICAnY2xpY2snOiBmdW5jdGlvbigpIHtcbiAgICAgKiAgICAgY29uc29sZS5sb2coJ2NsaWNrZWQgJyArIHRoaXMubGFiZWwpO1xuICAgICAqICAgfVxuICAgICAqIH07XG4gICAgICpcbiAgICAgKiBfLmJpbmRBbGwodmlldywgWydjbGljayddKTtcbiAgICAgKiBqUXVlcnkoZWxlbWVudCkub24oJ2NsaWNrJywgdmlldy5jbGljayk7XG4gICAgICogLy8gPT4gTG9ncyAnY2xpY2tlZCBkb2NzJyB3aGVuIGNsaWNrZWQuXG4gICAgICovXG4gICAgdmFyIGJpbmRBbGwgPSBmbGF0UmVzdChmdW5jdGlvbihvYmplY3QsIG1ldGhvZE5hbWVzKSB7XG4gICAgICBhcnJheUVhY2gobWV0aG9kTmFtZXMsIGZ1bmN0aW9uKGtleSkge1xuICAgICAgICBrZXkgPSB0b0tleShrZXkpO1xuICAgICAgICBiYXNlQXNzaWduVmFsdWUob2JqZWN0LCBrZXksIGJpbmQob2JqZWN0W2tleV0sIG9iamVjdCkpO1xuICAgICAgfSk7XG4gICAgICByZXR1cm4gb2JqZWN0O1xuICAgIH0pO1xuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIGZ1bmN0aW9uIHRoYXQgaXRlcmF0ZXMgb3ZlciBgcGFpcnNgIGFuZCBpbnZva2VzIHRoZSBjb3JyZXNwb25kaW5nXG4gICAgICogZnVuY3Rpb24gb2YgdGhlIGZpcnN0IHByZWRpY2F0ZSB0byByZXR1cm4gdHJ1dGh5LiBUaGUgcHJlZGljYXRlLWZ1bmN0aW9uXG4gICAgICogcGFpcnMgYXJlIGludm9rZWQgd2l0aCB0aGUgYHRoaXNgIGJpbmRpbmcgYW5kIGFyZ3VtZW50cyBvZiB0aGUgY3JlYXRlZFxuICAgICAqIGZ1bmN0aW9uLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMC4wXG4gICAgICogQGNhdGVnb3J5IFV0aWxcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBwYWlycyBUaGUgcHJlZGljYXRlLWZ1bmN0aW9uIHBhaXJzLlxuICAgICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IGNvbXBvc2l0ZSBmdW5jdGlvbi5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIGZ1bmMgPSBfLmNvbmQoW1xuICAgICAqICAgW18ubWF0Y2hlcyh7ICdhJzogMSB9KSwgICAgICAgICAgIF8uY29uc3RhbnQoJ21hdGNoZXMgQScpXSxcbiAgICAgKiAgIFtfLmNvbmZvcm1zKHsgJ2InOiBfLmlzTnVtYmVyIH0pLCBfLmNvbnN0YW50KCdtYXRjaGVzIEInKV0sXG4gICAgICogICBbXy5zdHViVHJ1ZSwgICAgICAgICAgICAgICAgICAgICAgXy5jb25zdGFudCgnbm8gbWF0Y2gnKV1cbiAgICAgKiBdKTtcbiAgICAgKlxuICAgICAqIGZ1bmMoeyAnYSc6IDEsICdiJzogMiB9KTtcbiAgICAgKiAvLyA9PiAnbWF0Y2hlcyBBJ1xuICAgICAqXG4gICAgICogZnVuYyh7ICdhJzogMCwgJ2InOiAxIH0pO1xuICAgICAqIC8vID0+ICdtYXRjaGVzIEInXG4gICAgICpcbiAgICAgKiBmdW5jKHsgJ2EnOiAnMScsICdiJzogJzInIH0pO1xuICAgICAqIC8vID0+ICdubyBtYXRjaCdcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBjb25kKHBhaXJzKSB7XG4gICAgICB2YXIgbGVuZ3RoID0gcGFpcnMgPT0gbnVsbCA/IDAgOiBwYWlycy5sZW5ndGgsXG4gICAgICAgICAgdG9JdGVyYXRlZSA9IGdldEl0ZXJhdGVlKCk7XG5cbiAgICAgIHBhaXJzID0gIWxlbmd0aCA/IFtdIDogYXJyYXlNYXAocGFpcnMsIGZ1bmN0aW9uKHBhaXIpIHtcbiAgICAgICAgaWYgKHR5cGVvZiBwYWlyWzFdICE9ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKEZVTkNfRVJST1JfVEVYVCk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIFt0b0l0ZXJhdGVlKHBhaXJbMF0pLCBwYWlyWzFdXTtcbiAgICAgIH0pO1xuXG4gICAgICByZXR1cm4gYmFzZVJlc3QoZnVuY3Rpb24oYXJncykge1xuICAgICAgICB2YXIgaW5kZXggPSAtMTtcbiAgICAgICAgd2hpbGUgKCsraW5kZXggPCBsZW5ndGgpIHtcbiAgICAgICAgICB2YXIgcGFpciA9IHBhaXJzW2luZGV4XTtcbiAgICAgICAgICBpZiAoYXBwbHkocGFpclswXSwgdGhpcywgYXJncykpIHtcbiAgICAgICAgICAgIHJldHVybiBhcHBseShwYWlyWzFdLCB0aGlzLCBhcmdzKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBmdW5jdGlvbiB0aGF0IGludm9rZXMgdGhlIHByZWRpY2F0ZSBwcm9wZXJ0aWVzIG9mIGBzb3VyY2VgIHdpdGhcbiAgICAgKiB0aGUgY29ycmVzcG9uZGluZyBwcm9wZXJ0eSB2YWx1ZXMgb2YgYSBnaXZlbiBvYmplY3QsIHJldHVybmluZyBgdHJ1ZWAgaWZcbiAgICAgKiBhbGwgcHJlZGljYXRlcyByZXR1cm4gdHJ1dGh5LCBlbHNlIGBmYWxzZWAuXG4gICAgICpcbiAgICAgKiAqKk5vdGU6KiogVGhlIGNyZWF0ZWQgZnVuY3Rpb24gaXMgZXF1aXZhbGVudCB0byBgXy5jb25mb3Jtc1RvYCB3aXRoXG4gICAgICogYHNvdXJjZWAgcGFydGlhbGx5IGFwcGxpZWQuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgVXRpbFxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBzb3VyY2UgVGhlIG9iamVjdCBvZiBwcm9wZXJ0eSBwcmVkaWNhdGVzIHRvIGNvbmZvcm0gdG8uXG4gICAgICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgc3BlYyBmdW5jdGlvbi5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIG9iamVjdHMgPSBbXG4gICAgICogICB7ICdhJzogMiwgJ2InOiAxIH0sXG4gICAgICogICB7ICdhJzogMSwgJ2InOiAyIH1cbiAgICAgKiBdO1xuICAgICAqXG4gICAgICogXy5maWx0ZXIob2JqZWN0cywgXy5jb25mb3Jtcyh7ICdiJzogZnVuY3Rpb24obikgeyByZXR1cm4gbiA+IDE7IH0gfSkpO1xuICAgICAqIC8vID0+IFt7ICdhJzogMSwgJ2InOiAyIH1dXG4gICAgICovXG4gICAgZnVuY3Rpb24gY29uZm9ybXMoc291cmNlKSB7XG4gICAgICByZXR1cm4gYmFzZUNvbmZvcm1zKGJhc2VDbG9uZShzb3VyY2UsIENMT05FX0RFRVBfRkxBRykpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBmdW5jdGlvbiB0aGF0IHJldHVybnMgYHZhbHVlYC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAyLjQuMFxuICAgICAqIEBjYXRlZ29yeSBVdGlsXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gcmV0dXJuIGZyb20gdGhlIG5ldyBmdW5jdGlvbi5cbiAgICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyBjb25zdGFudCBmdW5jdGlvbi5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIG9iamVjdHMgPSBfLnRpbWVzKDIsIF8uY29uc3RhbnQoeyAnYSc6IDEgfSkpO1xuICAgICAqXG4gICAgICogY29uc29sZS5sb2cob2JqZWN0cyk7XG4gICAgICogLy8gPT4gW3sgJ2EnOiAxIH0sIHsgJ2EnOiAxIH1dXG4gICAgICpcbiAgICAgKiBjb25zb2xlLmxvZyhvYmplY3RzWzBdID09PSBvYmplY3RzWzFdKTtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICovXG4gICAgZnVuY3Rpb24gY29uc3RhbnQodmFsdWUpIHtcbiAgICAgIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICAgICAgcmV0dXJuIHZhbHVlO1xuICAgICAgfTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDaGVja3MgYHZhbHVlYCB0byBkZXRlcm1pbmUgd2hldGhlciBhIGRlZmF1bHQgdmFsdWUgc2hvdWxkIGJlIHJldHVybmVkIGluXG4gICAgICogaXRzIHBsYWNlLiBUaGUgYGRlZmF1bHRWYWx1ZWAgaXMgcmV0dXJuZWQgaWYgYHZhbHVlYCBpcyBgTmFOYCwgYG51bGxgLFxuICAgICAqIG9yIGB1bmRlZmluZWRgLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMTQuMFxuICAgICAqIEBjYXRlZ29yeSBVdGlsXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gICAgICogQHBhcmFtIHsqfSBkZWZhdWx0VmFsdWUgVGhlIGRlZmF1bHQgdmFsdWUuXG4gICAgICogQHJldHVybnMgeyp9IFJldHVybnMgdGhlIHJlc29sdmVkIHZhbHVlLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLmRlZmF1bHRUbygxLCAxMCk7XG4gICAgICogLy8gPT4gMVxuICAgICAqXG4gICAgICogXy5kZWZhdWx0VG8odW5kZWZpbmVkLCAxMCk7XG4gICAgICogLy8gPT4gMTBcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBkZWZhdWx0VG8odmFsdWUsIGRlZmF1bHRWYWx1ZSkge1xuICAgICAgcmV0dXJuICh2YWx1ZSA9PSBudWxsIHx8IHZhbHVlICE9PSB2YWx1ZSkgPyBkZWZhdWx0VmFsdWUgOiB2YWx1ZTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgZnVuY3Rpb24gdGhhdCByZXR1cm5zIHRoZSByZXN1bHQgb2YgaW52b2tpbmcgdGhlIGdpdmVuIGZ1bmN0aW9uc1xuICAgICAqIHdpdGggdGhlIGB0aGlzYCBiaW5kaW5nIG9mIHRoZSBjcmVhdGVkIGZ1bmN0aW9uLCB3aGVyZSBlYWNoIHN1Y2Nlc3NpdmVcbiAgICAgKiBpbnZvY2F0aW9uIGlzIHN1cHBsaWVkIHRoZSByZXR1cm4gdmFsdWUgb2YgdGhlIHByZXZpb3VzLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDMuMC4wXG4gICAgICogQGNhdGVnb3J5IFV0aWxcbiAgICAgKiBAcGFyYW0gey4uLihGdW5jdGlvbnxGdW5jdGlvbltdKX0gW2Z1bmNzXSBUaGUgZnVuY3Rpb25zIHRvIGludm9rZS5cbiAgICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyBjb21wb3NpdGUgZnVuY3Rpb24uXG4gICAgICogQHNlZSBfLmZsb3dSaWdodFxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBmdW5jdGlvbiBzcXVhcmUobikge1xuICAgICAqICAgcmV0dXJuIG4gKiBuO1xuICAgICAqIH1cbiAgICAgKlxuICAgICAqIHZhciBhZGRTcXVhcmUgPSBfLmZsb3coW18uYWRkLCBzcXVhcmVdKTtcbiAgICAgKiBhZGRTcXVhcmUoMSwgMik7XG4gICAgICogLy8gPT4gOVxuICAgICAqL1xuICAgIHZhciBmbG93ID0gY3JlYXRlRmxvdygpO1xuXG4gICAgLyoqXG4gICAgICogVGhpcyBtZXRob2QgaXMgbGlrZSBgXy5mbG93YCBleGNlcHQgdGhhdCBpdCBjcmVhdGVzIGEgZnVuY3Rpb24gdGhhdFxuICAgICAqIGludm9rZXMgdGhlIGdpdmVuIGZ1bmN0aW9ucyBmcm9tIHJpZ2h0IHRvIGxlZnQuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQHNpbmNlIDMuMC4wXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAY2F0ZWdvcnkgVXRpbFxuICAgICAqIEBwYXJhbSB7Li4uKEZ1bmN0aW9ufEZ1bmN0aW9uW10pfSBbZnVuY3NdIFRoZSBmdW5jdGlvbnMgdG8gaW52b2tlLlxuICAgICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IGNvbXBvc2l0ZSBmdW5jdGlvbi5cbiAgICAgKiBAc2VlIF8uZmxvd1xuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBmdW5jdGlvbiBzcXVhcmUobikge1xuICAgICAqICAgcmV0dXJuIG4gKiBuO1xuICAgICAqIH1cbiAgICAgKlxuICAgICAqIHZhciBhZGRTcXVhcmUgPSBfLmZsb3dSaWdodChbc3F1YXJlLCBfLmFkZF0pO1xuICAgICAqIGFkZFNxdWFyZSgxLCAyKTtcbiAgICAgKiAvLyA9PiA5XG4gICAgICovXG4gICAgdmFyIGZsb3dSaWdodCA9IGNyZWF0ZUZsb3codHJ1ZSk7XG5cbiAgICAvKipcbiAgICAgKiBUaGlzIG1ldGhvZCByZXR1cm5zIHRoZSBmaXJzdCBhcmd1bWVudCBpdCByZWNlaXZlcy5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAc2luY2UgMC4xLjBcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBjYXRlZ29yeSBVdGlsXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBBbnkgdmFsdWUuXG4gICAgICogQHJldHVybnMgeyp9IFJldHVybnMgYHZhbHVlYC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIG9iamVjdCA9IHsgJ2EnOiAxIH07XG4gICAgICpcbiAgICAgKiBjb25zb2xlLmxvZyhfLmlkZW50aXR5KG9iamVjdCkgPT09IG9iamVjdCk7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGlkZW50aXR5KHZhbHVlKSB7XG4gICAgICByZXR1cm4gdmFsdWU7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIGZ1bmN0aW9uIHRoYXQgaW52b2tlcyBgZnVuY2Agd2l0aCB0aGUgYXJndW1lbnRzIG9mIHRoZSBjcmVhdGVkXG4gICAgICogZnVuY3Rpb24uIElmIGBmdW5jYCBpcyBhIHByb3BlcnR5IG5hbWUsIHRoZSBjcmVhdGVkIGZ1bmN0aW9uIHJldHVybnMgdGhlXG4gICAgICogcHJvcGVydHkgdmFsdWUgZm9yIGEgZ2l2ZW4gZWxlbWVudC4gSWYgYGZ1bmNgIGlzIGFuIGFycmF5IG9yIG9iamVjdCwgdGhlXG4gICAgICogY3JlYXRlZCBmdW5jdGlvbiByZXR1cm5zIGB0cnVlYCBmb3IgZWxlbWVudHMgdGhhdCBjb250YWluIHRoZSBlcXVpdmFsZW50XG4gICAgICogc291cmNlIHByb3BlcnRpZXMsIG90aGVyd2lzZSBpdCByZXR1cm5zIGBmYWxzZWAuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQHNpbmNlIDQuMC4wXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAY2F0ZWdvcnkgVXRpbFxuICAgICAqIEBwYXJhbSB7Kn0gW2Z1bmM9Xy5pZGVudGl0eV0gVGhlIHZhbHVlIHRvIGNvbnZlcnQgdG8gYSBjYWxsYmFjay5cbiAgICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIGNhbGxiYWNrLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgdXNlcnMgPSBbXG4gICAgICogICB7ICd1c2VyJzogJ2Jhcm5leScsICdhZ2UnOiAzNiwgJ2FjdGl2ZSc6IHRydWUgfSxcbiAgICAgKiAgIHsgJ3VzZXInOiAnZnJlZCcsICAgJ2FnZSc6IDQwLCAnYWN0aXZlJzogZmFsc2UgfVxuICAgICAqIF07XG4gICAgICpcbiAgICAgKiAvLyBUaGUgYF8ubWF0Y2hlc2AgaXRlcmF0ZWUgc2hvcnRoYW5kLlxuICAgICAqIF8uZmlsdGVyKHVzZXJzLCBfLml0ZXJhdGVlKHsgJ3VzZXInOiAnYmFybmV5JywgJ2FjdGl2ZSc6IHRydWUgfSkpO1xuICAgICAqIC8vID0+IFt7ICd1c2VyJzogJ2Jhcm5leScsICdhZ2UnOiAzNiwgJ2FjdGl2ZSc6IHRydWUgfV1cbiAgICAgKlxuICAgICAqIC8vIFRoZSBgXy5tYXRjaGVzUHJvcGVydHlgIGl0ZXJhdGVlIHNob3J0aGFuZC5cbiAgICAgKiBfLmZpbHRlcih1c2VycywgXy5pdGVyYXRlZShbJ3VzZXInLCAnZnJlZCddKSk7XG4gICAgICogLy8gPT4gW3sgJ3VzZXInOiAnZnJlZCcsICdhZ2UnOiA0MCB9XVxuICAgICAqXG4gICAgICogLy8gVGhlIGBfLnByb3BlcnR5YCBpdGVyYXRlZSBzaG9ydGhhbmQuXG4gICAgICogXy5tYXAodXNlcnMsIF8uaXRlcmF0ZWUoJ3VzZXInKSk7XG4gICAgICogLy8gPT4gWydiYXJuZXknLCAnZnJlZCddXG4gICAgICpcbiAgICAgKiAvLyBDcmVhdGUgY3VzdG9tIGl0ZXJhdGVlIHNob3J0aGFuZHMuXG4gICAgICogXy5pdGVyYXRlZSA9IF8ud3JhcChfLml0ZXJhdGVlLCBmdW5jdGlvbihpdGVyYXRlZSwgZnVuYykge1xuICAgICAqICAgcmV0dXJuICFfLmlzUmVnRXhwKGZ1bmMpID8gaXRlcmF0ZWUoZnVuYykgOiBmdW5jdGlvbihzdHJpbmcpIHtcbiAgICAgKiAgICAgcmV0dXJuIGZ1bmMudGVzdChzdHJpbmcpO1xuICAgICAqICAgfTtcbiAgICAgKiB9KTtcbiAgICAgKlxuICAgICAqIF8uZmlsdGVyKFsnYWJjJywgJ2RlZiddLCAvZWYvKTtcbiAgICAgKiAvLyA9PiBbJ2RlZiddXG4gICAgICovXG4gICAgZnVuY3Rpb24gaXRlcmF0ZWUoZnVuYykge1xuICAgICAgcmV0dXJuIGJhc2VJdGVyYXRlZSh0eXBlb2YgZnVuYyA9PSAnZnVuY3Rpb24nID8gZnVuYyA6IGJhc2VDbG9uZShmdW5jLCBDTE9ORV9ERUVQX0ZMQUcpKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgZnVuY3Rpb24gdGhhdCBwZXJmb3JtcyBhIHBhcnRpYWwgZGVlcCBjb21wYXJpc29uIGJldHdlZW4gYSBnaXZlblxuICAgICAqIG9iamVjdCBhbmQgYHNvdXJjZWAsIHJldHVybmluZyBgdHJ1ZWAgaWYgdGhlIGdpdmVuIG9iamVjdCBoYXMgZXF1aXZhbGVudFxuICAgICAqIHByb3BlcnR5IHZhbHVlcywgZWxzZSBgZmFsc2VgLlxuICAgICAqXG4gICAgICogKipOb3RlOioqIFRoZSBjcmVhdGVkIGZ1bmN0aW9uIGlzIGVxdWl2YWxlbnQgdG8gYF8uaXNNYXRjaGAgd2l0aCBgc291cmNlYFxuICAgICAqIHBhcnRpYWxseSBhcHBsaWVkLlxuICAgICAqXG4gICAgICogUGFydGlhbCBjb21wYXJpc29ucyB3aWxsIG1hdGNoIGVtcHR5IGFycmF5IGFuZCBlbXB0eSBvYmplY3QgYHNvdXJjZWBcbiAgICAgKiB2YWx1ZXMgYWdhaW5zdCBhbnkgYXJyYXkgb3Igb2JqZWN0IHZhbHVlLCByZXNwZWN0aXZlbHkuIFNlZSBgXy5pc0VxdWFsYFxuICAgICAqIGZvciBhIGxpc3Qgb2Ygc3VwcG9ydGVkIHZhbHVlIGNvbXBhcmlzb25zLlxuICAgICAqXG4gICAgICogKipOb3RlOioqIE11bHRpcGxlIHZhbHVlcyBjYW4gYmUgY2hlY2tlZCBieSBjb21iaW5pbmcgc2V2ZXJhbCBtYXRjaGVyc1xuICAgICAqIHVzaW5nIGBfLm92ZXJTb21lYFxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDMuMC4wXG4gICAgICogQGNhdGVnb3J5IFV0aWxcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gc291cmNlIFRoZSBvYmplY3Qgb2YgcHJvcGVydHkgdmFsdWVzIHRvIG1hdGNoLlxuICAgICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IHNwZWMgZnVuY3Rpb24uXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciBvYmplY3RzID0gW1xuICAgICAqICAgeyAnYSc6IDEsICdiJzogMiwgJ2MnOiAzIH0sXG4gICAgICogICB7ICdhJzogNCwgJ2InOiA1LCAnYyc6IDYgfVxuICAgICAqIF07XG4gICAgICpcbiAgICAgKiBfLmZpbHRlcihvYmplY3RzLCBfLm1hdGNoZXMoeyAnYSc6IDQsICdjJzogNiB9KSk7XG4gICAgICogLy8gPT4gW3sgJ2EnOiA0LCAnYic6IDUsICdjJzogNiB9XVxuICAgICAqXG4gICAgICogLy8gQ2hlY2tpbmcgZm9yIHNldmVyYWwgcG9zc2libGUgdmFsdWVzXG4gICAgICogXy5maWx0ZXIob2JqZWN0cywgXy5vdmVyU29tZShbXy5tYXRjaGVzKHsgJ2EnOiAxIH0pLCBfLm1hdGNoZXMoeyAnYSc6IDQgfSldKSk7XG4gICAgICogLy8gPT4gW3sgJ2EnOiAxLCAnYic6IDIsICdjJzogMyB9LCB7ICdhJzogNCwgJ2InOiA1LCAnYyc6IDYgfV1cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBtYXRjaGVzKHNvdXJjZSkge1xuICAgICAgcmV0dXJuIGJhc2VNYXRjaGVzKGJhc2VDbG9uZShzb3VyY2UsIENMT05FX0RFRVBfRkxBRykpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBmdW5jdGlvbiB0aGF0IHBlcmZvcm1zIGEgcGFydGlhbCBkZWVwIGNvbXBhcmlzb24gYmV0d2VlbiB0aGVcbiAgICAgKiB2YWx1ZSBhdCBgcGF0aGAgb2YgYSBnaXZlbiBvYmplY3QgdG8gYHNyY1ZhbHVlYCwgcmV0dXJuaW5nIGB0cnVlYCBpZiB0aGVcbiAgICAgKiBvYmplY3QgdmFsdWUgaXMgZXF1aXZhbGVudCwgZWxzZSBgZmFsc2VgLlxuICAgICAqXG4gICAgICogKipOb3RlOioqIFBhcnRpYWwgY29tcGFyaXNvbnMgd2lsbCBtYXRjaCBlbXB0eSBhcnJheSBhbmQgZW1wdHkgb2JqZWN0XG4gICAgICogYHNyY1ZhbHVlYCB2YWx1ZXMgYWdhaW5zdCBhbnkgYXJyYXkgb3Igb2JqZWN0IHZhbHVlLCByZXNwZWN0aXZlbHkuIFNlZVxuICAgICAqIGBfLmlzRXF1YWxgIGZvciBhIGxpc3Qgb2Ygc3VwcG9ydGVkIHZhbHVlIGNvbXBhcmlzb25zLlxuICAgICAqXG4gICAgICogKipOb3RlOioqIE11bHRpcGxlIHZhbHVlcyBjYW4gYmUgY2hlY2tlZCBieSBjb21iaW5pbmcgc2V2ZXJhbCBtYXRjaGVyc1xuICAgICAqIHVzaW5nIGBfLm92ZXJTb21lYFxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDMuMi4wXG4gICAgICogQGNhdGVnb3J5IFV0aWxcbiAgICAgKiBAcGFyYW0ge0FycmF5fHN0cmluZ30gcGF0aCBUaGUgcGF0aCBvZiB0aGUgcHJvcGVydHkgdG8gZ2V0LlxuICAgICAqIEBwYXJhbSB7Kn0gc3JjVmFsdWUgVGhlIHZhbHVlIHRvIG1hdGNoLlxuICAgICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IHNwZWMgZnVuY3Rpb24uXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciBvYmplY3RzID0gW1xuICAgICAqICAgeyAnYSc6IDEsICdiJzogMiwgJ2MnOiAzIH0sXG4gICAgICogICB7ICdhJzogNCwgJ2InOiA1LCAnYyc6IDYgfVxuICAgICAqIF07XG4gICAgICpcbiAgICAgKiBfLmZpbmQob2JqZWN0cywgXy5tYXRjaGVzUHJvcGVydHkoJ2EnLCA0KSk7XG4gICAgICogLy8gPT4geyAnYSc6IDQsICdiJzogNSwgJ2MnOiA2IH1cbiAgICAgKlxuICAgICAqIC8vIENoZWNraW5nIGZvciBzZXZlcmFsIHBvc3NpYmxlIHZhbHVlc1xuICAgICAqIF8uZmlsdGVyKG9iamVjdHMsIF8ub3ZlclNvbWUoW18ubWF0Y2hlc1Byb3BlcnR5KCdhJywgMSksIF8ubWF0Y2hlc1Byb3BlcnR5KCdhJywgNCldKSk7XG4gICAgICogLy8gPT4gW3sgJ2EnOiAxLCAnYic6IDIsICdjJzogMyB9LCB7ICdhJzogNCwgJ2InOiA1LCAnYyc6IDYgfV1cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBtYXRjaGVzUHJvcGVydHkocGF0aCwgc3JjVmFsdWUpIHtcbiAgICAgIHJldHVybiBiYXNlTWF0Y2hlc1Byb3BlcnR5KHBhdGgsIGJhc2VDbG9uZShzcmNWYWx1ZSwgQ0xPTkVfREVFUF9GTEFHKSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIGZ1bmN0aW9uIHRoYXQgaW52b2tlcyB0aGUgbWV0aG9kIGF0IGBwYXRoYCBvZiBhIGdpdmVuIG9iamVjdC5cbiAgICAgKiBBbnkgYWRkaXRpb25hbCBhcmd1bWVudHMgYXJlIHByb3ZpZGVkIHRvIHRoZSBpbnZva2VkIG1ldGhvZC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAzLjcuMFxuICAgICAqIEBjYXRlZ29yeSBVdGlsXG4gICAgICogQHBhcmFtIHtBcnJheXxzdHJpbmd9IHBhdGggVGhlIHBhdGggb2YgdGhlIG1ldGhvZCB0byBpbnZva2UuXG4gICAgICogQHBhcmFtIHsuLi4qfSBbYXJnc10gVGhlIGFyZ3VtZW50cyB0byBpbnZva2UgdGhlIG1ldGhvZCB3aXRoLlxuICAgICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IGludm9rZXIgZnVuY3Rpb24uXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciBvYmplY3RzID0gW1xuICAgICAqICAgeyAnYSc6IHsgJ2InOiBfLmNvbnN0YW50KDIpIH0gfSxcbiAgICAgKiAgIHsgJ2EnOiB7ICdiJzogXy5jb25zdGFudCgxKSB9IH1cbiAgICAgKiBdO1xuICAgICAqXG4gICAgICogXy5tYXAob2JqZWN0cywgXy5tZXRob2QoJ2EuYicpKTtcbiAgICAgKiAvLyA9PiBbMiwgMV1cbiAgICAgKlxuICAgICAqIF8ubWFwKG9iamVjdHMsIF8ubWV0aG9kKFsnYScsICdiJ10pKTtcbiAgICAgKiAvLyA9PiBbMiwgMV1cbiAgICAgKi9cbiAgICB2YXIgbWV0aG9kID0gYmFzZVJlc3QoZnVuY3Rpb24ocGF0aCwgYXJncykge1xuICAgICAgcmV0dXJuIGZ1bmN0aW9uKG9iamVjdCkge1xuICAgICAgICByZXR1cm4gYmFzZUludm9rZShvYmplY3QsIHBhdGgsIGFyZ3MpO1xuICAgICAgfTtcbiAgICB9KTtcblxuICAgIC8qKlxuICAgICAqIFRoZSBvcHBvc2l0ZSBvZiBgXy5tZXRob2RgOyB0aGlzIG1ldGhvZCBjcmVhdGVzIGEgZnVuY3Rpb24gdGhhdCBpbnZva2VzXG4gICAgICogdGhlIG1ldGhvZCBhdCBhIGdpdmVuIHBhdGggb2YgYG9iamVjdGAuIEFueSBhZGRpdGlvbmFsIGFyZ3VtZW50cyBhcmVcbiAgICAgKiBwcm92aWRlZCB0byB0aGUgaW52b2tlZCBtZXRob2QuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMy43LjBcbiAgICAgKiBAY2F0ZWdvcnkgVXRpbFxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBxdWVyeS5cbiAgICAgKiBAcGFyYW0gey4uLip9IFthcmdzXSBUaGUgYXJndW1lbnRzIHRvIGludm9rZSB0aGUgbWV0aG9kIHdpdGguXG4gICAgICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgaW52b2tlciBmdW5jdGlvbi5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIGFycmF5ID0gXy50aW1lcygzLCBfLmNvbnN0YW50KSxcbiAgICAgKiAgICAgb2JqZWN0ID0geyAnYSc6IGFycmF5LCAnYic6IGFycmF5LCAnYyc6IGFycmF5IH07XG4gICAgICpcbiAgICAgKiBfLm1hcChbJ2FbMl0nLCAnY1swXSddLCBfLm1ldGhvZE9mKG9iamVjdCkpO1xuICAgICAqIC8vID0+IFsyLCAwXVxuICAgICAqXG4gICAgICogXy5tYXAoW1snYScsICcyJ10sIFsnYycsICcwJ11dLCBfLm1ldGhvZE9mKG9iamVjdCkpO1xuICAgICAqIC8vID0+IFsyLCAwXVxuICAgICAqL1xuICAgIHZhciBtZXRob2RPZiA9IGJhc2VSZXN0KGZ1bmN0aW9uKG9iamVjdCwgYXJncykge1xuICAgICAgcmV0dXJuIGZ1bmN0aW9uKHBhdGgpIHtcbiAgICAgICAgcmV0dXJuIGJhc2VJbnZva2Uob2JqZWN0LCBwYXRoLCBhcmdzKTtcbiAgICAgIH07XG4gICAgfSk7XG5cbiAgICAvKipcbiAgICAgKiBBZGRzIGFsbCBvd24gZW51bWVyYWJsZSBzdHJpbmcga2V5ZWQgZnVuY3Rpb24gcHJvcGVydGllcyBvZiBhIHNvdXJjZVxuICAgICAqIG9iamVjdCB0byB0aGUgZGVzdGluYXRpb24gb2JqZWN0LiBJZiBgb2JqZWN0YCBpcyBhIGZ1bmN0aW9uLCB0aGVuIG1ldGhvZHNcbiAgICAgKiBhcmUgYWRkZWQgdG8gaXRzIHByb3RvdHlwZSBhcyB3ZWxsLlxuICAgICAqXG4gICAgICogKipOb3RlOioqIFVzZSBgXy5ydW5JbkNvbnRleHRgIHRvIGNyZWF0ZSBhIHByaXN0aW5lIGBsb2Rhc2hgIGZ1bmN0aW9uIHRvXG4gICAgICogYXZvaWQgY29uZmxpY3RzIGNhdXNlZCBieSBtb2RpZnlpbmcgdGhlIG9yaWdpbmFsLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBzaW5jZSAwLjEuMFxuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQGNhdGVnb3J5IFV0aWxcbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufE9iamVjdH0gW29iamVjdD1sb2Rhc2hdIFRoZSBkZXN0aW5hdGlvbiBvYmplY3QuXG4gICAgICogQHBhcmFtIHtPYmplY3R9IHNvdXJjZSBUaGUgb2JqZWN0IG9mIGZ1bmN0aW9ucyB0byBhZGQuXG4gICAgICogQHBhcmFtIHtPYmplY3R9IFtvcHRpb25zPXt9XSBUaGUgb3B0aW9ucyBvYmplY3QuXG4gICAgICogQHBhcmFtIHtib29sZWFufSBbb3B0aW9ucy5jaGFpbj10cnVlXSBTcGVjaWZ5IHdoZXRoZXIgbWl4aW5zIGFyZSBjaGFpbmFibGUuXG4gICAgICogQHJldHVybnMge0Z1bmN0aW9ufE9iamVjdH0gUmV0dXJucyBgb2JqZWN0YC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogZnVuY3Rpb24gdm93ZWxzKHN0cmluZykge1xuICAgICAqICAgcmV0dXJuIF8uZmlsdGVyKHN0cmluZywgZnVuY3Rpb24odikge1xuICAgICAqICAgICByZXR1cm4gL1thZWlvdV0vaS50ZXN0KHYpO1xuICAgICAqICAgfSk7XG4gICAgICogfVxuICAgICAqXG4gICAgICogXy5taXhpbih7ICd2b3dlbHMnOiB2b3dlbHMgfSk7XG4gICAgICogXy52b3dlbHMoJ2ZyZWQnKTtcbiAgICAgKiAvLyA9PiBbJ2UnXVxuICAgICAqXG4gICAgICogXygnZnJlZCcpLnZvd2VscygpLnZhbHVlKCk7XG4gICAgICogLy8gPT4gWydlJ11cbiAgICAgKlxuICAgICAqIF8ubWl4aW4oeyAndm93ZWxzJzogdm93ZWxzIH0sIHsgJ2NoYWluJzogZmFsc2UgfSk7XG4gICAgICogXygnZnJlZCcpLnZvd2VscygpO1xuICAgICAqIC8vID0+IFsnZSddXG4gICAgICovXG4gICAgZnVuY3Rpb24gbWl4aW4ob2JqZWN0LCBzb3VyY2UsIG9wdGlvbnMpIHtcbiAgICAgIHZhciBwcm9wcyA9IGtleXMoc291cmNlKSxcbiAgICAgICAgICBtZXRob2ROYW1lcyA9IGJhc2VGdW5jdGlvbnMoc291cmNlLCBwcm9wcyk7XG5cbiAgICAgIGlmIChvcHRpb25zID09IG51bGwgJiZcbiAgICAgICAgICAhKGlzT2JqZWN0KHNvdXJjZSkgJiYgKG1ldGhvZE5hbWVzLmxlbmd0aCB8fCAhcHJvcHMubGVuZ3RoKSkpIHtcbiAgICAgICAgb3B0aW9ucyA9IHNvdXJjZTtcbiAgICAgICAgc291cmNlID0gb2JqZWN0O1xuICAgICAgICBvYmplY3QgPSB0aGlzO1xuICAgICAgICBtZXRob2ROYW1lcyA9IGJhc2VGdW5jdGlvbnMoc291cmNlLCBrZXlzKHNvdXJjZSkpO1xuICAgICAgfVxuICAgICAgdmFyIGNoYWluID0gIShpc09iamVjdChvcHRpb25zKSAmJiAnY2hhaW4nIGluIG9wdGlvbnMpIHx8ICEhb3B0aW9ucy5jaGFpbixcbiAgICAgICAgICBpc0Z1bmMgPSBpc0Z1bmN0aW9uKG9iamVjdCk7XG5cbiAgICAgIGFycmF5RWFjaChtZXRob2ROYW1lcywgZnVuY3Rpb24obWV0aG9kTmFtZSkge1xuICAgICAgICB2YXIgZnVuYyA9IHNvdXJjZVttZXRob2ROYW1lXTtcbiAgICAgICAgb2JqZWN0W21ldGhvZE5hbWVdID0gZnVuYztcbiAgICAgICAgaWYgKGlzRnVuYykge1xuICAgICAgICAgIG9iamVjdC5wcm90b3R5cGVbbWV0aG9kTmFtZV0gPSBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIHZhciBjaGFpbkFsbCA9IHRoaXMuX19jaGFpbl9fO1xuICAgICAgICAgICAgaWYgKGNoYWluIHx8IGNoYWluQWxsKSB7XG4gICAgICAgICAgICAgIHZhciByZXN1bHQgPSBvYmplY3QodGhpcy5fX3dyYXBwZWRfXyksXG4gICAgICAgICAgICAgICAgICBhY3Rpb25zID0gcmVzdWx0Ll9fYWN0aW9uc19fID0gY29weUFycmF5KHRoaXMuX19hY3Rpb25zX18pO1xuXG4gICAgICAgICAgICAgIGFjdGlvbnMucHVzaCh7ICdmdW5jJzogZnVuYywgJ2FyZ3MnOiBhcmd1bWVudHMsICd0aGlzQXJnJzogb2JqZWN0IH0pO1xuICAgICAgICAgICAgICByZXN1bHQuX19jaGFpbl9fID0gY2hhaW5BbGw7XG4gICAgICAgICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gZnVuYy5hcHBseShvYmplY3QsIGFycmF5UHVzaChbdGhpcy52YWx1ZSgpXSwgYXJndW1lbnRzKSk7XG4gICAgICAgICAgfTtcbiAgICAgICAgfVxuICAgICAgfSk7XG5cbiAgICAgIHJldHVybiBvYmplY3Q7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogUmV2ZXJ0cyB0aGUgYF9gIHZhcmlhYmxlIHRvIGl0cyBwcmV2aW91cyB2YWx1ZSBhbmQgcmV0dXJucyBhIHJlZmVyZW5jZSB0b1xuICAgICAqIHRoZSBgbG9kYXNoYCBmdW5jdGlvbi5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAc2luY2UgMC4xLjBcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBjYXRlZ29yeSBVdGlsXG4gICAgICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBgbG9kYXNoYCBmdW5jdGlvbi5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIGxvZGFzaCA9IF8ubm9Db25mbGljdCgpO1xuICAgICAqL1xuICAgIGZ1bmN0aW9uIG5vQ29uZmxpY3QoKSB7XG4gICAgICBpZiAocm9vdC5fID09PSB0aGlzKSB7XG4gICAgICAgIHJvb3QuXyA9IG9sZERhc2g7XG4gICAgICB9XG4gICAgICByZXR1cm4gdGhpcztcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGlzIG1ldGhvZCByZXR1cm5zIGB1bmRlZmluZWRgLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDIuMy4wXG4gICAgICogQGNhdGVnb3J5IFV0aWxcbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy50aW1lcygyLCBfLm5vb3ApO1xuICAgICAqIC8vID0+IFt1bmRlZmluZWQsIHVuZGVmaW5lZF1cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBub29wKCkge1xuICAgICAgLy8gTm8gb3BlcmF0aW9uIHBlcmZvcm1lZC5cbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgZnVuY3Rpb24gdGhhdCBnZXRzIHRoZSBhcmd1bWVudCBhdCBpbmRleCBgbmAuIElmIGBuYCBpcyBuZWdhdGl2ZSxcbiAgICAgKiB0aGUgbnRoIGFyZ3VtZW50IGZyb20gdGhlIGVuZCBpcyByZXR1cm5lZC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjAuMFxuICAgICAqIEBjYXRlZ29yeSBVdGlsXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IFtuPTBdIFRoZSBpbmRleCBvZiB0aGUgYXJndW1lbnQgdG8gcmV0dXJuLlxuICAgICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IHBhc3MtdGhydSBmdW5jdGlvbi5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIGZ1bmMgPSBfLm50aEFyZygxKTtcbiAgICAgKiBmdW5jKCdhJywgJ2InLCAnYycsICdkJyk7XG4gICAgICogLy8gPT4gJ2InXG4gICAgICpcbiAgICAgKiB2YXIgZnVuYyA9IF8ubnRoQXJnKC0yKTtcbiAgICAgKiBmdW5jKCdhJywgJ2InLCAnYycsICdkJyk7XG4gICAgICogLy8gPT4gJ2MnXG4gICAgICovXG4gICAgZnVuY3Rpb24gbnRoQXJnKG4pIHtcbiAgICAgIG4gPSB0b0ludGVnZXIobik7XG4gICAgICByZXR1cm4gYmFzZVJlc3QoZnVuY3Rpb24oYXJncykge1xuICAgICAgICByZXR1cm4gYmFzZU50aChhcmdzLCBuKTtcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBmdW5jdGlvbiB0aGF0IGludm9rZXMgYGl0ZXJhdGVlc2Agd2l0aCB0aGUgYXJndW1lbnRzIGl0IHJlY2VpdmVzXG4gICAgICogYW5kIHJldHVybnMgdGhlaXIgcmVzdWx0cy5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjAuMFxuICAgICAqIEBjYXRlZ29yeSBVdGlsXG4gICAgICogQHBhcmFtIHsuLi4oRnVuY3Rpb258RnVuY3Rpb25bXSl9IFtpdGVyYXRlZXM9W18uaWRlbnRpdHldXVxuICAgICAqICBUaGUgaXRlcmF0ZWVzIHRvIGludm9rZS5cbiAgICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyBmdW5jdGlvbi5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIGZ1bmMgPSBfLm92ZXIoW01hdGgubWF4LCBNYXRoLm1pbl0pO1xuICAgICAqXG4gICAgICogZnVuYygxLCAyLCAzLCA0KTtcbiAgICAgKiAvLyA9PiBbNCwgMV1cbiAgICAgKi9cbiAgICB2YXIgb3ZlciA9IGNyZWF0ZU92ZXIoYXJyYXlNYXApO1xuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIGZ1bmN0aW9uIHRoYXQgY2hlY2tzIGlmICoqYWxsKiogb2YgdGhlIGBwcmVkaWNhdGVzYCByZXR1cm5cbiAgICAgKiB0cnV0aHkgd2hlbiBpbnZva2VkIHdpdGggdGhlIGFyZ3VtZW50cyBpdCByZWNlaXZlcy5cbiAgICAgKlxuICAgICAqIEZvbGxvd2luZyBzaG9ydGhhbmRzIGFyZSBwb3NzaWJsZSBmb3IgcHJvdmlkaW5nIHByZWRpY2F0ZXMuXG4gICAgICogUGFzcyBhbiBgT2JqZWN0YCBhbmQgaXQgd2lsbCBiZSB1c2VkIGFzIGFuIHBhcmFtZXRlciBmb3IgYF8ubWF0Y2hlc2AgdG8gY3JlYXRlIHRoZSBwcmVkaWNhdGUuXG4gICAgICogUGFzcyBhbiBgQXJyYXlgIG9mIHBhcmFtZXRlcnMgZm9yIGBfLm1hdGNoZXNQcm9wZXJ0eWAgYW5kIHRoZSBwcmVkaWNhdGUgd2lsbCBiZSBjcmVhdGVkIHVzaW5nIHRoZW0uXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgVXRpbFxuICAgICAqIEBwYXJhbSB7Li4uKEZ1bmN0aW9ufEZ1bmN0aW9uW10pfSBbcHJlZGljYXRlcz1bXy5pZGVudGl0eV1dXG4gICAgICogIFRoZSBwcmVkaWNhdGVzIHRvIGNoZWNrLlxuICAgICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IGZ1bmN0aW9uLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgZnVuYyA9IF8ub3ZlckV2ZXJ5KFtCb29sZWFuLCBpc0Zpbml0ZV0pO1xuICAgICAqXG4gICAgICogZnVuYygnMScpO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKlxuICAgICAqIGZ1bmMobnVsbCk7XG4gICAgICogLy8gPT4gZmFsc2VcbiAgICAgKlxuICAgICAqIGZ1bmMoTmFOKTtcbiAgICAgKiAvLyA9PiBmYWxzZVxuICAgICAqL1xuICAgIHZhciBvdmVyRXZlcnkgPSBjcmVhdGVPdmVyKGFycmF5RXZlcnkpO1xuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIGZ1bmN0aW9uIHRoYXQgY2hlY2tzIGlmICoqYW55Kiogb2YgdGhlIGBwcmVkaWNhdGVzYCByZXR1cm5cbiAgICAgKiB0cnV0aHkgd2hlbiBpbnZva2VkIHdpdGggdGhlIGFyZ3VtZW50cyBpdCByZWNlaXZlcy5cbiAgICAgKlxuICAgICAqIEZvbGxvd2luZyBzaG9ydGhhbmRzIGFyZSBwb3NzaWJsZSBmb3IgcHJvdmlkaW5nIHByZWRpY2F0ZXMuXG4gICAgICogUGFzcyBhbiBgT2JqZWN0YCBhbmQgaXQgd2lsbCBiZSB1c2VkIGFzIGFuIHBhcmFtZXRlciBmb3IgYF8ubWF0Y2hlc2AgdG8gY3JlYXRlIHRoZSBwcmVkaWNhdGUuXG4gICAgICogUGFzcyBhbiBgQXJyYXlgIG9mIHBhcmFtZXRlcnMgZm9yIGBfLm1hdGNoZXNQcm9wZXJ0eWAgYW5kIHRoZSBwcmVkaWNhdGUgd2lsbCBiZSBjcmVhdGVkIHVzaW5nIHRoZW0uXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgVXRpbFxuICAgICAqIEBwYXJhbSB7Li4uKEZ1bmN0aW9ufEZ1bmN0aW9uW10pfSBbcHJlZGljYXRlcz1bXy5pZGVudGl0eV1dXG4gICAgICogIFRoZSBwcmVkaWNhdGVzIHRvIGNoZWNrLlxuICAgICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IGZ1bmN0aW9uLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgZnVuYyA9IF8ub3ZlclNvbWUoW0Jvb2xlYW4sIGlzRmluaXRlXSk7XG4gICAgICpcbiAgICAgKiBmdW5jKCcxJyk7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqXG4gICAgICogZnVuYyhudWxsKTtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICpcbiAgICAgKiBmdW5jKE5hTik7XG4gICAgICogLy8gPT4gZmFsc2VcbiAgICAgKlxuICAgICAqIHZhciBtYXRjaGVzRnVuYyA9IF8ub3ZlclNvbWUoW3sgJ2EnOiAxIH0sIHsgJ2EnOiAyIH1dKVxuICAgICAqIHZhciBtYXRjaGVzUHJvcGVydHlGdW5jID0gXy5vdmVyU29tZShbWydhJywgMV0sIFsnYScsIDJdXSlcbiAgICAgKi9cbiAgICB2YXIgb3ZlclNvbWUgPSBjcmVhdGVPdmVyKGFycmF5U29tZSk7XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgZnVuY3Rpb24gdGhhdCByZXR1cm5zIHRoZSB2YWx1ZSBhdCBgcGF0aGAgb2YgYSBnaXZlbiBvYmplY3QuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMi40LjBcbiAgICAgKiBAY2F0ZWdvcnkgVXRpbFxuICAgICAqIEBwYXJhbSB7QXJyYXl8c3RyaW5nfSBwYXRoIFRoZSBwYXRoIG9mIHRoZSBwcm9wZXJ0eSB0byBnZXQuXG4gICAgICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgYWNjZXNzb3IgZnVuY3Rpb24uXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciBvYmplY3RzID0gW1xuICAgICAqICAgeyAnYSc6IHsgJ2InOiAyIH0gfSxcbiAgICAgKiAgIHsgJ2EnOiB7ICdiJzogMSB9IH1cbiAgICAgKiBdO1xuICAgICAqXG4gICAgICogXy5tYXAob2JqZWN0cywgXy5wcm9wZXJ0eSgnYS5iJykpO1xuICAgICAqIC8vID0+IFsyLCAxXVxuICAgICAqXG4gICAgICogXy5tYXAoXy5zb3J0Qnkob2JqZWN0cywgXy5wcm9wZXJ0eShbJ2EnLCAnYiddKSksICdhLmInKTtcbiAgICAgKiAvLyA9PiBbMSwgMl1cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBwcm9wZXJ0eShwYXRoKSB7XG4gICAgICByZXR1cm4gaXNLZXkocGF0aCkgPyBiYXNlUHJvcGVydHkodG9LZXkocGF0aCkpIDogYmFzZVByb3BlcnR5RGVlcChwYXRoKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGUgb3Bwb3NpdGUgb2YgYF8ucHJvcGVydHlgOyB0aGlzIG1ldGhvZCBjcmVhdGVzIGEgZnVuY3Rpb24gdGhhdCByZXR1cm5zXG4gICAgICogdGhlIHZhbHVlIGF0IGEgZ2l2ZW4gcGF0aCBvZiBgb2JqZWN0YC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAzLjAuMFxuICAgICAqIEBjYXRlZ29yeSBVdGlsXG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIHF1ZXJ5LlxuICAgICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IGFjY2Vzc29yIGZ1bmN0aW9uLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgYXJyYXkgPSBbMCwgMSwgMl0sXG4gICAgICogICAgIG9iamVjdCA9IHsgJ2EnOiBhcnJheSwgJ2InOiBhcnJheSwgJ2MnOiBhcnJheSB9O1xuICAgICAqXG4gICAgICogXy5tYXAoWydhWzJdJywgJ2NbMF0nXSwgXy5wcm9wZXJ0eU9mKG9iamVjdCkpO1xuICAgICAqIC8vID0+IFsyLCAwXVxuICAgICAqXG4gICAgICogXy5tYXAoW1snYScsICcyJ10sIFsnYycsICcwJ11dLCBfLnByb3BlcnR5T2Yob2JqZWN0KSk7XG4gICAgICogLy8gPT4gWzIsIDBdXG4gICAgICovXG4gICAgZnVuY3Rpb24gcHJvcGVydHlPZihvYmplY3QpIHtcbiAgICAgIHJldHVybiBmdW5jdGlvbihwYXRoKSB7XG4gICAgICAgIHJldHVybiBvYmplY3QgPT0gbnVsbCA/IHVuZGVmaW5lZCA6IGJhc2VHZXQob2JqZWN0LCBwYXRoKTtcbiAgICAgIH07XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhbiBhcnJheSBvZiBudW1iZXJzIChwb3NpdGl2ZSBhbmQvb3IgbmVnYXRpdmUpIHByb2dyZXNzaW5nIGZyb21cbiAgICAgKiBgc3RhcnRgIHVwIHRvLCBidXQgbm90IGluY2x1ZGluZywgYGVuZGAuIEEgc3RlcCBvZiBgLTFgIGlzIHVzZWQgaWYgYSBuZWdhdGl2ZVxuICAgICAqIGBzdGFydGAgaXMgc3BlY2lmaWVkIHdpdGhvdXQgYW4gYGVuZGAgb3IgYHN0ZXBgLiBJZiBgZW5kYCBpcyBub3Qgc3BlY2lmaWVkLFxuICAgICAqIGl0J3Mgc2V0IHRvIGBzdGFydGAgd2l0aCBgc3RhcnRgIHRoZW4gc2V0IHRvIGAwYC5cbiAgICAgKlxuICAgICAqICoqTm90ZToqKiBKYXZhU2NyaXB0IGZvbGxvd3MgdGhlIElFRUUtNzU0IHN0YW5kYXJkIGZvciByZXNvbHZpbmdcbiAgICAgKiBmbG9hdGluZy1wb2ludCB2YWx1ZXMgd2hpY2ggY2FuIHByb2R1Y2UgdW5leHBlY3RlZCByZXN1bHRzLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBzaW5jZSAwLjEuMFxuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQGNhdGVnb3J5IFV0aWxcbiAgICAgKiBAcGFyYW0ge251bWJlcn0gW3N0YXJ0PTBdIFRoZSBzdGFydCBvZiB0aGUgcmFuZ2UuXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IGVuZCBUaGUgZW5kIG9mIHRoZSByYW5nZS5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gW3N0ZXA9MV0gVGhlIHZhbHVlIHRvIGluY3JlbWVudCBvciBkZWNyZW1lbnQgYnkuXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSByYW5nZSBvZiBudW1iZXJzLlxuICAgICAqIEBzZWUgXy5pblJhbmdlLCBfLnJhbmdlUmlnaHRcbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5yYW5nZSg0KTtcbiAgICAgKiAvLyA9PiBbMCwgMSwgMiwgM11cbiAgICAgKlxuICAgICAqIF8ucmFuZ2UoLTQpO1xuICAgICAqIC8vID0+IFswLCAtMSwgLTIsIC0zXVxuICAgICAqXG4gICAgICogXy5yYW5nZSgxLCA1KTtcbiAgICAgKiAvLyA9PiBbMSwgMiwgMywgNF1cbiAgICAgKlxuICAgICAqIF8ucmFuZ2UoMCwgMjAsIDUpO1xuICAgICAqIC8vID0+IFswLCA1LCAxMCwgMTVdXG4gICAgICpcbiAgICAgKiBfLnJhbmdlKDAsIC00LCAtMSk7XG4gICAgICogLy8gPT4gWzAsIC0xLCAtMiwgLTNdXG4gICAgICpcbiAgICAgKiBfLnJhbmdlKDEsIDQsIDApO1xuICAgICAqIC8vID0+IFsxLCAxLCAxXVxuICAgICAqXG4gICAgICogXy5yYW5nZSgwKTtcbiAgICAgKiAvLyA9PiBbXVxuICAgICAqL1xuICAgIHZhciByYW5nZSA9IGNyZWF0ZVJhbmdlKCk7XG5cbiAgICAvKipcbiAgICAgKiBUaGlzIG1ldGhvZCBpcyBsaWtlIGBfLnJhbmdlYCBleGNlcHQgdGhhdCBpdCBwb3B1bGF0ZXMgdmFsdWVzIGluXG4gICAgICogZGVzY2VuZGluZyBvcmRlci5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjAuMFxuICAgICAqIEBjYXRlZ29yeSBVdGlsXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IFtzdGFydD0wXSBUaGUgc3RhcnQgb2YgdGhlIHJhbmdlLlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBlbmQgVGhlIGVuZCBvZiB0aGUgcmFuZ2UuXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IFtzdGVwPTFdIFRoZSB2YWx1ZSB0byBpbmNyZW1lbnQgb3IgZGVjcmVtZW50IGJ5LlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgcmFuZ2Ugb2YgbnVtYmVycy5cbiAgICAgKiBAc2VlIF8uaW5SYW5nZSwgXy5yYW5nZVxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLnJhbmdlUmlnaHQoNCk7XG4gICAgICogLy8gPT4gWzMsIDIsIDEsIDBdXG4gICAgICpcbiAgICAgKiBfLnJhbmdlUmlnaHQoLTQpO1xuICAgICAqIC8vID0+IFstMywgLTIsIC0xLCAwXVxuICAgICAqXG4gICAgICogXy5yYW5nZVJpZ2h0KDEsIDUpO1xuICAgICAqIC8vID0+IFs0LCAzLCAyLCAxXVxuICAgICAqXG4gICAgICogXy5yYW5nZVJpZ2h0KDAsIDIwLCA1KTtcbiAgICAgKiAvLyA9PiBbMTUsIDEwLCA1LCAwXVxuICAgICAqXG4gICAgICogXy5yYW5nZVJpZ2h0KDAsIC00LCAtMSk7XG4gICAgICogLy8gPT4gWy0zLCAtMiwgLTEsIDBdXG4gICAgICpcbiAgICAgKiBfLnJhbmdlUmlnaHQoMSwgNCwgMCk7XG4gICAgICogLy8gPT4gWzEsIDEsIDFdXG4gICAgICpcbiAgICAgKiBfLnJhbmdlUmlnaHQoMCk7XG4gICAgICogLy8gPT4gW11cbiAgICAgKi9cbiAgICB2YXIgcmFuZ2VSaWdodCA9IGNyZWF0ZVJhbmdlKHRydWUpO1xuXG4gICAgLyoqXG4gICAgICogVGhpcyBtZXRob2QgcmV0dXJucyBhIG5ldyBlbXB0eSBhcnJheS5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjEzLjBcbiAgICAgKiBAY2F0ZWdvcnkgVXRpbFxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgbmV3IGVtcHR5IGFycmF5LlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgYXJyYXlzID0gXy50aW1lcygyLCBfLnN0dWJBcnJheSk7XG4gICAgICpcbiAgICAgKiBjb25zb2xlLmxvZyhhcnJheXMpO1xuICAgICAqIC8vID0+IFtbXSwgW11dXG4gICAgICpcbiAgICAgKiBjb25zb2xlLmxvZyhhcnJheXNbMF0gPT09IGFycmF5c1sxXSk7XG4gICAgICogLy8gPT4gZmFsc2VcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBzdHViQXJyYXkoKSB7XG4gICAgICByZXR1cm4gW107XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhpcyBtZXRob2QgcmV0dXJucyBgZmFsc2VgLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMTMuMFxuICAgICAqIEBjYXRlZ29yeSBVdGlsXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYGZhbHNlYC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy50aW1lcygyLCBfLnN0dWJGYWxzZSk7XG4gICAgICogLy8gPT4gW2ZhbHNlLCBmYWxzZV1cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBzdHViRmFsc2UoKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhpcyBtZXRob2QgcmV0dXJucyBhIG5ldyBlbXB0eSBvYmplY3QuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4xMy4wXG4gICAgICogQGNhdGVnb3J5IFV0aWxcbiAgICAgKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIHRoZSBuZXcgZW1wdHkgb2JqZWN0LlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgb2JqZWN0cyA9IF8udGltZXMoMiwgXy5zdHViT2JqZWN0KTtcbiAgICAgKlxuICAgICAqIGNvbnNvbGUubG9nKG9iamVjdHMpO1xuICAgICAqIC8vID0+IFt7fSwge31dXG4gICAgICpcbiAgICAgKiBjb25zb2xlLmxvZyhvYmplY3RzWzBdID09PSBvYmplY3RzWzFdKTtcbiAgICAgKiAvLyA9PiBmYWxzZVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHN0dWJPYmplY3QoKSB7XG4gICAgICByZXR1cm4ge307XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhpcyBtZXRob2QgcmV0dXJucyBhbiBlbXB0eSBzdHJpbmcuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4xMy4wXG4gICAgICogQGNhdGVnb3J5IFV0aWxcbiAgICAgKiBAcmV0dXJucyB7c3RyaW5nfSBSZXR1cm5zIHRoZSBlbXB0eSBzdHJpbmcuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8udGltZXMoMiwgXy5zdHViU3RyaW5nKTtcbiAgICAgKiAvLyA9PiBbJycsICcnXVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHN0dWJTdHJpbmcoKSB7XG4gICAgICByZXR1cm4gJyc7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhpcyBtZXRob2QgcmV0dXJucyBgdHJ1ZWAuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4xMy4wXG4gICAgICogQGNhdGVnb3J5IFV0aWxcbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8udGltZXMoMiwgXy5zdHViVHJ1ZSk7XG4gICAgICogLy8gPT4gW3RydWUsIHRydWVdXG4gICAgICovXG4gICAgZnVuY3Rpb24gc3R1YlRydWUoKSB7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBJbnZva2VzIHRoZSBpdGVyYXRlZSBgbmAgdGltZXMsIHJldHVybmluZyBhbiBhcnJheSBvZiB0aGUgcmVzdWx0cyBvZlxuICAgICAqIGVhY2ggaW52b2NhdGlvbi4gVGhlIGl0ZXJhdGVlIGlzIGludm9rZWQgd2l0aCBvbmUgYXJndW1lbnQ7IChpbmRleCkuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQHNpbmNlIDAuMS4wXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAY2F0ZWdvcnkgVXRpbFxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBuIFRoZSBudW1iZXIgb2YgdGltZXMgdG8gaW52b2tlIGBpdGVyYXRlZWAuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gW2l0ZXJhdGVlPV8uaWRlbnRpdHldIFRoZSBmdW5jdGlvbiBpbnZva2VkIHBlciBpdGVyYXRpb24uXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBhcnJheSBvZiByZXN1bHRzLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLnRpbWVzKDMsIFN0cmluZyk7XG4gICAgICogLy8gPT4gWycwJywgJzEnLCAnMiddXG4gICAgICpcbiAgICAgKiAgXy50aW1lcyg0LCBfLmNvbnN0YW50KDApKTtcbiAgICAgKiAvLyA9PiBbMCwgMCwgMCwgMF1cbiAgICAgKi9cbiAgICBmdW5jdGlvbiB0aW1lcyhuLCBpdGVyYXRlZSkge1xuICAgICAgbiA9IHRvSW50ZWdlcihuKTtcbiAgICAgIGlmIChuIDwgMSB8fCBuID4gTUFYX1NBRkVfSU5URUdFUikge1xuICAgICAgICByZXR1cm4gW107XG4gICAgICB9XG4gICAgICB2YXIgaW5kZXggPSBNQVhfQVJSQVlfTEVOR1RILFxuICAgICAgICAgIGxlbmd0aCA9IG5hdGl2ZU1pbihuLCBNQVhfQVJSQVlfTEVOR1RIKTtcblxuICAgICAgaXRlcmF0ZWUgPSBnZXRJdGVyYXRlZShpdGVyYXRlZSk7XG4gICAgICBuIC09IE1BWF9BUlJBWV9MRU5HVEg7XG5cbiAgICAgIHZhciByZXN1bHQgPSBiYXNlVGltZXMobGVuZ3RoLCBpdGVyYXRlZSk7XG4gICAgICB3aGlsZSAoKytpbmRleCA8IG4pIHtcbiAgICAgICAgaXRlcmF0ZWUoaW5kZXgpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDb252ZXJ0cyBgdmFsdWVgIHRvIGEgcHJvcGVydHkgcGF0aCBhcnJheS5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjAuMFxuICAgICAqIEBjYXRlZ29yeSBVdGlsXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY29udmVydC5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIG5ldyBwcm9wZXJ0eSBwYXRoIGFycmF5LlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLnRvUGF0aCgnYS5iLmMnKTtcbiAgICAgKiAvLyA9PiBbJ2EnLCAnYicsICdjJ11cbiAgICAgKlxuICAgICAqIF8udG9QYXRoKCdhWzBdLmIuYycpO1xuICAgICAqIC8vID0+IFsnYScsICcwJywgJ2InLCAnYyddXG4gICAgICovXG4gICAgZnVuY3Rpb24gdG9QYXRoKHZhbHVlKSB7XG4gICAgICBpZiAoaXNBcnJheSh2YWx1ZSkpIHtcbiAgICAgICAgcmV0dXJuIGFycmF5TWFwKHZhbHVlLCB0b0tleSk7XG4gICAgICB9XG4gICAgICByZXR1cm4gaXNTeW1ib2wodmFsdWUpID8gW3ZhbHVlXSA6IGNvcHlBcnJheShzdHJpbmdUb1BhdGgodG9TdHJpbmcodmFsdWUpKSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogR2VuZXJhdGVzIGEgdW5pcXVlIElELiBJZiBgcHJlZml4YCBpcyBnaXZlbiwgdGhlIElEIGlzIGFwcGVuZGVkIHRvIGl0LlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBzaW5jZSAwLjEuMFxuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQGNhdGVnb3J5IFV0aWxcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gW3ByZWZpeD0nJ10gVGhlIHZhbHVlIHRvIHByZWZpeCB0aGUgSUQgd2l0aC5cbiAgICAgKiBAcmV0dXJucyB7c3RyaW5nfSBSZXR1cm5zIHRoZSB1bmlxdWUgSUQuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8udW5pcXVlSWQoJ2NvbnRhY3RfJyk7XG4gICAgICogLy8gPT4gJ2NvbnRhY3RfMTA0J1xuICAgICAqXG4gICAgICogXy51bmlxdWVJZCgpO1xuICAgICAqIC8vID0+ICcxMDUnXG4gICAgICovXG4gICAgZnVuY3Rpb24gdW5pcXVlSWQocHJlZml4KSB7XG4gICAgICB2YXIgaWQgPSArK2lkQ291bnRlcjtcbiAgICAgIHJldHVybiB0b1N0cmluZyhwcmVmaXgpICsgaWQ7XG4gICAgfVxuXG4gICAgLyotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0qL1xuXG4gICAgLyoqXG4gICAgICogQWRkcyB0d28gbnVtYmVycy5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAzLjQuMFxuICAgICAqIEBjYXRlZ29yeSBNYXRoXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IGF1Z2VuZCBUaGUgZmlyc3QgbnVtYmVyIGluIGFuIGFkZGl0aW9uLlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBhZGRlbmQgVGhlIHNlY29uZCBudW1iZXIgaW4gYW4gYWRkaXRpb24uXG4gICAgICogQHJldHVybnMge251bWJlcn0gUmV0dXJucyB0aGUgdG90YWwuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uYWRkKDYsIDQpO1xuICAgICAqIC8vID0+IDEwXG4gICAgICovXG4gICAgdmFyIGFkZCA9IGNyZWF0ZU1hdGhPcGVyYXRpb24oZnVuY3Rpb24oYXVnZW5kLCBhZGRlbmQpIHtcbiAgICAgIHJldHVybiBhdWdlbmQgKyBhZGRlbmQ7XG4gICAgfSwgMCk7XG5cbiAgICAvKipcbiAgICAgKiBDb21wdXRlcyBgbnVtYmVyYCByb3VuZGVkIHVwIHRvIGBwcmVjaXNpb25gLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDMuMTAuMFxuICAgICAqIEBjYXRlZ29yeSBNYXRoXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IG51bWJlciBUaGUgbnVtYmVyIHRvIHJvdW5kIHVwLlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBbcHJlY2lzaW9uPTBdIFRoZSBwcmVjaXNpb24gdG8gcm91bmQgdXAgdG8uXG4gICAgICogQHJldHVybnMge251bWJlcn0gUmV0dXJucyB0aGUgcm91bmRlZCB1cCBudW1iZXIuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uY2VpbCg0LjAwNik7XG4gICAgICogLy8gPT4gNVxuICAgICAqXG4gICAgICogXy5jZWlsKDYuMDA0LCAyKTtcbiAgICAgKiAvLyA9PiA2LjAxXG4gICAgICpcbiAgICAgKiBfLmNlaWwoNjA0MCwgLTIpO1xuICAgICAqIC8vID0+IDYxMDBcbiAgICAgKi9cbiAgICB2YXIgY2VpbCA9IGNyZWF0ZVJvdW5kKCdjZWlsJyk7XG5cbiAgICAvKipcbiAgICAgKiBEaXZpZGUgdHdvIG51bWJlcnMuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC43LjBcbiAgICAgKiBAY2F0ZWdvcnkgTWF0aFxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBkaXZpZGVuZCBUaGUgZmlyc3QgbnVtYmVyIGluIGEgZGl2aXNpb24uXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IGRpdmlzb3IgVGhlIHNlY29uZCBudW1iZXIgaW4gYSBkaXZpc2lvbi5cbiAgICAgKiBAcmV0dXJucyB7bnVtYmVyfSBSZXR1cm5zIHRoZSBxdW90aWVudC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5kaXZpZGUoNiwgNCk7XG4gICAgICogLy8gPT4gMS41XG4gICAgICovXG4gICAgdmFyIGRpdmlkZSA9IGNyZWF0ZU1hdGhPcGVyYXRpb24oZnVuY3Rpb24oZGl2aWRlbmQsIGRpdmlzb3IpIHtcbiAgICAgIHJldHVybiBkaXZpZGVuZCAvIGRpdmlzb3I7XG4gICAgfSwgMSk7XG5cbiAgICAvKipcbiAgICAgKiBDb21wdXRlcyBgbnVtYmVyYCByb3VuZGVkIGRvd24gdG8gYHByZWNpc2lvbmAuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMy4xMC4wXG4gICAgICogQGNhdGVnb3J5IE1hdGhcbiAgICAgKiBAcGFyYW0ge251bWJlcn0gbnVtYmVyIFRoZSBudW1iZXIgdG8gcm91bmQgZG93bi5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gW3ByZWNpc2lvbj0wXSBUaGUgcHJlY2lzaW9uIHRvIHJvdW5kIGRvd24gdG8uXG4gICAgICogQHJldHVybnMge251bWJlcn0gUmV0dXJucyB0aGUgcm91bmRlZCBkb3duIG51bWJlci5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5mbG9vcig0LjAwNik7XG4gICAgICogLy8gPT4gNFxuICAgICAqXG4gICAgICogXy5mbG9vcigwLjA0NiwgMik7XG4gICAgICogLy8gPT4gMC4wNFxuICAgICAqXG4gICAgICogXy5mbG9vcig0MDYwLCAtMik7XG4gICAgICogLy8gPT4gNDAwMFxuICAgICAqL1xuICAgIHZhciBmbG9vciA9IGNyZWF0ZVJvdW5kKCdmbG9vcicpO1xuXG4gICAgLyoqXG4gICAgICogQ29tcHV0ZXMgdGhlIG1heGltdW0gdmFsdWUgb2YgYGFycmF5YC4gSWYgYGFycmF5YCBpcyBlbXB0eSBvciBmYWxzZXksXG4gICAgICogYHVuZGVmaW5lZGAgaXMgcmV0dXJuZWQuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQHNpbmNlIDAuMS4wXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAY2F0ZWdvcnkgTWF0aFxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBpdGVyYXRlIG92ZXIuXG4gICAgICogQHJldHVybnMgeyp9IFJldHVybnMgdGhlIG1heGltdW0gdmFsdWUuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8ubWF4KFs0LCAyLCA4LCA2XSk7XG4gICAgICogLy8gPT4gOFxuICAgICAqXG4gICAgICogXy5tYXgoW10pO1xuICAgICAqIC8vID0+IHVuZGVmaW5lZFxuICAgICAqL1xuICAgIGZ1bmN0aW9uIG1heChhcnJheSkge1xuICAgICAgcmV0dXJuIChhcnJheSAmJiBhcnJheS5sZW5ndGgpXG4gICAgICAgID8gYmFzZUV4dHJlbXVtKGFycmF5LCBpZGVudGl0eSwgYmFzZUd0KVxuICAgICAgICA6IHVuZGVmaW5lZDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGlzIG1ldGhvZCBpcyBsaWtlIGBfLm1heGAgZXhjZXB0IHRoYXQgaXQgYWNjZXB0cyBgaXRlcmF0ZWVgIHdoaWNoIGlzXG4gICAgICogaW52b2tlZCBmb3IgZWFjaCBlbGVtZW50IGluIGBhcnJheWAgdG8gZ2VuZXJhdGUgdGhlIGNyaXRlcmlvbiBieSB3aGljaFxuICAgICAqIHRoZSB2YWx1ZSBpcyByYW5rZWQuIFRoZSBpdGVyYXRlZSBpcyBpbnZva2VkIHdpdGggb25lIGFyZ3VtZW50OiAodmFsdWUpLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMC4wXG4gICAgICogQGNhdGVnb3J5IE1hdGhcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gaXRlcmF0ZSBvdmVyLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtpdGVyYXRlZT1fLmlkZW50aXR5XSBUaGUgaXRlcmF0ZWUgaW52b2tlZCBwZXIgZWxlbWVudC5cbiAgICAgKiBAcmV0dXJucyB7Kn0gUmV0dXJucyB0aGUgbWF4aW11bSB2YWx1ZS5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIG9iamVjdHMgPSBbeyAnbic6IDEgfSwgeyAnbic6IDIgfV07XG4gICAgICpcbiAgICAgKiBfLm1heEJ5KG9iamVjdHMsIGZ1bmN0aW9uKG8pIHsgcmV0dXJuIG8ubjsgfSk7XG4gICAgICogLy8gPT4geyAnbic6IDIgfVxuICAgICAqXG4gICAgICogLy8gVGhlIGBfLnByb3BlcnR5YCBpdGVyYXRlZSBzaG9ydGhhbmQuXG4gICAgICogXy5tYXhCeShvYmplY3RzLCAnbicpO1xuICAgICAqIC8vID0+IHsgJ24nOiAyIH1cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBtYXhCeShhcnJheSwgaXRlcmF0ZWUpIHtcbiAgICAgIHJldHVybiAoYXJyYXkgJiYgYXJyYXkubGVuZ3RoKVxuICAgICAgICA/IGJhc2VFeHRyZW11bShhcnJheSwgZ2V0SXRlcmF0ZWUoaXRlcmF0ZWUsIDIpLCBiYXNlR3QpXG4gICAgICAgIDogdW5kZWZpbmVkO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENvbXB1dGVzIHRoZSBtZWFuIG9mIHRoZSB2YWx1ZXMgaW4gYGFycmF5YC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjAuMFxuICAgICAqIEBjYXRlZ29yeSBNYXRoXG4gICAgICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIGl0ZXJhdGUgb3Zlci5cbiAgICAgKiBAcmV0dXJucyB7bnVtYmVyfSBSZXR1cm5zIHRoZSBtZWFuLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLm1lYW4oWzQsIDIsIDgsIDZdKTtcbiAgICAgKiAvLyA9PiA1XG4gICAgICovXG4gICAgZnVuY3Rpb24gbWVhbihhcnJheSkge1xuICAgICAgcmV0dXJuIGJhc2VNZWFuKGFycmF5LCBpZGVudGl0eSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhpcyBtZXRob2QgaXMgbGlrZSBgXy5tZWFuYCBleGNlcHQgdGhhdCBpdCBhY2NlcHRzIGBpdGVyYXRlZWAgd2hpY2ggaXNcbiAgICAgKiBpbnZva2VkIGZvciBlYWNoIGVsZW1lbnQgaW4gYGFycmF5YCB0byBnZW5lcmF0ZSB0aGUgdmFsdWUgdG8gYmUgYXZlcmFnZWQuXG4gICAgICogVGhlIGl0ZXJhdGVlIGlzIGludm9rZWQgd2l0aCBvbmUgYXJndW1lbnQ6ICh2YWx1ZSkuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC43LjBcbiAgICAgKiBAY2F0ZWdvcnkgTWF0aFxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBpdGVyYXRlIG92ZXIuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gW2l0ZXJhdGVlPV8uaWRlbnRpdHldIFRoZSBpdGVyYXRlZSBpbnZva2VkIHBlciBlbGVtZW50LlxuICAgICAqIEByZXR1cm5zIHtudW1iZXJ9IFJldHVybnMgdGhlIG1lYW4uXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciBvYmplY3RzID0gW3sgJ24nOiA0IH0sIHsgJ24nOiAyIH0sIHsgJ24nOiA4IH0sIHsgJ24nOiA2IH1dO1xuICAgICAqXG4gICAgICogXy5tZWFuQnkob2JqZWN0cywgZnVuY3Rpb24obykgeyByZXR1cm4gby5uOyB9KTtcbiAgICAgKiAvLyA9PiA1XG4gICAgICpcbiAgICAgKiAvLyBUaGUgYF8ucHJvcGVydHlgIGl0ZXJhdGVlIHNob3J0aGFuZC5cbiAgICAgKiBfLm1lYW5CeShvYmplY3RzLCAnbicpO1xuICAgICAqIC8vID0+IDVcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBtZWFuQnkoYXJyYXksIGl0ZXJhdGVlKSB7XG4gICAgICByZXR1cm4gYmFzZU1lYW4oYXJyYXksIGdldEl0ZXJhdGVlKGl0ZXJhdGVlLCAyKSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ29tcHV0ZXMgdGhlIG1pbmltdW0gdmFsdWUgb2YgYGFycmF5YC4gSWYgYGFycmF5YCBpcyBlbXB0eSBvciBmYWxzZXksXG4gICAgICogYHVuZGVmaW5lZGAgaXMgcmV0dXJuZWQuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQHNpbmNlIDAuMS4wXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAY2F0ZWdvcnkgTWF0aFxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBpdGVyYXRlIG92ZXIuXG4gICAgICogQHJldHVybnMgeyp9IFJldHVybnMgdGhlIG1pbmltdW0gdmFsdWUuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8ubWluKFs0LCAyLCA4LCA2XSk7XG4gICAgICogLy8gPT4gMlxuICAgICAqXG4gICAgICogXy5taW4oW10pO1xuICAgICAqIC8vID0+IHVuZGVmaW5lZFxuICAgICAqL1xuICAgIGZ1bmN0aW9uIG1pbihhcnJheSkge1xuICAgICAgcmV0dXJuIChhcnJheSAmJiBhcnJheS5sZW5ndGgpXG4gICAgICAgID8gYmFzZUV4dHJlbXVtKGFycmF5LCBpZGVudGl0eSwgYmFzZUx0KVxuICAgICAgICA6IHVuZGVmaW5lZDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGlzIG1ldGhvZCBpcyBsaWtlIGBfLm1pbmAgZXhjZXB0IHRoYXQgaXQgYWNjZXB0cyBgaXRlcmF0ZWVgIHdoaWNoIGlzXG4gICAgICogaW52b2tlZCBmb3IgZWFjaCBlbGVtZW50IGluIGBhcnJheWAgdG8gZ2VuZXJhdGUgdGhlIGNyaXRlcmlvbiBieSB3aGljaFxuICAgICAqIHRoZSB2YWx1ZSBpcyByYW5rZWQuIFRoZSBpdGVyYXRlZSBpcyBpbnZva2VkIHdpdGggb25lIGFyZ3VtZW50OiAodmFsdWUpLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMC4wXG4gICAgICogQGNhdGVnb3J5IE1hdGhcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gaXRlcmF0ZSBvdmVyLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtpdGVyYXRlZT1fLmlkZW50aXR5XSBUaGUgaXRlcmF0ZWUgaW52b2tlZCBwZXIgZWxlbWVudC5cbiAgICAgKiBAcmV0dXJucyB7Kn0gUmV0dXJucyB0aGUgbWluaW11bSB2YWx1ZS5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIG9iamVjdHMgPSBbeyAnbic6IDEgfSwgeyAnbic6IDIgfV07XG4gICAgICpcbiAgICAgKiBfLm1pbkJ5KG9iamVjdHMsIGZ1bmN0aW9uKG8pIHsgcmV0dXJuIG8ubjsgfSk7XG4gICAgICogLy8gPT4geyAnbic6IDEgfVxuICAgICAqXG4gICAgICogLy8gVGhlIGBfLnByb3BlcnR5YCBpdGVyYXRlZSBzaG9ydGhhbmQuXG4gICAgICogXy5taW5CeShvYmplY3RzLCAnbicpO1xuICAgICAqIC8vID0+IHsgJ24nOiAxIH1cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBtaW5CeShhcnJheSwgaXRlcmF0ZWUpIHtcbiAgICAgIHJldHVybiAoYXJyYXkgJiYgYXJyYXkubGVuZ3RoKVxuICAgICAgICA/IGJhc2VFeHRyZW11bShhcnJheSwgZ2V0SXRlcmF0ZWUoaXRlcmF0ZWUsIDIpLCBiYXNlTHQpXG4gICAgICAgIDogdW5kZWZpbmVkO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIE11bHRpcGx5IHR3byBudW1iZXJzLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuNy4wXG4gICAgICogQGNhdGVnb3J5IE1hdGhcbiAgICAgKiBAcGFyYW0ge251bWJlcn0gbXVsdGlwbGllciBUaGUgZmlyc3QgbnVtYmVyIGluIGEgbXVsdGlwbGljYXRpb24uXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IG11bHRpcGxpY2FuZCBUaGUgc2Vjb25kIG51bWJlciBpbiBhIG11bHRpcGxpY2F0aW9uLlxuICAgICAqIEByZXR1cm5zIHtudW1iZXJ9IFJldHVybnMgdGhlIHByb2R1Y3QuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8ubXVsdGlwbHkoNiwgNCk7XG4gICAgICogLy8gPT4gMjRcbiAgICAgKi9cbiAgICB2YXIgbXVsdGlwbHkgPSBjcmVhdGVNYXRoT3BlcmF0aW9uKGZ1bmN0aW9uKG11bHRpcGxpZXIsIG11bHRpcGxpY2FuZCkge1xuICAgICAgcmV0dXJuIG11bHRpcGxpZXIgKiBtdWx0aXBsaWNhbmQ7XG4gICAgfSwgMSk7XG5cbiAgICAvKipcbiAgICAgKiBDb21wdXRlcyBgbnVtYmVyYCByb3VuZGVkIHRvIGBwcmVjaXNpb25gLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDMuMTAuMFxuICAgICAqIEBjYXRlZ29yeSBNYXRoXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IG51bWJlciBUaGUgbnVtYmVyIHRvIHJvdW5kLlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBbcHJlY2lzaW9uPTBdIFRoZSBwcmVjaXNpb24gdG8gcm91bmQgdG8uXG4gICAgICogQHJldHVybnMge251bWJlcn0gUmV0dXJucyB0aGUgcm91bmRlZCBudW1iZXIuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8ucm91bmQoNC4wMDYpO1xuICAgICAqIC8vID0+IDRcbiAgICAgKlxuICAgICAqIF8ucm91bmQoNC4wMDYsIDIpO1xuICAgICAqIC8vID0+IDQuMDFcbiAgICAgKlxuICAgICAqIF8ucm91bmQoNDA2MCwgLTIpO1xuICAgICAqIC8vID0+IDQxMDBcbiAgICAgKi9cbiAgICB2YXIgcm91bmQgPSBjcmVhdGVSb3VuZCgncm91bmQnKTtcblxuICAgIC8qKlxuICAgICAqIFN1YnRyYWN0IHR3byBudW1iZXJzLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMC4wXG4gICAgICogQGNhdGVnb3J5IE1hdGhcbiAgICAgKiBAcGFyYW0ge251bWJlcn0gbWludWVuZCBUaGUgZmlyc3QgbnVtYmVyIGluIGEgc3VidHJhY3Rpb24uXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IHN1YnRyYWhlbmQgVGhlIHNlY29uZCBudW1iZXIgaW4gYSBzdWJ0cmFjdGlvbi5cbiAgICAgKiBAcmV0dXJucyB7bnVtYmVyfSBSZXR1cm5zIHRoZSBkaWZmZXJlbmNlLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLnN1YnRyYWN0KDYsIDQpO1xuICAgICAqIC8vID0+IDJcbiAgICAgKi9cbiAgICB2YXIgc3VidHJhY3QgPSBjcmVhdGVNYXRoT3BlcmF0aW9uKGZ1bmN0aW9uKG1pbnVlbmQsIHN1YnRyYWhlbmQpIHtcbiAgICAgIHJldHVybiBtaW51ZW5kIC0gc3VidHJhaGVuZDtcbiAgICB9LCAwKTtcblxuICAgIC8qKlxuICAgICAqIENvbXB1dGVzIHRoZSBzdW0gb2YgdGhlIHZhbHVlcyBpbiBgYXJyYXlgLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDMuNC4wXG4gICAgICogQGNhdGVnb3J5IE1hdGhcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gaXRlcmF0ZSBvdmVyLlxuICAgICAqIEByZXR1cm5zIHtudW1iZXJ9IFJldHVybnMgdGhlIHN1bS5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5zdW0oWzQsIDIsIDgsIDZdKTtcbiAgICAgKiAvLyA9PiAyMFxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHN1bShhcnJheSkge1xuICAgICAgcmV0dXJuIChhcnJheSAmJiBhcnJheS5sZW5ndGgpXG4gICAgICAgID8gYmFzZVN1bShhcnJheSwgaWRlbnRpdHkpXG4gICAgICAgIDogMDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGlzIG1ldGhvZCBpcyBsaWtlIGBfLnN1bWAgZXhjZXB0IHRoYXQgaXQgYWNjZXB0cyBgaXRlcmF0ZWVgIHdoaWNoIGlzXG4gICAgICogaW52b2tlZCBmb3IgZWFjaCBlbGVtZW50IGluIGBhcnJheWAgdG8gZ2VuZXJhdGUgdGhlIHZhbHVlIHRvIGJlIHN1bW1lZC5cbiAgICAgKiBUaGUgaXRlcmF0ZWUgaXMgaW52b2tlZCB3aXRoIG9uZSBhcmd1bWVudDogKHZhbHVlKS5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjAuMFxuICAgICAqIEBjYXRlZ29yeSBNYXRoXG4gICAgICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIGl0ZXJhdGUgb3Zlci5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbaXRlcmF0ZWU9Xy5pZGVudGl0eV0gVGhlIGl0ZXJhdGVlIGludm9rZWQgcGVyIGVsZW1lbnQuXG4gICAgICogQHJldHVybnMge251bWJlcn0gUmV0dXJucyB0aGUgc3VtLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgb2JqZWN0cyA9IFt7ICduJzogNCB9LCB7ICduJzogMiB9LCB7ICduJzogOCB9LCB7ICduJzogNiB9XTtcbiAgICAgKlxuICAgICAqIF8uc3VtQnkob2JqZWN0cywgZnVuY3Rpb24obykgeyByZXR1cm4gby5uOyB9KTtcbiAgICAgKiAvLyA9PiAyMFxuICAgICAqXG4gICAgICogLy8gVGhlIGBfLnByb3BlcnR5YCBpdGVyYXRlZSBzaG9ydGhhbmQuXG4gICAgICogXy5zdW1CeShvYmplY3RzLCAnbicpO1xuICAgICAqIC8vID0+IDIwXG4gICAgICovXG4gICAgZnVuY3Rpb24gc3VtQnkoYXJyYXksIGl0ZXJhdGVlKSB7XG4gICAgICByZXR1cm4gKGFycmF5ICYmIGFycmF5Lmxlbmd0aClcbiAgICAgICAgPyBiYXNlU3VtKGFycmF5LCBnZXRJdGVyYXRlZShpdGVyYXRlZSwgMikpXG4gICAgICAgIDogMDtcbiAgICB9XG5cbiAgICAvKi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSovXG5cbiAgICAvLyBBZGQgbWV0aG9kcyB0aGF0IHJldHVybiB3cmFwcGVkIHZhbHVlcyBpbiBjaGFpbiBzZXF1ZW5jZXMuXG4gICAgbG9kYXNoLmFmdGVyID0gYWZ0ZXI7XG4gICAgbG9kYXNoLmFyeSA9IGFyeTtcbiAgICBsb2Rhc2guYXNzaWduID0gYXNzaWduO1xuICAgIGxvZGFzaC5hc3NpZ25JbiA9IGFzc2lnbkluO1xuICAgIGxvZGFzaC5hc3NpZ25JbldpdGggPSBhc3NpZ25JbldpdGg7XG4gICAgbG9kYXNoLmFzc2lnbldpdGggPSBhc3NpZ25XaXRoO1xuICAgIGxvZGFzaC5hdCA9IGF0O1xuICAgIGxvZGFzaC5iZWZvcmUgPSBiZWZvcmU7XG4gICAgbG9kYXNoLmJpbmQgPSBiaW5kO1xuICAgIGxvZGFzaC5iaW5kQWxsID0gYmluZEFsbDtcbiAgICBsb2Rhc2guYmluZEtleSA9IGJpbmRLZXk7XG4gICAgbG9kYXNoLmNhc3RBcnJheSA9IGNhc3RBcnJheTtcbiAgICBsb2Rhc2guY2hhaW4gPSBjaGFpbjtcbiAgICBsb2Rhc2guY2h1bmsgPSBjaHVuaztcbiAgICBsb2Rhc2guY29tcGFjdCA9IGNvbXBhY3Q7XG4gICAgbG9kYXNoLmNvbmNhdCA9IGNvbmNhdDtcbiAgICBsb2Rhc2guY29uZCA9IGNvbmQ7XG4gICAgbG9kYXNoLmNvbmZvcm1zID0gY29uZm9ybXM7XG4gICAgbG9kYXNoLmNvbnN0YW50ID0gY29uc3RhbnQ7XG4gICAgbG9kYXNoLmNvdW50QnkgPSBjb3VudEJ5O1xuICAgIGxvZGFzaC5jcmVhdGUgPSBjcmVhdGU7XG4gICAgbG9kYXNoLmN1cnJ5ID0gY3Vycnk7XG4gICAgbG9kYXNoLmN1cnJ5UmlnaHQgPSBjdXJyeVJpZ2h0O1xuICAgIGxvZGFzaC5kZWJvdW5jZSA9IGRlYm91bmNlO1xuICAgIGxvZGFzaC5kZWZhdWx0cyA9IGRlZmF1bHRzO1xuICAgIGxvZGFzaC5kZWZhdWx0c0RlZXAgPSBkZWZhdWx0c0RlZXA7XG4gICAgbG9kYXNoLmRlZmVyID0gZGVmZXI7XG4gICAgbG9kYXNoLmRlbGF5ID0gZGVsYXk7XG4gICAgbG9kYXNoLmRpZmZlcmVuY2UgPSBkaWZmZXJlbmNlO1xuICAgIGxvZGFzaC5kaWZmZXJlbmNlQnkgPSBkaWZmZXJlbmNlQnk7XG4gICAgbG9kYXNoLmRpZmZlcmVuY2VXaXRoID0gZGlmZmVyZW5jZVdpdGg7XG4gICAgbG9kYXNoLmRyb3AgPSBkcm9wO1xuICAgIGxvZGFzaC5kcm9wUmlnaHQgPSBkcm9wUmlnaHQ7XG4gICAgbG9kYXNoLmRyb3BSaWdodFdoaWxlID0gZHJvcFJpZ2h0V2hpbGU7XG4gICAgbG9kYXNoLmRyb3BXaGlsZSA9IGRyb3BXaGlsZTtcbiAgICBsb2Rhc2guZmlsbCA9IGZpbGw7XG4gICAgbG9kYXNoLmZpbHRlciA9IGZpbHRlcjtcbiAgICBsb2Rhc2guZmxhdE1hcCA9IGZsYXRNYXA7XG4gICAgbG9kYXNoLmZsYXRNYXBEZWVwID0gZmxhdE1hcERlZXA7XG4gICAgbG9kYXNoLmZsYXRNYXBEZXB0aCA9IGZsYXRNYXBEZXB0aDtcbiAgICBsb2Rhc2guZmxhdHRlbiA9IGZsYXR0ZW47XG4gICAgbG9kYXNoLmZsYXR0ZW5EZWVwID0gZmxhdHRlbkRlZXA7XG4gICAgbG9kYXNoLmZsYXR0ZW5EZXB0aCA9IGZsYXR0ZW5EZXB0aDtcbiAgICBsb2Rhc2guZmxpcCA9IGZsaXA7XG4gICAgbG9kYXNoLmZsb3cgPSBmbG93O1xuICAgIGxvZGFzaC5mbG93UmlnaHQgPSBmbG93UmlnaHQ7XG4gICAgbG9kYXNoLmZyb21QYWlycyA9IGZyb21QYWlycztcbiAgICBsb2Rhc2guZnVuY3Rpb25zID0gZnVuY3Rpb25zO1xuICAgIGxvZGFzaC5mdW5jdGlvbnNJbiA9IGZ1bmN0aW9uc0luO1xuICAgIGxvZGFzaC5ncm91cEJ5ID0gZ3JvdXBCeTtcbiAgICBsb2Rhc2guaW5pdGlhbCA9IGluaXRpYWw7XG4gICAgbG9kYXNoLmludGVyc2VjdGlvbiA9IGludGVyc2VjdGlvbjtcbiAgICBsb2Rhc2guaW50ZXJzZWN0aW9uQnkgPSBpbnRlcnNlY3Rpb25CeTtcbiAgICBsb2Rhc2guaW50ZXJzZWN0aW9uV2l0aCA9IGludGVyc2VjdGlvbldpdGg7XG4gICAgbG9kYXNoLmludmVydCA9IGludmVydDtcbiAgICBsb2Rhc2guaW52ZXJ0QnkgPSBpbnZlcnRCeTtcbiAgICBsb2Rhc2guaW52b2tlTWFwID0gaW52b2tlTWFwO1xuICAgIGxvZGFzaC5pdGVyYXRlZSA9IGl0ZXJhdGVlO1xuICAgIGxvZGFzaC5rZXlCeSA9IGtleUJ5O1xuICAgIGxvZGFzaC5rZXlzID0ga2V5cztcbiAgICBsb2Rhc2gua2V5c0luID0ga2V5c0luO1xuICAgIGxvZGFzaC5tYXAgPSBtYXA7XG4gICAgbG9kYXNoLm1hcEtleXMgPSBtYXBLZXlzO1xuICAgIGxvZGFzaC5tYXBWYWx1ZXMgPSBtYXBWYWx1ZXM7XG4gICAgbG9kYXNoLm1hdGNoZXMgPSBtYXRjaGVzO1xuICAgIGxvZGFzaC5tYXRjaGVzUHJvcGVydHkgPSBtYXRjaGVzUHJvcGVydHk7XG4gICAgbG9kYXNoLm1lbW9pemUgPSBtZW1vaXplO1xuICAgIGxvZGFzaC5tZXJnZSA9IG1lcmdlO1xuICAgIGxvZGFzaC5tZXJnZVdpdGggPSBtZXJnZVdpdGg7XG4gICAgbG9kYXNoLm1ldGhvZCA9IG1ldGhvZDtcbiAgICBsb2Rhc2gubWV0aG9kT2YgPSBtZXRob2RPZjtcbiAgICBsb2Rhc2gubWl4aW4gPSBtaXhpbjtcbiAgICBsb2Rhc2gubmVnYXRlID0gbmVnYXRlO1xuICAgIGxvZGFzaC5udGhBcmcgPSBudGhBcmc7XG4gICAgbG9kYXNoLm9taXQgPSBvbWl0O1xuICAgIGxvZGFzaC5vbWl0QnkgPSBvbWl0Qnk7XG4gICAgbG9kYXNoLm9uY2UgPSBvbmNlO1xuICAgIGxvZGFzaC5vcmRlckJ5ID0gb3JkZXJCeTtcbiAgICBsb2Rhc2gub3ZlciA9IG92ZXI7XG4gICAgbG9kYXNoLm92ZXJBcmdzID0gb3ZlckFyZ3M7XG4gICAgbG9kYXNoLm92ZXJFdmVyeSA9IG92ZXJFdmVyeTtcbiAgICBsb2Rhc2gub3ZlclNvbWUgPSBvdmVyU29tZTtcbiAgICBsb2Rhc2gucGFydGlhbCA9IHBhcnRpYWw7XG4gICAgbG9kYXNoLnBhcnRpYWxSaWdodCA9IHBhcnRpYWxSaWdodDtcbiAgICBsb2Rhc2gucGFydGl0aW9uID0gcGFydGl0aW9uO1xuICAgIGxvZGFzaC5waWNrID0gcGljaztcbiAgICBsb2Rhc2gucGlja0J5ID0gcGlja0J5O1xuICAgIGxvZGFzaC5wcm9wZXJ0eSA9IHByb3BlcnR5O1xuICAgIGxvZGFzaC5wcm9wZXJ0eU9mID0gcHJvcGVydHlPZjtcbiAgICBsb2Rhc2gucHVsbCA9IHB1bGw7XG4gICAgbG9kYXNoLnB1bGxBbGwgPSBwdWxsQWxsO1xuICAgIGxvZGFzaC5wdWxsQWxsQnkgPSBwdWxsQWxsQnk7XG4gICAgbG9kYXNoLnB1bGxBbGxXaXRoID0gcHVsbEFsbFdpdGg7XG4gICAgbG9kYXNoLnB1bGxBdCA9IHB1bGxBdDtcbiAgICBsb2Rhc2gucmFuZ2UgPSByYW5nZTtcbiAgICBsb2Rhc2gucmFuZ2VSaWdodCA9IHJhbmdlUmlnaHQ7XG4gICAgbG9kYXNoLnJlYXJnID0gcmVhcmc7XG4gICAgbG9kYXNoLnJlamVjdCA9IHJlamVjdDtcbiAgICBsb2Rhc2gucmVtb3ZlID0gcmVtb3ZlO1xuICAgIGxvZGFzaC5yZXN0ID0gcmVzdDtcbiAgICBsb2Rhc2gucmV2ZXJzZSA9IHJldmVyc2U7XG4gICAgbG9kYXNoLnNhbXBsZVNpemUgPSBzYW1wbGVTaXplO1xuICAgIGxvZGFzaC5zZXQgPSBzZXQ7XG4gICAgbG9kYXNoLnNldFdpdGggPSBzZXRXaXRoO1xuICAgIGxvZGFzaC5zaHVmZmxlID0gc2h1ZmZsZTtcbiAgICBsb2Rhc2guc2xpY2UgPSBzbGljZTtcbiAgICBsb2Rhc2guc29ydEJ5ID0gc29ydEJ5O1xuICAgIGxvZGFzaC5zb3J0ZWRVbmlxID0gc29ydGVkVW5pcTtcbiAgICBsb2Rhc2guc29ydGVkVW5pcUJ5ID0gc29ydGVkVW5pcUJ5O1xuICAgIGxvZGFzaC5zcGxpdCA9IHNwbGl0O1xuICAgIGxvZGFzaC5zcHJlYWQgPSBzcHJlYWQ7XG4gICAgbG9kYXNoLnRhaWwgPSB0YWlsO1xuICAgIGxvZGFzaC50YWtlID0gdGFrZTtcbiAgICBsb2Rhc2gudGFrZVJpZ2h0ID0gdGFrZVJpZ2h0O1xuICAgIGxvZGFzaC50YWtlUmlnaHRXaGlsZSA9IHRha2VSaWdodFdoaWxlO1xuICAgIGxvZGFzaC50YWtlV2hpbGUgPSB0YWtlV2hpbGU7XG4gICAgbG9kYXNoLnRhcCA9IHRhcDtcbiAgICBsb2Rhc2gudGhyb3R0bGUgPSB0aHJvdHRsZTtcbiAgICBsb2Rhc2gudGhydSA9IHRocnU7XG4gICAgbG9kYXNoLnRvQXJyYXkgPSB0b0FycmF5O1xuICAgIGxvZGFzaC50b1BhaXJzID0gdG9QYWlycztcbiAgICBsb2Rhc2gudG9QYWlyc0luID0gdG9QYWlyc0luO1xuICAgIGxvZGFzaC50b1BhdGggPSB0b1BhdGg7XG4gICAgbG9kYXNoLnRvUGxhaW5PYmplY3QgPSB0b1BsYWluT2JqZWN0O1xuICAgIGxvZGFzaC50cmFuc2Zvcm0gPSB0cmFuc2Zvcm07XG4gICAgbG9kYXNoLnVuYXJ5ID0gdW5hcnk7XG4gICAgbG9kYXNoLnVuaW9uID0gdW5pb247XG4gICAgbG9kYXNoLnVuaW9uQnkgPSB1bmlvbkJ5O1xuICAgIGxvZGFzaC51bmlvbldpdGggPSB1bmlvbldpdGg7XG4gICAgbG9kYXNoLnVuaXEgPSB1bmlxO1xuICAgIGxvZGFzaC51bmlxQnkgPSB1bmlxQnk7XG4gICAgbG9kYXNoLnVuaXFXaXRoID0gdW5pcVdpdGg7XG4gICAgbG9kYXNoLnVuc2V0ID0gdW5zZXQ7XG4gICAgbG9kYXNoLnVuemlwID0gdW56aXA7XG4gICAgbG9kYXNoLnVuemlwV2l0aCA9IHVuemlwV2l0aDtcbiAgICBsb2Rhc2gudXBkYXRlID0gdXBkYXRlO1xuICAgIGxvZGFzaC51cGRhdGVXaXRoID0gdXBkYXRlV2l0aDtcbiAgICBsb2Rhc2gudmFsdWVzID0gdmFsdWVzO1xuICAgIGxvZGFzaC52YWx1ZXNJbiA9IHZhbHVlc0luO1xuICAgIGxvZGFzaC53aXRob3V0ID0gd2l0aG91dDtcbiAgICBsb2Rhc2gud29yZHMgPSB3b3JkcztcbiAgICBsb2Rhc2gud3JhcCA9IHdyYXA7XG4gICAgbG9kYXNoLnhvciA9IHhvcjtcbiAgICBsb2Rhc2gueG9yQnkgPSB4b3JCeTtcbiAgICBsb2Rhc2gueG9yV2l0aCA9IHhvcldpdGg7XG4gICAgbG9kYXNoLnppcCA9IHppcDtcbiAgICBsb2Rhc2guemlwT2JqZWN0ID0gemlwT2JqZWN0O1xuICAgIGxvZGFzaC56aXBPYmplY3REZWVwID0gemlwT2JqZWN0RGVlcDtcbiAgICBsb2Rhc2guemlwV2l0aCA9IHppcFdpdGg7XG5cbiAgICAvLyBBZGQgYWxpYXNlcy5cbiAgICBsb2Rhc2guZW50cmllcyA9IHRvUGFpcnM7XG4gICAgbG9kYXNoLmVudHJpZXNJbiA9IHRvUGFpcnNJbjtcbiAgICBsb2Rhc2guZXh0ZW5kID0gYXNzaWduSW47XG4gICAgbG9kYXNoLmV4dGVuZFdpdGggPSBhc3NpZ25JbldpdGg7XG5cbiAgICAvLyBBZGQgbWV0aG9kcyB0byBgbG9kYXNoLnByb3RvdHlwZWAuXG4gICAgbWl4aW4obG9kYXNoLCBsb2Rhc2gpO1xuXG4gICAgLyotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0qL1xuXG4gICAgLy8gQWRkIG1ldGhvZHMgdGhhdCByZXR1cm4gdW53cmFwcGVkIHZhbHVlcyBpbiBjaGFpbiBzZXF1ZW5jZXMuXG4gICAgbG9kYXNoLmFkZCA9IGFkZDtcbiAgICBsb2Rhc2guYXR0ZW1wdCA9IGF0dGVtcHQ7XG4gICAgbG9kYXNoLmNhbWVsQ2FzZSA9IGNhbWVsQ2FzZTtcbiAgICBsb2Rhc2guY2FwaXRhbGl6ZSA9IGNhcGl0YWxpemU7XG4gICAgbG9kYXNoLmNlaWwgPSBjZWlsO1xuICAgIGxvZGFzaC5jbGFtcCA9IGNsYW1wO1xuICAgIGxvZGFzaC5jbG9uZSA9IGNsb25lO1xuICAgIGxvZGFzaC5jbG9uZURlZXAgPSBjbG9uZURlZXA7XG4gICAgbG9kYXNoLmNsb25lRGVlcFdpdGggPSBjbG9uZURlZXBXaXRoO1xuICAgIGxvZGFzaC5jbG9uZVdpdGggPSBjbG9uZVdpdGg7XG4gICAgbG9kYXNoLmNvbmZvcm1zVG8gPSBjb25mb3Jtc1RvO1xuICAgIGxvZGFzaC5kZWJ1cnIgPSBkZWJ1cnI7XG4gICAgbG9kYXNoLmRlZmF1bHRUbyA9IGRlZmF1bHRUbztcbiAgICBsb2Rhc2guZGl2aWRlID0gZGl2aWRlO1xuICAgIGxvZGFzaC5lbmRzV2l0aCA9IGVuZHNXaXRoO1xuICAgIGxvZGFzaC5lcSA9IGVxO1xuICAgIGxvZGFzaC5lc2NhcGUgPSBlc2NhcGU7XG4gICAgbG9kYXNoLmVzY2FwZVJlZ0V4cCA9IGVzY2FwZVJlZ0V4cDtcbiAgICBsb2Rhc2guZXZlcnkgPSBldmVyeTtcbiAgICBsb2Rhc2guZmluZCA9IGZpbmQ7XG4gICAgbG9kYXNoLmZpbmRJbmRleCA9IGZpbmRJbmRleDtcbiAgICBsb2Rhc2guZmluZEtleSA9IGZpbmRLZXk7XG4gICAgbG9kYXNoLmZpbmRMYXN0ID0gZmluZExhc3Q7XG4gICAgbG9kYXNoLmZpbmRMYXN0SW5kZXggPSBmaW5kTGFzdEluZGV4O1xuICAgIGxvZGFzaC5maW5kTGFzdEtleSA9IGZpbmRMYXN0S2V5O1xuICAgIGxvZGFzaC5mbG9vciA9IGZsb29yO1xuICAgIGxvZGFzaC5mb3JFYWNoID0gZm9yRWFjaDtcbiAgICBsb2Rhc2guZm9yRWFjaFJpZ2h0ID0gZm9yRWFjaFJpZ2h0O1xuICAgIGxvZGFzaC5mb3JJbiA9IGZvckluO1xuICAgIGxvZGFzaC5mb3JJblJpZ2h0ID0gZm9ySW5SaWdodDtcbiAgICBsb2Rhc2guZm9yT3duID0gZm9yT3duO1xuICAgIGxvZGFzaC5mb3JPd25SaWdodCA9IGZvck93blJpZ2h0O1xuICAgIGxvZGFzaC5nZXQgPSBnZXQ7XG4gICAgbG9kYXNoLmd0ID0gZ3Q7XG4gICAgbG9kYXNoLmd0ZSA9IGd0ZTtcbiAgICBsb2Rhc2guaGFzID0gaGFzO1xuICAgIGxvZGFzaC5oYXNJbiA9IGhhc0luO1xuICAgIGxvZGFzaC5oZWFkID0gaGVhZDtcbiAgICBsb2Rhc2guaWRlbnRpdHkgPSBpZGVudGl0eTtcbiAgICBsb2Rhc2guaW5jbHVkZXMgPSBpbmNsdWRlcztcbiAgICBsb2Rhc2guaW5kZXhPZiA9IGluZGV4T2Y7XG4gICAgbG9kYXNoLmluUmFuZ2UgPSBpblJhbmdlO1xuICAgIGxvZGFzaC5pbnZva2UgPSBpbnZva2U7XG4gICAgbG9kYXNoLmlzQXJndW1lbnRzID0gaXNBcmd1bWVudHM7XG4gICAgbG9kYXNoLmlzQXJyYXkgPSBpc0FycmF5O1xuICAgIGxvZGFzaC5pc0FycmF5QnVmZmVyID0gaXNBcnJheUJ1ZmZlcjtcbiAgICBsb2Rhc2guaXNBcnJheUxpa2UgPSBpc0FycmF5TGlrZTtcbiAgICBsb2Rhc2guaXNBcnJheUxpa2VPYmplY3QgPSBpc0FycmF5TGlrZU9iamVjdDtcbiAgICBsb2Rhc2guaXNCb29sZWFuID0gaXNCb29sZWFuO1xuICAgIGxvZGFzaC5pc0J1ZmZlciA9IGlzQnVmZmVyO1xuICAgIGxvZGFzaC5pc0RhdGUgPSBpc0RhdGU7XG4gICAgbG9kYXNoLmlzRWxlbWVudCA9IGlzRWxlbWVudDtcbiAgICBsb2Rhc2guaXNFbXB0eSA9IGlzRW1wdHk7XG4gICAgbG9kYXNoLmlzRXF1YWwgPSBpc0VxdWFsO1xuICAgIGxvZGFzaC5pc0VxdWFsV2l0aCA9IGlzRXF1YWxXaXRoO1xuICAgIGxvZGFzaC5pc0Vycm9yID0gaXNFcnJvcjtcbiAgICBsb2Rhc2guaXNGaW5pdGUgPSBpc0Zpbml0ZTtcbiAgICBsb2Rhc2guaXNGdW5jdGlvbiA9IGlzRnVuY3Rpb247XG4gICAgbG9kYXNoLmlzSW50ZWdlciA9IGlzSW50ZWdlcjtcbiAgICBsb2Rhc2guaXNMZW5ndGggPSBpc0xlbmd0aDtcbiAgICBsb2Rhc2guaXNNYXAgPSBpc01hcDtcbiAgICBsb2Rhc2guaXNNYXRjaCA9IGlzTWF0Y2g7XG4gICAgbG9kYXNoLmlzTWF0Y2hXaXRoID0gaXNNYXRjaFdpdGg7XG4gICAgbG9kYXNoLmlzTmFOID0gaXNOYU47XG4gICAgbG9kYXNoLmlzTmF0aXZlID0gaXNOYXRpdmU7XG4gICAgbG9kYXNoLmlzTmlsID0gaXNOaWw7XG4gICAgbG9kYXNoLmlzTnVsbCA9IGlzTnVsbDtcbiAgICBsb2Rhc2guaXNOdW1iZXIgPSBpc051bWJlcjtcbiAgICBsb2Rhc2guaXNPYmplY3QgPSBpc09iamVjdDtcbiAgICBsb2Rhc2guaXNPYmplY3RMaWtlID0gaXNPYmplY3RMaWtlO1xuICAgIGxvZGFzaC5pc1BsYWluT2JqZWN0ID0gaXNQbGFpbk9iamVjdDtcbiAgICBsb2Rhc2guaXNSZWdFeHAgPSBpc1JlZ0V4cDtcbiAgICBsb2Rhc2guaXNTYWZlSW50ZWdlciA9IGlzU2FmZUludGVnZXI7XG4gICAgbG9kYXNoLmlzU2V0ID0gaXNTZXQ7XG4gICAgbG9kYXNoLmlzU3RyaW5nID0gaXNTdHJpbmc7XG4gICAgbG9kYXNoLmlzU3ltYm9sID0gaXNTeW1ib2w7XG4gICAgbG9kYXNoLmlzVHlwZWRBcnJheSA9IGlzVHlwZWRBcnJheTtcbiAgICBsb2Rhc2guaXNVbmRlZmluZWQgPSBpc1VuZGVmaW5lZDtcbiAgICBsb2Rhc2guaXNXZWFrTWFwID0gaXNXZWFrTWFwO1xuICAgIGxvZGFzaC5pc1dlYWtTZXQgPSBpc1dlYWtTZXQ7XG4gICAgbG9kYXNoLmpvaW4gPSBqb2luO1xuICAgIGxvZGFzaC5rZWJhYkNhc2UgPSBrZWJhYkNhc2U7XG4gICAgbG9kYXNoLmxhc3QgPSBsYXN0O1xuICAgIGxvZGFzaC5sYXN0SW5kZXhPZiA9IGxhc3RJbmRleE9mO1xuICAgIGxvZGFzaC5sb3dlckNhc2UgPSBsb3dlckNhc2U7XG4gICAgbG9kYXNoLmxvd2VyRmlyc3QgPSBsb3dlckZpcnN0O1xuICAgIGxvZGFzaC5sdCA9IGx0O1xuICAgIGxvZGFzaC5sdGUgPSBsdGU7XG4gICAgbG9kYXNoLm1heCA9IG1heDtcbiAgICBsb2Rhc2gubWF4QnkgPSBtYXhCeTtcbiAgICBsb2Rhc2gubWVhbiA9IG1lYW47XG4gICAgbG9kYXNoLm1lYW5CeSA9IG1lYW5CeTtcbiAgICBsb2Rhc2gubWluID0gbWluO1xuICAgIGxvZGFzaC5taW5CeSA9IG1pbkJ5O1xuICAgIGxvZGFzaC5zdHViQXJyYXkgPSBzdHViQXJyYXk7XG4gICAgbG9kYXNoLnN0dWJGYWxzZSA9IHN0dWJGYWxzZTtcbiAgICBsb2Rhc2guc3R1Yk9iamVjdCA9IHN0dWJPYmplY3Q7XG4gICAgbG9kYXNoLnN0dWJTdHJpbmcgPSBzdHViU3RyaW5nO1xuICAgIGxvZGFzaC5zdHViVHJ1ZSA9IHN0dWJUcnVlO1xuICAgIGxvZGFzaC5tdWx0aXBseSA9IG11bHRpcGx5O1xuICAgIGxvZGFzaC5udGggPSBudGg7XG4gICAgbG9kYXNoLm5vQ29uZmxpY3QgPSBub0NvbmZsaWN0O1xuICAgIGxvZGFzaC5ub29wID0gbm9vcDtcbiAgICBsb2Rhc2gubm93ID0gbm93O1xuICAgIGxvZGFzaC5wYWQgPSBwYWQ7XG4gICAgbG9kYXNoLnBhZEVuZCA9IHBhZEVuZDtcbiAgICBsb2Rhc2gucGFkU3RhcnQgPSBwYWRTdGFydDtcbiAgICBsb2Rhc2gucGFyc2VJbnQgPSBwYXJzZUludDtcbiAgICBsb2Rhc2gucmFuZG9tID0gcmFuZG9tO1xuICAgIGxvZGFzaC5yZWR1Y2UgPSByZWR1Y2U7XG4gICAgbG9kYXNoLnJlZHVjZVJpZ2h0ID0gcmVkdWNlUmlnaHQ7XG4gICAgbG9kYXNoLnJlcGVhdCA9IHJlcGVhdDtcbiAgICBsb2Rhc2gucmVwbGFjZSA9IHJlcGxhY2U7XG4gICAgbG9kYXNoLnJlc3VsdCA9IHJlc3VsdDtcbiAgICBsb2Rhc2gucm91bmQgPSByb3VuZDtcbiAgICBsb2Rhc2gucnVuSW5Db250ZXh0ID0gcnVuSW5Db250ZXh0O1xuICAgIGxvZGFzaC5zYW1wbGUgPSBzYW1wbGU7XG4gICAgbG9kYXNoLnNpemUgPSBzaXplO1xuICAgIGxvZGFzaC5zbmFrZUNhc2UgPSBzbmFrZUNhc2U7XG4gICAgbG9kYXNoLnNvbWUgPSBzb21lO1xuICAgIGxvZGFzaC5zb3J0ZWRJbmRleCA9IHNvcnRlZEluZGV4O1xuICAgIGxvZGFzaC5zb3J0ZWRJbmRleEJ5ID0gc29ydGVkSW5kZXhCeTtcbiAgICBsb2Rhc2guc29ydGVkSW5kZXhPZiA9IHNvcnRlZEluZGV4T2Y7XG4gICAgbG9kYXNoLnNvcnRlZExhc3RJbmRleCA9IHNvcnRlZExhc3RJbmRleDtcbiAgICBsb2Rhc2guc29ydGVkTGFzdEluZGV4QnkgPSBzb3J0ZWRMYXN0SW5kZXhCeTtcbiAgICBsb2Rhc2guc29ydGVkTGFzdEluZGV4T2YgPSBzb3J0ZWRMYXN0SW5kZXhPZjtcbiAgICBsb2Rhc2guc3RhcnRDYXNlID0gc3RhcnRDYXNlO1xuICAgIGxvZGFzaC5zdGFydHNXaXRoID0gc3RhcnRzV2l0aDtcbiAgICBsb2Rhc2guc3VidHJhY3QgPSBzdWJ0cmFjdDtcbiAgICBsb2Rhc2guc3VtID0gc3VtO1xuICAgIGxvZGFzaC5zdW1CeSA9IHN1bUJ5O1xuICAgIGxvZGFzaC50ZW1wbGF0ZSA9IHRlbXBsYXRlO1xuICAgIGxvZGFzaC50aW1lcyA9IHRpbWVzO1xuICAgIGxvZGFzaC50b0Zpbml0ZSA9IHRvRmluaXRlO1xuICAgIGxvZGFzaC50b0ludGVnZXIgPSB0b0ludGVnZXI7XG4gICAgbG9kYXNoLnRvTGVuZ3RoID0gdG9MZW5ndGg7XG4gICAgbG9kYXNoLnRvTG93ZXIgPSB0b0xvd2VyO1xuICAgIGxvZGFzaC50b051bWJlciA9IHRvTnVtYmVyO1xuICAgIGxvZGFzaC50b1NhZmVJbnRlZ2VyID0gdG9TYWZlSW50ZWdlcjtcbiAgICBsb2Rhc2gudG9TdHJpbmcgPSB0b1N0cmluZztcbiAgICBsb2Rhc2gudG9VcHBlciA9IHRvVXBwZXI7XG4gICAgbG9kYXNoLnRyaW0gPSB0cmltO1xuICAgIGxvZGFzaC50cmltRW5kID0gdHJpbUVuZDtcbiAgICBsb2Rhc2gudHJpbVN0YXJ0ID0gdHJpbVN0YXJ0O1xuICAgIGxvZGFzaC50cnVuY2F0ZSA9IHRydW5jYXRlO1xuICAgIGxvZGFzaC51bmVzY2FwZSA9IHVuZXNjYXBlO1xuICAgIGxvZGFzaC51bmlxdWVJZCA9IHVuaXF1ZUlkO1xuICAgIGxvZGFzaC51cHBlckNhc2UgPSB1cHBlckNhc2U7XG4gICAgbG9kYXNoLnVwcGVyRmlyc3QgPSB1cHBlckZpcnN0O1xuXG4gICAgLy8gQWRkIGFsaWFzZXMuXG4gICAgbG9kYXNoLmVhY2ggPSBmb3JFYWNoO1xuICAgIGxvZGFzaC5lYWNoUmlnaHQgPSBmb3JFYWNoUmlnaHQ7XG4gICAgbG9kYXNoLmZpcnN0ID0gaGVhZDtcblxuICAgIG1peGluKGxvZGFzaCwgKGZ1bmN0aW9uKCkge1xuICAgICAgdmFyIHNvdXJjZSA9IHt9O1xuICAgICAgYmFzZUZvck93bihsb2Rhc2gsIGZ1bmN0aW9uKGZ1bmMsIG1ldGhvZE5hbWUpIHtcbiAgICAgICAgaWYgKCFoYXNPd25Qcm9wZXJ0eS5jYWxsKGxvZGFzaC5wcm90b3R5cGUsIG1ldGhvZE5hbWUpKSB7XG4gICAgICAgICAgc291cmNlW21ldGhvZE5hbWVdID0gZnVuYztcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgICByZXR1cm4gc291cmNlO1xuICAgIH0oKSksIHsgJ2NoYWluJzogZmFsc2UgfSk7XG5cbiAgICAvKi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSovXG5cbiAgICAvKipcbiAgICAgKiBUaGUgc2VtYW50aWMgdmVyc2lvbiBudW1iZXIuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAdHlwZSB7c3RyaW5nfVxuICAgICAqL1xuICAgIGxvZGFzaC5WRVJTSU9OID0gVkVSU0lPTjtcblxuICAgIC8vIEFzc2lnbiBkZWZhdWx0IHBsYWNlaG9sZGVycy5cbiAgICBhcnJheUVhY2goWydiaW5kJywgJ2JpbmRLZXknLCAnY3VycnknLCAnY3VycnlSaWdodCcsICdwYXJ0aWFsJywgJ3BhcnRpYWxSaWdodCddLCBmdW5jdGlvbihtZXRob2ROYW1lKSB7XG4gICAgICBsb2Rhc2hbbWV0aG9kTmFtZV0ucGxhY2Vob2xkZXIgPSBsb2Rhc2g7XG4gICAgfSk7XG5cbiAgICAvLyBBZGQgYExhenlXcmFwcGVyYCBtZXRob2RzIGZvciBgXy5kcm9wYCBhbmQgYF8udGFrZWAgdmFyaWFudHMuXG4gICAgYXJyYXlFYWNoKFsnZHJvcCcsICd0YWtlJ10sIGZ1bmN0aW9uKG1ldGhvZE5hbWUsIGluZGV4KSB7XG4gICAgICBMYXp5V3JhcHBlci5wcm90b3R5cGVbbWV0aG9kTmFtZV0gPSBmdW5jdGlvbihuKSB7XG4gICAgICAgIG4gPSBuID09PSB1bmRlZmluZWQgPyAxIDogbmF0aXZlTWF4KHRvSW50ZWdlcihuKSwgMCk7XG5cbiAgICAgICAgdmFyIHJlc3VsdCA9ICh0aGlzLl9fZmlsdGVyZWRfXyAmJiAhaW5kZXgpXG4gICAgICAgICAgPyBuZXcgTGF6eVdyYXBwZXIodGhpcylcbiAgICAgICAgICA6IHRoaXMuY2xvbmUoKTtcblxuICAgICAgICBpZiAocmVzdWx0Ll9fZmlsdGVyZWRfXykge1xuICAgICAgICAgIHJlc3VsdC5fX3Rha2VDb3VudF9fID0gbmF0aXZlTWluKG4sIHJlc3VsdC5fX3Rha2VDb3VudF9fKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICByZXN1bHQuX192aWV3c19fLnB1c2goe1xuICAgICAgICAgICAgJ3NpemUnOiBuYXRpdmVNaW4obiwgTUFYX0FSUkFZX0xFTkdUSCksXG4gICAgICAgICAgICAndHlwZSc6IG1ldGhvZE5hbWUgKyAocmVzdWx0Ll9fZGlyX18gPCAwID8gJ1JpZ2h0JyA6ICcnKVxuICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgICB9O1xuXG4gICAgICBMYXp5V3JhcHBlci5wcm90b3R5cGVbbWV0aG9kTmFtZSArICdSaWdodCddID0gZnVuY3Rpb24obikge1xuICAgICAgICByZXR1cm4gdGhpcy5yZXZlcnNlKClbbWV0aG9kTmFtZV0obikucmV2ZXJzZSgpO1xuICAgICAgfTtcbiAgICB9KTtcblxuICAgIC8vIEFkZCBgTGF6eVdyYXBwZXJgIG1ldGhvZHMgdGhhdCBhY2NlcHQgYW4gYGl0ZXJhdGVlYCB2YWx1ZS5cbiAgICBhcnJheUVhY2goWydmaWx0ZXInLCAnbWFwJywgJ3Rha2VXaGlsZSddLCBmdW5jdGlvbihtZXRob2ROYW1lLCBpbmRleCkge1xuICAgICAgdmFyIHR5cGUgPSBpbmRleCArIDEsXG4gICAgICAgICAgaXNGaWx0ZXIgPSB0eXBlID09IExBWllfRklMVEVSX0ZMQUcgfHwgdHlwZSA9PSBMQVpZX1dISUxFX0ZMQUc7XG5cbiAgICAgIExhenlXcmFwcGVyLnByb3RvdHlwZVttZXRob2ROYW1lXSA9IGZ1bmN0aW9uKGl0ZXJhdGVlKSB7XG4gICAgICAgIHZhciByZXN1bHQgPSB0aGlzLmNsb25lKCk7XG4gICAgICAgIHJlc3VsdC5fX2l0ZXJhdGVlc19fLnB1c2goe1xuICAgICAgICAgICdpdGVyYXRlZSc6IGdldEl0ZXJhdGVlKGl0ZXJhdGVlLCAzKSxcbiAgICAgICAgICAndHlwZSc6IHR5cGVcbiAgICAgICAgfSk7XG4gICAgICAgIHJlc3VsdC5fX2ZpbHRlcmVkX18gPSByZXN1bHQuX19maWx0ZXJlZF9fIHx8IGlzRmlsdGVyO1xuICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgICAgfTtcbiAgICB9KTtcblxuICAgIC8vIEFkZCBgTGF6eVdyYXBwZXJgIG1ldGhvZHMgZm9yIGBfLmhlYWRgIGFuZCBgXy5sYXN0YC5cbiAgICBhcnJheUVhY2goWydoZWFkJywgJ2xhc3QnXSwgZnVuY3Rpb24obWV0aG9kTmFtZSwgaW5kZXgpIHtcbiAgICAgIHZhciB0YWtlTmFtZSA9ICd0YWtlJyArIChpbmRleCA/ICdSaWdodCcgOiAnJyk7XG5cbiAgICAgIExhenlXcmFwcGVyLnByb3RvdHlwZVttZXRob2ROYW1lXSA9IGZ1bmN0aW9uKCkge1xuICAgICAgICByZXR1cm4gdGhpc1t0YWtlTmFtZV0oMSkudmFsdWUoKVswXTtcbiAgICAgIH07XG4gICAgfSk7XG5cbiAgICAvLyBBZGQgYExhenlXcmFwcGVyYCBtZXRob2RzIGZvciBgXy5pbml0aWFsYCBhbmQgYF8udGFpbGAuXG4gICAgYXJyYXlFYWNoKFsnaW5pdGlhbCcsICd0YWlsJ10sIGZ1bmN0aW9uKG1ldGhvZE5hbWUsIGluZGV4KSB7XG4gICAgICB2YXIgZHJvcE5hbWUgPSAnZHJvcCcgKyAoaW5kZXggPyAnJyA6ICdSaWdodCcpO1xuXG4gICAgICBMYXp5V3JhcHBlci5wcm90b3R5cGVbbWV0aG9kTmFtZV0gPSBmdW5jdGlvbigpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX19maWx0ZXJlZF9fID8gbmV3IExhenlXcmFwcGVyKHRoaXMpIDogdGhpc1tkcm9wTmFtZV0oMSk7XG4gICAgICB9O1xuICAgIH0pO1xuXG4gICAgTGF6eVdyYXBwZXIucHJvdG90eXBlLmNvbXBhY3QgPSBmdW5jdGlvbigpIHtcbiAgICAgIHJldHVybiB0aGlzLmZpbHRlcihpZGVudGl0eSk7XG4gICAgfTtcblxuICAgIExhenlXcmFwcGVyLnByb3RvdHlwZS5maW5kID0gZnVuY3Rpb24ocHJlZGljYXRlKSB7XG4gICAgICByZXR1cm4gdGhpcy5maWx0ZXIocHJlZGljYXRlKS5oZWFkKCk7XG4gICAgfTtcblxuICAgIExhenlXcmFwcGVyLnByb3RvdHlwZS5maW5kTGFzdCA9IGZ1bmN0aW9uKHByZWRpY2F0ZSkge1xuICAgICAgcmV0dXJuIHRoaXMucmV2ZXJzZSgpLmZpbmQocHJlZGljYXRlKTtcbiAgICB9O1xuXG4gICAgTGF6eVdyYXBwZXIucHJvdG90eXBlLmludm9rZU1hcCA9IGJhc2VSZXN0KGZ1bmN0aW9uKHBhdGgsIGFyZ3MpIHtcbiAgICAgIGlmICh0eXBlb2YgcGF0aCA9PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgIHJldHVybiBuZXcgTGF6eVdyYXBwZXIodGhpcyk7XG4gICAgICB9XG4gICAgICByZXR1cm4gdGhpcy5tYXAoZnVuY3Rpb24odmFsdWUpIHtcbiAgICAgICAgcmV0dXJuIGJhc2VJbnZva2UodmFsdWUsIHBhdGgsIGFyZ3MpO1xuICAgICAgfSk7XG4gICAgfSk7XG5cbiAgICBMYXp5V3JhcHBlci5wcm90b3R5cGUucmVqZWN0ID0gZnVuY3Rpb24ocHJlZGljYXRlKSB7XG4gICAgICByZXR1cm4gdGhpcy5maWx0ZXIobmVnYXRlKGdldEl0ZXJhdGVlKHByZWRpY2F0ZSkpKTtcbiAgICB9O1xuXG4gICAgTGF6eVdyYXBwZXIucHJvdG90eXBlLnNsaWNlID0gZnVuY3Rpb24oc3RhcnQsIGVuZCkge1xuICAgICAgc3RhcnQgPSB0b0ludGVnZXIoc3RhcnQpO1xuXG4gICAgICB2YXIgcmVzdWx0ID0gdGhpcztcbiAgICAgIGlmIChyZXN1bHQuX19maWx0ZXJlZF9fICYmIChzdGFydCA+IDAgfHwgZW5kIDwgMCkpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBMYXp5V3JhcHBlcihyZXN1bHQpO1xuICAgICAgfVxuICAgICAgaWYgKHN0YXJ0IDwgMCkge1xuICAgICAgICByZXN1bHQgPSByZXN1bHQudGFrZVJpZ2h0KC1zdGFydCk7XG4gICAgICB9IGVsc2UgaWYgKHN0YXJ0KSB7XG4gICAgICAgIHJlc3VsdCA9IHJlc3VsdC5kcm9wKHN0YXJ0KTtcbiAgICAgIH1cbiAgICAgIGlmIChlbmQgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICBlbmQgPSB0b0ludGVnZXIoZW5kKTtcbiAgICAgICAgcmVzdWx0ID0gZW5kIDwgMCA/IHJlc3VsdC5kcm9wUmlnaHQoLWVuZCkgOiByZXN1bHQudGFrZShlbmQgLSBzdGFydCk7XG4gICAgICB9XG4gICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH07XG5cbiAgICBMYXp5V3JhcHBlci5wcm90b3R5cGUudGFrZVJpZ2h0V2hpbGUgPSBmdW5jdGlvbihwcmVkaWNhdGUpIHtcbiAgICAgIHJldHVybiB0aGlzLnJldmVyc2UoKS50YWtlV2hpbGUocHJlZGljYXRlKS5yZXZlcnNlKCk7XG4gICAgfTtcblxuICAgIExhenlXcmFwcGVyLnByb3RvdHlwZS50b0FycmF5ID0gZnVuY3Rpb24oKSB7XG4gICAgICByZXR1cm4gdGhpcy50YWtlKE1BWF9BUlJBWV9MRU5HVEgpO1xuICAgIH07XG5cbiAgICAvLyBBZGQgYExhenlXcmFwcGVyYCBtZXRob2RzIHRvIGBsb2Rhc2gucHJvdG90eXBlYC5cbiAgICBiYXNlRm9yT3duKExhenlXcmFwcGVyLnByb3RvdHlwZSwgZnVuY3Rpb24oZnVuYywgbWV0aG9kTmFtZSkge1xuICAgICAgdmFyIGNoZWNrSXRlcmF0ZWUgPSAvXig/OmZpbHRlcnxmaW5kfG1hcHxyZWplY3QpfFdoaWxlJC8udGVzdChtZXRob2ROYW1lKSxcbiAgICAgICAgICBpc1Rha2VyID0gL14oPzpoZWFkfGxhc3QpJC8udGVzdChtZXRob2ROYW1lKSxcbiAgICAgICAgICBsb2Rhc2hGdW5jID0gbG9kYXNoW2lzVGFrZXIgPyAoJ3Rha2UnICsgKG1ldGhvZE5hbWUgPT0gJ2xhc3QnID8gJ1JpZ2h0JyA6ICcnKSkgOiBtZXRob2ROYW1lXSxcbiAgICAgICAgICByZXRVbndyYXBwZWQgPSBpc1Rha2VyIHx8IC9eZmluZC8udGVzdChtZXRob2ROYW1lKTtcblxuICAgICAgaWYgKCFsb2Rhc2hGdW5jKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgIGxvZGFzaC5wcm90b3R5cGVbbWV0aG9kTmFtZV0gPSBmdW5jdGlvbigpIHtcbiAgICAgICAgdmFyIHZhbHVlID0gdGhpcy5fX3dyYXBwZWRfXyxcbiAgICAgICAgICAgIGFyZ3MgPSBpc1Rha2VyID8gWzFdIDogYXJndW1lbnRzLFxuICAgICAgICAgICAgaXNMYXp5ID0gdmFsdWUgaW5zdGFuY2VvZiBMYXp5V3JhcHBlcixcbiAgICAgICAgICAgIGl0ZXJhdGVlID0gYXJnc1swXSxcbiAgICAgICAgICAgIHVzZUxhenkgPSBpc0xhenkgfHwgaXNBcnJheSh2YWx1ZSk7XG5cbiAgICAgICAgdmFyIGludGVyY2VwdG9yID0gZnVuY3Rpb24odmFsdWUpIHtcbiAgICAgICAgICB2YXIgcmVzdWx0ID0gbG9kYXNoRnVuYy5hcHBseShsb2Rhc2gsIGFycmF5UHVzaChbdmFsdWVdLCBhcmdzKSk7XG4gICAgICAgICAgcmV0dXJuIChpc1Rha2VyICYmIGNoYWluQWxsKSA/IHJlc3VsdFswXSA6IHJlc3VsdDtcbiAgICAgICAgfTtcblxuICAgICAgICBpZiAodXNlTGF6eSAmJiBjaGVja0l0ZXJhdGVlICYmIHR5cGVvZiBpdGVyYXRlZSA9PSAnZnVuY3Rpb24nICYmIGl0ZXJhdGVlLmxlbmd0aCAhPSAxKSB7XG4gICAgICAgICAgLy8gQXZvaWQgbGF6eSB1c2UgaWYgdGhlIGl0ZXJhdGVlIGhhcyBhIFwibGVuZ3RoXCIgdmFsdWUgb3RoZXIgdGhhbiBgMWAuXG4gICAgICAgICAgaXNMYXp5ID0gdXNlTGF6eSA9IGZhbHNlO1xuICAgICAgICB9XG4gICAgICAgIHZhciBjaGFpbkFsbCA9IHRoaXMuX19jaGFpbl9fLFxuICAgICAgICAgICAgaXNIeWJyaWQgPSAhIXRoaXMuX19hY3Rpb25zX18ubGVuZ3RoLFxuICAgICAgICAgICAgaXNVbndyYXBwZWQgPSByZXRVbndyYXBwZWQgJiYgIWNoYWluQWxsLFxuICAgICAgICAgICAgb25seUxhenkgPSBpc0xhenkgJiYgIWlzSHlicmlkO1xuXG4gICAgICAgIGlmICghcmV0VW53cmFwcGVkICYmIHVzZUxhenkpIHtcbiAgICAgICAgICB2YWx1ZSA9IG9ubHlMYXp5ID8gdmFsdWUgOiBuZXcgTGF6eVdyYXBwZXIodGhpcyk7XG4gICAgICAgICAgdmFyIHJlc3VsdCA9IGZ1bmMuYXBwbHkodmFsdWUsIGFyZ3MpO1xuICAgICAgICAgIHJlc3VsdC5fX2FjdGlvbnNfXy5wdXNoKHsgJ2Z1bmMnOiB0aHJ1LCAnYXJncyc6IFtpbnRlcmNlcHRvcl0sICd0aGlzQXJnJzogdW5kZWZpbmVkIH0pO1xuICAgICAgICAgIHJldHVybiBuZXcgTG9kYXNoV3JhcHBlcihyZXN1bHQsIGNoYWluQWxsKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoaXNVbndyYXBwZWQgJiYgb25seUxhenkpIHtcbiAgICAgICAgICByZXR1cm4gZnVuYy5hcHBseSh0aGlzLCBhcmdzKTtcbiAgICAgICAgfVxuICAgICAgICByZXN1bHQgPSB0aGlzLnRocnUoaW50ZXJjZXB0b3IpO1xuICAgICAgICByZXR1cm4gaXNVbndyYXBwZWQgPyAoaXNUYWtlciA/IHJlc3VsdC52YWx1ZSgpWzBdIDogcmVzdWx0LnZhbHVlKCkpIDogcmVzdWx0O1xuICAgICAgfTtcbiAgICB9KTtcblxuICAgIC8vIEFkZCBgQXJyYXlgIG1ldGhvZHMgdG8gYGxvZGFzaC5wcm90b3R5cGVgLlxuICAgIGFycmF5RWFjaChbJ3BvcCcsICdwdXNoJywgJ3NoaWZ0JywgJ3NvcnQnLCAnc3BsaWNlJywgJ3Vuc2hpZnQnXSwgZnVuY3Rpb24obWV0aG9kTmFtZSkge1xuICAgICAgdmFyIGZ1bmMgPSBhcnJheVByb3RvW21ldGhvZE5hbWVdLFxuICAgICAgICAgIGNoYWluTmFtZSA9IC9eKD86cHVzaHxzb3J0fHVuc2hpZnQpJC8udGVzdChtZXRob2ROYW1lKSA/ICd0YXAnIDogJ3RocnUnLFxuICAgICAgICAgIHJldFVud3JhcHBlZCA9IC9eKD86cG9wfHNoaWZ0KSQvLnRlc3QobWV0aG9kTmFtZSk7XG5cbiAgICAgIGxvZGFzaC5wcm90b3R5cGVbbWV0aG9kTmFtZV0gPSBmdW5jdGlvbigpIHtcbiAgICAgICAgdmFyIGFyZ3MgPSBhcmd1bWVudHM7XG4gICAgICAgIGlmIChyZXRVbndyYXBwZWQgJiYgIXRoaXMuX19jaGFpbl9fKSB7XG4gICAgICAgICAgdmFyIHZhbHVlID0gdGhpcy52YWx1ZSgpO1xuICAgICAgICAgIHJldHVybiBmdW5jLmFwcGx5KGlzQXJyYXkodmFsdWUpID8gdmFsdWUgOiBbXSwgYXJncyk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRoaXNbY2hhaW5OYW1lXShmdW5jdGlvbih2YWx1ZSkge1xuICAgICAgICAgIHJldHVybiBmdW5jLmFwcGx5KGlzQXJyYXkodmFsdWUpID8gdmFsdWUgOiBbXSwgYXJncyk7XG4gICAgICAgIH0pO1xuICAgICAgfTtcbiAgICB9KTtcblxuICAgIC8vIE1hcCBtaW5pZmllZCBtZXRob2QgbmFtZXMgdG8gdGhlaXIgcmVhbCBuYW1lcy5cbiAgICBiYXNlRm9yT3duKExhenlXcmFwcGVyLnByb3RvdHlwZSwgZnVuY3Rpb24oZnVuYywgbWV0aG9kTmFtZSkge1xuICAgICAgdmFyIGxvZGFzaEZ1bmMgPSBsb2Rhc2hbbWV0aG9kTmFtZV07XG4gICAgICBpZiAobG9kYXNoRnVuYykge1xuICAgICAgICB2YXIga2V5ID0gbG9kYXNoRnVuYy5uYW1lICsgJyc7XG4gICAgICAgIGlmICghaGFzT3duUHJvcGVydHkuY2FsbChyZWFsTmFtZXMsIGtleSkpIHtcbiAgICAgICAgICByZWFsTmFtZXNba2V5XSA9IFtdO1xuICAgICAgICB9XG4gICAgICAgIHJlYWxOYW1lc1trZXldLnB1c2goeyAnbmFtZSc6IG1ldGhvZE5hbWUsICdmdW5jJzogbG9kYXNoRnVuYyB9KTtcbiAgICAgIH1cbiAgICB9KTtcblxuICAgIHJlYWxOYW1lc1tjcmVhdGVIeWJyaWQodW5kZWZpbmVkLCBXUkFQX0JJTkRfS0VZX0ZMQUcpLm5hbWVdID0gW3tcbiAgICAgICduYW1lJzogJ3dyYXBwZXInLFxuICAgICAgJ2Z1bmMnOiB1bmRlZmluZWRcbiAgICB9XTtcblxuICAgIC8vIEFkZCBtZXRob2RzIHRvIGBMYXp5V3JhcHBlcmAuXG4gICAgTGF6eVdyYXBwZXIucHJvdG90eXBlLmNsb25lID0gbGF6eUNsb25lO1xuICAgIExhenlXcmFwcGVyLnByb3RvdHlwZS5yZXZlcnNlID0gbGF6eVJldmVyc2U7XG4gICAgTGF6eVdyYXBwZXIucHJvdG90eXBlLnZhbHVlID0gbGF6eVZhbHVlO1xuXG4gICAgLy8gQWRkIGNoYWluIHNlcXVlbmNlIG1ldGhvZHMgdG8gdGhlIGBsb2Rhc2hgIHdyYXBwZXIuXG4gICAgbG9kYXNoLnByb3RvdHlwZS5hdCA9IHdyYXBwZXJBdDtcbiAgICBsb2Rhc2gucHJvdG90eXBlLmNoYWluID0gd3JhcHBlckNoYWluO1xuICAgIGxvZGFzaC5wcm90b3R5cGUuY29tbWl0ID0gd3JhcHBlckNvbW1pdDtcbiAgICBsb2Rhc2gucHJvdG90eXBlLm5leHQgPSB3cmFwcGVyTmV4dDtcbiAgICBsb2Rhc2gucHJvdG90eXBlLnBsYW50ID0gd3JhcHBlclBsYW50O1xuICAgIGxvZGFzaC5wcm90b3R5cGUucmV2ZXJzZSA9IHdyYXBwZXJSZXZlcnNlO1xuICAgIGxvZGFzaC5wcm90b3R5cGUudG9KU09OID0gbG9kYXNoLnByb3RvdHlwZS52YWx1ZU9mID0gbG9kYXNoLnByb3RvdHlwZS52YWx1ZSA9IHdyYXBwZXJWYWx1ZTtcblxuICAgIC8vIEFkZCBsYXp5IGFsaWFzZXMuXG4gICAgbG9kYXNoLnByb3RvdHlwZS5maXJzdCA9IGxvZGFzaC5wcm90b3R5cGUuaGVhZDtcblxuICAgIGlmIChzeW1JdGVyYXRvcikge1xuICAgICAgbG9kYXNoLnByb3RvdHlwZVtzeW1JdGVyYXRvcl0gPSB3cmFwcGVyVG9JdGVyYXRvcjtcbiAgICB9XG4gICAgcmV0dXJuIGxvZGFzaDtcbiAgfSk7XG5cbiAgLyotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSovXG5cbiAgLy8gRXhwb3J0IGxvZGFzaC5cbiAgdmFyIF8gPSBydW5JbkNvbnRleHQoKTtcblxuICAvLyBTb21lIEFNRCBidWlsZCBvcHRpbWl6ZXJzLCBsaWtlIHIuanMsIGNoZWNrIGZvciBjb25kaXRpb24gcGF0dGVybnMgbGlrZTpcbiAgaWYgKHR5cGVvZiBkZWZpbmUgPT0gJ2Z1bmN0aW9uJyAmJiB0eXBlb2YgZGVmaW5lLmFtZCA9PSAnb2JqZWN0JyAmJiBkZWZpbmUuYW1kKSB7XG4gICAgLy8gRXhwb3NlIExvZGFzaCBvbiB0aGUgZ2xvYmFsIG9iamVjdCB0byBwcmV2ZW50IGVycm9ycyB3aGVuIExvZGFzaCBpc1xuICAgIC8vIGxvYWRlZCBieSBhIHNjcmlwdCB0YWcgaW4gdGhlIHByZXNlbmNlIG9mIGFuIEFNRCBsb2FkZXIuXG4gICAgLy8gU2VlIGh0dHA6Ly9yZXF1aXJlanMub3JnL2RvY3MvZXJyb3JzLmh0bWwjbWlzbWF0Y2ggZm9yIG1vcmUgZGV0YWlscy5cbiAgICAvLyBVc2UgYF8ubm9Db25mbGljdGAgdG8gcmVtb3ZlIExvZGFzaCBmcm9tIHRoZSBnbG9iYWwgb2JqZWN0LlxuICAgIHJvb3QuXyA9IF87XG5cbiAgICAvLyBEZWZpbmUgYXMgYW4gYW5vbnltb3VzIG1vZHVsZSBzbywgdGhyb3VnaCBwYXRoIG1hcHBpbmcsIGl0IGNhbiBiZVxuICAgIC8vIHJlZmVyZW5jZWQgYXMgdGhlIFwidW5kZXJzY29yZVwiIG1vZHVsZS5cbiAgICBkZWZpbmUoZnVuY3Rpb24oKSB7XG4gICAgICByZXR1cm4gXztcbiAgICB9KTtcbiAgfVxuICAvLyBDaGVjayBmb3IgYGV4cG9ydHNgIGFmdGVyIGBkZWZpbmVgIGluIGNhc2UgYSBidWlsZCBvcHRpbWl6ZXIgYWRkcyBpdC5cbiAgZWxzZSBpZiAoZnJlZU1vZHVsZSkge1xuICAgIC8vIEV4cG9ydCBmb3IgTm9kZS5qcy5cbiAgICAoZnJlZU1vZHVsZS5leHBvcnRzID0gXykuXyA9IF87XG4gICAgLy8gRXhwb3J0IGZvciBDb21tb25KUyBzdXBwb3J0LlxuICAgIGZyZWVFeHBvcnRzLl8gPSBfO1xuICB9XG4gIGVsc2Uge1xuICAgIC8vIEV4cG9ydCB0byB0aGUgZ2xvYmFsIG9iamVjdC5cbiAgICByb290Ll8gPSBfO1xuICB9XG59LmNhbGwodGhpcykpO1xuIiwiKGZ1bmN0aW9uKGYpe2lmKHR5cGVvZiBleHBvcnRzPT09XCJvYmplY3RcIiYmdHlwZW9mIG1vZHVsZSE9PVwidW5kZWZpbmVkXCIpe21vZHVsZS5leHBvcnRzPWYoKX1lbHNlIGlmKHR5cGVvZiBkZWZpbmU9PT1cImZ1bmN0aW9uXCImJmRlZmluZS5hbWQpe2RlZmluZShbXSxmKX1lbHNle3ZhciBnO2lmKHR5cGVvZiB3aW5kb3chPT1cInVuZGVmaW5lZFwiKXtnPXdpbmRvd31lbHNlIGlmKHR5cGVvZiBnbG9iYWwhPT1cInVuZGVmaW5lZFwiKXtnPWdsb2JhbH1lbHNlIGlmKHR5cGVvZiBzZWxmIT09XCJ1bmRlZmluZWRcIil7Zz1zZWxmfWVsc2V7Zz10aGlzfWcuZWpzPWYoKX19KShmdW5jdGlvbigpe3ZhciBkZWZpbmUsbW9kdWxlLGV4cG9ydHM7cmV0dXJuIGZ1bmN0aW9uKCl7ZnVuY3Rpb24gcihlLG4sdCl7ZnVuY3Rpb24gbyhpLGYpe2lmKCFuW2ldKXtpZighZVtpXSl7dmFyIGM9XCJmdW5jdGlvblwiPT10eXBlb2YgcmVxdWlyZSYmcmVxdWlyZTtpZighZiYmYylyZXR1cm4gYyhpLCEwKTtpZih1KXJldHVybiB1KGksITApO3ZhciBhPW5ldyBFcnJvcihcIkNhbm5vdCBmaW5kIG1vZHVsZSAnXCIraStcIidcIik7dGhyb3cgYS5jb2RlPVwiTU9EVUxFX05PVF9GT1VORFwiLGF9dmFyIHA9bltpXT17ZXhwb3J0czp7fX07ZVtpXVswXS5jYWxsKHAuZXhwb3J0cyxmdW5jdGlvbihyKXt2YXIgbj1lW2ldWzFdW3JdO3JldHVybiBvKG58fHIpfSxwLHAuZXhwb3J0cyxyLGUsbix0KX1yZXR1cm4gbltpXS5leHBvcnRzfWZvcih2YXIgdT1cImZ1bmN0aW9uXCI9PXR5cGVvZiByZXF1aXJlJiZyZXF1aXJlLGk9MDtpPHQubGVuZ3RoO2krKylvKHRbaV0pO3JldHVybiBvfXJldHVybiByfSgpKHsxOltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXtcInVzZSBzdHJpY3RcIjt2YXIgZnM9cmVxdWlyZShcImZzXCIpO3ZhciBwYXRoPXJlcXVpcmUoXCJwYXRoXCIpO3ZhciB1dGlscz1yZXF1aXJlKFwiLi91dGlsc1wiKTt2YXIgc2NvcGVPcHRpb25XYXJuZWQ9ZmFsc2U7dmFyIF9WRVJTSU9OX1NUUklORz1yZXF1aXJlKFwiLi4vcGFja2FnZS5qc29uXCIpLnZlcnNpb247dmFyIF9ERUZBVUxUX09QRU5fREVMSU1JVEVSPVwiPFwiO3ZhciBfREVGQVVMVF9DTE9TRV9ERUxJTUlURVI9XCI+XCI7dmFyIF9ERUZBVUxUX0RFTElNSVRFUj1cIiVcIjt2YXIgX0RFRkFVTFRfTE9DQUxTX05BTUU9XCJsb2NhbHNcIjt2YXIgX05BTUU9XCJlanNcIjt2YXIgX1JFR0VYX1NUUklORz1cIig8JSV8JSU+fDwlPXw8JS18PCVffDwlI3w8JXwlPnwtJT58XyU+KVwiO3ZhciBfT1BUU19QQVNTQUJMRV9XSVRIX0RBVEE9W1wiZGVsaW1pdGVyXCIsXCJzY29wZVwiLFwiY29udGV4dFwiLFwiZGVidWdcIixcImNvbXBpbGVEZWJ1Z1wiLFwiY2xpZW50XCIsXCJfd2l0aFwiLFwicm1XaGl0ZXNwYWNlXCIsXCJzdHJpY3RcIixcImZpbGVuYW1lXCIsXCJhc3luY1wiXTt2YXIgX09QVFNfUEFTU0FCTEVfV0lUSF9EQVRBX0VYUFJFU1M9X09QVFNfUEFTU0FCTEVfV0lUSF9EQVRBLmNvbmNhdChcImNhY2hlXCIpO3ZhciBfQk9NPS9eXFx1RkVGRi87dmFyIF9KU19JREVOVElGSUVSPS9eW2EtekEtWl8kXVswLTlhLXpBLVpfJF0qJC87ZXhwb3J0cy5jYWNoZT11dGlscy5jYWNoZTtleHBvcnRzLmZpbGVMb2FkZXI9ZnMucmVhZEZpbGVTeW5jO2V4cG9ydHMubG9jYWxzTmFtZT1fREVGQVVMVF9MT0NBTFNfTkFNRTtleHBvcnRzLnByb21pc2VJbXBsPW5ldyBGdW5jdGlvbihcInJldHVybiB0aGlzO1wiKSgpLlByb21pc2U7ZXhwb3J0cy5yZXNvbHZlSW5jbHVkZT1mdW5jdGlvbihuYW1lLGZpbGVuYW1lLGlzRGlyKXt2YXIgZGlybmFtZT1wYXRoLmRpcm5hbWU7dmFyIGV4dG5hbWU9cGF0aC5leHRuYW1lO3ZhciByZXNvbHZlPXBhdGgucmVzb2x2ZTt2YXIgaW5jbHVkZVBhdGg9cmVzb2x2ZShpc0Rpcj9maWxlbmFtZTpkaXJuYW1lKGZpbGVuYW1lKSxuYW1lKTt2YXIgZXh0PWV4dG5hbWUobmFtZSk7aWYoIWV4dCl7aW5jbHVkZVBhdGgrPVwiLmVqc1wifXJldHVybiBpbmNsdWRlUGF0aH07ZnVuY3Rpb24gcmVzb2x2ZVBhdGhzKG5hbWUscGF0aHMpe3ZhciBmaWxlUGF0aDtpZihwYXRocy5zb21lKGZ1bmN0aW9uKHYpe2ZpbGVQYXRoPWV4cG9ydHMucmVzb2x2ZUluY2x1ZGUobmFtZSx2LHRydWUpO3JldHVybiBmcy5leGlzdHNTeW5jKGZpbGVQYXRoKX0pKXtyZXR1cm4gZmlsZVBhdGh9fWZ1bmN0aW9uIGdldEluY2x1ZGVQYXRoKHBhdGgsb3B0aW9ucyl7dmFyIGluY2x1ZGVQYXRoO3ZhciBmaWxlUGF0aDt2YXIgdmlld3M9b3B0aW9ucy52aWV3czt2YXIgbWF0Y2g9L15bQS1aYS16XSs6XFxcXHxeXFwvLy5leGVjKHBhdGgpO2lmKG1hdGNoJiZtYXRjaC5sZW5ndGgpe3BhdGg9cGF0aC5yZXBsYWNlKC9eXFwvKi8sXCJcIik7aWYoQXJyYXkuaXNBcnJheShvcHRpb25zLnJvb3QpKXtpbmNsdWRlUGF0aD1yZXNvbHZlUGF0aHMocGF0aCxvcHRpb25zLnJvb3QpfWVsc2V7aW5jbHVkZVBhdGg9ZXhwb3J0cy5yZXNvbHZlSW5jbHVkZShwYXRoLG9wdGlvbnMucm9vdHx8XCIvXCIsdHJ1ZSl9fWVsc2V7aWYob3B0aW9ucy5maWxlbmFtZSl7ZmlsZVBhdGg9ZXhwb3J0cy5yZXNvbHZlSW5jbHVkZShwYXRoLG9wdGlvbnMuZmlsZW5hbWUpO2lmKGZzLmV4aXN0c1N5bmMoZmlsZVBhdGgpKXtpbmNsdWRlUGF0aD1maWxlUGF0aH19aWYoIWluY2x1ZGVQYXRoJiZBcnJheS5pc0FycmF5KHZpZXdzKSl7aW5jbHVkZVBhdGg9cmVzb2x2ZVBhdGhzKHBhdGgsdmlld3MpfWlmKCFpbmNsdWRlUGF0aCYmdHlwZW9mIG9wdGlvbnMuaW5jbHVkZXIhPT1cImZ1bmN0aW9uXCIpe3Rocm93IG5ldyBFcnJvcignQ291bGQgbm90IGZpbmQgdGhlIGluY2x1ZGUgZmlsZSBcIicrb3B0aW9ucy5lc2NhcGVGdW5jdGlvbihwYXRoKSsnXCInKX19cmV0dXJuIGluY2x1ZGVQYXRofWZ1bmN0aW9uIGhhbmRsZUNhY2hlKG9wdGlvbnMsdGVtcGxhdGUpe3ZhciBmdW5jO3ZhciBmaWxlbmFtZT1vcHRpb25zLmZpbGVuYW1lO3ZhciBoYXNUZW1wbGF0ZT1hcmd1bWVudHMubGVuZ3RoPjE7aWYob3B0aW9ucy5jYWNoZSl7aWYoIWZpbGVuYW1lKXt0aHJvdyBuZXcgRXJyb3IoXCJjYWNoZSBvcHRpb24gcmVxdWlyZXMgYSBmaWxlbmFtZVwiKX1mdW5jPWV4cG9ydHMuY2FjaGUuZ2V0KGZpbGVuYW1lKTtpZihmdW5jKXtyZXR1cm4gZnVuY31pZighaGFzVGVtcGxhdGUpe3RlbXBsYXRlPWZpbGVMb2FkZXIoZmlsZW5hbWUpLnRvU3RyaW5nKCkucmVwbGFjZShfQk9NLFwiXCIpfX1lbHNlIGlmKCFoYXNUZW1wbGF0ZSl7aWYoIWZpbGVuYW1lKXt0aHJvdyBuZXcgRXJyb3IoXCJJbnRlcm5hbCBFSlMgZXJyb3I6IG5vIGZpbGUgbmFtZSBvciB0ZW1wbGF0ZSBcIitcInByb3ZpZGVkXCIpfXRlbXBsYXRlPWZpbGVMb2FkZXIoZmlsZW5hbWUpLnRvU3RyaW5nKCkucmVwbGFjZShfQk9NLFwiXCIpfWZ1bmM9ZXhwb3J0cy5jb21waWxlKHRlbXBsYXRlLG9wdGlvbnMpO2lmKG9wdGlvbnMuY2FjaGUpe2V4cG9ydHMuY2FjaGUuc2V0KGZpbGVuYW1lLGZ1bmMpfXJldHVybiBmdW5jfWZ1bmN0aW9uIHRyeUhhbmRsZUNhY2hlKG9wdGlvbnMsZGF0YSxjYil7dmFyIHJlc3VsdDtpZighY2Ipe2lmKHR5cGVvZiBleHBvcnRzLnByb21pc2VJbXBsPT1cImZ1bmN0aW9uXCIpe3JldHVybiBuZXcgZXhwb3J0cy5wcm9taXNlSW1wbChmdW5jdGlvbihyZXNvbHZlLHJlamVjdCl7dHJ5e3Jlc3VsdD1oYW5kbGVDYWNoZShvcHRpb25zKShkYXRhKTtyZXNvbHZlKHJlc3VsdCl9Y2F0Y2goZXJyKXtyZWplY3QoZXJyKX19KX1lbHNle3Rocm93IG5ldyBFcnJvcihcIlBsZWFzZSBwcm92aWRlIGEgY2FsbGJhY2sgZnVuY3Rpb25cIil9fWVsc2V7dHJ5e3Jlc3VsdD1oYW5kbGVDYWNoZShvcHRpb25zKShkYXRhKX1jYXRjaChlcnIpe3JldHVybiBjYihlcnIpfWNiKG51bGwscmVzdWx0KX19ZnVuY3Rpb24gZmlsZUxvYWRlcihmaWxlUGF0aCl7cmV0dXJuIGV4cG9ydHMuZmlsZUxvYWRlcihmaWxlUGF0aCl9ZnVuY3Rpb24gaW5jbHVkZUZpbGUocGF0aCxvcHRpb25zKXt2YXIgb3B0cz11dGlscy5zaGFsbG93Q29weSh1dGlscy5jcmVhdGVOdWxsUHJvdG9PYmpXaGVyZVBvc3NpYmxlKCksb3B0aW9ucyk7b3B0cy5maWxlbmFtZT1nZXRJbmNsdWRlUGF0aChwYXRoLG9wdHMpO2lmKHR5cGVvZiBvcHRpb25zLmluY2x1ZGVyPT09XCJmdW5jdGlvblwiKXt2YXIgaW5jbHVkZXJSZXN1bHQ9b3B0aW9ucy5pbmNsdWRlcihwYXRoLG9wdHMuZmlsZW5hbWUpO2lmKGluY2x1ZGVyUmVzdWx0KXtpZihpbmNsdWRlclJlc3VsdC5maWxlbmFtZSl7b3B0cy5maWxlbmFtZT1pbmNsdWRlclJlc3VsdC5maWxlbmFtZX1pZihpbmNsdWRlclJlc3VsdC50ZW1wbGF0ZSl7cmV0dXJuIGhhbmRsZUNhY2hlKG9wdHMsaW5jbHVkZXJSZXN1bHQudGVtcGxhdGUpfX19cmV0dXJuIGhhbmRsZUNhY2hlKG9wdHMpfWZ1bmN0aW9uIHJldGhyb3coZXJyLHN0cixmbG5tLGxpbmVubyxlc2Mpe3ZhciBsaW5lcz1zdHIuc3BsaXQoXCJcXG5cIik7dmFyIHN0YXJ0PU1hdGgubWF4KGxpbmVuby0zLDApO3ZhciBlbmQ9TWF0aC5taW4obGluZXMubGVuZ3RoLGxpbmVubyszKTt2YXIgZmlsZW5hbWU9ZXNjKGZsbm0pO3ZhciBjb250ZXh0PWxpbmVzLnNsaWNlKHN0YXJ0LGVuZCkubWFwKGZ1bmN0aW9uKGxpbmUsaSl7dmFyIGN1cnI9aStzdGFydCsxO3JldHVybihjdXJyPT1saW5lbm8/XCIgPj4gXCI6XCIgICAgXCIpK2N1cnIrXCJ8IFwiK2xpbmV9KS5qb2luKFwiXFxuXCIpO2Vyci5wYXRoPWZpbGVuYW1lO2Vyci5tZXNzYWdlPShmaWxlbmFtZXx8XCJlanNcIikrXCI6XCIrbGluZW5vK1wiXFxuXCIrY29udGV4dCtcIlxcblxcblwiK2Vyci5tZXNzYWdlO3Rocm93IGVycn1mdW5jdGlvbiBzdHJpcFNlbWkoc3RyKXtyZXR1cm4gc3RyLnJlcGxhY2UoLzsoXFxzKiQpLyxcIiQxXCIpfWV4cG9ydHMuY29tcGlsZT1mdW5jdGlvbiBjb21waWxlKHRlbXBsYXRlLG9wdHMpe3ZhciB0ZW1wbDtpZihvcHRzJiZvcHRzLnNjb3BlKXtpZighc2NvcGVPcHRpb25XYXJuZWQpe2NvbnNvbGUud2FybihcImBzY29wZWAgb3B0aW9uIGlzIGRlcHJlY2F0ZWQgYW5kIHdpbGwgYmUgcmVtb3ZlZCBpbiBFSlMgM1wiKTtzY29wZU9wdGlvbldhcm5lZD10cnVlfWlmKCFvcHRzLmNvbnRleHQpe29wdHMuY29udGV4dD1vcHRzLnNjb3BlfWRlbGV0ZSBvcHRzLnNjb3BlfXRlbXBsPW5ldyBUZW1wbGF0ZSh0ZW1wbGF0ZSxvcHRzKTtyZXR1cm4gdGVtcGwuY29tcGlsZSgpfTtleHBvcnRzLnJlbmRlcj1mdW5jdGlvbih0ZW1wbGF0ZSxkLG8pe3ZhciBkYXRhPWR8fHV0aWxzLmNyZWF0ZU51bGxQcm90b09ialdoZXJlUG9zc2libGUoKTt2YXIgb3B0cz1vfHx1dGlscy5jcmVhdGVOdWxsUHJvdG9PYmpXaGVyZVBvc3NpYmxlKCk7aWYoYXJndW1lbnRzLmxlbmd0aD09Mil7dXRpbHMuc2hhbGxvd0NvcHlGcm9tTGlzdChvcHRzLGRhdGEsX09QVFNfUEFTU0FCTEVfV0lUSF9EQVRBKX1yZXR1cm4gaGFuZGxlQ2FjaGUob3B0cyx0ZW1wbGF0ZSkoZGF0YSl9O2V4cG9ydHMucmVuZGVyRmlsZT1mdW5jdGlvbigpe3ZhciBhcmdzPUFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKGFyZ3VtZW50cyk7dmFyIGZpbGVuYW1lPWFyZ3Muc2hpZnQoKTt2YXIgY2I7dmFyIG9wdHM9e2ZpbGVuYW1lOmZpbGVuYW1lfTt2YXIgZGF0YTt2YXIgdmlld09wdHM7aWYodHlwZW9mIGFyZ3VtZW50c1thcmd1bWVudHMubGVuZ3RoLTFdPT1cImZ1bmN0aW9uXCIpe2NiPWFyZ3MucG9wKCl9aWYoYXJncy5sZW5ndGgpe2RhdGE9YXJncy5zaGlmdCgpO2lmKGFyZ3MubGVuZ3RoKXt1dGlscy5zaGFsbG93Q29weShvcHRzLGFyZ3MucG9wKCkpfWVsc2V7aWYoZGF0YS5zZXR0aW5ncyl7aWYoZGF0YS5zZXR0aW5ncy52aWV3cyl7b3B0cy52aWV3cz1kYXRhLnNldHRpbmdzLnZpZXdzfWlmKGRhdGEuc2V0dGluZ3NbXCJ2aWV3IGNhY2hlXCJdKXtvcHRzLmNhY2hlPXRydWV9dmlld09wdHM9ZGF0YS5zZXR0aW5nc1tcInZpZXcgb3B0aW9uc1wiXTtpZih2aWV3T3B0cyl7dXRpbHMuc2hhbGxvd0NvcHkob3B0cyx2aWV3T3B0cyl9fXV0aWxzLnNoYWxsb3dDb3B5RnJvbUxpc3Qob3B0cyxkYXRhLF9PUFRTX1BBU1NBQkxFX1dJVEhfREFUQV9FWFBSRVNTKX1vcHRzLmZpbGVuYW1lPWZpbGVuYW1lfWVsc2V7ZGF0YT11dGlscy5jcmVhdGVOdWxsUHJvdG9PYmpXaGVyZVBvc3NpYmxlKCl9cmV0dXJuIHRyeUhhbmRsZUNhY2hlKG9wdHMsZGF0YSxjYil9O2V4cG9ydHMuVGVtcGxhdGU9VGVtcGxhdGU7ZXhwb3J0cy5jbGVhckNhY2hlPWZ1bmN0aW9uKCl7ZXhwb3J0cy5jYWNoZS5yZXNldCgpfTtmdW5jdGlvbiBUZW1wbGF0ZSh0ZXh0LG9wdHMpe29wdHM9b3B0c3x8dXRpbHMuY3JlYXRlTnVsbFByb3RvT2JqV2hlcmVQb3NzaWJsZSgpO3ZhciBvcHRpb25zPXV0aWxzLmNyZWF0ZU51bGxQcm90b09ialdoZXJlUG9zc2libGUoKTt0aGlzLnRlbXBsYXRlVGV4dD10ZXh0O3RoaXMubW9kZT1udWxsO3RoaXMudHJ1bmNhdGU9ZmFsc2U7dGhpcy5jdXJyZW50TGluZT0xO3RoaXMuc291cmNlPVwiXCI7b3B0aW9ucy5jbGllbnQ9b3B0cy5jbGllbnR8fGZhbHNlO29wdGlvbnMuZXNjYXBlRnVuY3Rpb249b3B0cy5lc2NhcGV8fG9wdHMuZXNjYXBlRnVuY3Rpb258fHV0aWxzLmVzY2FwZVhNTDtvcHRpb25zLmNvbXBpbGVEZWJ1Zz1vcHRzLmNvbXBpbGVEZWJ1ZyE9PWZhbHNlO29wdGlvbnMuZGVidWc9ISFvcHRzLmRlYnVnO29wdGlvbnMuZmlsZW5hbWU9b3B0cy5maWxlbmFtZTtvcHRpb25zLm9wZW5EZWxpbWl0ZXI9b3B0cy5vcGVuRGVsaW1pdGVyfHxleHBvcnRzLm9wZW5EZWxpbWl0ZXJ8fF9ERUZBVUxUX09QRU5fREVMSU1JVEVSO29wdGlvbnMuY2xvc2VEZWxpbWl0ZXI9b3B0cy5jbG9zZURlbGltaXRlcnx8ZXhwb3J0cy5jbG9zZURlbGltaXRlcnx8X0RFRkFVTFRfQ0xPU0VfREVMSU1JVEVSO29wdGlvbnMuZGVsaW1pdGVyPW9wdHMuZGVsaW1pdGVyfHxleHBvcnRzLmRlbGltaXRlcnx8X0RFRkFVTFRfREVMSU1JVEVSO29wdGlvbnMuc3RyaWN0PW9wdHMuc3RyaWN0fHxmYWxzZTtvcHRpb25zLmNvbnRleHQ9b3B0cy5jb250ZXh0O29wdGlvbnMuY2FjaGU9b3B0cy5jYWNoZXx8ZmFsc2U7b3B0aW9ucy5ybVdoaXRlc3BhY2U9b3B0cy5ybVdoaXRlc3BhY2U7b3B0aW9ucy5yb290PW9wdHMucm9vdDtvcHRpb25zLmluY2x1ZGVyPW9wdHMuaW5jbHVkZXI7b3B0aW9ucy5vdXRwdXRGdW5jdGlvbk5hbWU9b3B0cy5vdXRwdXRGdW5jdGlvbk5hbWU7b3B0aW9ucy5sb2NhbHNOYW1lPW9wdHMubG9jYWxzTmFtZXx8ZXhwb3J0cy5sb2NhbHNOYW1lfHxfREVGQVVMVF9MT0NBTFNfTkFNRTtvcHRpb25zLnZpZXdzPW9wdHMudmlld3M7b3B0aW9ucy5hc3luYz1vcHRzLmFzeW5jO29wdGlvbnMuZGVzdHJ1Y3R1cmVkTG9jYWxzPW9wdHMuZGVzdHJ1Y3R1cmVkTG9jYWxzO29wdGlvbnMubGVnYWN5SW5jbHVkZT10eXBlb2Ygb3B0cy5sZWdhY3lJbmNsdWRlIT1cInVuZGVmaW5lZFwiPyEhb3B0cy5sZWdhY3lJbmNsdWRlOnRydWU7aWYob3B0aW9ucy5zdHJpY3Qpe29wdGlvbnMuX3dpdGg9ZmFsc2V9ZWxzZXtvcHRpb25zLl93aXRoPXR5cGVvZiBvcHRzLl93aXRoIT1cInVuZGVmaW5lZFwiP29wdHMuX3dpdGg6dHJ1ZX10aGlzLm9wdHM9b3B0aW9uczt0aGlzLnJlZ2V4PXRoaXMuY3JlYXRlUmVnZXgoKX1UZW1wbGF0ZS5tb2Rlcz17RVZBTDpcImV2YWxcIixFU0NBUEVEOlwiZXNjYXBlZFwiLFJBVzpcInJhd1wiLENPTU1FTlQ6XCJjb21tZW50XCIsTElURVJBTDpcImxpdGVyYWxcIn07VGVtcGxhdGUucHJvdG90eXBlPXtjcmVhdGVSZWdleDpmdW5jdGlvbigpe3ZhciBzdHI9X1JFR0VYX1NUUklORzt2YXIgZGVsaW09dXRpbHMuZXNjYXBlUmVnRXhwQ2hhcnModGhpcy5vcHRzLmRlbGltaXRlcik7dmFyIG9wZW49dXRpbHMuZXNjYXBlUmVnRXhwQ2hhcnModGhpcy5vcHRzLm9wZW5EZWxpbWl0ZXIpO3ZhciBjbG9zZT11dGlscy5lc2NhcGVSZWdFeHBDaGFycyh0aGlzLm9wdHMuY2xvc2VEZWxpbWl0ZXIpO3N0cj1zdHIucmVwbGFjZSgvJS9nLGRlbGltKS5yZXBsYWNlKC88L2csb3BlbikucmVwbGFjZSgvPi9nLGNsb3NlKTtyZXR1cm4gbmV3IFJlZ0V4cChzdHIpfSxjb21waWxlOmZ1bmN0aW9uKCl7dmFyIHNyYzt2YXIgZm47dmFyIG9wdHM9dGhpcy5vcHRzO3ZhciBwcmVwZW5kZWQ9XCJcIjt2YXIgYXBwZW5kZWQ9XCJcIjt2YXIgZXNjYXBlRm49b3B0cy5lc2NhcGVGdW5jdGlvbjt2YXIgY3Rvcjt2YXIgc2FuaXRpemVkRmlsZW5hbWU9b3B0cy5maWxlbmFtZT9KU09OLnN0cmluZ2lmeShvcHRzLmZpbGVuYW1lKTpcInVuZGVmaW5lZFwiO2lmKCF0aGlzLnNvdXJjZSl7dGhpcy5nZW5lcmF0ZVNvdXJjZSgpO3ByZXBlbmRlZCs9JyAgdmFyIF9fb3V0cHV0ID0gXCJcIjtcXG4nK1wiICBmdW5jdGlvbiBfX2FwcGVuZChzKSB7IGlmIChzICE9PSB1bmRlZmluZWQgJiYgcyAhPT0gbnVsbCkgX19vdXRwdXQgKz0gcyB9XFxuXCI7aWYob3B0cy5vdXRwdXRGdW5jdGlvbk5hbWUpe2lmKCFfSlNfSURFTlRJRklFUi50ZXN0KG9wdHMub3V0cHV0RnVuY3Rpb25OYW1lKSl7dGhyb3cgbmV3IEVycm9yKFwib3V0cHV0RnVuY3Rpb25OYW1lIGlzIG5vdCBhIHZhbGlkIEpTIGlkZW50aWZpZXIuXCIpfXByZXBlbmRlZCs9XCIgIHZhciBcIitvcHRzLm91dHB1dEZ1bmN0aW9uTmFtZStcIiA9IF9fYXBwZW5kO1wiK1wiXFxuXCJ9aWYob3B0cy5sb2NhbHNOYW1lJiYhX0pTX0lERU5USUZJRVIudGVzdChvcHRzLmxvY2Fsc05hbWUpKXt0aHJvdyBuZXcgRXJyb3IoXCJsb2NhbHNOYW1lIGlzIG5vdCBhIHZhbGlkIEpTIGlkZW50aWZpZXIuXCIpfWlmKG9wdHMuZGVzdHJ1Y3R1cmVkTG9jYWxzJiZvcHRzLmRlc3RydWN0dXJlZExvY2Fscy5sZW5ndGgpe3ZhciBkZXN0cnVjdHVyaW5nPVwiICB2YXIgX19sb2NhbHMgPSAoXCIrb3B0cy5sb2NhbHNOYW1lK1wiIHx8IHt9KSxcXG5cIjtmb3IodmFyIGk9MDtpPG9wdHMuZGVzdHJ1Y3R1cmVkTG9jYWxzLmxlbmd0aDtpKyspe3ZhciBuYW1lPW9wdHMuZGVzdHJ1Y3R1cmVkTG9jYWxzW2ldO2lmKCFfSlNfSURFTlRJRklFUi50ZXN0KG5hbWUpKXt0aHJvdyBuZXcgRXJyb3IoXCJkZXN0cnVjdHVyZWRMb2NhbHNbXCIraStcIl0gaXMgbm90IGEgdmFsaWQgSlMgaWRlbnRpZmllci5cIil9aWYoaT4wKXtkZXN0cnVjdHVyaW5nKz1cIixcXG4gIFwifWRlc3RydWN0dXJpbmcrPW5hbWUrXCIgPSBfX2xvY2Fscy5cIituYW1lfXByZXBlbmRlZCs9ZGVzdHJ1Y3R1cmluZytcIjtcXG5cIn1pZihvcHRzLl93aXRoIT09ZmFsc2Upe3ByZXBlbmRlZCs9XCIgIHdpdGggKFwiK29wdHMubG9jYWxzTmFtZStcIiB8fCB7fSkge1wiK1wiXFxuXCI7YXBwZW5kZWQrPVwiICB9XCIrXCJcXG5cIn1hcHBlbmRlZCs9XCIgIHJldHVybiBfX291dHB1dDtcIitcIlxcblwiO3RoaXMuc291cmNlPXByZXBlbmRlZCt0aGlzLnNvdXJjZSthcHBlbmRlZH1pZihvcHRzLmNvbXBpbGVEZWJ1Zyl7c3JjPVwidmFyIF9fbGluZSA9IDFcIitcIlxcblwiK1wiICAsIF9fbGluZXMgPSBcIitKU09OLnN0cmluZ2lmeSh0aGlzLnRlbXBsYXRlVGV4dCkrXCJcXG5cIitcIiAgLCBfX2ZpbGVuYW1lID0gXCIrc2FuaXRpemVkRmlsZW5hbWUrXCI7XCIrXCJcXG5cIitcInRyeSB7XCIrXCJcXG5cIit0aGlzLnNvdXJjZStcIn0gY2F0Y2ggKGUpIHtcIitcIlxcblwiK1wiICByZXRocm93KGUsIF9fbGluZXMsIF9fZmlsZW5hbWUsIF9fbGluZSwgZXNjYXBlRm4pO1wiK1wiXFxuXCIrXCJ9XCIrXCJcXG5cIn1lbHNle3NyYz10aGlzLnNvdXJjZX1pZihvcHRzLmNsaWVudCl7c3JjPVwiZXNjYXBlRm4gPSBlc2NhcGVGbiB8fCBcIitlc2NhcGVGbi50b1N0cmluZygpK1wiO1wiK1wiXFxuXCIrc3JjO2lmKG9wdHMuY29tcGlsZURlYnVnKXtzcmM9XCJyZXRocm93ID0gcmV0aHJvdyB8fCBcIityZXRocm93LnRvU3RyaW5nKCkrXCI7XCIrXCJcXG5cIitzcmN9fWlmKG9wdHMuc3RyaWN0KXtzcmM9J1widXNlIHN0cmljdFwiO1xcbicrc3JjfWlmKG9wdHMuZGVidWcpe2NvbnNvbGUubG9nKHNyYyl9aWYob3B0cy5jb21waWxlRGVidWcmJm9wdHMuZmlsZW5hbWUpe3NyYz1zcmMrXCJcXG5cIitcIi8vIyBzb3VyY2VVUkw9XCIrc2FuaXRpemVkRmlsZW5hbWUrXCJcXG5cIn10cnl7aWYob3B0cy5hc3luYyl7dHJ5e2N0b3I9bmV3IEZ1bmN0aW9uKFwicmV0dXJuIChhc3luYyBmdW5jdGlvbigpe30pLmNvbnN0cnVjdG9yO1wiKSgpfWNhdGNoKGUpe2lmKGUgaW5zdGFuY2VvZiBTeW50YXhFcnJvcil7dGhyb3cgbmV3IEVycm9yKFwiVGhpcyBlbnZpcm9ubWVudCBkb2VzIG5vdCBzdXBwb3J0IGFzeW5jL2F3YWl0XCIpfWVsc2V7dGhyb3cgZX19fWVsc2V7Y3Rvcj1GdW5jdGlvbn1mbj1uZXcgY3RvcihvcHRzLmxvY2Fsc05hbWUrXCIsIGVzY2FwZUZuLCBpbmNsdWRlLCByZXRocm93XCIsc3JjKX1jYXRjaChlKXtpZihlIGluc3RhbmNlb2YgU3ludGF4RXJyb3Ipe2lmKG9wdHMuZmlsZW5hbWUpe2UubWVzc2FnZSs9XCIgaW4gXCIrb3B0cy5maWxlbmFtZX1lLm1lc3NhZ2UrPVwiIHdoaWxlIGNvbXBpbGluZyBlanNcXG5cXG5cIjtlLm1lc3NhZ2UrPVwiSWYgdGhlIGFib3ZlIGVycm9yIGlzIG5vdCBoZWxwZnVsLCB5b3UgbWF5IHdhbnQgdG8gdHJ5IEVKUy1MaW50OlxcblwiO2UubWVzc2FnZSs9XCJodHRwczovL2dpdGh1Yi5jb20vUnlhblppbS9FSlMtTGludFwiO2lmKCFvcHRzLmFzeW5jKXtlLm1lc3NhZ2UrPVwiXFxuXCI7ZS5tZXNzYWdlKz1cIk9yLCBpZiB5b3UgbWVhbnQgdG8gY3JlYXRlIGFuIGFzeW5jIGZ1bmN0aW9uLCBwYXNzIGBhc3luYzogdHJ1ZWAgYXMgYW4gb3B0aW9uLlwifX10aHJvdyBlfXZhciByZXR1cm5lZEZuPW9wdHMuY2xpZW50P2ZuOmZ1bmN0aW9uIGFub255bW91cyhkYXRhKXt2YXIgaW5jbHVkZT1mdW5jdGlvbihwYXRoLGluY2x1ZGVEYXRhKXt2YXIgZD11dGlscy5zaGFsbG93Q29weSh1dGlscy5jcmVhdGVOdWxsUHJvdG9PYmpXaGVyZVBvc3NpYmxlKCksZGF0YSk7aWYoaW5jbHVkZURhdGEpe2Q9dXRpbHMuc2hhbGxvd0NvcHkoZCxpbmNsdWRlRGF0YSl9cmV0dXJuIGluY2x1ZGVGaWxlKHBhdGgsb3B0cykoZCl9O3JldHVybiBmbi5hcHBseShvcHRzLmNvbnRleHQsW2RhdGF8fHV0aWxzLmNyZWF0ZU51bGxQcm90b09ialdoZXJlUG9zc2libGUoKSxlc2NhcGVGbixpbmNsdWRlLHJldGhyb3ddKX07aWYob3B0cy5maWxlbmFtZSYmdHlwZW9mIE9iamVjdC5kZWZpbmVQcm9wZXJ0eT09PVwiZnVuY3Rpb25cIil7dmFyIGZpbGVuYW1lPW9wdHMuZmlsZW5hbWU7dmFyIGJhc2VuYW1lPXBhdGguYmFzZW5hbWUoZmlsZW5hbWUscGF0aC5leHRuYW1lKGZpbGVuYW1lKSk7dHJ5e09iamVjdC5kZWZpbmVQcm9wZXJ0eShyZXR1cm5lZEZuLFwibmFtZVwiLHt2YWx1ZTpiYXNlbmFtZSx3cml0YWJsZTpmYWxzZSxlbnVtZXJhYmxlOmZhbHNlLGNvbmZpZ3VyYWJsZTp0cnVlfSl9Y2F0Y2goZSl7fX1yZXR1cm4gcmV0dXJuZWRGbn0sZ2VuZXJhdGVTb3VyY2U6ZnVuY3Rpb24oKXt2YXIgb3B0cz10aGlzLm9wdHM7aWYob3B0cy5ybVdoaXRlc3BhY2Upe3RoaXMudGVtcGxhdGVUZXh0PXRoaXMudGVtcGxhdGVUZXh0LnJlcGxhY2UoL1tcXHJcXG5dKy9nLFwiXFxuXCIpLnJlcGxhY2UoL15cXHMrfFxccyskL2dtLFwiXCIpfXRoaXMudGVtcGxhdGVUZXh0PXRoaXMudGVtcGxhdGVUZXh0LnJlcGxhY2UoL1sgXFx0XSo8JV8vZ20sXCI8JV9cIikucmVwbGFjZSgvXyU+WyBcXHRdKi9nbSxcIl8lPlwiKTt2YXIgc2VsZj10aGlzO3ZhciBtYXRjaGVzPXRoaXMucGFyc2VUZW1wbGF0ZVRleHQoKTt2YXIgZD10aGlzLm9wdHMuZGVsaW1pdGVyO3ZhciBvPXRoaXMub3B0cy5vcGVuRGVsaW1pdGVyO3ZhciBjPXRoaXMub3B0cy5jbG9zZURlbGltaXRlcjtpZihtYXRjaGVzJiZtYXRjaGVzLmxlbmd0aCl7bWF0Y2hlcy5mb3JFYWNoKGZ1bmN0aW9uKGxpbmUsaW5kZXgpe3ZhciBjbG9zaW5nO2lmKGxpbmUuaW5kZXhPZihvK2QpPT09MCYmbGluZS5pbmRleE9mKG8rZCtkKSE9PTApe2Nsb3Npbmc9bWF0Y2hlc1tpbmRleCsyXTtpZighKGNsb3Npbmc9PWQrY3x8Y2xvc2luZz09XCItXCIrZCtjfHxjbG9zaW5nPT1cIl9cIitkK2MpKXt0aHJvdyBuZXcgRXJyb3IoJ0NvdWxkIG5vdCBmaW5kIG1hdGNoaW5nIGNsb3NlIHRhZyBmb3IgXCInK2xpbmUrJ1wiLicpfX1zZWxmLnNjYW5MaW5lKGxpbmUpfSl9fSxwYXJzZVRlbXBsYXRlVGV4dDpmdW5jdGlvbigpe3ZhciBzdHI9dGhpcy50ZW1wbGF0ZVRleHQ7dmFyIHBhdD10aGlzLnJlZ2V4O3ZhciByZXN1bHQ9cGF0LmV4ZWMoc3RyKTt2YXIgYXJyPVtdO3ZhciBmaXJzdFBvczt3aGlsZShyZXN1bHQpe2ZpcnN0UG9zPXJlc3VsdC5pbmRleDtpZihmaXJzdFBvcyE9PTApe2Fyci5wdXNoKHN0ci5zdWJzdHJpbmcoMCxmaXJzdFBvcykpO3N0cj1zdHIuc2xpY2UoZmlyc3RQb3MpfWFyci5wdXNoKHJlc3VsdFswXSk7c3RyPXN0ci5zbGljZShyZXN1bHRbMF0ubGVuZ3RoKTtyZXN1bHQ9cGF0LmV4ZWMoc3RyKX1pZihzdHIpe2Fyci5wdXNoKHN0cil9cmV0dXJuIGFycn0sX2FkZE91dHB1dDpmdW5jdGlvbihsaW5lKXtpZih0aGlzLnRydW5jYXRlKXtsaW5lPWxpbmUucmVwbGFjZSgvXig/OlxcclxcbnxcXHJ8XFxuKS8sXCJcIik7dGhpcy50cnVuY2F0ZT1mYWxzZX1pZighbGluZSl7cmV0dXJuIGxpbmV9bGluZT1saW5lLnJlcGxhY2UoL1xcXFwvZyxcIlxcXFxcXFxcXCIpO2xpbmU9bGluZS5yZXBsYWNlKC9cXG4vZyxcIlxcXFxuXCIpO2xpbmU9bGluZS5yZXBsYWNlKC9cXHIvZyxcIlxcXFxyXCIpO2xpbmU9bGluZS5yZXBsYWNlKC9cIi9nLCdcXFxcXCInKTt0aGlzLnNvdXJjZSs9JyAgICA7IF9fYXBwZW5kKFwiJytsaW5lKydcIiknK1wiXFxuXCJ9LHNjYW5MaW5lOmZ1bmN0aW9uKGxpbmUpe3ZhciBzZWxmPXRoaXM7dmFyIGQ9dGhpcy5vcHRzLmRlbGltaXRlcjt2YXIgbz10aGlzLm9wdHMub3BlbkRlbGltaXRlcjt2YXIgYz10aGlzLm9wdHMuY2xvc2VEZWxpbWl0ZXI7dmFyIG5ld0xpbmVDb3VudD0wO25ld0xpbmVDb3VudD1saW5lLnNwbGl0KFwiXFxuXCIpLmxlbmd0aC0xO3N3aXRjaChsaW5lKXtjYXNlIG8rZDpjYXNlIG8rZCtcIl9cIjp0aGlzLm1vZGU9VGVtcGxhdGUubW9kZXMuRVZBTDticmVhaztjYXNlIG8rZCtcIj1cIjp0aGlzLm1vZGU9VGVtcGxhdGUubW9kZXMuRVNDQVBFRDticmVhaztjYXNlIG8rZCtcIi1cIjp0aGlzLm1vZGU9VGVtcGxhdGUubW9kZXMuUkFXO2JyZWFrO2Nhc2UgbytkK1wiI1wiOnRoaXMubW9kZT1UZW1wbGF0ZS5tb2Rlcy5DT01NRU5UO2JyZWFrO2Nhc2UgbytkK2Q6dGhpcy5tb2RlPVRlbXBsYXRlLm1vZGVzLkxJVEVSQUw7dGhpcy5zb3VyY2UrPScgICAgOyBfX2FwcGVuZChcIicrbGluZS5yZXBsYWNlKG8rZCtkLG8rZCkrJ1wiKScrXCJcXG5cIjticmVhaztjYXNlIGQrZCtjOnRoaXMubW9kZT1UZW1wbGF0ZS5tb2Rlcy5MSVRFUkFMO3RoaXMuc291cmNlKz0nICAgIDsgX19hcHBlbmQoXCInK2xpbmUucmVwbGFjZShkK2QrYyxkK2MpKydcIiknK1wiXFxuXCI7YnJlYWs7Y2FzZSBkK2M6Y2FzZVwiLVwiK2QrYzpjYXNlXCJfXCIrZCtjOmlmKHRoaXMubW9kZT09VGVtcGxhdGUubW9kZXMuTElURVJBTCl7dGhpcy5fYWRkT3V0cHV0KGxpbmUpfXRoaXMubW9kZT1udWxsO3RoaXMudHJ1bmNhdGU9bGluZS5pbmRleE9mKFwiLVwiKT09PTB8fGxpbmUuaW5kZXhPZihcIl9cIik9PT0wO2JyZWFrO2RlZmF1bHQ6aWYodGhpcy5tb2RlKXtzd2l0Y2godGhpcy5tb2RlKXtjYXNlIFRlbXBsYXRlLm1vZGVzLkVWQUw6Y2FzZSBUZW1wbGF0ZS5tb2Rlcy5FU0NBUEVEOmNhc2UgVGVtcGxhdGUubW9kZXMuUkFXOmlmKGxpbmUubGFzdEluZGV4T2YoXCIvL1wiKT5saW5lLmxhc3RJbmRleE9mKFwiXFxuXCIpKXtsaW5lKz1cIlxcblwifX1zd2l0Y2godGhpcy5tb2RlKXtjYXNlIFRlbXBsYXRlLm1vZGVzLkVWQUw6dGhpcy5zb3VyY2UrPVwiICAgIDsgXCIrbGluZStcIlxcblwiO2JyZWFrO2Nhc2UgVGVtcGxhdGUubW9kZXMuRVNDQVBFRDp0aGlzLnNvdXJjZSs9XCIgICAgOyBfX2FwcGVuZChlc2NhcGVGbihcIitzdHJpcFNlbWkobGluZSkrXCIpKVwiK1wiXFxuXCI7YnJlYWs7Y2FzZSBUZW1wbGF0ZS5tb2Rlcy5SQVc6dGhpcy5zb3VyY2UrPVwiICAgIDsgX19hcHBlbmQoXCIrc3RyaXBTZW1pKGxpbmUpK1wiKVwiK1wiXFxuXCI7YnJlYWs7Y2FzZSBUZW1wbGF0ZS5tb2Rlcy5DT01NRU5UOmJyZWFrO2Nhc2UgVGVtcGxhdGUubW9kZXMuTElURVJBTDp0aGlzLl9hZGRPdXRwdXQobGluZSk7YnJlYWt9fWVsc2V7dGhpcy5fYWRkT3V0cHV0KGxpbmUpfX1pZihzZWxmLm9wdHMuY29tcGlsZURlYnVnJiZuZXdMaW5lQ291bnQpe3RoaXMuY3VycmVudExpbmUrPW5ld0xpbmVDb3VudDt0aGlzLnNvdXJjZSs9XCIgICAgOyBfX2xpbmUgPSBcIit0aGlzLmN1cnJlbnRMaW5lK1wiXFxuXCJ9fX07ZXhwb3J0cy5lc2NhcGVYTUw9dXRpbHMuZXNjYXBlWE1MO2V4cG9ydHMuX19leHByZXNzPWV4cG9ydHMucmVuZGVyRmlsZTtleHBvcnRzLlZFUlNJT049X1ZFUlNJT05fU1RSSU5HO2V4cG9ydHMubmFtZT1fTkFNRTtpZih0eXBlb2Ygd2luZG93IT1cInVuZGVmaW5lZFwiKXt3aW5kb3cuZWpzPWV4cG9ydHN9fSx7XCIuLi9wYWNrYWdlLmpzb25cIjo2LFwiLi91dGlsc1wiOjIsZnM6MyxwYXRoOjR9XSwyOltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXtcInVzZSBzdHJpY3RcIjt2YXIgcmVnRXhwQ2hhcnM9L1t8XFxcXHt9KClbXFxdXiQrKj8uXS9nO3ZhciBoYXNPd25Qcm9wZXJ0eT1PYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5O3ZhciBoYXNPd249ZnVuY3Rpb24ob2JqLGtleSl7cmV0dXJuIGhhc093blByb3BlcnR5LmFwcGx5KG9iaixba2V5XSl9O2V4cG9ydHMuZXNjYXBlUmVnRXhwQ2hhcnM9ZnVuY3Rpb24oc3RyaW5nKXtpZighc3RyaW5nKXtyZXR1cm5cIlwifXJldHVybiBTdHJpbmcoc3RyaW5nKS5yZXBsYWNlKHJlZ0V4cENoYXJzLFwiXFxcXCQmXCIpfTt2YXIgX0VOQ09ERV9IVE1MX1JVTEVTPXtcIiZcIjpcIiZhbXA7XCIsXCI8XCI6XCImbHQ7XCIsXCI+XCI6XCImZ3Q7XCIsJ1wiJzpcIiYjMzQ7XCIsXCInXCI6XCImIzM5O1wifTt2YXIgX01BVENIX0hUTUw9L1smPD4nXCJdL2c7ZnVuY3Rpb24gZW5jb2RlX2NoYXIoYyl7cmV0dXJuIF9FTkNPREVfSFRNTF9SVUxFU1tjXXx8Y312YXIgZXNjYXBlRnVuY1N0cj1cInZhciBfRU5DT0RFX0hUTUxfUlVMRVMgPSB7XFxuXCIrJyAgICAgIFwiJlwiOiBcIiZhbXA7XCJcXG4nKycgICAgLCBcIjxcIjogXCImbHQ7XCJcXG4nKycgICAgLCBcIj5cIjogXCImZ3Q7XCJcXG4nKycgICAgLCBcXCdcIlxcJzogXCImIzM0O1wiXFxuJysnICAgICwgXCJcXCdcIjogXCImIzM5O1wiXFxuJytcIiAgICB9XFxuXCIrXCIgICwgX01BVENIX0hUTUwgPSAvWyY8PidcXFwiXS9nO1xcblwiK1wiZnVuY3Rpb24gZW5jb2RlX2NoYXIoYykge1xcblwiK1wiICByZXR1cm4gX0VOQ09ERV9IVE1MX1JVTEVTW2NdIHx8IGM7XFxuXCIrXCJ9O1xcblwiO2V4cG9ydHMuZXNjYXBlWE1MPWZ1bmN0aW9uKG1hcmt1cCl7cmV0dXJuIG1hcmt1cD09dW5kZWZpbmVkP1wiXCI6U3RyaW5nKG1hcmt1cCkucmVwbGFjZShfTUFUQ0hfSFRNTCxlbmNvZGVfY2hhcil9O2V4cG9ydHMuZXNjYXBlWE1MLnRvU3RyaW5nPWZ1bmN0aW9uKCl7cmV0dXJuIEZ1bmN0aW9uLnByb3RvdHlwZS50b1N0cmluZy5jYWxsKHRoaXMpK1wiO1xcblwiK2VzY2FwZUZ1bmNTdHJ9O2V4cG9ydHMuc2hhbGxvd0NvcHk9ZnVuY3Rpb24odG8sZnJvbSl7ZnJvbT1mcm9tfHx7fTtpZih0byE9PW51bGwmJnRvIT09dW5kZWZpbmVkKXtmb3IodmFyIHAgaW4gZnJvbSl7aWYoIWhhc093bihmcm9tLHApKXtjb250aW51ZX1pZihwPT09XCJfX3Byb3RvX19cInx8cD09PVwiY29uc3RydWN0b3JcIil7Y29udGludWV9dG9bcF09ZnJvbVtwXX19cmV0dXJuIHRvfTtleHBvcnRzLnNoYWxsb3dDb3B5RnJvbUxpc3Q9ZnVuY3Rpb24odG8sZnJvbSxsaXN0KXtsaXN0PWxpc3R8fFtdO2Zyb209ZnJvbXx8e307aWYodG8hPT1udWxsJiZ0byE9PXVuZGVmaW5lZCl7Zm9yKHZhciBpPTA7aTxsaXN0Lmxlbmd0aDtpKyspe3ZhciBwPWxpc3RbaV07aWYodHlwZW9mIGZyb21bcF0hPVwidW5kZWZpbmVkXCIpe2lmKCFoYXNPd24oZnJvbSxwKSl7Y29udGludWV9aWYocD09PVwiX19wcm90b19fXCJ8fHA9PT1cImNvbnN0cnVjdG9yXCIpe2NvbnRpbnVlfXRvW3BdPWZyb21bcF19fX1yZXR1cm4gdG99O2V4cG9ydHMuY2FjaGU9e19kYXRhOnt9LHNldDpmdW5jdGlvbihrZXksdmFsKXt0aGlzLl9kYXRhW2tleV09dmFsfSxnZXQ6ZnVuY3Rpb24oa2V5KXtyZXR1cm4gdGhpcy5fZGF0YVtrZXldfSxyZW1vdmU6ZnVuY3Rpb24oa2V5KXtkZWxldGUgdGhpcy5fZGF0YVtrZXldfSxyZXNldDpmdW5jdGlvbigpe3RoaXMuX2RhdGE9e319fTtleHBvcnRzLmh5cGhlblRvQ2FtZWw9ZnVuY3Rpb24oc3RyKXtyZXR1cm4gc3RyLnJlcGxhY2UoLy1bYS16XS9nLGZ1bmN0aW9uKG1hdGNoKXtyZXR1cm4gbWF0Y2hbMV0udG9VcHBlckNhc2UoKX0pfTtleHBvcnRzLmNyZWF0ZU51bGxQcm90b09ialdoZXJlUG9zc2libGU9ZnVuY3Rpb24oKXtpZih0eXBlb2YgT2JqZWN0LmNyZWF0ZT09XCJmdW5jdGlvblwiKXtyZXR1cm4gZnVuY3Rpb24oKXtyZXR1cm4gT2JqZWN0LmNyZWF0ZShudWxsKX19aWYoISh7X19wcm90b19fOm51bGx9aW5zdGFuY2VvZiBPYmplY3QpKXtyZXR1cm4gZnVuY3Rpb24oKXtyZXR1cm57X19wcm90b19fOm51bGx9fX1yZXR1cm4gZnVuY3Rpb24oKXtyZXR1cm57fX19KCl9LHt9XSwzOltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXt9LHt9XSw0OltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXsoZnVuY3Rpb24ocHJvY2Vzcyl7ZnVuY3Rpb24gbm9ybWFsaXplQXJyYXkocGFydHMsYWxsb3dBYm92ZVJvb3Qpe3ZhciB1cD0wO2Zvcih2YXIgaT1wYXJ0cy5sZW5ndGgtMTtpPj0wO2ktLSl7dmFyIGxhc3Q9cGFydHNbaV07aWYobGFzdD09PVwiLlwiKXtwYXJ0cy5zcGxpY2UoaSwxKX1lbHNlIGlmKGxhc3Q9PT1cIi4uXCIpe3BhcnRzLnNwbGljZShpLDEpO3VwKyt9ZWxzZSBpZih1cCl7cGFydHMuc3BsaWNlKGksMSk7dXAtLX19aWYoYWxsb3dBYm92ZVJvb3Qpe2Zvcig7dXAtLTt1cCl7cGFydHMudW5zaGlmdChcIi4uXCIpfX1yZXR1cm4gcGFydHN9ZXhwb3J0cy5yZXNvbHZlPWZ1bmN0aW9uKCl7dmFyIHJlc29sdmVkUGF0aD1cIlwiLHJlc29sdmVkQWJzb2x1dGU9ZmFsc2U7Zm9yKHZhciBpPWFyZ3VtZW50cy5sZW5ndGgtMTtpPj0tMSYmIXJlc29sdmVkQWJzb2x1dGU7aS0tKXt2YXIgcGF0aD1pPj0wP2FyZ3VtZW50c1tpXTpwcm9jZXNzLmN3ZCgpO2lmKHR5cGVvZiBwYXRoIT09XCJzdHJpbmdcIil7dGhyb3cgbmV3IFR5cGVFcnJvcihcIkFyZ3VtZW50cyB0byBwYXRoLnJlc29sdmUgbXVzdCBiZSBzdHJpbmdzXCIpfWVsc2UgaWYoIXBhdGgpe2NvbnRpbnVlfXJlc29sdmVkUGF0aD1wYXRoK1wiL1wiK3Jlc29sdmVkUGF0aDtyZXNvbHZlZEFic29sdXRlPXBhdGguY2hhckF0KDApPT09XCIvXCJ9cmVzb2x2ZWRQYXRoPW5vcm1hbGl6ZUFycmF5KGZpbHRlcihyZXNvbHZlZFBhdGguc3BsaXQoXCIvXCIpLGZ1bmN0aW9uKHApe3JldHVybiEhcH0pLCFyZXNvbHZlZEFic29sdXRlKS5qb2luKFwiL1wiKTtyZXR1cm4ocmVzb2x2ZWRBYnNvbHV0ZT9cIi9cIjpcIlwiKStyZXNvbHZlZFBhdGh8fFwiLlwifTtleHBvcnRzLm5vcm1hbGl6ZT1mdW5jdGlvbihwYXRoKXt2YXIgaXNBYnNvbHV0ZT1leHBvcnRzLmlzQWJzb2x1dGUocGF0aCksdHJhaWxpbmdTbGFzaD1zdWJzdHIocGF0aCwtMSk9PT1cIi9cIjtwYXRoPW5vcm1hbGl6ZUFycmF5KGZpbHRlcihwYXRoLnNwbGl0KFwiL1wiKSxmdW5jdGlvbihwKXtyZXR1cm4hIXB9KSwhaXNBYnNvbHV0ZSkuam9pbihcIi9cIik7aWYoIXBhdGgmJiFpc0Fic29sdXRlKXtwYXRoPVwiLlwifWlmKHBhdGgmJnRyYWlsaW5nU2xhc2gpe3BhdGgrPVwiL1wifXJldHVybihpc0Fic29sdXRlP1wiL1wiOlwiXCIpK3BhdGh9O2V4cG9ydHMuaXNBYnNvbHV0ZT1mdW5jdGlvbihwYXRoKXtyZXR1cm4gcGF0aC5jaGFyQXQoMCk9PT1cIi9cIn07ZXhwb3J0cy5qb2luPWZ1bmN0aW9uKCl7dmFyIHBhdGhzPUFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKGFyZ3VtZW50cywwKTtyZXR1cm4gZXhwb3J0cy5ub3JtYWxpemUoZmlsdGVyKHBhdGhzLGZ1bmN0aW9uKHAsaW5kZXgpe2lmKHR5cGVvZiBwIT09XCJzdHJpbmdcIil7dGhyb3cgbmV3IFR5cGVFcnJvcihcIkFyZ3VtZW50cyB0byBwYXRoLmpvaW4gbXVzdCBiZSBzdHJpbmdzXCIpfXJldHVybiBwfSkuam9pbihcIi9cIikpfTtleHBvcnRzLnJlbGF0aXZlPWZ1bmN0aW9uKGZyb20sdG8pe2Zyb209ZXhwb3J0cy5yZXNvbHZlKGZyb20pLnN1YnN0cigxKTt0bz1leHBvcnRzLnJlc29sdmUodG8pLnN1YnN0cigxKTtmdW5jdGlvbiB0cmltKGFycil7dmFyIHN0YXJ0PTA7Zm9yKDtzdGFydDxhcnIubGVuZ3RoO3N0YXJ0Kyspe2lmKGFycltzdGFydF0hPT1cIlwiKWJyZWFrfXZhciBlbmQ9YXJyLmxlbmd0aC0xO2Zvcig7ZW5kPj0wO2VuZC0tKXtpZihhcnJbZW5kXSE9PVwiXCIpYnJlYWt9aWYoc3RhcnQ+ZW5kKXJldHVybltdO3JldHVybiBhcnIuc2xpY2Uoc3RhcnQsZW5kLXN0YXJ0KzEpfXZhciBmcm9tUGFydHM9dHJpbShmcm9tLnNwbGl0KFwiL1wiKSk7dmFyIHRvUGFydHM9dHJpbSh0by5zcGxpdChcIi9cIikpO3ZhciBsZW5ndGg9TWF0aC5taW4oZnJvbVBhcnRzLmxlbmd0aCx0b1BhcnRzLmxlbmd0aCk7dmFyIHNhbWVQYXJ0c0xlbmd0aD1sZW5ndGg7Zm9yKHZhciBpPTA7aTxsZW5ndGg7aSsrKXtpZihmcm9tUGFydHNbaV0hPT10b1BhcnRzW2ldKXtzYW1lUGFydHNMZW5ndGg9aTticmVha319dmFyIG91dHB1dFBhcnRzPVtdO2Zvcih2YXIgaT1zYW1lUGFydHNMZW5ndGg7aTxmcm9tUGFydHMubGVuZ3RoO2krKyl7b3V0cHV0UGFydHMucHVzaChcIi4uXCIpfW91dHB1dFBhcnRzPW91dHB1dFBhcnRzLmNvbmNhdCh0b1BhcnRzLnNsaWNlKHNhbWVQYXJ0c0xlbmd0aCkpO3JldHVybiBvdXRwdXRQYXJ0cy5qb2luKFwiL1wiKX07ZXhwb3J0cy5zZXA9XCIvXCI7ZXhwb3J0cy5kZWxpbWl0ZXI9XCI6XCI7ZXhwb3J0cy5kaXJuYW1lPWZ1bmN0aW9uKHBhdGgpe2lmKHR5cGVvZiBwYXRoIT09XCJzdHJpbmdcIilwYXRoPXBhdGgrXCJcIjtpZihwYXRoLmxlbmd0aD09PTApcmV0dXJuXCIuXCI7dmFyIGNvZGU9cGF0aC5jaGFyQ29kZUF0KDApO3ZhciBoYXNSb290PWNvZGU9PT00Nzt2YXIgZW5kPS0xO3ZhciBtYXRjaGVkU2xhc2g9dHJ1ZTtmb3IodmFyIGk9cGF0aC5sZW5ndGgtMTtpPj0xOy0taSl7Y29kZT1wYXRoLmNoYXJDb2RlQXQoaSk7aWYoY29kZT09PTQ3KXtpZighbWF0Y2hlZFNsYXNoKXtlbmQ9aTticmVha319ZWxzZXttYXRjaGVkU2xhc2g9ZmFsc2V9fWlmKGVuZD09PS0xKXJldHVybiBoYXNSb290P1wiL1wiOlwiLlwiO2lmKGhhc1Jvb3QmJmVuZD09PTEpe3JldHVyblwiL1wifXJldHVybiBwYXRoLnNsaWNlKDAsZW5kKX07ZnVuY3Rpb24gYmFzZW5hbWUocGF0aCl7aWYodHlwZW9mIHBhdGghPT1cInN0cmluZ1wiKXBhdGg9cGF0aCtcIlwiO3ZhciBzdGFydD0wO3ZhciBlbmQ9LTE7dmFyIG1hdGNoZWRTbGFzaD10cnVlO3ZhciBpO2ZvcihpPXBhdGgubGVuZ3RoLTE7aT49MDstLWkpe2lmKHBhdGguY2hhckNvZGVBdChpKT09PTQ3KXtpZighbWF0Y2hlZFNsYXNoKXtzdGFydD1pKzE7YnJlYWt9fWVsc2UgaWYoZW5kPT09LTEpe21hdGNoZWRTbGFzaD1mYWxzZTtlbmQ9aSsxfX1pZihlbmQ9PT0tMSlyZXR1cm5cIlwiO3JldHVybiBwYXRoLnNsaWNlKHN0YXJ0LGVuZCl9ZXhwb3J0cy5iYXNlbmFtZT1mdW5jdGlvbihwYXRoLGV4dCl7dmFyIGY9YmFzZW5hbWUocGF0aCk7aWYoZXh0JiZmLnN1YnN0cigtMSpleHQubGVuZ3RoKT09PWV4dCl7Zj1mLnN1YnN0cigwLGYubGVuZ3RoLWV4dC5sZW5ndGgpfXJldHVybiBmfTtleHBvcnRzLmV4dG5hbWU9ZnVuY3Rpb24ocGF0aCl7aWYodHlwZW9mIHBhdGghPT1cInN0cmluZ1wiKXBhdGg9cGF0aCtcIlwiO3ZhciBzdGFydERvdD0tMTt2YXIgc3RhcnRQYXJ0PTA7dmFyIGVuZD0tMTt2YXIgbWF0Y2hlZFNsYXNoPXRydWU7dmFyIHByZURvdFN0YXRlPTA7Zm9yKHZhciBpPXBhdGgubGVuZ3RoLTE7aT49MDstLWkpe3ZhciBjb2RlPXBhdGguY2hhckNvZGVBdChpKTtpZihjb2RlPT09NDcpe2lmKCFtYXRjaGVkU2xhc2gpe3N0YXJ0UGFydD1pKzE7YnJlYWt9Y29udGludWV9aWYoZW5kPT09LTEpe21hdGNoZWRTbGFzaD1mYWxzZTtlbmQ9aSsxfWlmKGNvZGU9PT00Nil7aWYoc3RhcnREb3Q9PT0tMSlzdGFydERvdD1pO2Vsc2UgaWYocHJlRG90U3RhdGUhPT0xKXByZURvdFN0YXRlPTF9ZWxzZSBpZihzdGFydERvdCE9PS0xKXtwcmVEb3RTdGF0ZT0tMX19aWYoc3RhcnREb3Q9PT0tMXx8ZW5kPT09LTF8fHByZURvdFN0YXRlPT09MHx8cHJlRG90U3RhdGU9PT0xJiZzdGFydERvdD09PWVuZC0xJiZzdGFydERvdD09PXN0YXJ0UGFydCsxKXtyZXR1cm5cIlwifXJldHVybiBwYXRoLnNsaWNlKHN0YXJ0RG90LGVuZCl9O2Z1bmN0aW9uIGZpbHRlcih4cyxmKXtpZih4cy5maWx0ZXIpcmV0dXJuIHhzLmZpbHRlcihmKTt2YXIgcmVzPVtdO2Zvcih2YXIgaT0wO2k8eHMubGVuZ3RoO2krKyl7aWYoZih4c1tpXSxpLHhzKSlyZXMucHVzaCh4c1tpXSl9cmV0dXJuIHJlc312YXIgc3Vic3RyPVwiYWJcIi5zdWJzdHIoLTEpPT09XCJiXCI/ZnVuY3Rpb24oc3RyLHN0YXJ0LGxlbil7cmV0dXJuIHN0ci5zdWJzdHIoc3RhcnQsbGVuKX06ZnVuY3Rpb24oc3RyLHN0YXJ0LGxlbil7aWYoc3RhcnQ8MClzdGFydD1zdHIubGVuZ3RoK3N0YXJ0O3JldHVybiBzdHIuc3Vic3RyKHN0YXJ0LGxlbil9fSkuY2FsbCh0aGlzLHJlcXVpcmUoXCJfcHJvY2Vzc1wiKSl9LHtfcHJvY2Vzczo1fV0sNTpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7dmFyIHByb2Nlc3M9bW9kdWxlLmV4cG9ydHM9e307dmFyIGNhY2hlZFNldFRpbWVvdXQ7dmFyIGNhY2hlZENsZWFyVGltZW91dDtmdW5jdGlvbiBkZWZhdWx0U2V0VGltb3V0KCl7dGhyb3cgbmV3IEVycm9yKFwic2V0VGltZW91dCBoYXMgbm90IGJlZW4gZGVmaW5lZFwiKX1mdW5jdGlvbiBkZWZhdWx0Q2xlYXJUaW1lb3V0KCl7dGhyb3cgbmV3IEVycm9yKFwiY2xlYXJUaW1lb3V0IGhhcyBub3QgYmVlbiBkZWZpbmVkXCIpfShmdW5jdGlvbigpe3RyeXtpZih0eXBlb2Ygc2V0VGltZW91dD09PVwiZnVuY3Rpb25cIil7Y2FjaGVkU2V0VGltZW91dD1zZXRUaW1lb3V0fWVsc2V7Y2FjaGVkU2V0VGltZW91dD1kZWZhdWx0U2V0VGltb3V0fX1jYXRjaChlKXtjYWNoZWRTZXRUaW1lb3V0PWRlZmF1bHRTZXRUaW1vdXR9dHJ5e2lmKHR5cGVvZiBjbGVhclRpbWVvdXQ9PT1cImZ1bmN0aW9uXCIpe2NhY2hlZENsZWFyVGltZW91dD1jbGVhclRpbWVvdXR9ZWxzZXtjYWNoZWRDbGVhclRpbWVvdXQ9ZGVmYXVsdENsZWFyVGltZW91dH19Y2F0Y2goZSl7Y2FjaGVkQ2xlYXJUaW1lb3V0PWRlZmF1bHRDbGVhclRpbWVvdXR9fSkoKTtmdW5jdGlvbiBydW5UaW1lb3V0KGZ1bil7aWYoY2FjaGVkU2V0VGltZW91dD09PXNldFRpbWVvdXQpe3JldHVybiBzZXRUaW1lb3V0KGZ1biwwKX1pZigoY2FjaGVkU2V0VGltZW91dD09PWRlZmF1bHRTZXRUaW1vdXR8fCFjYWNoZWRTZXRUaW1lb3V0KSYmc2V0VGltZW91dCl7Y2FjaGVkU2V0VGltZW91dD1zZXRUaW1lb3V0O3JldHVybiBzZXRUaW1lb3V0KGZ1biwwKX10cnl7cmV0dXJuIGNhY2hlZFNldFRpbWVvdXQoZnVuLDApfWNhdGNoKGUpe3RyeXtyZXR1cm4gY2FjaGVkU2V0VGltZW91dC5jYWxsKG51bGwsZnVuLDApfWNhdGNoKGUpe3JldHVybiBjYWNoZWRTZXRUaW1lb3V0LmNhbGwodGhpcyxmdW4sMCl9fX1mdW5jdGlvbiBydW5DbGVhclRpbWVvdXQobWFya2VyKXtpZihjYWNoZWRDbGVhclRpbWVvdXQ9PT1jbGVhclRpbWVvdXQpe3JldHVybiBjbGVhclRpbWVvdXQobWFya2VyKX1pZigoY2FjaGVkQ2xlYXJUaW1lb3V0PT09ZGVmYXVsdENsZWFyVGltZW91dHx8IWNhY2hlZENsZWFyVGltZW91dCkmJmNsZWFyVGltZW91dCl7Y2FjaGVkQ2xlYXJUaW1lb3V0PWNsZWFyVGltZW91dDtyZXR1cm4gY2xlYXJUaW1lb3V0KG1hcmtlcil9dHJ5e3JldHVybiBjYWNoZWRDbGVhclRpbWVvdXQobWFya2VyKX1jYXRjaChlKXt0cnl7cmV0dXJuIGNhY2hlZENsZWFyVGltZW91dC5jYWxsKG51bGwsbWFya2VyKX1jYXRjaChlKXtyZXR1cm4gY2FjaGVkQ2xlYXJUaW1lb3V0LmNhbGwodGhpcyxtYXJrZXIpfX19dmFyIHF1ZXVlPVtdO3ZhciBkcmFpbmluZz1mYWxzZTt2YXIgY3VycmVudFF1ZXVlO3ZhciBxdWV1ZUluZGV4PS0xO2Z1bmN0aW9uIGNsZWFuVXBOZXh0VGljaygpe2lmKCFkcmFpbmluZ3x8IWN1cnJlbnRRdWV1ZSl7cmV0dXJufWRyYWluaW5nPWZhbHNlO2lmKGN1cnJlbnRRdWV1ZS5sZW5ndGgpe3F1ZXVlPWN1cnJlbnRRdWV1ZS5jb25jYXQocXVldWUpfWVsc2V7cXVldWVJbmRleD0tMX1pZihxdWV1ZS5sZW5ndGgpe2RyYWluUXVldWUoKX19ZnVuY3Rpb24gZHJhaW5RdWV1ZSgpe2lmKGRyYWluaW5nKXtyZXR1cm59dmFyIHRpbWVvdXQ9cnVuVGltZW91dChjbGVhblVwTmV4dFRpY2spO2RyYWluaW5nPXRydWU7dmFyIGxlbj1xdWV1ZS5sZW5ndGg7d2hpbGUobGVuKXtjdXJyZW50UXVldWU9cXVldWU7cXVldWU9W107d2hpbGUoKytxdWV1ZUluZGV4PGxlbil7aWYoY3VycmVudFF1ZXVlKXtjdXJyZW50UXVldWVbcXVldWVJbmRleF0ucnVuKCl9fXF1ZXVlSW5kZXg9LTE7bGVuPXF1ZXVlLmxlbmd0aH1jdXJyZW50UXVldWU9bnVsbDtkcmFpbmluZz1mYWxzZTtydW5DbGVhclRpbWVvdXQodGltZW91dCl9cHJvY2Vzcy5uZXh0VGljaz1mdW5jdGlvbihmdW4pe3ZhciBhcmdzPW5ldyBBcnJheShhcmd1bWVudHMubGVuZ3RoLTEpO2lmKGFyZ3VtZW50cy5sZW5ndGg+MSl7Zm9yKHZhciBpPTE7aTxhcmd1bWVudHMubGVuZ3RoO2krKyl7YXJnc1tpLTFdPWFyZ3VtZW50c1tpXX19cXVldWUucHVzaChuZXcgSXRlbShmdW4sYXJncykpO2lmKHF1ZXVlLmxlbmd0aD09PTEmJiFkcmFpbmluZyl7cnVuVGltZW91dChkcmFpblF1ZXVlKX19O2Z1bmN0aW9uIEl0ZW0oZnVuLGFycmF5KXt0aGlzLmZ1bj1mdW47dGhpcy5hcnJheT1hcnJheX1JdGVtLnByb3RvdHlwZS5ydW49ZnVuY3Rpb24oKXt0aGlzLmZ1bi5hcHBseShudWxsLHRoaXMuYXJyYXkpfTtwcm9jZXNzLnRpdGxlPVwiYnJvd3NlclwiO3Byb2Nlc3MuYnJvd3Nlcj10cnVlO3Byb2Nlc3MuZW52PXt9O3Byb2Nlc3MuYXJndj1bXTtwcm9jZXNzLnZlcnNpb249XCJcIjtwcm9jZXNzLnZlcnNpb25zPXt9O2Z1bmN0aW9uIG5vb3AoKXt9cHJvY2Vzcy5vbj1ub29wO3Byb2Nlc3MuYWRkTGlzdGVuZXI9bm9vcDtwcm9jZXNzLm9uY2U9bm9vcDtwcm9jZXNzLm9mZj1ub29wO3Byb2Nlc3MucmVtb3ZlTGlzdGVuZXI9bm9vcDtwcm9jZXNzLnJlbW92ZUFsbExpc3RlbmVycz1ub29wO3Byb2Nlc3MuZW1pdD1ub29wO3Byb2Nlc3MucHJlcGVuZExpc3RlbmVyPW5vb3A7cHJvY2Vzcy5wcmVwZW5kT25jZUxpc3RlbmVyPW5vb3A7cHJvY2Vzcy5saXN0ZW5lcnM9ZnVuY3Rpb24obmFtZSl7cmV0dXJuW119O3Byb2Nlc3MuYmluZGluZz1mdW5jdGlvbihuYW1lKXt0aHJvdyBuZXcgRXJyb3IoXCJwcm9jZXNzLmJpbmRpbmcgaXMgbm90IHN1cHBvcnRlZFwiKX07cHJvY2Vzcy5jd2Q9ZnVuY3Rpb24oKXtyZXR1cm5cIi9cIn07cHJvY2Vzcy5jaGRpcj1mdW5jdGlvbihkaXIpe3Rocm93IG5ldyBFcnJvcihcInByb2Nlc3MuY2hkaXIgaXMgbm90IHN1cHBvcnRlZFwiKX07cHJvY2Vzcy51bWFzaz1mdW5jdGlvbigpe3JldHVybiAwfX0se31dLDY6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpe21vZHVsZS5leHBvcnRzPXtuYW1lOlwiZWpzXCIsZGVzY3JpcHRpb246XCJFbWJlZGRlZCBKYXZhU2NyaXB0IHRlbXBsYXRlc1wiLGtleXdvcmRzOltcInRlbXBsYXRlXCIsXCJlbmdpbmVcIixcImVqc1wiXSx2ZXJzaW9uOlwiMy4xLjdcIixhdXRob3I6XCJNYXR0aGV3IEVlcm5pc3NlIDxtZGVAZmxlZWdpeC5vcmc+IChodHRwOi8vZmxlZWdpeC5vcmcpXCIsbGljZW5zZTpcIkFwYWNoZS0yLjBcIixiaW46e2VqczpcIi4vYmluL2NsaS5qc1wifSxtYWluOlwiLi9saWIvZWpzLmpzXCIsanNkZWxpdnI6XCJlanMubWluLmpzXCIsdW5wa2c6XCJlanMubWluLmpzXCIscmVwb3NpdG9yeTp7dHlwZTpcImdpdFwiLHVybDpcImdpdDovL2dpdGh1Yi5jb20vbWRlL2Vqcy5naXRcIn0sYnVnczpcImh0dHBzOi8vZ2l0aHViLmNvbS9tZGUvZWpzL2lzc3Vlc1wiLGhvbWVwYWdlOlwiaHR0cHM6Ly9naXRodWIuY29tL21kZS9lanNcIixkZXBlbmRlbmNpZXM6e2pha2U6XCJeMTAuOC41XCJ9LGRldkRlcGVuZGVuY2llczp7YnJvd3NlcmlmeTpcIl4xNi41LjFcIixlc2xpbnQ6XCJeNi44LjBcIixcImdpdC1kaXJlY3RvcnktZGVwbG95XCI6XCJeMS41LjFcIixqc2RvYzpcIl4zLjYuN1wiLFwibHJ1LWNhY2hlXCI6XCJeNC4wLjFcIixtb2NoYTpcIl43LjEuMVwiLFwidWdsaWZ5LWpzXCI6XCJeMy4zLjE2XCJ9LGVuZ2luZXM6e25vZGU6XCI+PTAuMTAuMFwifSxzY3JpcHRzOnt0ZXN0OlwibW9jaGFcIn19fSx7fV19LHt9LFsxXSkoMSl9KTtcbiIsImltcG9ydCBKU1ppcCBmcm9tIFwianN6aXBcIjtcbmltcG9ydCB7IG1lcmdlIH0gZnJvbSBcImxvZGFzaFwiO1xuaW1wb3J0IGVqcyBmcm9tIFwiZWpzL2Vqcy5taW4uanNcIjtcblxuaW1wb3J0IGNvbnRlbnRfdHlwZXMgZnJvbSBcIi4vYXNzZXRzL2NvbnRlbnRfdHlwZXMueG1sXCI7XG5pbXBvcnQgcmVscyBmcm9tIFwiLi9hc3NldHMvcmVscy54bWxcIjtcbmltcG9ydCBkb2NfcmVscyBmcm9tIFwiLi9hc3NldHMvZG9jdW1lbnQueG1sLnJlbHNcIjtcblxuaW1wb3J0IGRvY3VtZW50VGVtcGxhdGUgZnJvbSBcIi4vdGVtcGxhdGVzL2RvY3VtZW50LnRwbFwiO1xuaW1wb3J0IG1odERvY3VtZW50VGVtcGxhdGUgZnJvbSBcIi4vdGVtcGxhdGVzL21odF9kb2N1bWVudC50cGxcIjtcbmltcG9ydCBtaHRQYXJ0VGVtcGxhdGUgZnJvbSBcIi4vdGVtcGxhdGVzL21odF9wYXJ0LnRwbFwiO1xuXG5kZWNsYXJlIGNvbnN0IGdsb2JhbDogYW55O1xuY29uc3Qgd2luID0gdHlwZW9mIGdsb2JhbCA9PT0gXCJ1bmRlZmluZWRcIiA/IHdpbmRvdyA6IGdsb2JhbDtcblxudHlwZSBQYWdlT3JpZW50YXRpb24gPSBcImxhbmRzY2FwZVwiIHwgXCJwb3J0cmFpdFwiO1xuaW50ZXJmYWNlIERvY3VtZW50TWFyZ2lucyB7XG4gIG9yaWVudGF0aW9uOiBQYWdlT3JpZW50YXRpb247XG4gIHdpZHRoPzogbnVtYmVyO1xuICBoZWlnaHQ/OiBudW1iZXI7XG4gIG1hcmdpbnM6IHtcbiAgICB0b3A/OiBudW1iZXI7XG4gICAgYm90dG9tPzogbnVtYmVyO1xuICAgIGxlZnQ/OiBudW1iZXI7XG4gICAgcmlnaHQ/OiBudW1iZXI7XG4gICAgaGVhZGVyPzogbnVtYmVyO1xuICAgIGZvb3Rlcj86IG51bWJlcjtcbiAgICBndXR0ZXI/OiBudW1iZXI7XG4gIH07XG59XG5cbmZ1bmN0aW9uIF9wcmVwYXJlSW1hZ2VQYXJ0cyhodG1sU291cmNlOiBzdHJpbmcpIHtcbiAgY29uc3QgaW1hZ2VDb250ZW50UGFydHM6IHN0cmluZ1tdID0gW107XG4gIGNvbnN0IGlubGluZWRTcmNQYXR0ZXJuID0gL1wiZGF0YTooXFx3K1xcL1xcdyspOyhcXHcrKSwoXFxTKylcIi9nO1xuICBjb25zdCBpbmxpbmVkUmVwbGFjZXIgPSBmdW5jdGlvbiAoXG4gICAgbWF0Y2g6IHN0cmluZyxcbiAgICBjb250ZW50VHlwZTogc3RyaW5nLFxuICAgIGNvbnRlbnRFbmNvZGluZzogc3RyaW5nLFxuICAgIGVuY29kZWRDb250ZW50OiBzdHJpbmdcbiAgKSB7XG4gICAgY29uc3QgaW5kZXggPSBpbWFnZUNvbnRlbnRQYXJ0cy5sZW5ndGg7XG4gICAgY29uc3QgZXh0ZW5zaW9uID0gY29udGVudFR5cGUuc3BsaXQoXCIvXCIpWzFdO1xuICAgIGNvbnN0IGNvbnRlbnRMb2NhdGlvbiA9IFwiZmlsZTovLy9DOi9mYWtlL2ltYWdlXCIgKyBpbmRleCArIFwiLlwiICsgZXh0ZW5zaW9uO1xuXG4gICAgaW1hZ2VDb250ZW50UGFydHMucHVzaChcbiAgICAgIGVqcy5yZW5kZXIobWh0UGFydFRlbXBsYXRlLCB7XG4gICAgICAgIGNvbnRlbnRUeXBlLFxuICAgICAgICBjb250ZW50RW5jb2RpbmcsXG4gICAgICAgIGNvbnRlbnRMb2NhdGlvbixcbiAgICAgICAgZW5jb2RlZENvbnRlbnQsXG4gICAgICB9KVxuICAgICk7XG5cdFx0cmV0dXJuIGBcIiR7Y29udGVudExvY2F0aW9ufVwiYDtcbiAgfTtcbiAgXG5cdGlmICh0eXBlb2YgaHRtbFNvdXJjZSA9PT0gXCJzdHJpbmdcIikge1xuICAgIHJldHVybiB7XG4gICAgICBodG1sU291cmNlOiAhLzxpbWcvZy50ZXN0KGh0bWxTb3VyY2UpXG4gICAgICAgID8gaHRtbFNvdXJjZVxuICAgICAgICA6IGh0bWxTb3VyY2UucmVwbGFjZShpbmxpbmVkU3JjUGF0dGVybiwgaW5saW5lZFJlcGxhY2VyKSxcbiAgICAgIGltYWdlQ29udGVudFBhcnRzLFxuICAgIH07XG4gIH0gZWxzZSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKFwiTm90IGEgdmFsaWQgc291cmNlIHByb3ZpZGVkIVwiKTtcbiAgfVxufVxuXG5mdW5jdGlvbiBnZXRNSFRkb2N1bWVudChzb3VyY2U6IHN0cmluZykge1xuICAvL3Rha2UgY2FyZSBvZiBpbWFnZXNcbiAgY29uc3QgeyBodG1sU291cmNlLCBpbWFnZUNvbnRlbnRQYXJ0cyB9ID0gX3ByZXBhcmVJbWFnZVBhcnRzKHNvdXJjZSk7XG4gIHJldHVybiBlanMucmVuZGVyKG1odERvY3VtZW50VGVtcGxhdGUsIHtcbiAgICBodG1sU291cmNlOiBodG1sU291cmNlLnJlcGxhY2UoL1xcPS9nLCBcIj0zRFwiKSwgLy9mb3IgcHJvcGVyIE1IVCBwYXJzaW5nIGFsbCAnPScgc2lnbnMgaW4gaHRtbCBuZWVkIHRvIGJlIHJlcGxhY2VkIHdpdGggJz0zRCdcbiAgICBjb250ZW50UGFydHM6IGltYWdlQ29udGVudFBhcnRzLmpvaW4oXCJcXG5cIiksXG4gIH0pO1xufVxuXG5hc3luYyBmdW5jdGlvbiBnZW5lcmF0ZURvY3VtZW50KHppcDogSlNaaXAsIGZvcm1hdD86IFwiYmxvYlwiIHwgXCJidWZmZXJcIikge1xuICBjb25zdCBidWZmZXIgPSBhd2FpdCB6aXAuZ2VuZXJhdGVBc3luYyh7IHR5cGU6IFwiYXJyYXlidWZmZXJcIiB9KTtcbiAgY29uc3QgZG9jdHlwZSA9IFwidm5kLm9wZW54bWxmb3JtYXRzLW9mZmljZWRvY3VtZW50LndvcmRwcm9jZXNzaW5nbWwuZG9jdW1lbnRcIjtcbiAgY29uc3QgZXJyID0gYE5laXRoZXIgQmxvYiBub3IgQnVmZmVyIGFyZSBhY2Nlc3NpYmxlIGluIHRoaXMgZW52aXJvbm1lbnQuIENvbnNpZGVyIGFkZGluZyBCbG9iLmpzIHNoaW1gO1xuXG4gIGlmIChmb3JtYXQgPT09IFwiYmxvYlwiKVxuICAgIHJldHVybiBuZXcgQmxvYihbYnVmZmVyXSwgeyB0eXBlOiBgYXBwbGljYXRpb24vJHtkb2N0eXBlfWAgfSk7XG4gIGVsc2UgaWYgKGZvcm1hdCA9PT0gXCJidWZmZXJcIikgcmV0dXJuIG5ldyB3aW4uQnVmZmVyKG5ldyBVaW50OEFycmF5KGJ1ZmZlcikpO1xuICBlbHNlIGlmICh3aW4uQmxvYilcbiAgICByZXR1cm4gbmV3IEJsb2IoW2J1ZmZlcl0sIHsgdHlwZTogYGFwcGxpY2F0aW9uLyR7ZG9jdHlwZX1gIH0pO1xuICBlbHNlIGlmICh3aW4uQnVmZmVyKSByZXR1cm4gbmV3IHdpbi5CdWZmZXIobmV3IFVpbnQ4QXJyYXkoYnVmZmVyKSk7XG4gIGVsc2UgdGhyb3cgbmV3IEVycm9yKGVycik7XG59XG5cbmZ1bmN0aW9uIHJlbmRlckRvY3VtZW50RmlsZShkb2N1bWVudE9wdGlvbnM6IFBhcnRpYWw8RG9jdW1lbnRNYXJnaW5zPikge1xuICBjb25zdCBvcmllbnRhdGlvbiA9IGRvY3VtZW50T3B0aW9ucy5vcmllbnRhdGlvbiA/PyBcInBvcnRyYWl0XCI7XG4gIGNvbnN0IGJhc2UgPSB7XG4gICAgd2lkdGg6IG9yaWVudGF0aW9uID09IFwibGFuZHNjYXBlXCIgPyAxNTg0MCA6IDEyMjQwLFxuICAgIGhlaWdodDogb3JpZW50YXRpb24gPT0gXCJsYW5kc2NhcGVcIiA/IDEyMjQwIDogMTU4NDAsXG4gICAgb3JpZW50OiBvcmllbnRhdGlvbixcbiAgICBtYXJnaW5zOiB7XG4gICAgICB0b3A6IDE0NDAsXG4gICAgICByaWdodDogMTQ0MCxcbiAgICAgIGJvdHRvbTogMTQ0MCxcbiAgICAgIGxlZnQ6IDE0NDAsXG4gICAgICBoZWFkZXI6IDcyMCxcbiAgICAgIGZvb3RlcjogNzIwLFxuICAgICAgZ3V0dGVyOiAwLFxuICAgIH0sXG4gIH07XG5cbiAgcmV0dXJuIGVqcy5yZW5kZXIoZG9jdW1lbnRUZW1wbGF0ZSwgbWVyZ2UoYmFzZSwgZG9jdW1lbnRPcHRpb25zKSk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBhc0Jsb2IoXG4gIGh0bWw6IHN0cmluZyxcbiAgb3B0aW9uczogUGFydGlhbDxEb2N1bWVudE1hcmdpbnM+LFxuICBmb3JtYXQ6IFwiYmxvYlwiXG4pOiBQcm9taXNlPEJsb2I+O1xuZXhwb3J0IGZ1bmN0aW9uIGFzQmxvYihcbiAgaHRtbDogc3RyaW5nLFxuICBvcHRpb25zOiBQYXJ0aWFsPERvY3VtZW50TWFyZ2lucz4sXG4gIGZvcm1hdDogXCJidWZmZXJcIlxuKTogUHJvbWlzZTxCdWZmZXI+O1xuZXhwb3J0IGZ1bmN0aW9uIGFzQmxvYihcbiAgaHRtbDogc3RyaW5nLFxuICBvcHRpb25zOiBQYXJ0aWFsPERvY3VtZW50TWFyZ2lucz4sXG4gIGZvcm1hdDogdW5kZWZpbmVkXG4pOiBQcm9taXNlPEJsb2IgfCBCdWZmZXI+O1xuZXhwb3J0IGZ1bmN0aW9uIGFzQmxvYihcbiAgaHRtbDogc3RyaW5nLFxuICBvcHRpb25zOiBQYXJ0aWFsPERvY3VtZW50TWFyZ2lucz4sXG4gIGZvcm1hdD86IFwiYmxvYlwiIHwgXCJidWZmZXJcIlxuKSB7XG4gIGNvbnNvbGUubG9nKHsgaHRtbCB9KTtcbiAgY29uc3QgemlwID0gbmV3IEpTWmlwKCk7XG4gIHppcC5maWxlKFwiW0NvbnRlbnRfVHlwZXNdLnhtbFwiLCBjb250ZW50X3R5cGVzKTtcbiAgemlwLmZvbGRlcihcIl9yZWxzXCIpIS5maWxlKFwiLnJlbHNcIiwgcmVscyk7XG4gIHppcFxuICAgIC5mb2xkZXIoXCJ3b3JkXCIpIVxuICAgIC5maWxlKFwiZG9jdW1lbnQueG1sXCIsIHJlbmRlckRvY3VtZW50RmlsZShvcHRpb25zKSlcbiAgICAuZmlsZShcImFmY2h1bmsubWh0XCIsIGdldE1IVGRvY3VtZW50KGh0bWwpKVxuICAgIC5mb2xkZXIoXCJfcmVsc1wiKSFcbiAgICAuZmlsZShcImRvY3VtZW50LnhtbC5yZWxzXCIsIGRvY19yZWxzKTtcblxuICByZXR1cm4gZ2VuZXJhdGVEb2N1bWVudCh6aXAsIGZvcm1hdCk7XG59XG4iXSwibmFtZXMiOlsiX19hd2FpdGVyIiwidGhpc0FyZyIsIl9hcmd1bWVudHMiLCJQIiwiZ2VuZXJhdG9yIiwiUHJvbWlzZSIsInJlc29sdmUiLCJyZWplY3QiLCJmdWxmaWxsZWQiLCJ2YWx1ZSIsInN0ZXAiLCJuZXh0IiwiZSIsInJlamVjdGVkIiwicmVzdWx0IiwiZG9uZSIsInRoZW4iLCJhcHBseSIsIl9fZ2VuZXJhdG9yIiwiYm9keSIsImYiLCJ5IiwidCIsImciLCJfIiwibGFiZWwiLCJzZW50IiwidHJ5cyIsIm9wcyIsInZlcmIiLCJ0aHJvdyIsInJldHVybiIsIlN5bWJvbCIsIml0ZXJhdG9yIiwidGhpcyIsIm4iLCJ2Iiwib3AiLCJUeXBlRXJyb3IiLCJjYWxsIiwicG9wIiwibGVuZ3RoIiwicHVzaCIsImV4cG9ydHMiLCJzIiwiYSIsIm8iLCJoIiwidSIsInIiLCJyZXF1aXJlIiwibCIsIkVycm9yIiwiY29kZSIsImkiLCJkIiwiYyIsInAiLCJlbmNvZGUiLCJnZXRUeXBlT2YiLCJjaGFyQ29kZUF0IiwiY2hhckF0Iiwiam9pbiIsImRlY29kZSIsInN1YnN0ciIsInJlcGxhY2UiLCJ1aW50OGFycmF5IiwiVWludDhBcnJheSIsIkFycmF5IiwiaW5kZXhPZiIsImNvbXByZXNzZWRTaXplIiwidW5jb21wcmVzc2VkU2l6ZSIsImNyYzMyIiwiY29tcHJlc3Npb24iLCJjb21wcmVzc2VkQ29udGVudCIsInByb3RvdHlwZSIsImdldENvbnRlbnRXb3JrZXIiLCJwaXBlIiwidW5jb21wcmVzc1dvcmtlciIsIm9uIiwic3RyZWFtSW5mbyIsImRhdGFfbGVuZ3RoIiwiZ2V0Q29tcHJlc3NlZFdvcmtlciIsIndpdGhTdHJlYW1JbmZvIiwiY3JlYXRlV29ya2VyRnJvbSIsImNvbXByZXNzV29ya2VyIiwiU1RPUkUiLCJtYWdpYyIsIkRFRkxBVEUiLCJiYXNlNjQiLCJiaW5hcnkiLCJkaXIiLCJjcmVhdGVGb2xkZXJzIiwiZGF0ZSIsImNvbXByZXNzaW9uT3B0aW9ucyIsImNvbW1lbnQiLCJ1bml4UGVybWlzc2lvbnMiLCJkb3NQZXJtaXNzaW9ucyIsImxpZSIsIlVpbnQxNkFycmF5IiwiVWludDMyQXJyYXkiLCJfcGFrbyIsIl9wYWtvQWN0aW9uIiwiX3Bha29PcHRpb25zIiwibWV0YSIsImluaGVyaXRzIiwicHJvY2Vzc0NodW5rIiwiX2NyZWF0ZVBha28iLCJ0cmFuc2Zvcm1UbyIsImRhdGEiLCJmbHVzaCIsImNsZWFuVXAiLCJyYXciLCJsZXZlbCIsIm9uRGF0YSIsInBha28iLCJBIiwiU3RyaW5nIiwiZnJvbUNoYXJDb2RlIiwiZmlsZSIsIk8iLCJ1dGY4ZW5jb2RlIiwiSSIsIm5hbWUiLCJtIiwiYiIsInciLCJrIiwieCIsIlMiLCJ6IiwiQyIsImdldFVUQ0hvdXJzIiwiZ2V0VVRDTWludXRlcyIsImdldFVUQ1NlY29uZHMiLCJnZXRVVENGdWxsWWVhciIsImdldFVUQ01vbnRoIiwiZ2V0VVRDRGF0ZSIsIkIiLCJFIiwiZmlsZVJlY29yZCIsIlIiLCJMT0NBTF9GSUxFX0hFQURFUiIsImRpclJlY29yZCIsIkNFTlRSQUxfRklMRV9IRUFERVIiLCJieXRlc1dyaXR0ZW4iLCJ6aXBDb21tZW50IiwiemlwUGxhdGZvcm0iLCJlbmNvZGVGaWxlTmFtZSIsInN0cmVhbUZpbGVzIiwiYWNjdW11bGF0ZSIsImNvbnRlbnRCdWZmZXIiLCJkaXJSZWNvcmRzIiwiY3VycmVudFNvdXJjZU9mZnNldCIsImVudHJpZXNDb3VudCIsImN1cnJlbnRGaWxlIiwiX3NvdXJjZXMiLCJwZXJjZW50Iiwib3BlbmVkU291cmNlIiwiY2xvc2VkU291cmNlIiwiREFUQV9ERVNDUklQVE9SIiwic2hpZnQiLCJDRU5UUkFMX0RJUkVDVE9SWV9FTkQiLCJwcmVwYXJlTmV4dFNvdXJjZSIsInByZXZpb3VzIiwiaXNQYXVzZWQiLCJwYXVzZSIsInJlc3VtZSIsInJlZ2lzdGVyUHJldmlvdXMiLCJlbmQiLCJlcnJvciIsImdlbmVyYXRlZEVycm9yIiwibG9jayIsImdlbmVyYXRlV29ya2VyIiwicGxhdGZvcm0iLCJmb3JFYWNoIiwib3B0aW9ucyIsIl9jb21wcmVzc1dvcmtlciIsImFyZ3VtZW50cyIsImZpbGVzIiwiT2JqZWN0IiwiY3JlYXRlIiwicm9vdCIsImNsb25lIiwibG9hZEFzeW5jIiwic3VwcG9ydCIsImRlZmF1bHRzIiwidmVyc2lvbiIsImV4dGVybmFsIiwiZGVjb21wcmVzc2VkIiwiZXh0ZW5kIiwiY2hlY2tDUkMzMiIsIm9wdGltaXplZEJpbmFyeVN0cmluZyIsImRlY29kZUZpbGVOYW1lIiwidXRmOGRlY29kZSIsImlzTm9kZSIsImlzU3RyZWFtIiwicHJlcGFyZUNvbnRlbnQiLCJsb2FkIiwiYWxsIiwiZmlsZU5hbWVTdHIiLCJmaWxlQ29tbWVudFN0ciIsInVuc2FmZU9yaWdpbmFsTmFtZSIsIl91cHN0cmVhbUVuZGVkIiwiX2JpbmRTdHJlYW0iLCJfc3RyZWFtIiwiUmVhZGFibGUiLCJfaGVscGVyIiwiZW1pdCIsIl9yZWFkIiwiQnVmZmVyIiwibmV3QnVmZmVyRnJvbSIsImZyb20iLCJhbGxvY0J1ZmZlciIsImFsbG9jIiwiZmlsbCIsImlzQnVmZmVyIiwiRGF0ZSIsInRvVXBwZXJDYXNlIiwicGFyc2VJbnQiLCJzbGljZSIsInN1YnN0cmluZyIsImxhc3RJbmRleE9mIiwidG9TdHJpbmciLCJmaWx0ZXIiLCJ0ZXN0IiwiZm9sZGVyIiwicmVtb3ZlIiwiZ2VuZXJhdGUiLCJnZW5lcmF0ZUludGVybmFsU3RyZWFtIiwidHlwZSIsIm1pbWVUeXBlIiwidG9Mb3dlckNhc2UiLCJjaGVja1N1cHBvcnQiLCJnZW5lcmF0ZUFzeW5jIiwiZ2VuZXJhdGVOb2RlU3RyZWFtIiwidG9Ob2RlanNTdHJlYW0iLCJzdHJlYW0iLCJieXRlQXQiLCJ6ZXJvIiwibGFzdEluZGV4T2ZTaWduYXR1cmUiLCJyZWFkQW5kQ2hlY2tTaWduYXR1cmUiLCJyZWFkRGF0YSIsImNoZWNrT2Zmc2V0IiwiaW5kZXgiLCJjaGVja0luZGV4Iiwic2V0SW5kZXgiLCJza2lwIiwicmVhZEludCIsInJlYWRTdHJpbmciLCJyZWFkRGF0ZSIsIlVUQyIsInN1YmFycmF5IiwiWklQNjRfQ0VOVFJBTF9ESVJFQ1RPUllfTE9DQVRPUiIsIlpJUDY0X0NFTlRSQUxfRElSRUNUT1JZX0VORCIsImRlc3RUeXBlIiwicHJvcE5hbWUiLCJkYXRhSXNSZWFkeSIsIm1heCIsIl90aWNrU2NoZWR1bGVkIiwiX3RpY2tBbmRSZXBlYXQiLCJkZWxheSIsImlzRmluaXNoZWQiLCJfdGljayIsIk1hdGgiLCJtaW4iLCJleHRyYVN0cmVhbUluZm8iLCJpc0xvY2tlZCIsIl9saXN0ZW5lcnMiLCJtZXJnZVN0cmVhbUluZm8iLCJoYXNPd25Qcm9wZXJ0eSIsIm5vZGVzdHJlYW0iLCJfaW50ZXJuYWxUeXBlIiwiX291dHB1dFR5cGUiLCJfbWltZVR5cGUiLCJuZXdCbG9iIiwiY29uY2F0Iiwic2V0IiwiX3dvcmtlciIsIm9iamVjdE1vZGUiLCJhcnJheSIsInN0cmluZyIsImFycmF5YnVmZmVyIiwiQXJyYXlCdWZmZXIiLCJub2RlYnVmZmVyIiwiYmxvYiIsIkJsb2IiLCJzaXplIiwic2VsZiIsIkJsb2JCdWlsZGVyIiwiV2ViS2l0QmxvYkJ1aWxkZXIiLCJNb3pCbG9iQnVpbGRlciIsIk1TQmxvYkJ1aWxkZXIiLCJhcHBlbmQiLCJnZXRCbG9iIiwibGVmdE92ZXIiLCJhcHBseUZyb21DaGFyQ29kZSIsIlV0ZjhEZWNvZGVXb3JrZXIiLCJVdGY4RW5jb2RlV29ya2VyIiwic3RyaW5naWZ5QnlDaHVuayIsInN0cmluZ2lmeUJ5Q2hhciIsImFwcGx5Q2FuQmVVc2VkIiwiZmxvb3IiLCJidWZmZXIiLCJieXRlTGVuZ3RoIiwic3BsaXQiLCJNQVhfVkFMVUVfMTZCSVRTIiwiTUFYX1ZBTFVFXzMyQklUUyIsInByZXR0eSIsInNldEltbWVkaWF0ZSIsIkZpbGVSZWFkZXIiLCJvbmxvYWQiLCJ0YXJnZXQiLCJvbmVycm9yIiwicmVhZEFzQXJyYXlCdWZmZXIiLCJzZXRpbW1lZGlhdGUiLCJsb2FkT3B0aW9ucyIsImNoZWNrU2lnbmF0dXJlIiwicmVhZGVyIiwiaXNTaWduYXR1cmUiLCJyZWFkQmxvY2tFbmRPZkNlbnRyYWwiLCJkaXNrTnVtYmVyIiwiZGlza1dpdGhDZW50cmFsRGlyU3RhcnQiLCJjZW50cmFsRGlyUmVjb3Jkc09uVGhpc0Rpc2siLCJjZW50cmFsRGlyUmVjb3JkcyIsImNlbnRyYWxEaXJTaXplIiwiY2VudHJhbERpck9mZnNldCIsInppcENvbW1lbnRMZW5ndGgiLCJyZWFkQmxvY2taaXA2NEVuZE9mQ2VudHJhbCIsInppcDY0RW5kT2ZDZW50cmFsU2l6ZSIsInppcDY0RXh0ZW5zaWJsZURhdGEiLCJpZCIsInJlYWRCbG9ja1ppcDY0RW5kT2ZDZW50cmFsTG9jYXRvciIsImRpc2tXaXRoWmlwNjRDZW50cmFsRGlyU3RhcnQiLCJyZWxhdGl2ZU9mZnNldEVuZE9mWmlwNjRDZW50cmFsRGlyIiwiZGlza3NDb3VudCIsInJlYWRMb2NhbEZpbGVzIiwibG9jYWxIZWFkZXJPZmZzZXQiLCJyZWFkTG9jYWxQYXJ0IiwiaGFuZGxlVVRGOCIsInByb2Nlc3NBdHRyaWJ1dGVzIiwicmVhZENlbnRyYWxEaXIiLCJ6aXA2NCIsInJlYWRDZW50cmFsUGFydCIsInJlYWRFbmRPZkNlbnRyYWwiLCJhYnMiLCJwcmVwYXJlUmVhZGVyIiwiaXNFbmNyeXB0ZWQiLCJiaXRGbGFnIiwidXNlVVRGOCIsImZpbGVOYW1lTGVuZ3RoIiwiZmlsZU5hbWUiLCJjb21wcmVzc2lvbk1ldGhvZCIsInZlcnNpb25NYWRlQnkiLCJleHRyYUZpZWxkc0xlbmd0aCIsImZpbGVDb21tZW50TGVuZ3RoIiwiZGlza051bWJlclN0YXJ0IiwiaW50ZXJuYWxGaWxlQXR0cmlidXRlcyIsImV4dGVybmFsRmlsZUF0dHJpYnV0ZXMiLCJyZWFkRXh0cmFGaWVsZHMiLCJwYXJzZVpJUDY0RXh0cmFGaWVsZCIsImZpbGVDb21tZW50IiwiZXh0cmFGaWVsZHMiLCJmaW5kRXh0cmFGaWVsZFVuaWNvZGVQYXRoIiwiZmluZEV4dHJhRmllbGRVbmljb2RlQ29tbWVudCIsIl9kYXRhIiwiX2RhdGFCaW5hcnkiLCJpbnRlcm5hbFN0cmVhbSIsIl9kZWNvbXByZXNzV29ya2VyIiwiYXN5bmMiLCJub2RlU3RyZWFtIiwiTXV0YXRpb25PYnNlcnZlciIsIldlYktpdE11dGF0aW9uT2JzZXJ2ZXIiLCJkb2N1bWVudCIsImNyZWF0ZVRleHROb2RlIiwib2JzZXJ2ZSIsImNoYXJhY3RlckRhdGEiLCJNZXNzYWdlQ2hhbm5lbCIsImNyZWF0ZUVsZW1lbnQiLCJvbnJlYWR5c3RhdGVjaGFuZ2UiLCJwYXJlbnROb2RlIiwicmVtb3ZlQ2hpbGQiLCJkb2N1bWVudEVsZW1lbnQiLCJhcHBlbmRDaGlsZCIsInNldFRpbWVvdXQiLCJwb3J0MSIsIm9ubWVzc2FnZSIsInBvcnQyIiwicG9zdE1lc3NhZ2UiLCJnbG9iYWwiLCJ3aW5kb3ciLCJzdGF0ZSIsInF1ZXVlIiwib3V0Y29tZSIsInByb21pc2UiLCJvbkZ1bGZpbGxlZCIsImNhbGxGdWxmaWxsZWQiLCJvdGhlckNhbGxGdWxmaWxsZWQiLCJvblJlamVjdGVkIiwiY2FsbFJlamVjdGVkIiwib3RoZXJDYWxsUmVqZWN0ZWQiLCJzdGF0dXMiLCJmaW5hbGx5IiwiY29uc3RydWN0b3IiLCJjYXRjaCIsInJhY2UiLCJpbW1lZGlhdGUiLCJhc3NpZ24iLCJtZXRob2QiLCJjaHVua1NpemUiLCJ3aW5kb3dCaXRzIiwibWVtTGV2ZWwiLCJzdHJhdGVneSIsInRvIiwiZ3ppcCIsImVyciIsIm1zZyIsImVuZGVkIiwiY2h1bmtzIiwic3RybSIsImF2YWlsX291dCIsImRlZmxhdGVJbml0MiIsImhlYWRlciIsImRlZmxhdGVTZXRIZWFkZXIiLCJkaWN0aW9uYXJ5Iiwic3RyaW5nMmJ1ZiIsImRlZmxhdGVTZXREaWN0aW9uYXJ5IiwiX2RpY3Rfc2V0IiwiaW5wdXQiLCJuZXh0X2luIiwiYXZhaWxfaW4iLCJvdXRwdXQiLCJCdWY4IiwibmV4dF9vdXQiLCJkZWZsYXRlIiwib25FbmQiLCJidWYyYmluc3RyaW5nIiwic2hyaW5rQnVmIiwiZGVmbGF0ZUVuZCIsImZsYXR0ZW5DaHVua3MiLCJEZWZsYXRlIiwiZGVmbGF0ZVJhdyIsImluZmxhdGVJbml0MiIsIlpfT0siLCJpbmZsYXRlR2V0SGVhZGVyIiwiWl9GSU5JU0giLCJaX05PX0ZMVVNIIiwiYmluc3RyaW5nMmJ1ZiIsImluZmxhdGUiLCJaX05FRURfRElDVCIsImluZmxhdGVTZXREaWN0aW9uYXJ5IiwiWl9CVUZfRVJST1IiLCJaX1NUUkVBTV9FTkQiLCJaX1NZTkNfRkxVU0giLCJ1dGY4Ym9yZGVyIiwiYnVmMnN0cmluZyIsImFycmF5U2V0IiwiaW5mbGF0ZUVuZCIsIkluZmxhdGUiLCJpbmZsYXRlUmF3IiwidW5nemlwIiwiSW50MzJBcnJheSIsInNldFR5cGVkIiwiQnVmMTYiLCJCdWYzMiIsIlpfUEFSVElBTF9GTFVTSCIsIlpfRlVMTF9GTFVTSCIsIlpfQkxPQ0siLCJaX1RSRUVTIiwiWl9FUlJOTyIsIlpfU1RSRUFNX0VSUk9SIiwiWl9EQVRBX0VSUk9SIiwiWl9OT19DT01QUkVTU0lPTiIsIlpfQkVTVF9TUEVFRCIsIlpfQkVTVF9DT01QUkVTU0lPTiIsIlpfREVGQVVMVF9DT01QUkVTU0lPTiIsIlpfRklMVEVSRUQiLCJaX0hVRkZNQU5fT05MWSIsIlpfUkxFIiwiWl9GSVhFRCIsIlpfREVGQVVMVF9TVFJBVEVHWSIsIlpfQklOQVJZIiwiWl9URVhUIiwiWl9VTktOT1dOIiwiWl9ERUZMQVRFRCIsIlQiLCJEIiwiRiIsInBlbmRpbmciLCJwZW5kaW5nX2J1ZiIsInBlbmRpbmdfb3V0IiwidG90YWxfb3V0IiwiTiIsIl90cl9mbHVzaF9ibG9jayIsImJsb2NrX3N0YXJ0Iiwic3Ryc3RhcnQiLCJVIiwiTCIsIm1heF9jaGFpbl9sZW5ndGgiLCJwcmV2X2xlbmd0aCIsIm5pY2VfbWF0Y2giLCJ3X3NpemUiLCJ3X21hc2siLCJwcmV2IiwiZ29vZF9tYXRjaCIsImxvb2thaGVhZCIsIm1hdGNoX3N0YXJ0IiwiaiIsIndpbmRvd19zaXplIiwiaGFzaF9zaXplIiwiaGVhZCIsIndyYXAiLCJhZGxlciIsInRvdGFsX2luIiwiaW5zZXJ0IiwiaW5zX2giLCJoYXNoX3NoaWZ0IiwiaGFzaF9tYXNrIiwiWiIsIm1hdGNoX2xlbmd0aCIsIl90cl90YWxseSIsIm1heF9sYXp5X21hdGNoIiwibGFzdF9saXQiLCJXIiwicHJldl9tYXRjaCIsIm1hdGNoX2F2YWlsYWJsZSIsIk0iLCJnb29kX2xlbmd0aCIsIm1heF9sYXp5IiwibmljZV9sZW5ndGgiLCJtYXhfY2hhaW4iLCJmdW5jIiwiSCIsInBlbmRpbmdfYnVmX3NpemUiLCJnemhlYWQiLCJnemluZGV4IiwibGFzdF9mbHVzaCIsIndfYml0cyIsImhhc2hfYml0cyIsImR5bl9sdHJlZSIsImR5bl9kdHJlZSIsImJsX3RyZWUiLCJsX2Rlc2MiLCJkX2Rlc2MiLCJibF9kZXNjIiwiYmxfY291bnQiLCJoZWFwIiwiaGVhcF9sZW4iLCJoZWFwX21heCIsImRlcHRoIiwibF9idWYiLCJsaXRfYnVmc2l6ZSIsImRfYnVmIiwib3B0X2xlbiIsInN0YXRpY19sZW4iLCJtYXRjaGVzIiwiYmlfYnVmIiwiYmlfdmFsaWQiLCJHIiwiZGF0YV90eXBlIiwiX3RyX2luaXQiLCJLIiwiWSIsImRlZmxhdGVJbml0IiwiZGVmbGF0ZVJlc2V0IiwiZGVmbGF0ZVJlc2V0S2VlcCIsInRleHQiLCJoY3JjIiwiZXh0cmEiLCJ0aW1lIiwib3MiLCJfdHJfYWxpZ24iLCJfdHJfc3RvcmVkX2Jsb2NrIiwiZGVmbGF0ZUluZm8iLCJ4ZmxhZ3MiLCJleHRyYV9sZW4iLCJkbWF4Iiwid3NpemUiLCJ3aGF2ZSIsInduZXh0IiwiaG9sZCIsImJpdHMiLCJsZW5jb2RlIiwiZGlzdGNvZGUiLCJsZW5iaXRzIiwiZGlzdGJpdHMiLCJtb2RlIiwic2FuZSIsImxhc3QiLCJoYXZlZGljdCIsImZsYWdzIiwiY2hlY2siLCJ0b3RhbCIsIndiaXRzIiwib2Zmc2V0IiwibmNvZGUiLCJubGVuIiwibmRpc3QiLCJoYXZlIiwibGVucyIsIndvcmsiLCJsZW5keW4iLCJkaXN0ZHluIiwiYmFjayIsIndhcyIsImluZmxhdGVSZXNldCIsImluZmxhdGVSZXNldDIiLCJpbmZsYXRlUmVzZXRLZWVwIiwiaW5mbGF0ZUluaXQiLCJpbmZsYXRlSW5mbyIsInN0YXRpY190cmVlIiwiZXh0cmFfYml0cyIsImV4dHJhX2Jhc2UiLCJlbGVtcyIsIm1heF9sZW5ndGgiLCJoYXNfc3RyZWUiLCJkeW5fdHJlZSIsIm1heF9jb2RlIiwic3RhdF9kZXNjIiwiWCIsIlYiLCJxIiwiSiIsImdldFByb3RvdHlwZU9mIiwicHJvY2VzcyIsIm5leHRUaWNrIiwiaW1wb3J0U2NyaXB0cyIsInJhbmRvbSIsImFkZEV2ZW50TGlzdGVuZXIiLCJhdHRhY2hFdmVudCIsIkZ1bmN0aW9uIiwiY2FsbGJhY2siLCJhcmdzIiwiY2xlYXJJbW1lZGlhdGUiLCJzb3VyY2UiLCJ1bmRlZmluZWQiLCJGVU5DX0VSUk9SX1RFWFQiLCJIQVNIX1VOREVGSU5FRCIsIlBMQUNFSE9MREVSIiwiV1JBUF9DVVJSWV9SSUdIVF9GTEFHIiwiV1JBUF9QQVJUSUFMX0ZMQUciLCJXUkFQX1BBUlRJQUxfUklHSFRfRkxBRyIsIldSQVBfQVJZX0ZMQUciLCJXUkFQX1JFQVJHX0ZMQUciLCJJTkZJTklUWSIsIk1BWF9TQUZFX0lOVEVHRVIiLCJOQU4iLCJNQVhfQVJSQVlfTEVOR1RIIiwid3JhcEZsYWdzIiwiYXJnc1RhZyIsImFycmF5VGFnIiwiYm9vbFRhZyIsImRhdGVUYWciLCJlcnJvclRhZyIsImZ1bmNUYWciLCJnZW5UYWciLCJtYXBUYWciLCJudW1iZXJUYWciLCJvYmplY3RUYWciLCJwcm9taXNlVGFnIiwicmVnZXhwVGFnIiwic2V0VGFnIiwic3RyaW5nVGFnIiwic3ltYm9sVGFnIiwid2Vha01hcFRhZyIsImFycmF5QnVmZmVyVGFnIiwiZGF0YVZpZXdUYWciLCJmbG9hdDMyVGFnIiwiZmxvYXQ2NFRhZyIsImludDhUYWciLCJpbnQxNlRhZyIsImludDMyVGFnIiwidWludDhUYWciLCJ1aW50OENsYW1wZWRUYWciLCJ1aW50MTZUYWciLCJ1aW50MzJUYWciLCJyZUVtcHR5U3RyaW5nTGVhZGluZyIsInJlRW1wdHlTdHJpbmdNaWRkbGUiLCJyZUVtcHR5U3RyaW5nVHJhaWxpbmciLCJyZUVzY2FwZWRIdG1sIiwicmVVbmVzY2FwZWRIdG1sIiwicmVIYXNFc2NhcGVkSHRtbCIsIlJlZ0V4cCIsInJlSGFzVW5lc2NhcGVkSHRtbCIsInJlRXNjYXBlIiwicmVFdmFsdWF0ZSIsInJlSW50ZXJwb2xhdGUiLCJyZUlzRGVlcFByb3AiLCJyZUlzUGxhaW5Qcm9wIiwicmVQcm9wTmFtZSIsInJlUmVnRXhwQ2hhciIsInJlSGFzUmVnRXhwQ2hhciIsInJlVHJpbVN0YXJ0IiwicmVXaGl0ZXNwYWNlIiwicmVXcmFwQ29tbWVudCIsInJlV3JhcERldGFpbHMiLCJyZVNwbGl0RGV0YWlscyIsInJlQXNjaWlXb3JkIiwicmVGb3JiaWRkZW5JZGVudGlmaWVyQ2hhcnMiLCJyZUVzY2FwZUNoYXIiLCJyZUVzVGVtcGxhdGUiLCJyZUZsYWdzIiwicmVJc0JhZEhleCIsInJlSXNCaW5hcnkiLCJyZUlzSG9zdEN0b3IiLCJyZUlzT2N0YWwiLCJyZUlzVWludCIsInJlTGF0aW4iLCJyZU5vTWF0Y2giLCJyZVVuZXNjYXBlZFN0cmluZyIsInJzQ29tYm9SYW5nZSIsInJzQ29tYm9NYXJrc1JhbmdlIiwicnNEaW5nYmF0UmFuZ2UiLCJyc0xvd2VyUmFuZ2UiLCJyc1VwcGVyUmFuZ2UiLCJyc1ZhclJhbmdlIiwicnNCcmVha1JhbmdlIiwicnNNYXRoT3BSYW5nZSIsInJzQXBvcyIsInJzQXN0cmFsIiwicnNCcmVhayIsInJzQ29tYm8iLCJyc0RpZ2l0cyIsInJzRGluZ2JhdCIsInJzTG93ZXIiLCJyc01pc2MiLCJyc0ZpdHoiLCJyc05vbkFzdHJhbCIsInJzUmVnaW9uYWwiLCJyc1N1cnJQYWlyIiwicnNVcHBlciIsInJzTWlzY0xvd2VyIiwicnNNaXNjVXBwZXIiLCJyc09wdENvbnRyTG93ZXIiLCJyc09wdENvbnRyVXBwZXIiLCJyZU9wdE1vZCIsInJzTW9kaWZpZXIiLCJyc09wdFZhciIsInJzU2VxIiwicnNFbW9qaSIsInJzU3ltYm9sIiwicmVBcG9zIiwicmVDb21ib01hcmsiLCJyZVVuaWNvZGUiLCJyZVVuaWNvZGVXb3JkIiwicmVIYXNVbmljb2RlIiwicmVIYXNVbmljb2RlV29yZCIsImNvbnRleHRQcm9wcyIsInRlbXBsYXRlQ291bnRlciIsInR5cGVkQXJyYXlUYWdzIiwiY2xvbmVhYmxlVGFncyIsInN0cmluZ0VzY2FwZXMiLCJmcmVlUGFyc2VGbG9hdCIsInBhcnNlRmxvYXQiLCJmcmVlUGFyc2VJbnQiLCJmcmVlR2xvYmFsIiwiZnJlZVNlbGYiLCJmcmVlRXhwb3J0cyIsIm5vZGVUeXBlIiwiZnJlZU1vZHVsZSIsIm1vZHVsZSIsIm1vZHVsZUV4cG9ydHMiLCJmcmVlUHJvY2VzcyIsIm5vZGVVdGlsIiwidHlwZXMiLCJiaW5kaW5nIiwibm9kZUlzQXJyYXlCdWZmZXIiLCJpc0FycmF5QnVmZmVyIiwibm9kZUlzRGF0ZSIsImlzRGF0ZSIsIm5vZGVJc01hcCIsImlzTWFwIiwibm9kZUlzUmVnRXhwIiwiaXNSZWdFeHAiLCJub2RlSXNTZXQiLCJpc1NldCIsIm5vZGVJc1R5cGVkQXJyYXkiLCJpc1R5cGVkQXJyYXkiLCJhcnJheUFnZ3JlZ2F0b3IiLCJzZXR0ZXIiLCJpdGVyYXRlZSIsImFjY3VtdWxhdG9yIiwiYXJyYXlFYWNoIiwiYXJyYXlFYWNoUmlnaHQiLCJhcnJheUV2ZXJ5IiwicHJlZGljYXRlIiwiYXJyYXlGaWx0ZXIiLCJyZXNJbmRleCIsImFycmF5SW5jbHVkZXMiLCJiYXNlSW5kZXhPZiIsImFycmF5SW5jbHVkZXNXaXRoIiwiY29tcGFyYXRvciIsImFycmF5TWFwIiwiYXJyYXlQdXNoIiwidmFsdWVzIiwiYXJyYXlSZWR1Y2UiLCJpbml0QWNjdW0iLCJhcnJheVJlZHVjZVJpZ2h0IiwiYXJyYXlTb21lIiwiYXNjaWlTaXplIiwiYmFzZVByb3BlcnR5IiwiYmFzZUZpbmRLZXkiLCJjb2xsZWN0aW9uIiwiZWFjaEZ1bmMiLCJrZXkiLCJiYXNlRmluZEluZGV4IiwiZnJvbUluZGV4IiwiZnJvbVJpZ2h0Iiwic3RyaWN0SW5kZXhPZiIsImJhc2VJc05hTiIsImJhc2VJbmRleE9mV2l0aCIsImJhc2VNZWFuIiwiYmFzZVN1bSIsIm9iamVjdCIsImJhc2VQcm9wZXJ0eU9mIiwiYmFzZVJlZHVjZSIsImN1cnJlbnQiLCJiYXNlVGltZXMiLCJiYXNlVHJpbSIsInRyaW1tZWRFbmRJbmRleCIsImJhc2VVbmFyeSIsImJhc2VWYWx1ZXMiLCJwcm9wcyIsImNhY2hlSGFzIiwiY2FjaGUiLCJoYXMiLCJjaGFyc1N0YXJ0SW5kZXgiLCJzdHJTeW1ib2xzIiwiY2hyU3ltYm9scyIsImNoYXJzRW5kSW5kZXgiLCJjb3VudEhvbGRlcnMiLCJwbGFjZWhvbGRlciIsImRlYnVyckxldHRlciIsImVzY2FwZUh0bWxDaGFyIiwiZXNjYXBlU3RyaW5nQ2hhciIsImNociIsImhhc1VuaWNvZGUiLCJtYXBUb0FycmF5IiwibWFwIiwib3ZlckFyZyIsInRyYW5zZm9ybSIsImFyZyIsInJlcGxhY2VIb2xkZXJzIiwic2V0VG9BcnJheSIsInNldFRvUGFpcnMiLCJzdHJpbmdTaXplIiwibGFzdEluZGV4IiwidW5pY29kZVNpemUiLCJzdHJpbmdUb0FycmF5IiwibWF0Y2giLCJ1bmljb2RlVG9BcnJheSIsImFzY2lpVG9BcnJheSIsInVuZXNjYXBlSHRtbENoYXIiLCJydW5JbkNvbnRleHQiLCJjb250ZXh0IiwidWlkIiwicGljayIsImFycmF5UHJvdG8iLCJmdW5jUHJvdG8iLCJvYmplY3RQcm90byIsImNvcmVKc0RhdGEiLCJmdW5jVG9TdHJpbmciLCJpZENvdW50ZXIiLCJtYXNrU3JjS2V5IiwiZXhlYyIsImtleXMiLCJJRV9QUk9UTyIsIm5hdGl2ZU9iamVjdFRvU3RyaW5nIiwib2JqZWN0Q3RvclN0cmluZyIsIm9sZERhc2giLCJyZUlzTmF0aXZlIiwiYWxsb2NVbnNhZmUiLCJnZXRQcm90b3R5cGUiLCJvYmplY3RDcmVhdGUiLCJwcm9wZXJ0eUlzRW51bWVyYWJsZSIsInNwbGljZSIsInNwcmVhZGFibGVTeW1ib2wiLCJpc0NvbmNhdFNwcmVhZGFibGUiLCJzeW1JdGVyYXRvciIsInN5bVRvU3RyaW5nVGFnIiwidG9TdHJpbmdUYWciLCJkZWZpbmVQcm9wZXJ0eSIsImdldE5hdGl2ZSIsImN0eENsZWFyVGltZW91dCIsImNsZWFyVGltZW91dCIsImN0eE5vdyIsIm5vdyIsImN0eFNldFRpbWVvdXQiLCJuYXRpdmVDZWlsIiwiY2VpbCIsIm5hdGl2ZUZsb29yIiwibmF0aXZlR2V0U3ltYm9scyIsImdldE93blByb3BlcnR5U3ltYm9scyIsIm5hdGl2ZUlzQnVmZmVyIiwibmF0aXZlSXNGaW5pdGUiLCJpc0Zpbml0ZSIsIm5hdGl2ZUpvaW4iLCJuYXRpdmVLZXlzIiwibmF0aXZlTWF4IiwibmF0aXZlTWluIiwibmF0aXZlTm93IiwibmF0aXZlUGFyc2VJbnQiLCJuYXRpdmVSYW5kb20iLCJuYXRpdmVSZXZlcnNlIiwicmV2ZXJzZSIsIkRhdGFWaWV3IiwiTWFwIiwiU2V0IiwiV2Vha01hcCIsIm5hdGl2ZUNyZWF0ZSIsIm1ldGFNYXAiLCJyZWFsTmFtZXMiLCJkYXRhVmlld0N0b3JTdHJpbmciLCJ0b1NvdXJjZSIsIm1hcEN0b3JTdHJpbmciLCJwcm9taXNlQ3RvclN0cmluZyIsInNldEN0b3JTdHJpbmciLCJ3ZWFrTWFwQ3RvclN0cmluZyIsInN5bWJvbFByb3RvIiwic3ltYm9sVmFsdWVPZiIsInZhbHVlT2YiLCJzeW1ib2xUb1N0cmluZyIsImxvZGFzaCIsImlzT2JqZWN0TGlrZSIsImlzQXJyYXkiLCJMYXp5V3JhcHBlciIsIkxvZGFzaFdyYXBwZXIiLCJ3cmFwcGVyQ2xvbmUiLCJiYXNlQ3JlYXRlIiwicHJvdG8iLCJpc09iamVjdCIsImJhc2VMb2Rhc2giLCJjaGFpbkFsbCIsIl9fd3JhcHBlZF9fIiwiX19hY3Rpb25zX18iLCJfX2NoYWluX18iLCJfX2luZGV4X18iLCJfX3ZhbHVlc19fIiwiX19kaXJfXyIsIl9fZmlsdGVyZWRfXyIsIl9faXRlcmF0ZWVzX18iLCJfX3Rha2VDb3VudF9fIiwiX192aWV3c19fIiwiSGFzaCIsImVudHJpZXMiLCJjbGVhciIsImVudHJ5IiwiTGlzdENhY2hlIiwiTWFwQ2FjaGUiLCJTZXRDYWNoZSIsIl9fZGF0YV9fIiwiYWRkIiwiU3RhY2siLCJhcnJheUxpa2VLZXlzIiwiaW5oZXJpdGVkIiwiaXNBcnIiLCJpc0FyZyIsImlzQXJndW1lbnRzIiwiaXNCdWZmIiwiaXNUeXBlIiwic2tpcEluZGV4ZXMiLCJpc0luZGV4IiwiYXJyYXlTYW1wbGUiLCJiYXNlUmFuZG9tIiwiYXJyYXlTYW1wbGVTaXplIiwic2h1ZmZsZVNlbGYiLCJjb3B5QXJyYXkiLCJiYXNlQ2xhbXAiLCJhcnJheVNodWZmbGUiLCJhc3NpZ25NZXJnZVZhbHVlIiwiZXEiLCJiYXNlQXNzaWduVmFsdWUiLCJhc3NpZ25WYWx1ZSIsIm9ialZhbHVlIiwiYXNzb2NJbmRleE9mIiwiYmFzZUFnZ3JlZ2F0b3IiLCJiYXNlRWFjaCIsImJhc2VBc3NpZ24iLCJjb3B5T2JqZWN0IiwiY29uZmlndXJhYmxlIiwiZW51bWVyYWJsZSIsIndyaXRhYmxlIiwiYmFzZUF0IiwicGF0aHMiLCJnZXQiLCJudW1iZXIiLCJsb3dlciIsInVwcGVyIiwiYmFzZUNsb25lIiwiYml0bWFzayIsImN1c3RvbWl6ZXIiLCJzdGFjayIsImlzRGVlcCIsImlzRmxhdCIsImlzRnVsbCIsImluaXRDbG9uZUFycmF5IiwidGFnIiwiZ2V0VGFnIiwiaXNGdW5jIiwiY2xvbmVCdWZmZXIiLCJpbml0Q2xvbmVPYmplY3QiLCJnZXRTeW1ib2xzSW4iLCJjb3B5U3ltYm9sc0luIiwia2V5c0luIiwiYmFzZUFzc2lnbkluIiwiZ2V0U3ltYm9scyIsImNvcHlTeW1ib2xzIiwic3ltYm9sIiwiQ3RvciIsImNsb25lQXJyYXlCdWZmZXIiLCJkYXRhVmlldyIsImJ5dGVPZmZzZXQiLCJjbG9uZURhdGFWaWV3IiwiY2xvbmVUeXBlZEFycmF5IiwicmVnZXhwIiwiY2xvbmVSZWdFeHAiLCJpbml0Q2xvbmVCeVRhZyIsInN0YWNrZWQiLCJzdWJWYWx1ZSIsImdldEFsbEtleXNJbiIsImdldEFsbEtleXMiLCJiYXNlQ29uZm9ybXNUbyIsImJhc2VEZWxheSIsIndhaXQiLCJiYXNlRGlmZmVyZW5jZSIsImluY2x1ZGVzIiwiaXNDb21tb24iLCJ2YWx1ZXNMZW5ndGgiLCJvdXRlciIsImNvbXB1dGVkIiwidmFsdWVzSW5kZXgiLCJ0ZW1wbGF0ZVNldHRpbmdzIiwiZXNjYXBlIiwiZXZhbHVhdGUiLCJpbnRlcnBvbGF0ZSIsInZhcmlhYmxlIiwiaW1wb3J0cyIsImhhc2giLCJnZXRNYXBEYXRhIiwicGFpcnMiLCJMQVJHRV9BUlJBWV9TSVpFIiwiY3JlYXRlQmFzZUVhY2giLCJiYXNlRm9yT3duIiwiYmFzZUVhY2hSaWdodCIsImJhc2VGb3JPd25SaWdodCIsImJhc2VFdmVyeSIsImJhc2VFeHRyZW11bSIsImlzU3ltYm9sIiwiYmFzZUZpbHRlciIsImJhc2VGbGF0dGVuIiwiaXNTdHJpY3QiLCJpc0ZsYXR0ZW5hYmxlIiwiYmFzZUZvciIsImNyZWF0ZUJhc2VGb3IiLCJiYXNlRm9yUmlnaHQiLCJiYXNlRnVuY3Rpb25zIiwiaXNGdW5jdGlvbiIsImJhc2VHZXQiLCJwYXRoIiwiY2FzdFBhdGgiLCJ0b0tleSIsImJhc2VHZXRBbGxLZXlzIiwia2V5c0Z1bmMiLCJzeW1ib2xzRnVuYyIsImJhc2VHZXRUYWciLCJpc093biIsInVubWFza2VkIiwiZ2V0UmF3VGFnIiwib2JqZWN0VG9TdHJpbmciLCJiYXNlR3QiLCJvdGhlciIsImJhc2VIYXMiLCJiYXNlSGFzSW4iLCJiYXNlSW50ZXJzZWN0aW9uIiwiYXJyYXlzIiwib3RoTGVuZ3RoIiwib3RoSW5kZXgiLCJjYWNoZXMiLCJtYXhMZW5ndGgiLCJJbmZpbml0eSIsInNlZW4iLCJiYXNlSW52b2tlIiwicGFyZW50IiwiYmFzZUlzQXJndW1lbnRzIiwiYmFzZUlzRXF1YWwiLCJlcXVhbEZ1bmMiLCJvYmpJc0FyciIsIm90aElzQXJyIiwib2JqVGFnIiwib3RoVGFnIiwib2JqSXNPYmoiLCJvdGhJc09iaiIsImlzU2FtZVRhZyIsImVxdWFsQXJyYXlzIiwibWVzc2FnZSIsImNvbnZlcnQiLCJpc1BhcnRpYWwiLCJlcXVhbEJ5VGFnIiwib2JqSXNXcmFwcGVkIiwib3RoSXNXcmFwcGVkIiwib2JqVW53cmFwcGVkIiwib3RoVW53cmFwcGVkIiwib2JqUHJvcHMiLCJvYmpMZW5ndGgiLCJvYmpTdGFja2VkIiwib3RoU3RhY2tlZCIsInNraXBDdG9yIiwib3RoVmFsdWUiLCJjb21wYXJlZCIsIm9iakN0b3IiLCJvdGhDdG9yIiwiZXF1YWxPYmplY3RzIiwiYmFzZUlzRXF1YWxEZWVwIiwiYmFzZUlzTWF0Y2giLCJtYXRjaERhdGEiLCJub0N1c3RvbWl6ZXIiLCJzcmNWYWx1ZSIsIkNPTVBBUkVfUEFSVElBTF9GTEFHIiwiYmFzZUlzTmF0aXZlIiwiYmFzZUl0ZXJhdGVlIiwiaWRlbnRpdHkiLCJiYXNlTWF0Y2hlc1Byb3BlcnR5IiwiYmFzZU1hdGNoZXMiLCJwcm9wZXJ0eSIsImJhc2VLZXlzIiwiaXNQcm90b3R5cGUiLCJiYXNlS2V5c0luIiwibmF0aXZlS2V5c0luIiwiaXNQcm90byIsImJhc2VMdCIsImJhc2VNYXAiLCJpc0FycmF5TGlrZSIsImdldE1hdGNoRGF0YSIsIm1hdGNoZXNTdHJpY3RDb21wYXJhYmxlIiwiaXNLZXkiLCJpc1N0cmljdENvbXBhcmFibGUiLCJoYXNJbiIsImJhc2VNZXJnZSIsInNyY0luZGV4IiwibWVyZ2VGdW5jIiwic2FmZUdldCIsIm5ld1ZhbHVlIiwiaXNUeXBlZCIsImlzQXJyYXlMaWtlT2JqZWN0IiwiaXNQbGFpbk9iamVjdCIsInRvUGxhaW5PYmplY3QiLCJiYXNlTWVyZ2VEZWVwIiwiYmFzZU50aCIsImJhc2VPcmRlckJ5IiwiaXRlcmF0ZWVzIiwib3JkZXJzIiwiZ2V0SXRlcmF0ZWUiLCJjcml0ZXJpYSIsImNvbXBhcmVyIiwic29ydCIsImJhc2VTb3J0QnkiLCJvYmpDcml0ZXJpYSIsIm90aENyaXRlcmlhIiwib3JkZXJzTGVuZ3RoIiwiY29tcGFyZUFzY2VuZGluZyIsImNvbXBhcmVNdWx0aXBsZSIsImJhc2VQaWNrQnkiLCJiYXNlU2V0IiwiYmFzZVB1bGxBbGwiLCJiYXNlUHVsbEF0IiwiaW5kZXhlcyIsImJhc2VVbnNldCIsImJhc2VSZXBlYXQiLCJiYXNlUmVzdCIsInN0YXJ0Iiwic2V0VG9TdHJpbmciLCJvdmVyUmVzdCIsImJhc2VTYW1wbGUiLCJiYXNlU2FtcGxlU2l6ZSIsIm5lc3RlZCIsImJhc2VTZXREYXRhIiwiYmFzZVNldFRvU3RyaW5nIiwiY29uc3RhbnQiLCJiYXNlU2h1ZmZsZSIsImJhc2VTbGljZSIsImJhc2VTb21lIiwiYmFzZVNvcnRlZEluZGV4IiwicmV0SGlnaGVzdCIsImxvdyIsImhpZ2giLCJtaWQiLCJiYXNlU29ydGVkSW5kZXhCeSIsInZhbElzTmFOIiwidmFsSXNOdWxsIiwidmFsSXNTeW1ib2wiLCJ2YWxJc1VuZGVmaW5lZCIsIm90aElzRGVmaW5lZCIsIm90aElzTnVsbCIsIm90aElzUmVmbGV4aXZlIiwib3RoSXNTeW1ib2wiLCJzZXRMb3ciLCJiYXNlU29ydGVkVW5pcSIsImJhc2VUb051bWJlciIsImJhc2VUb1N0cmluZyIsImJhc2VVbmlxIiwiY3JlYXRlU2V0Iiwic2VlbkluZGV4IiwiYmFzZVVwZGF0ZSIsInVwZGF0ZXIiLCJiYXNlV2hpbGUiLCJpc0Ryb3AiLCJiYXNlV3JhcHBlclZhbHVlIiwiYWN0aW9ucyIsImFjdGlvbiIsImJhc2VYb3IiLCJiYXNlWmlwT2JqZWN0IiwiYXNzaWduRnVuYyIsInZhbHNMZW5ndGgiLCJjYXN0QXJyYXlMaWtlT2JqZWN0IiwiY2FzdEZ1bmN0aW9uIiwic3RyaW5nVG9QYXRoIiwiY2FzdFJlc3QiLCJjYXN0U2xpY2UiLCJjb3B5IiwiYXJyYXlCdWZmZXIiLCJ0eXBlZEFycmF5IiwidmFsSXNEZWZpbmVkIiwidmFsSXNSZWZsZXhpdmUiLCJjb21wb3NlQXJncyIsInBhcnRpYWxzIiwiaG9sZGVycyIsImlzQ3VycmllZCIsImFyZ3NJbmRleCIsImFyZ3NMZW5ndGgiLCJob2xkZXJzTGVuZ3RoIiwibGVmdEluZGV4IiwibGVmdExlbmd0aCIsInJhbmdlTGVuZ3RoIiwiaXNVbmN1cnJpZWQiLCJjb21wb3NlQXJnc1JpZ2h0IiwiaG9sZGVyc0luZGV4IiwicmlnaHRJbmRleCIsInJpZ2h0TGVuZ3RoIiwiaXNOZXciLCJjcmVhdGVBZ2dyZWdhdG9yIiwiaW5pdGlhbGl6ZXIiLCJjcmVhdGVBc3NpZ25lciIsImFzc2lnbmVyIiwic291cmNlcyIsImd1YXJkIiwiaXNJdGVyYXRlZUNhbGwiLCJpdGVyYWJsZSIsImNyZWF0ZUNhc2VGaXJzdCIsIm1ldGhvZE5hbWUiLCJ0cmFpbGluZyIsImNyZWF0ZUNvbXBvdW5kZXIiLCJ3b3JkcyIsImRlYnVyciIsImNyZWF0ZUN0b3IiLCJ0aGlzQmluZGluZyIsImNyZWF0ZUZpbmQiLCJmaW5kSW5kZXhGdW5jIiwiY3JlYXRlRmxvdyIsImZsYXRSZXN0IiwiZnVuY3MiLCJwcmVyZXEiLCJ0aHJ1Iiwid3JhcHBlciIsImdldEZ1bmNOYW1lIiwiZnVuY05hbWUiLCJnZXREYXRhIiwiaXNMYXppYWJsZSIsInBsYW50IiwiY3JlYXRlSHlicmlkIiwicGFydGlhbHNSaWdodCIsImhvbGRlcnNSaWdodCIsImFyZ1BvcyIsImFyeSIsImFyaXR5IiwiaXNBcnkiLCJpc0JpbmQiLCJpc0JpbmRLZXkiLCJpc0ZsaXAiLCJnZXRIb2xkZXIiLCJob2xkZXJzQ291bnQiLCJuZXdIb2xkZXJzIiwiY3JlYXRlUmVjdXJyeSIsImZuIiwicmVvcmRlciIsImNyZWF0ZUludmVydGVyIiwidG9JdGVyYXRlZSIsImJhc2VJbnZlcnRlciIsImNyZWF0ZU1hdGhPcGVyYXRpb24iLCJvcGVyYXRvciIsImRlZmF1bHRWYWx1ZSIsImNyZWF0ZU92ZXIiLCJhcnJheUZ1bmMiLCJjcmVhdGVQYWRkaW5nIiwiY2hhcnMiLCJjaGFyc0xlbmd0aCIsImNyZWF0ZVJhbmdlIiwidG9GaW5pdGUiLCJiYXNlUmFuZ2UiLCJjcmVhdGVSZWxhdGlvbmFsT3BlcmF0aW9uIiwidG9OdW1iZXIiLCJ3cmFwRnVuYyIsImlzQ3VycnkiLCJuZXdEYXRhIiwic2V0RGF0YSIsInNldFdyYXBUb1N0cmluZyIsImNyZWF0ZVJvdW5kIiwicHJlY2lzaW9uIiwidG9JbnRlZ2VyIiwicGFpciIsIm5vb3AiLCJjcmVhdGVUb1BhaXJzIiwiYmFzZVRvUGFpcnMiLCJjcmVhdGVXcmFwIiwic3JjQml0bWFzayIsIm5ld0JpdG1hc2siLCJpc0NvbWJvIiwibWVyZ2VEYXRhIiwiY3JlYXRlQ3VycnkiLCJjcmVhdGVQYXJ0aWFsIiwiY3JlYXRlQmluZCIsImN1c3RvbURlZmF1bHRzQXNzaWduSW4iLCJjdXN0b21EZWZhdWx0c01lcmdlIiwiY3VzdG9tT21pdENsb25lIiwiYXJyTGVuZ3RoIiwiYXJyU3RhY2tlZCIsImFyclZhbHVlIiwiZmxhdHRlbiIsIm90aGVyRnVuYyIsImdldFZhbHVlIiwic3R1YkFycmF5IiwiaGFzUGF0aCIsImhhc0Z1bmMiLCJpc0xlbmd0aCIsImN0b3JTdHJpbmciLCJpc01hc2thYmxlIiwic3R1YkZhbHNlIiwib3RoZXJBcmdzIiwib2xkQXJyYXkiLCJzaG9ydE91dCIsInJlZmVyZW5jZSIsImRldGFpbHMiLCJpbnNlcnRXcmFwRGV0YWlscyIsInVwZGF0ZVdyYXBEZXRhaWxzIiwiZ2V0V3JhcERldGFpbHMiLCJjb3VudCIsImxhc3RDYWxsZWQiLCJzdGFtcCIsInJlbWFpbmluZyIsInJhbmQiLCJtZW1vaXplIiwibWVtb2l6ZUNhcHBlZCIsInF1b3RlIiwic3ViU3RyaW5nIiwiZGlmZmVyZW5jZSIsImRpZmZlcmVuY2VCeSIsImRpZmZlcmVuY2VXaXRoIiwiZmluZEluZGV4IiwiZmluZExhc3RJbmRleCIsImludGVyc2VjdGlvbiIsIm1hcHBlZCIsImludGVyc2VjdGlvbkJ5IiwiaW50ZXJzZWN0aW9uV2l0aCIsInB1bGwiLCJwdWxsQWxsIiwicHVsbEF0IiwidW5pb24iLCJ1bmlvbkJ5IiwidW5pb25XaXRoIiwidW56aXAiLCJncm91cCIsInVuemlwV2l0aCIsIndpdGhvdXQiLCJ4b3IiLCJ4b3JCeSIsInhvcldpdGgiLCJ6aXAiLCJ6aXBXaXRoIiwiY2hhaW4iLCJpbnRlcmNlcHRvciIsIndyYXBwZXJBdCIsImNvdW50QnkiLCJmaW5kIiwiZmluZExhc3QiLCJmb3JFYWNoUmlnaHQiLCJncm91cEJ5IiwiaW52b2tlTWFwIiwia2V5QnkiLCJwYXJ0aXRpb24iLCJzb3J0QnkiLCJiZWZvcmUiLCJiaW5kIiwiYmluZEtleSIsIldSQVBfQklORF9GTEFHIiwiZGVib3VuY2UiLCJsYXN0QXJncyIsImxhc3RUaGlzIiwibWF4V2FpdCIsInRpbWVySWQiLCJsYXN0Q2FsbFRpbWUiLCJsYXN0SW52b2tlVGltZSIsImxlYWRpbmciLCJtYXhpbmciLCJpbnZva2VGdW5jIiwibGVhZGluZ0VkZ2UiLCJ0aW1lckV4cGlyZWQiLCJzaG91bGRJbnZva2UiLCJ0aW1lU2luY2VMYXN0Q2FsbCIsInRyYWlsaW5nRWRnZSIsInRpbWVXYWl0aW5nIiwicmVtYWluaW5nV2FpdCIsImRlYm91bmNlZCIsImlzSW52b2tpbmciLCJjYW5jZWwiLCJkZWZlciIsInJlc29sdmVyIiwibWVtb2l6ZWQiLCJDYWNoZSIsIm5lZ2F0ZSIsIm92ZXJBcmdzIiwidHJhbnNmb3JtcyIsImZ1bmNzTGVuZ3RoIiwicGFydGlhbCIsInBhcnRpYWxSaWdodCIsInJlYXJnIiwiZ3QiLCJndGUiLCJpc0Vycm9yIiwiaXNJbnRlZ2VyIiwiaXNOdW1iZXIiLCJpc1N0cmluZyIsImx0IiwibHRlIiwidG9BcnJheSIsIml0ZXJhdG9yVG9BcnJheSIsInJlbWFpbmRlciIsInRvTGVuZ3RoIiwiaXNCaW5hcnkiLCJhc3NpZ25JbiIsImFzc2lnbkluV2l0aCIsImFzc2lnbldpdGgiLCJhdCIsInByb3BzSW5kZXgiLCJwcm9wc0xlbmd0aCIsImRlZmF1bHRzRGVlcCIsIm1lcmdlV2l0aCIsImludmVydCIsImludmVydEJ5IiwiaW52b2tlIiwibWVyZ2UiLCJvbWl0IiwiQ0xPTkVfREVFUF9GTEFHIiwiYmFzZVBpY2siLCJwaWNrQnkiLCJwcm9wIiwidG9QYWlycyIsInRvUGFpcnNJbiIsImNhbWVsQ2FzZSIsIndvcmQiLCJjYXBpdGFsaXplIiwidXBwZXJGaXJzdCIsImtlYmFiQ2FzZSIsImxvd2VyQ2FzZSIsImxvd2VyRmlyc3QiLCJzbmFrZUNhc2UiLCJzdGFydENhc2UiLCJ1cHBlckNhc2UiLCJwYXR0ZXJuIiwiaGFzVW5pY29kZVdvcmQiLCJ1bmljb2RlV29yZHMiLCJhc2NpaVdvcmRzIiwiYXR0ZW1wdCIsImJpbmRBbGwiLCJtZXRob2ROYW1lcyIsImZsb3ciLCJmbG93UmlnaHQiLCJtZXRob2RPZiIsIm1peGluIiwib3ZlciIsIm92ZXJFdmVyeSIsIm92ZXJTb21lIiwiYmFzZVByb3BlcnR5RGVlcCIsInJhbmdlIiwicmFuZ2VSaWdodCIsImF1Z2VuZCIsImFkZGVuZCIsImRpdmlkZSIsImRpdmlkZW5kIiwiZGl2aXNvciIsIm11bHRpcGx5IiwibXVsdGlwbGllciIsIm11bHRpcGxpY2FuZCIsInJvdW5kIiwic3VidHJhY3QiLCJtaW51ZW5kIiwic3VidHJhaGVuZCIsImFmdGVyIiwiY2FzdEFycmF5IiwiY2h1bmsiLCJjb21wYWN0IiwiY29uZCIsImNvbmZvcm1zIiwiYmFzZUNvbmZvcm1zIiwicHJvcGVydGllcyIsImN1cnJ5IiwiY3VycnlSaWdodCIsImRyb3AiLCJkcm9wUmlnaHQiLCJkcm9wUmlnaHRXaGlsZSIsImRyb3BXaGlsZSIsImJhc2VGaWxsIiwiZmxhdE1hcCIsImZsYXRNYXBEZWVwIiwiZmxhdE1hcERlcHRoIiwiZmxhdHRlbkRlZXAiLCJmbGF0dGVuRGVwdGgiLCJmbGlwIiwiZnJvbVBhaXJzIiwiZnVuY3Rpb25zIiwiZnVuY3Rpb25zSW4iLCJpbml0aWFsIiwibWFwS2V5cyIsIm1hcFZhbHVlcyIsIm1hdGNoZXNQcm9wZXJ0eSIsIm50aEFyZyIsIm9taXRCeSIsIm9uY2UiLCJvcmRlckJ5IiwicHJvcGVydHlPZiIsInB1bGxBbGxCeSIsInB1bGxBbGxXaXRoIiwicmVzdCIsInNhbXBsZVNpemUiLCJzZXRXaXRoIiwic2h1ZmZsZSIsInNvcnRlZFVuaXEiLCJzb3J0ZWRVbmlxQnkiLCJzZXBhcmF0b3IiLCJsaW1pdCIsInNwcmVhZCIsInRhaWwiLCJ0YWtlIiwidGFrZVJpZ2h0IiwidGFrZVJpZ2h0V2hpbGUiLCJ0YWtlV2hpbGUiLCJ0YXAiLCJ0aHJvdHRsZSIsInRvUGF0aCIsImlzQXJyTGlrZSIsInVuYXJ5IiwidW5pcSIsInVuaXFCeSIsInVuaXFXaXRoIiwidW5zZXQiLCJ1cGRhdGUiLCJ1cGRhdGVXaXRoIiwidmFsdWVzSW4iLCJ6aXBPYmplY3QiLCJ6aXBPYmplY3REZWVwIiwiZW50cmllc0luIiwiZXh0ZW5kV2l0aCIsImNsYW1wIiwiY2xvbmVEZWVwIiwiY2xvbmVEZWVwV2l0aCIsImNsb25lV2l0aCIsImNvbmZvcm1zVG8iLCJkZWZhdWx0VG8iLCJlbmRzV2l0aCIsInBvc2l0aW9uIiwiZXNjYXBlUmVnRXhwIiwiZXZlcnkiLCJmaW5kS2V5IiwiZmluZExhc3RLZXkiLCJmb3JJbiIsImZvckluUmlnaHQiLCJmb3JPd24iLCJmb3JPd25SaWdodCIsImluUmFuZ2UiLCJiYXNlSW5SYW5nZSIsImlzQm9vbGVhbiIsImlzRWxlbWVudCIsImlzRW1wdHkiLCJpc0VxdWFsIiwiaXNFcXVhbFdpdGgiLCJpc01hdGNoIiwiaXNNYXRjaFdpdGgiLCJpc05hTiIsImlzTmF0aXZlIiwiaXNOaWwiLCJpc051bGwiLCJpc1NhZmVJbnRlZ2VyIiwiaXNVbmRlZmluZWQiLCJpc1dlYWtNYXAiLCJpc1dlYWtTZXQiLCJzdHJpY3RMYXN0SW5kZXhPZiIsIm1heEJ5IiwibWVhbiIsIm1lYW5CeSIsIm1pbkJ5Iiwic3R1Yk9iamVjdCIsInN0dWJTdHJpbmciLCJzdHViVHJ1ZSIsIm50aCIsIm5vQ29uZmxpY3QiLCJwYWQiLCJzdHJMZW5ndGgiLCJwYWRFbmQiLCJwYWRTdGFydCIsInJhZGl4IiwiZmxvYXRpbmciLCJ0ZW1wIiwicmVkdWNlIiwicmVkdWNlUmlnaHQiLCJyZXBlYXQiLCJzYW1wbGUiLCJzb21lIiwic29ydGVkSW5kZXgiLCJzb3J0ZWRJbmRleEJ5Iiwic29ydGVkSW5kZXhPZiIsInNvcnRlZExhc3RJbmRleCIsInNvcnRlZExhc3RJbmRleEJ5Iiwic29ydGVkTGFzdEluZGV4T2YiLCJzdGFydHNXaXRoIiwic3VtIiwic3VtQnkiLCJ0ZW1wbGF0ZSIsInNldHRpbmdzIiwiaXNFc2NhcGluZyIsImlzRXZhbHVhdGluZyIsImltcG9ydHNLZXlzIiwiaW1wb3J0c1ZhbHVlcyIsInJlRGVsaW1pdGVycyIsInNvdXJjZVVSTCIsImVzY2FwZVZhbHVlIiwiaW50ZXJwb2xhdGVWYWx1ZSIsImVzVGVtcGxhdGVWYWx1ZSIsImV2YWx1YXRlVmFsdWUiLCJ0aW1lcyIsInRvTG93ZXIiLCJ0b1NhZmVJbnRlZ2VyIiwidG9VcHBlciIsInRyaW0iLCJ0cmltRW5kIiwidHJpbVN0YXJ0IiwidHJ1bmNhdGUiLCJvbWlzc2lvbiIsInNlYXJjaCIsIm5ld0VuZCIsInVuZXNjYXBlIiwidW5pcXVlSWQiLCJwcmVmaXgiLCJlYWNoIiwiZWFjaFJpZ2h0IiwiZmlyc3QiLCJWRVJTSU9OIiwiaXNGaWx0ZXIiLCJ0YWtlTmFtZSIsImRyb3BOYW1lIiwiY2hlY2tJdGVyYXRlZSIsImlzVGFrZXIiLCJsb2Rhc2hGdW5jIiwicmV0VW53cmFwcGVkIiwiaXNMYXp5IiwidXNlTGF6eSIsImlzSHlicmlkIiwiaXNVbndyYXBwZWQiLCJvbmx5TGF6eSIsImNoYWluTmFtZSIsImlzUmlnaHQiLCJ2aWV3IiwiZ2V0VmlldyIsIml0ZXJMZW5ndGgiLCJ0YWtlQ291bnQiLCJpdGVySW5kZXgiLCJjb21taXQiLCJ3cmFwcGVkIiwidG9KU09OIiwiZnMiLCJ1dGlscyIsInNjb3BlT3B0aW9uV2FybmVkIiwiX1ZFUlNJT05fU1RSSU5HIiwiX0RFRkFVTFRfT1BFTl9ERUxJTUlURVIiLCJfREVGQVVMVF9DTE9TRV9ERUxJTUlURVIiLCJfREVGQVVMVF9ERUxJTUlURVIiLCJfREVGQVVMVF9MT0NBTFNfTkFNRSIsIl9OQU1FIiwiX1JFR0VYX1NUUklORyIsIl9PUFRTX1BBU1NBQkxFX1dJVEhfREFUQSIsIl9PUFRTX1BBU1NBQkxFX1dJVEhfREFUQV9FWFBSRVNTIiwiX0JPTSIsIl9KU19JREVOVElGSUVSIiwicmVzb2x2ZVBhdGhzIiwiZmlsZVBhdGgiLCJyZXNvbHZlSW5jbHVkZSIsImV4aXN0c1N5bmMiLCJnZXRJbmNsdWRlUGF0aCIsImluY2x1ZGVQYXRoIiwidmlld3MiLCJmaWxlbmFtZSIsImluY2x1ZGVyIiwiZXNjYXBlRnVuY3Rpb24iLCJoYW5kbGVDYWNoZSIsImhhc1RlbXBsYXRlIiwiZmlsZUxvYWRlciIsImNvbXBpbGUiLCJ0cnlIYW5kbGVDYWNoZSIsImNiIiwicHJvbWlzZUltcGwiLCJpbmNsdWRlRmlsZSIsIm9wdHMiLCJzaGFsbG93Q29weSIsImNyZWF0ZU51bGxQcm90b09ialdoZXJlUG9zc2libGUiLCJpbmNsdWRlclJlc3VsdCIsInJldGhyb3ciLCJzdHIiLCJmbG5tIiwibGluZW5vIiwiZXNjIiwibGluZXMiLCJsaW5lIiwiY3VyciIsInN0cmlwU2VtaSIsIlRlbXBsYXRlIiwidGVtcGxhdGVUZXh0IiwiY3VycmVudExpbmUiLCJjbGllbnQiLCJlc2NhcGVYTUwiLCJjb21waWxlRGVidWciLCJkZWJ1ZyIsIm9wZW5EZWxpbWl0ZXIiLCJjbG9zZURlbGltaXRlciIsImRlbGltaXRlciIsInN0cmljdCIsInJtV2hpdGVzcGFjZSIsIm91dHB1dEZ1bmN0aW9uTmFtZSIsImxvY2Fsc05hbWUiLCJkZXN0cnVjdHVyZWRMb2NhbHMiLCJsZWdhY3lJbmNsdWRlIiwiX3dpdGgiLCJyZWdleCIsImNyZWF0ZVJlZ2V4IiwicmVhZEZpbGVTeW5jIiwiaXNEaXIiLCJkaXJuYW1lIiwiZXh0bmFtZSIsInNjb3BlIiwiY29uc29sZSIsIndhcm4iLCJyZW5kZXIiLCJzaGFsbG93Q29weUZyb21MaXN0IiwicmVuZGVyRmlsZSIsInZpZXdPcHRzIiwiY2xlYXJDYWNoZSIsInJlc2V0IiwibW9kZXMiLCJFVkFMIiwiRVNDQVBFRCIsIlJBVyIsIkNPTU1FTlQiLCJMSVRFUkFMIiwiZGVsaW0iLCJlc2NhcGVSZWdFeHBDaGFycyIsIm9wZW4iLCJjbG9zZSIsInNyYyIsImN0b3IiLCJwcmVwZW5kZWQiLCJhcHBlbmRlZCIsImVzY2FwZUZuIiwic2FuaXRpemVkRmlsZW5hbWUiLCJKU09OIiwic3RyaW5naWZ5IiwiZ2VuZXJhdGVTb3VyY2UiLCJkZXN0cnVjdHVyaW5nIiwibG9nIiwiU3ludGF4RXJyb3IiLCJyZXR1cm5lZEZuIiwiaW5jbHVkZSIsImluY2x1ZGVEYXRhIiwiYmFzZW5hbWUiLCJwYXJzZVRlbXBsYXRlVGV4dCIsImNsb3NpbmciLCJzY2FuTGluZSIsImZpcnN0UG9zIiwicGF0IiwiYXJyIiwiX2FkZE91dHB1dCIsIm5ld0xpbmVDb3VudCIsIl9fZXhwcmVzcyIsImVqcyIsInJlZ0V4cENoYXJzIiwiaGFzT3duIiwib2JqIiwiX0VOQ09ERV9IVE1MX1JVTEVTIiwiX01BVENIX0hUTUwiLCJlbmNvZGVfY2hhciIsImVzY2FwZUZ1bmNTdHIiLCJtYXJrdXAiLCJsaXN0IiwidmFsIiwiaHlwaGVuVG9DYW1lbCIsIl9fcHJvdG9fXyIsIm5vcm1hbGl6ZUFycmF5IiwicGFydHMiLCJhbGxvd0Fib3ZlUm9vdCIsInVwIiwidW5zaGlmdCIsIm1hdGNoZWRTbGFzaCIsInhzIiwicmVzIiwicmVzb2x2ZWRQYXRoIiwicmVzb2x2ZWRBYnNvbHV0ZSIsImN3ZCIsIm5vcm1hbGl6ZSIsImlzQWJzb2x1dGUiLCJ0cmFpbGluZ1NsYXNoIiwicmVsYXRpdmUiLCJmcm9tUGFydHMiLCJ0b1BhcnRzIiwic2FtZVBhcnRzTGVuZ3RoIiwib3V0cHV0UGFydHMiLCJzZXAiLCJoYXNSb290IiwiZXh0Iiwic3RhcnREb3QiLCJzdGFydFBhcnQiLCJwcmVEb3RTdGF0ZSIsImxlbiIsIl9wcm9jZXNzIiwiY2FjaGVkU2V0VGltZW91dCIsImNhY2hlZENsZWFyVGltZW91dCIsImRlZmF1bHRTZXRUaW1vdXQiLCJkZWZhdWx0Q2xlYXJUaW1lb3V0IiwicnVuVGltZW91dCIsImZ1biIsInJ1bkNsZWFyVGltZW91dCIsIm1hcmtlciIsImN1cnJlbnRRdWV1ZSIsImRyYWluaW5nIiwicXVldWVJbmRleCIsImNsZWFuVXBOZXh0VGljayIsImRyYWluUXVldWUiLCJ0aW1lb3V0IiwicnVuIiwiSXRlbSIsInRpdGxlIiwiYnJvd3NlciIsImVudiIsImFyZ3YiLCJ2ZXJzaW9ucyIsImFkZExpc3RlbmVyIiwib2ZmIiwicmVtb3ZlTGlzdGVuZXIiLCJyZW1vdmVBbGxMaXN0ZW5lcnMiLCJwcmVwZW5kTGlzdGVuZXIiLCJwcmVwZW5kT25jZUxpc3RlbmVyIiwibGlzdGVuZXJzIiwiY2hkaXIiLCJ1bWFzayIsImRlc2NyaXB0aW9uIiwia2V5d29yZHMiLCJhdXRob3IiLCJsaWNlbnNlIiwiYmluIiwibWFpbiIsImpzZGVsaXZyIiwidW5wa2ciLCJyZXBvc2l0b3J5IiwidXJsIiwiYnVncyIsImhvbWVwYWdlIiwiZGVwZW5kZW5jaWVzIiwiamFrZSIsImRldkRlcGVuZGVuY2llcyIsImJyb3dzZXJpZnkiLCJlc2xpbnQiLCJqc2RvYyIsIm1vY2hhIiwiZW5naW5lcyIsIm5vZGUiLCJzY3JpcHRzIiwid2luIiwiZ2V0TUhUZG9jdW1lbnQiLCJfYSIsImh0bWxTb3VyY2UiLCJpbWFnZUNvbnRlbnRQYXJ0cyIsImNvbnRlbnRUeXBlIiwiY29udGVudEVuY29kaW5nIiwiZW5jb2RlZENvbnRlbnQiLCJjb250ZW50TG9jYXRpb24iLCJfcHJlcGFyZUltYWdlUGFydHMiLCJjb250ZW50UGFydHMiLCJhc0Jsb2IiLCJodG1sIiwiZm9ybWF0IiwiZG9jdW1lbnRPcHRpb25zIiwib3JpZW50YXRpb24iLCJiYXNlIiwiSlNaaXAiLCJ3aWR0aCIsImhlaWdodCIsIm9yaWVudCIsIm1hcmdpbnMiLCJ0b3AiLCJyaWdodCIsImJvdHRvbSIsImxlZnQiLCJmb290ZXIiLCJndXR0ZXIiLCJkb2N0eXBlIiwiZ2VuZXJhdGVEb2N1bWVudCJdLCJtYXBwaW5ncyI6IkFBcUVPLFNBQVNBLEVBQVVDLEVBQVNDLEVBQVlDLEVBQUdDLEdBRTlDLE9BQU8sSUFBS0QsSUFBTUEsRUFBSUUsV0FBVSxTQUFVQyxFQUFTQyxHQUMvQyxTQUFTQyxFQUFVQyxHQUFTLElBQU1DLEVBQUtOLEVBQVVPLEtBQUtGLElBQVcsTUFBT0csR0FBS0wsRUFBT0ssR0FBTyxDQUMzRixTQUFTQyxFQUFTSixHQUFTLElBQU1DLEVBQUtOLEVBQWlCLE1BQUVLLElBQVcsTUFBT0csR0FBS0wsRUFBT0ssR0FBTyxDQUM5RixTQUFTRixFQUFLSSxHQUpsQixJQUFlTCxFQUlhSyxFQUFPQyxLQUFPVCxFQUFRUSxFQUFPTCxRQUoxQ0EsRUFJeURLLEVBQU9MLE1BSmhEQSxhQUFpQk4sRUFBSU0sRUFBUSxJQUFJTixHQUFFLFNBQVVHLEdBQVdBLEVBQVFHLEVBQU8sS0FJaEJPLEtBQUtSLEVBQVdLLEVBQVksQ0FDOUdILEdBQU1OLEVBQVlBLEVBQVVhLE1BQU1oQixFQUFTQyxHQUFjLEtBQUtTLE9BQ3RFLEdBQ0EsQ0FFTyxTQUFTTyxFQUFZakIsRUFBU2tCLEdBQ2pDLElBQXNHQyxFQUFHQyxFQUFHQyxFQUFHQyxFQUEzR0MsRUFBSSxDQUFFQyxNQUFPLEVBQUdDLEtBQU0sV0FBYSxHQUFXLEVBQVBKLEVBQUUsR0FBUSxNQUFNQSxFQUFFLEdBQUksT0FBT0EsRUFBRSxFQUFLLEVBQUVLLEtBQU0sR0FBSUMsSUFBSyxJ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QUFVLElBQU0sRUFBVSxJQUFLLEVBQVUsSUFBSyxFQUFVLElBQUssRUFBVSxJQUN2RSxFQUFVLElBQU0sRUFBVSxJQUFLLEVBQVUsSUFBSyxFQUFVLElBQUssRUFBVSxJQUN2RSxFQUFVLElBQU0sRUFBVSxJQUFLLEVBQVUsSUFBSyxFQUFVLElBQ3hELEVBQVUsSUFBTSxFQUFVLElBQUssRUFBVSxJQUFLLEVBQVUsSUFDeEQsRUFBVSxJQUFNLEVBQVUsSUFBSyxFQUFVLElBQUssRUFBVSxJQUN4RCxFQUFVLElBQU0sRUFBVSxJQUFLLEVBQVUsSUFBSyxFQUFVLElBQUssRUFBVSxJQUN2RSxFQUFVLElBQU0sRUFBVSxJQUFLLEVBQVUsSUFBSyxFQUFVLElBQUssRUFBVSxJQUN2RSxFQUFVLElBQU0sRUFBVSxJQUMxQixFQUFVLElBQU0sRUFBVSxJQUFLLEVBQVUsSUFDekMsRUFBVSxJQUFNLEVBQVUsSUFBSyxFQUFVLElBQUssRUFBVSxJQUFLLEVBQVUsSUFDdkUsRUFBVSxJQUFNLEVBQVUsSUFBSyxFQUFVLElBQUssRUFBVSxJQUFLLEVBQVUsSUFDdkUsRUFBVSxJQUFNLEVBQVUsSUFBSyxFQUFVLElBQUssRUFBVSxJQUN4RCxFQUFVLElBQU0sRUFBVSxJQUFLLEVBQVUsSUFBSyxFQUFVLElBQ3hELEVBQVUsSUFBTSxFQUFVLElBQUssRUFBVSxJQUN6QyxFQUFVLElBQU0sRUFBVSxJQUFLLEVBQVUsSUFDekMsRUFBVSxJQUFNLEVBQVUsSUFBSyxFQUFVLElBQ3pDLEVBQVUsSUFBTSxFQUFVLElBQUssRUFBVSxJQUN6QyxFQUFVLElBQU0sRUFBVSxJQUFLLEVBQVUsSUFBSyxFQUFVLElBQ3hELEVBQVUsSUFBTSxFQUFVLElBQUssRUFBVSxJQUFLLEVBQVUsSUFDeEQsRUFBVSxJQUFNLEVBQVUsSUFBSyxFQUFVLElBQ3pDLEVBQVUsSUFBTSxFQUFVLElBQUssRUFBVSxJQUN6QyxFQUFVLElBQU0sRUFBVSxJQUFLLEVBQVUsSUFBSyxFQUFVLElBQUssRUFBVSxJQUFLLEVBQVUsSUFDdEYsRUFBVSxJQUFN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
